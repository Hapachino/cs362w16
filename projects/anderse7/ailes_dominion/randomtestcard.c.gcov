        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* randomcardtest2.c
        -:    2: * Author: Eric Anderson
        -:    3: * Class: CS362w16
        -:    4: * Description: Unit test for the Smithy card in dominion.c
        -:    5: *  Smithy lets the player draw three cards.
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include "math.h"
        -:   16:
        -:   17: #define DEBUG 0
        -:   18:#define NOISY_TEST 1
        -:   19:#define TESTCARD "Smithy"
        -:   20:
        -:   21:/**********************************************************
        -:   22: * function: main
        -:   23: * description: This function executes the Smithy effect
        -:   24: * against a copy of the game struct, I compare to make sure
        -:   25: * the post play has increment the cards by three cards and that
        -:   26: * the function can be executed.
        -:   27: * input: the player number (0-3), a prefilled out struct
        -:   28: * returns: 0 for success
        -:   29: ***********************************************************/
        -:   30:
function main called 1 returned 100% blocks executed 75%
        -:   31:int main() {
        -:   32:  int n, i, p, result;
        -:   33:  struct gameState G;
        -:   34:  struct gameState testG;
        1:   35:  int player2 = 1;
        1:   36:  int handPos = 0;
        -:   37:  
        1:   38:  SelectStream(3);
        1:   39:  PutSeed(3);
        -:   40:
       42:   41:  for (n = 0; n < 20; n++) { //loop 2000 times
branch  0 taken 95%
branch  1 taken 5%
       20:   42:    SelectStream(3);
  1052040:   43:    for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1%
   526000:   44:      ((char*)&G)[i] = floor(Random() * 256);
   526000:   45:    }
        -:   46:
        -:   47:    // set random values for players, deckcount, discard, handcount and playedCardCount
       20:   48:    p = floor(Random() * MAX_PLAYERS);
       20:   49:    G.whoseTurn = p;
       20:   50:    G.deckCount[p] = floor(Random() * MAX_DECK);
       20:   51:    G.discardCount[p] = floor(Random() * MAX_DECK);
       20:   52:    G.handCount[p] = floor(Random() * MAX_HAND);
       20:   53:    G.playedCardCount = floor(Random() * MAX_DECK);
       20:   54:    handPos = floor(Random() * G.handCount[p]);
        -:   55:
        -:   56:
       20:   57:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   58:
       20:   59:    SelectStream(2);
       20:   60:    PutSeed(3);
        -:   61:
       20:   62:    result = cardEffect(smithy, 0, 0, 0, &testG, handPos, 0);
        -:   63:
       20:   64:    PutSeed(3);
        -:   65:
       20:   66:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   67:
        -:   68:    // ----------- TEST 1: +3 cards --------------
       20:   69:    printf("TEST 1: +3 cards\n");
        -:   70:
       20:   71:    if(testG.handCount[p] == G.handCount[p] + 2) // lose smithy (-1) and gain 3 more (+3) = 2
branch  0 taken 100%
branch  1 taken 0%
       20:   72:      printf("Passed. Expected hand count: %d   Actual count: %d\n", G.handCount[p] +2, testG.handCount[p]);
        -:   73:    else
    #####:   74:      printf("FAILED. Expected size: %d   Actual size : %d\n", G.handCount[p] +2, testG.handCount[p]);
        -:   75:
        -:   76:    // ----------- TEST 2: Check deck size of other players --------------
       20:   77:    printf("TEST 2: Check handsize of other players\n");
       20:   78:    if(testG.deckCount[player2] == G.deckCount[player2])
branch  0 taken 60%
branch  1 taken 40%
       12:   79:      printf("Passed. Deck size Expected: %d   Deck size actual: %d\n", G.deckCount[player2], testG.deckCount[player2]);
        -:   80:    else
        8:   81:      printf("FAILED. Deck size expected: %d   Deck size actual: %d\n", G.deckCount[player2], testG.deckCount[player2]);
        -:   82:    
        -:   83:
        -:   84:    // ----------- TEST 3: Check hand count of other players --------------
       20:   85:    printf("TEST 3: Check hand count of other players\n");
       20:   86:    if(testG.handCount[player2] == G.handCount[player2])
branch  0 taken 60%
branch  1 taken 40%
       12:   87:      printf("Passed. hand count expected: %d   hand count actual: %d\n", G.handCount[player2], testG.handCount[player2]);
        -:   88:    else
        8:   89:      printf("FAILED. hand count expected: %d   hand count actual: %d\n", G.handCount[player2], testG.handCount[player2]);
        -:   90:
        -:   91:   // ----------- TEST 4: Check if smithy card came from players pile --------------
       20:   92:    printf("TEST 4: Check if smithy card came from players pile\n");
       20:   93:      if(G.deckCount[p] - 3 == testG.deckCount[p])  //  since drawcard has shuffle built in, should always be count - 3
branch  0 taken 100%
branch  1 taken 0%
       20:   94:        printf("Passed. Expected: %d   Deck size actual: %d\n", G.deckCount[p] - 3, testG.deckCount[p]);
        -:   95:      else
    #####:   96:        printf("FAILED. Expected: %d   Deck size actual: %d\n", G.deckCount[p] - 3, testG.deckCount[p]);
        -:   97:
        -:   98:   // ----------- TEST 5: Check if smithy card went to players pile --------------
       20:   99:      printf("Test 5: Check if smithy card went to players pile\n");
       20:  100:      if(testG.playedCardCount == 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  101:        printf("Passed. Expected increase in played pile: %d     To played pile: %d\n", 1, testG.playedCardCount);
        -:  102:      else
       20:  103:        printf("FAILED. Expected increase in played pile: %d   To played pile: %d\n", 1, testG.playedCardCount);
        -:  104:
        -:  105:   // ----------- TEST 6: Check victory cards --------------
       20:  106:    printf("Test 6: : Victory cards\n");
       20:  107:    if(G.supplyCount[estate] != testG.supplyCount[estate])
branch  0 taken 0%
branch  1 taken 100%
    #####:  108:      printf("FAILED. Estate Count Mismatch. Expected: %d  Received: %d\n", G.supplyCount[estate], testG.supplyCount[estate]);
       20:  109:    if(G.supplyCount[duchy] != testG.supplyCount[duchy])
branch  0 taken 0%
branch  1 taken 100%
    #####:  110:      printf("FAILED. Duchy Count Mismatch. Expected: %d  Received: %d\n", G.supplyCount[duchy], testG.supplyCount[duchy]);
       20:  111:    if(G.supplyCount[province] != testG.supplyCount[province])
branch  0 taken 0%
branch  1 taken 100%
    #####:  112:      printf("FAILED. Province Count Mismatch. Expected: %d  Received: %d\n", G.supplyCount[province], testG.supplyCount[province]);
       20:  113:    if(G.supplyCount[curse] != testG.supplyCount[curse])
branch  0 taken 0%
branch  1 taken 100%
    #####:  114:      printf("FAILED. Province Count Mismatch. Expected: %d  Received: %d\n", G.supplyCount[curse], testG.supplyCount[curse]);
        -:  115:    else
       20:  116:      printf("Passed. Supply counts for curses and victory cards are the same\n");
        -:  117:
        -:  118:   // ----------- TEST 7: Check supply cards --------------
       20:  119:    printf("Test 7: Supply cards\n");
       20:  120:      if(G.supplyCount[copper] != testG.supplyCount[copper])
branch  0 taken 0%
branch  1 taken 100%
    #####:  121:        printf("FAILED. copper Count Mismatch. Expected: %d  Received: %d\n", G.supplyCount[copper], testG.supplyCount[copper]);
       20:  122:      if(G.supplyCount[silver] != testG.supplyCount[silver])
branch  0 taken 0%
branch  1 taken 100%
    #####:  123:        printf("FAILED. silver Count Mismatch. Expected: %d  Received: %d\n", G.supplyCount[silver], testG.supplyCount[silver]);
       20:  124:      if(G.supplyCount[gold] != testG.supplyCount[gold])
branch  0 taken 0%
branch  1 taken 100%
    #####:  125:        printf("FAILED. gold Count Mismatch. Expected: %d  Received: %d\n", G.supplyCount[gold], testG.supplyCount[gold]);
        -:  126:      else
       20:  127:        printf("Passed. Supply counts for treasure cards are the same\n");
       20:  128:    }
        -:  129:
        1:  130:    printf("ALL TESTS COMPLETE\n");
        1:  131:  return 0;
        -:  132:}
        -:  133:
