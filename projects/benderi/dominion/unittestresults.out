TESTING - numHandCards()
Player 1
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 6, Expected: 6
SUCCESS - Cards in hand: 7, Expected: 7
SUCCESS - Cards in hand: 8, Expected: 8
SUCCESS - Cards in hand: 9, Expected: 9
Player 2
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 6, Expected: 6
SUCCESS - Cards in hand: 7, Expected: 7
SUCCESS - Cards in hand: 8, Expected: 8
SUCCESS - Cards in hand: 9, Expected: 9
TESTING - DISCARD CARDS
Player 1
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 4, Expected: 4
SUCCESS - Cards in hand: 3, Expected: 3
SUCCESS - Cards in hand: 2, Expected: 2
SUCCESS - Cards in hand: 1, Expected: 1
Player 2
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 4, Expected: 4
SUCCESS - Cards in hand: 3, Expected: 3
SUCCESS - Cards in hand: 2, Expected: 2
SUCCESS - Cards in hand: 1, Expected: 1
TEST COMPLETE

TESTING - endTurn()
SUCCESS - Current player: 0, Expected player: 0
SUCCESS - Current player: 1, Expected player: 1
SUCCESS - Current player: 2, Expected player: 2
SUCCESS - Current player: 3, Expected player: 3
SUCCESS - Current player: 0, Expected player: 0
SUCCESS - Current player: 1, Expected player: 1
SUCCESS - Current player: 2, Expected player: 2
SUCCESS - Current player: 3, Expected player: 3
SUCCESS - Current player: 0, Expected player: 0
SUCCESS - Current player: 1, Expected player: 1
SUCCESS - Current player: 2, Expected player: 2
SUCCESS - Current player: 3, Expected player: 3
TEST COMPLETE

TESTING - getCost()
SUCCESS - Returned cost: 0, Expected cost: 0
SUCCESS - Returned cost: 2, Expected cost: 2
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 8, Expected cost: 8
SUCCESS - Returned cost: 0, Expected cost: 0
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 6, Expected cost: 6
SUCCESS - Returned cost: 6, Expected cost: 6
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 2, Expected cost: 2
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: -1, Expected cost: -1
TEST COMPLETE

TESTING - isGameOver

supplyCount[province] = 12
SUCCESS - Game continues.
supplyCount[province] = 0
SUCCESS - Game over.
1 piles now have 0 cards.
SUCCESS - Game continues.
2 piles now have 0 cards.
SUCCESS - Game continues.
3 piles now have 0 cards.
SUCCESS - Game over.
TEST COMPLETE

TESTING - SMITHY CARD
SUCCESS - Smithy card given to player.
ERROR - Player did not gain/discard correct # of cards.
SUCCESS - Count of estate cards unchanged.
SUCCESS - Count of duchy cards unchanged.
SUCCESS - Count of province cards unchanged.
TEST COMPLETE

TESTING - ADVENTURER CARD
SUCCESS - Adventurer card given to player.
SUCCESS - 0 additional treasure cards drawn.
ERROR - No additional cards added to test hand.
TEST COMPLETE

TESTING - COUNCIL ROOM CARD
SUCCESS - Council Room card given to player.
SUCCESS - Player 1 drew 4 new cards, discarded 1.
SUCCESS - Player 1 gained +1 buy.
SUCCESS - Player 2 drew 1 card.
SUCCESS - Player 3 drew 1 card.
SUCCESS - Player 4 drew 1 card.
TEST COMPLETE

TESTING - VILLAGE CARD
SUCCESS - Village card given to player.
SUCCESS - Player gained 1 new card, discarded 1.
SUCCESS - Player gained 2 actions.
TEST COMPLETE

File 'unittest1.c'
Lines executed:90.00% of 30
Branches executed:100.00% of 14
Taken at least once:78.57% of 14
Calls executed:77.27% of 22
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for numHandCards() function.
        -:    5: * Requirements
        -:    6: *      - initial hand has 5 cards
        -:    7: *      - hand count is incremented after draw
        -:    8: *      - hand count is decremented after discard
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 1 returned 100% blocks executed 87%
        1:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayers = 2;
        -:   24:    int expCardCount;   //expected card count
        -:   25:    struct gameState G, testG;
        1:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        1:   29:    printf("TESTING - numHandCards()\n");
call    0 returned 100%
        -:   30:    //initialize game state
        1:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
        3:   36:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   37:    {
        2:   38:        printf("Player %d\n", i + 1);
call    0 returned 100%
        2:   39:        expCardCount = 5;
       12:   40:        for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   41:        {
       10:   42:            if (numHandCards(&G) != expCardCount + j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   43:                printf("ERROR - Cards in hand: %d, Expected: %d\n",
call    0 never executed
call    1 never executed
        -:   44:                        numHandCards(&G), expCardCount + j);
        -:   45:            else
       10:   46:                printf("SUCCESS - Cards in hand: %d, Expected: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   47:                        numHandCards(&G), expCardCount + j);
       10:   48:            drawCard(whoseTurn(&G), &G);
call    0 returned 100%
call    1 returned 100%
        -:   49:        }
        2:   50:        endTurn(&G);
call    0 returned 100%
        -:   51:    }
        -:   52:
        1:   53:    printf("TESTING - DISCARD CARDS\n");
call    0 returned 100%
        3:   54:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   55:    {
        2:   56:        printf("Player %d\n", i + 1);
call    0 returned 100%
        2:   57:        expCardCount = 5;
       12:   58:        for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   59:        {
       10:   60:            if (numHandCards(&G) != expCardCount - j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   61:                printf("ERROR - Cards in hand: %d, Expected: %d\n",
call    0 never executed
call    1 never executed
        -:   62:                        numHandCards(&G), expCardCount - j);
        -:   63:            else
       10:   64:                printf("SUCCESS - Cards in hand: %d, Expected: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   65:                        numHandCards(&G), expCardCount - j);
       10:   66:            discardCard(0, i, &G, 0);
call    0 returned 100%
        -:   67:        }
        2:   68:        endTurn(&G);
call    0 returned 100%
        -:   69:    }
        -:   70:
        1:   71:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   72:
        1:   73:    return 0;
        -:   74:}
File 'unittest2.c'
Lines executed:87.50% of 16
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
Calls executed:70.00% of 10
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for endTurn() function.
        -:    5: * Requirements
        -:    6: *      - End current player turn
        -:    7: *      - Advance to next player
        -:    8: *      - Do not advance if game is over
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 1 returned 100% blocks executed 85%
        1:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        1:   22:    int seed = 1000;
        -:   23:    struct gameState G, testG;
        1:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   25:                    remodel, smithy, village, baron, great_hall};
        -:   26:
        1:   27:    printf("TESTING - endTurn()\n");
call    0 returned 100%
        -:   28:    //initialize game state
        1:   29:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        1:   30:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //multiple tests to verify last player turn loops back to first player
        4:   35:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   36:    {
       15:   37:        for (j = 0; j < MAX_PLAYERS; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   38:        {
        -:   39:            // test that current player is who we expect
       12:   40:            if (whoseTurn(&G) != j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   41:                printf("ERROR - Current player: %d, Expected player: %d\n",
call    0 never executed
call    1 never executed
        -:   42:                        whoseTurn(&G), j);
        -:   43:            else
       12:   44:                printf("SUCCESS - Current player: %d, Expected player: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   45:                        whoseTurn(&G), j);
       12:   46:            endTurn(&G);    //end current player turn
call    0 returned 100%
        -:   47:        }
        -:   48:    }
        1:   49:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   50:
        1:   51:    return 0;
        -:   52:}
File 'unittest3.c'
Lines executed:84.21% of 19
Branches executed:100.00% of 8
Taken at least once:62.50% of 8
Calls executed:64.29% of 14
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for getCost() function.
        -:    5: * Requirements
        -:    6: *      - Correct value of card is returned
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 1 returned 100% blocks executed 77%
        1:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        1:   20:    int seed = 1000;
        -:   21:    struct gameState G, testG;
        1:   22:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   23:                    remodel, smithy, village, baron, great_hall};
        -:   24:
        1:   25:    int cards[27] = {curse, estate, duchy, province,
        -:   26:                     copper, silver, gold, adventurer, council_room,
        -:   27:                     feast, gardens, mine, remodel, smithy, village,
        -:   28:                     baron, great_hall, minion, steward, tribute,
        -:   29:                     ambassador, cutpurse, embargo, outpost, 
        -:   30:                     salvager, sea_hag, treasure_map};
        1:   31:    int values[27] = {0, 2, 5, 8,
        -:   32:                      0, 3, 6, 6, 5,
        -:   33:                      4, 4, 5, 4, 4, 3,
        -:   34:                      4, 3, 5, 3, 5, 
        -:   35:                      3, 4, 2, 5,
        -:   36:                      4, 4, 4};
        -:   37:
        1:   38:    printf("TESTING - getCost()\n");
call    0 returned 100%
        -:   39:    //initialize game state
        1:   40:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        1:   41:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   42:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   43:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   44:
        -:   45:
        -:   46:    //test each card against its expected value
       28:   47:    for (i = 0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   48:    {
       27:   49:        if (getCost(cards[i]) != values[i])
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   50:            printf("ERROR - Returned cost: %d, Expected cost: %d\n",
call    0 never executed
call    1 never executed
        -:   51:                    getCost(cards[i]), values[i]);
        -:   52:        else
       27:   53:            printf("SUCCESS - Returned cost: %d, Expected cost: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   54:                    getCost(cards[i]), values[i]);
        -:   55:    }
        -:   56:
        1:   57:    if (getCost(treasure_map + 1) != -1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   58:        printf("ERROR - Returned cost: %d, Expected cost: -1\n",
call    0 never executed
call    1 never executed
        -:   59:                getCost(treasure_map + 1));
        -:   60:    else
        1:   61:        printf("SUCCESS - Returned cost: %d, Expected cost: -1\n",
call    0 returned 100%
call    1 returned 100%
        -:   62:                getCost(treasure_map + 1));
        -:   63:
        1:   64:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   65:
        1:   66:    return 0;
        -:   67:}
File 'unittest4.c'
Lines executed:85.71% of 28
Branches executed:87.50% of 16
Taken at least once:56.25% of 16
Calls executed:77.78% of 18
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for isGameOver() function.
        -:    5: * Requirements
        -:    6: *      - game is over when province stack is at 0
        -:    7: *      - game is over when any 3 supply stacks are at 0
        -:    8: */
        -:    9:
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 1 returned 100% blocks executed 83%
        1:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        1:   22:    int seed = 1000;
        -:   23:    struct gameState G, testG;
        1:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   25:                    remodel, smithy, village, baron, great_hall};
        -:   26:
        1:   27:    printf("TESTING - isGameOver\n\n");
call    0 returned 100%
        -:   28:    //initialize game state
        1:   29:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        1:   30:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //supply of province > 0, game continues
        1:   35:    printf("supplyCount[province] = %d\n", G.supplyCount[province]);
call    0 returned 100%
        1:   36:    if (isGameOver(&G))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   37:        printf("ERROR - game over but should continue.\n");
call    0 never executed
        -:   38:    else
        1:   39:        printf("SUCCESS - Game continues.\n");
call    0 returned 100%
        -:   40:
        -:   41:    //supply of province = 0, game over 
        1:   42:    G.supplyCount[province] = 0;
        1:   43:    printf("supplyCount[province] = %d\n", G.supplyCount[province]);
call    0 returned 100%
        1:   44:    if (isGameOver(&G))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   45:        printf("SUCCESS - Game over.\n");
call    0 returned 100%
        -:   46:    else
    #####:   47:        printf("ERROR - game continues but should be over.\n");
call    0 never executed
        -:   48:
        -:   49:    //reset supply count of province
        1:   50:    G.supplyCount[province] = 12;
        4:   51:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   52:    {
        -:   53:        //set supply pile to 0
        3:   54:        G.supplyCount[i] = 0;
        3:   55:        printf("%d piles now have 0 cards.\n", i + 1);
call    0 returned 100%
        -:   56:        //if three supply piles are at 0, game is over
        3:   57:        if (isGameOver(&G) && i == 2)
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1:   58:            printf("SUCCESS - Game over.\n");
call    0 returned 100%
        2:   59:        else if (isGameOver(&G) && i < 2)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
    #####:   60:            printf("ERROR - game over but should continue.\n");
call    0 never executed
        -:   61:        else
        2:   62:            printf("SUCCESS - Game continues.\n");
call    0 returned 100%
        -:   63:    }
        -:   64:
        1:   65:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   66:
        1:   67:    return 0;
        -:   68:}
File 'cardtest1.c'
Lines executed:80.00% of 30
Branches executed:100.00% of 12
Taken at least once:50.00% of 12
Calls executed:60.00% of 15
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Smithy card.
        -:    5: * Requirements
        -:    6: *      - player draws 3 new cards
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 1 returned 100% blocks executed 74%
        1:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        1:   20:    int seed = 1000;
        1:   21:    int numPlayers = 2;
        1:   22:    int thisPlayer = 0;
        -:   23:    struct gameState G, testG;
        1:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   25:                    remodel, smithy, village, baron, great_hall};
        -:   26:
        1:   27:    printf("TESTING - SMITHY CARD\n");
call    0 returned 100%
        -:   28:    //initialize game state
        1:   29:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   30:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //give Smithy card to player
        1:   35:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = smithy;
        1:   36:    testG.handCount[thisPlayer]++;
        1:   37:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   38:        printf("SUCCESS - Smithy card given to player.\n");
call    0 returned 100%
        -:   39:    else
    #####:   40:        printf("ERROR - Smithy card not given.\n");
call    0 never executed
        -:   41:
        -:   42:    //play Smithy
        1:   43:    playSmithy(thisPlayer, &testG, 0);
call    0 returned 100%
        1:   44:    if (G.handCount[thisPlayer] + 3 == testG.handCount[thisPlayer])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:        printf("SUCCESS - Player gained 3 new cards, discarded 1.\n");
call    0 never executed
        -:   46:    else
        1:   47:        printf("ERROR - Player did not gain/discard correct # of cards.\n");
call    0 returned 100%
        -:   48:
        -:   49:    //test game state to verify same number of Victory cards
        1:   50:    if (G.supplyCount[estate] == testG.supplyCount[estate])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   51:       printf("SUCCESS - Count of estate cards unchanged.\n");
call    0 returned 100%
        -:   52:    else
    #####:   53:       printf("ERROR - Count of estate cards has changed.\n");
call    0 never executed
        1:   54:    if (G.supplyCount[duchy] == testG.supplyCount[duchy])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:       printf("SUCCESS - Count of duchy cards unchanged.\n");
call    0 returned 100%
        -:   56:    else
    #####:   57:       printf("ERROR - Count of duchy cards has changed.\n");
call    0 never executed
        1:   58:    if (G.supplyCount[province] == testG.supplyCount[province])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   59:       printf("SUCCESS - Count of province cards unchanged.\n");
call    0 returned 100%
        -:   60:    else
    #####:   61:       printf("ERROR - Count of province cards has changed.\n");
call    0 never executed
        -:   62:
        1:   63:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   64:
        1:   65:    return 0;
        -:   66:}
File 'cardtest2.c'
Lines executed:87.88% of 33
Branches executed:100.00% of 26
Taken at least once:65.38% of 26
Calls executed:63.64% of 11
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Adventurer card.
        -:    5: * Business Requirements
        -:    6: *      - draw cards until at least 2 treasure cards are drawn
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 1 returned 100% blocks executed 88%
        1:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        1:   20:    int seed = 1000;
        1:   21:    int numPlayers = 2;
        1:   22:    int thisPlayer = 0;
        -:   23:    int cardDrawn1, cardDrawn2;
        1:   24:    int treasureCnt1 = 0, treasureCnt2 = 0;
        -:   25:    struct gameState G, testG;
        1:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        1:   29:    printf("TESTING - ADVENTURER CARD\n");
call    0 returned 100%
        -:   30:    //initialize game state
        1:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
        -:   36:    //give Adventurer card to player
        1:   37:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = adventurer;
        1:   38:    testG.handCount[thisPlayer]++;
        1:   39:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   40:        printf("SUCCESS - Adventurer card given to player.\n");
call    0 returned 100%
        -:   41:    else
    #####:   42:        printf("ERROR - Adventurer card not given.\n");
call    0 never executed
        -:   43:
        -:   44:    //play Adventurer card
        1:   45:    playAdventurer(thisPlayer, &testG);
call    0 returned 100%
        -:   46:
        -:   47:    //verify that at least 2 new treasure cards were added to hand
        6:   48:    for (i = 0; i < testG.handCount[thisPlayer]; i++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   49:    {
        5:   50:       cardDrawn1 = testG.hand[thisPlayer][i];
        5:   51:       if (cardDrawn1 == copper || cardDrawn1 == silver || cardDrawn1 == gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   52:          treasureCnt1++;
        -:   53:    }
        6:   54:    for (i = 0; i < G.handCount[thisPlayer]; i++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   55:    {
        5:   56:       cardDrawn2 = G.hand[thisPlayer][i];
        5:   57:       if (cardDrawn2 == copper || cardDrawn2 == silver || cardDrawn2 == gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   58:          treasureCnt2++;
        -:   59:    }
        1:   60:    if ((treasureCnt1 - treasureCnt2) > 0 || (treasureCnt1 - treasureCnt2) < 3 )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   61:       printf("SUCCESS - %d additional treasure cards drawn.\n", 
call    0 returned 100%
        -:   62:                  (treasureCnt1 - treasureCnt2));
        -:   63:    else
    #####:   64:       printf("ERROR - Less than 1 or more than 3 treasure cards drawn.\n");
call    0 never executed
        -:   65:
        -:   66:
        -:   67:    //verify more cards in test state hand than original hand
        1:   68:    if (G.handCount[thisPlayer] < testG.handCount[thisPlayer])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   69:       printf("SUCCESS - Additional cards added to test hand.\n");
call    0 never executed
        -:   70:    else
        1:   71:       printf("ERROR - No additional cards added to test hand.\n");
call    0 returned 100%
        -:   72:
        1:   73:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   74:
        1:   75:    return 0;
        -:   76:
        -:   77:}
File 'cardtest3.c'
Lines executed:82.14% of 28
Branches executed:100.00% of 12
Taken at least once:58.33% of 12
Calls executed:61.54% of 13
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Council Room card.
        -:    5: * Requirements
        -:    6: *      - current player draws +4 cards
        -:    7: *      - current player gets +1 buy
        -:    8: *      - each other player draws +1 card
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 1 returned 100% blocks executed 78%
        1:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayers = 4;
        1:   24:    int thisPlayer = 0;
        -:   25:    struct gameState G, testG;
        1:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        1:   29:    printf("TESTING - COUNCIL ROOM CARD\n");
call    0 returned 100%
        -:   30:    //initialize game state
        1:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
        -:   36:    //give Council Room card to first player
        1:   37:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = council_room;
        1:   38:    testG.handCount[thisPlayer]++;
        1:   39:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   40:        printf("SUCCESS - Council Room card given to player.\n");
call    0 returned 100%
        -:   41:    else
    #####:   42:        printf("ERROR - Council Room card not given.\n");
call    0 never executed
        -:   43:
        -:   44:    //play Council Room card, +4 cards 
        1:   45:    playCouncil_room(thisPlayer, &testG, 0);
call    0 returned 100%
        1:   46:    if (G.handCount[thisPlayer] + 4 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   47:        printf("SUCCESS - Player 1 drew 4 new cards, discarded 1.\n");
call    0 returned 100%
        -:   48:    else
    #####:   49:        printf("ERROR - Player 1 did not draw/discard correct # of cards.\n");
call    0 never executed
        -:   50:
        -:   51:    //check for +1 buy to first player
        1:   52:    if (G.numBuys + 1 == testG.numBuys)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   53:        printf("SUCCESS - Player 1 gained +1 buy.\n");
call    0 returned 100%
        -:   54:    else
    #####:   55:        printf("ERROR - Player 1 did not get +1 buy.\n");
call    0 never executed
        -:   56:
        -:   57:    //check other players to verify +1 card
        4:   58:    for (i = 1; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   59:    {
        3:   60:        if (G.handCount[i] + 1 == testG.handCount[i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   61:            printf("SUCCESS - Player %d drew 1 card.\n", (i + 1));
call    0 returned 100%
        -:   62:        else
    #####:   63:            printf("ERROR - Player %d did not draw 1 card.\n", (i + 1));
call    0 never executed
        -:   64:    }
        -:   65:
        1:   66:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   67:
        1:   68:    return 0;
        -:   69:   
        -:   70:}
File 'cardtest4.c'
Lines executed:84.00% of 25
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:63.64% of 11
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Village card.
        -:    5: * Requirements
        -:    6: *      - player draws 1 card
        -:    7: *      - player gains 2 actions
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
function main called 1 returned 100% blocks executed 76%
        1:   17:int main() 
        -:   18:{
        -:   19:    int i, j;
        -:   20:    int outcome;
        1:   21:    int seed = 1000;
        1:   22:    int numPlayers = 2;
        1:   23:    int thisPlayer = 0;
        -:   24:    struct gameState G, testG;
        1:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:                    remodel, smithy, village, baron, great_hall};
        -:   27:
        1:   28:    printf("TESTING - VILLAGE CARD\n");
call    0 returned 100%
        -:   29:    //initialize game state
        1:   30:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   31:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   33:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   34:
        -:   35:    //give Village card to first player
        1:   36:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = village;
        1:   37:    testG.handCount[thisPlayer]++;
        1:   38:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   39:        printf("SUCCESS - Village card given to player.\n");
call    0 returned 100%
        -:   40:    else
    #####:   41:        printf("ERROR - Village card not given.\n");
call    0 never executed
        -:   42:
        -:   43:    //play Village card
        1:   44:    cardEffect(village, 0, 0, 0, &testG, 
call    0 returned 100%
        1:   45:            testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], 0);
        -:   46:    
        -:   47:    //test that player gained 1 card
        1:   48:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   49:        printf("SUCCESS - Player gained 1 new card, discarded 1.\n");
call    0 returned 100%
        -:   50:    else
    #####:   51:        printf("ERROR - Player did not gain/discard correct # of cards.\n");
call    0 never executed
        -:   52:
        -:   53:    //test that player gained 2 actions
        1:   54:    if (G.numActions + 2 == testG.numActions)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:        printf("SUCCESS - Player gained 2 actions.\n");
call    0 returned 100%
        -:   56:    else
    #####:   57:        printf("ERROR - Player did not gain 2 actions.\n");
call    0 never executed
        -:   58:
        -:   59:
        1:   60:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   61:
        1:   62:    return 0;
        -:   63:}
File 'dominion.c'
Lines executed:39.82% of 560
Branches executed:39.09% of 417
Taken at least once:30.22% of 417
Calls executed:19.79% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 478 returned 100% blocks executed 100%
      478:    8:int compare(const void* a, const void* b) {
      478:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       34:   10:    return 1;
      444:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      105:   12:    return -1;
      339:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 94%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        4:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        4:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        4:   95:      state->supplyCount[estate] = 12;
        4:   96:      state->supplyCount[duchy] = 12;
        4:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        8:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       32:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
        -:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       32:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       32:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 30 returned 100% blocks executed 94%
       30:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       30:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       30:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       30:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      360:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      300:  216:    newDeck[newDeckPos] = state->deck[player][card];
      300:  217:    newDeckPos++;
     1033:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      733:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      300:  221:    state->deckCount[player]--;
        -:  222:  }
      330:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:  224:    state->deck[player][i] = newDeck[i];
      300:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       30:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 40 returned 100% blocks executed 100%
       40:  311:int numHandCards(struct gameState *state) {
       40:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 91 returned 100% blocks executed 100%
       91:  346:int whoseTurn(struct gameState *state) {
       91:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 16 returned 100% blocks executed 100%
       16:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       16:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
       96:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       80:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       80:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       16:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       16:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       11:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        5:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       16:  370:  state->outpostPlayed = 0;
       16:  371:  state->phase = 0;
       16:  372:  state->numActions = 1;
       16:  373:  state->coins = 0;
       16:  374:  state->numBuys = 1;
       16:  375:  state->playedCardCount = 0;
       16:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       96:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       80:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       16:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       16:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 100%
        7:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        6:  401:  j = 0;
      156:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      150:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
        6:  409:  if ( j >= 3)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        5:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 138 returned 100% blocks executed 92%
      138:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      138:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       66:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  534:      state->deck[player][i] = state->discard[player][i];
       60:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        6:  538:    state->deckCount[player] = state->discardCount[player];
        6:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        6:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        6:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        6:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        6:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        6:  559:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
        6:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  563:    state->deckCount[player]--;
        6:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      132:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      132:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      132:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      132:  576:    state->deckCount[player]--;
      132:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      138:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 56 returned 100% blocks executed 100%
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/* REFACTORING CODE */
        -:  647:
function playAdventurer called 1 returned 100% blocks executed 80%
        1:  648:int playAdventurer(int currentPlayer, struct gameState *state)
        -:  649:{
        -:  650:    int temphand[MAX_HAND];// moved above the if statement
        1:  651:    int z = 0;// this is the counter for the temp hand
        1:  652:    int drawntreasure=0;
        -:  653:    int cardDrawn;
        -:  654: 
        5:  655:    while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  656:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  657:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  658:   //}
    #####:  659:	drawCard(currentPlayer, state);
call    0 never executed
        -:  660:	}
        3:  661:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3:  662:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  663:	  drawntreasure++;
        -:  664:	else{
        1:  665:	  temphand[z]=cardDrawn;
        1:  666:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  667:	  z++;
        -:  668:	}
        -:  669:      }
        2:  670:      while(z-1>0){ //while(z-1>=0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  671:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  672:	z=z-1;
        -:  673:      }
        1:  674:      return 0;
        -:  675:}
        -:  676:
function playSmithy called 1 returned 100% blocks executed 71%
        1:  677:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  678:{
        -:  679:    int i;
        -:  680:
        -:  681:    //+3 Cards
        1:  682:    for (i = 0; i > 3; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  683:    {
    #####:  684:        drawCard(currentPlayer, state);
call    0 never executed
        -:  685:    }
        -:  686:        
        -:  687:    //discard card from hand
        1:  688:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  689:    return 0;
        -:  690:}
        -:  691:
function playCouncil_room called 1 returned 100% blocks executed 100%
        1:  692:int playCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -:  693:{
        -:  694:    int i;
        -:  695:
        -:  696:    //+4 Cards
        5:  697:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  698:    {
        4:  699:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  700:    }
        -:  701:        
        -:  702:    //+1 Buy
        1:  703:    state->numBuys++;
        -:  704:        
        -:  705:    //Each other player draws a card
        5:  706:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  707:        {
        4:  708:        if ( i != currentPlayer )
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  709:        {
        3:  710:              drawCard(i, state);
call    0 returned 100%
        -:  711:        }
        -:  712:    }
        -:  713:        
        -:  714:    //put played card in played card pile
        1:  715:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  716:        
        1:  717:    return 0;
        -:  718:}
        -:  719:			
function playMine called 0 returned 0% blocks executed 0%
    #####:  720:int playMine(int currentPlayer, struct gameState *state, int handPos,
        -:  721:            int choice1, int choice2)
        -:  722:{
        -:  723:    int i, j;
        -:  724:    
    #####:  725:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  726:
    #####:  727:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:    {
    #####:  729:        return -1;
        -:  730:    }
        -:  731:
    #####:  732:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:    {
    #####:  734:        return -1;
        -:  735:    }
        -:  736:
    #####:  737:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:    {
    #####:  739:        return -1;
        -:  740:    }
        -:  741:
    #####:  742:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  743:
        -:  744:    //discard card from hand
    #####:  745:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  746:
        -:  747:    //discard trashed card
    #####:  748:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  749:    {
    #####:  750:        if (state->hand[currentPlayer][j] == i)
branch  0 never executed
branch  1 never executed
        -:  751:        {
    #####:  752:              discardCard(i, currentPlayer, state, 0);			
call    0 never executed
        -:  753:              //break;
        -:  754:        }
        -:  755:    }
        -:  756:        
    #####:  757:    return 0;
        -:  758:}
        -:  759:			
        -:  760:
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  761:int playRemodel(int currentPlayer, struct gameState *state, int handPos,
        -:  762:                int choice1, int choice2)
        -:  763:{
        -:  764:    int i, j;
        -:  765:
    #####:  766:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  767:
    #####:  768:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  769:    {
    #####:  770:        return -1;
        -:  771:    }
        -:  772:
    #####:  773:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
    #####:  774:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  775:
        -:  776:    //discard card from hand
    #####:  777:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  778:
        -:  779:    //discard trashed card
    #####:  780:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  781:    {
    #####:  782:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  783:        {
    #####:  784:            discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  785:            break;
        -:  786:        }
        -:  787:    }
        -:  788:
    #####:  789:    return 0;
        -:  790:}
        -:  791:/* END REFACTORING */
        -:  792:	
function cardEffect called 1 returned 100% blocks executed 4%
        1:  793:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  794:{
        -:  795:  int i;
        -:  796:  int j;
        -:  797:  int k;
        -:  798:  int x;
        -:  799:  int index;
        1:  800:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  801:  int nextPlayer = currentPlayer + 1;
        -:  802:
        1:  803:  int tributeRevealedCards[2] = {-1, -1};
        -:  804:  int temphand[MAX_HAND];// moved above the if statement
        1:  805:  int drawntreasure=0;
        -:  806:  int cardDrawn;
        1:  807:  int z = 0;// this is the counter for the temp hand
        1:  808:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  809:    nextPlayer = 0;
        -:  810:  }
        -:  811:  
        -:  812:	
        -:  813:  //uses switch to select card and perform actions
        1:  814:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 100%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  815:    {
        -:  816:    //refactored
        -:  817:    case adventurer:
    #####:  818:      return playAdventurer(currentPlayer, state);
call    0 never executed
        -:  819:			
        -:  820:    //refactored
        -:  821:    case council_room:
    #####:  822:      return playCouncil_room(currentPlayer, state, handPos);
call    0 never executed
        -:  823:			
        -:  824:    case feast:
        -:  825:      //gain card with cost up to 5
        -:  826:      //Backup hand
    #####:  827:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  828:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  829:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  830:      }
        -:  831:      //Backup hand
        -:  832:
        -:  833:      //Update Coins for Buy
    #####:  834:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  835:      x = 1;//Condition to loop on
    #####:  836:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  837:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  838:	  if (DEBUG)
        -:  839:	    printf("None of that card left, sorry!\n");
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  843:	  }
        -:  844:	}
    #####:  845:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  846:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  847:
        -:  848:	  if (DEBUG){
        -:  849:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  850:	  }
        -:  851:	}
        -:  852:	else{
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  856:	  }
        -:  857:
    #####:  858:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  859:	  x = 0;//No more buying cards
        -:  860:
        -:  861:	  if (DEBUG){
        -:  862:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  863:	  }
        -:  864:
        -:  865:	}
        -:  866:      }     
        -:  867:
        -:  868:      //Reset Hand
    #####:  869:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  870:	state->hand[currentPlayer][i] = temphand[i];
    #####:  871:	temphand[i] = -1;
        -:  872:      }
        -:  873:      //Reset Hand
        -:  874:      			
    #####:  875:      return 0;
        -:  876:			
        -:  877:    case gardens:
    #####:  878:      return -1;
        -:  879:			
        -:  880:    //refactored
        -:  881:    case mine:
    #####:  882:      return playMine(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  883:			
        -:  884:    //refactored
        -:  885:    case remodel:
    #####:  886:      return playRemodel(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  887:		
        -:  888:    //refactored
        -:  889:    case smithy:
    #####:  890:      return playSmithy(currentPlayer, state, handPos);
call    0 never executed
        -:  891:		
        -:  892:    case village:
        -:  893:      //+1 Card
        1:  894:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  895:			
        -:  896:      //+2 Actions
        1:  897:      state->numActions = state->numActions + 2;
        -:  898:			
        -:  899:      //discard played card from hand
        1:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  901:      return 0;
        -:  902:		
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  906:	int p = 0;//Iterator for hand!
    #####:  907:	int card_not_discarded = 1;//Flag for discard set!
    #####:  908:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  909:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  910:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:	    state->discardCount[currentPlayer]++;
    #####:  913:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  914:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  915:	    }
    #####:  916:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:	    state->handCount[currentPlayer]--;
    #####:  918:	    card_not_discarded = 0;//Exit the loop
        -:  919:	  }
    #####:  920:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  921:	    if(DEBUG) {
        -:  922:	      printf("No estate cards in your hand, invalid choice\n");
        -:  923:	      printf("Must gain an estate if there are any\n");
        -:  924:	    }
    #####:  925:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  927:	      state->supplyCount[estate]--;//Decrement estates
    #####:  928:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  929:		isGameOver(state);
call    0 never executed
        -:  930:	      }
        -:  931:	    }
    #####:  932:	    card_not_discarded = 0;//Exit the loop
        -:  933:	  }
        -:  934:			    
        -:  935:	  else{
    #####:  936:	    p++;//Next card
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:			    
        -:  941:      else{
    #####:  942:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  944:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  945:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:	    isGameOver(state);
call    0 never executed
        -:  947:	  }
        -:  948:	}
        -:  949:      }
        -:  950:	    
        -:  951:      
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case great_hall:
        -:  955:      //+1 Card
    #####:  956:      drawCard(currentPlayer, state);
call    0 never executed
        -:  957:			
        -:  958:      //+1 Actions
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case minion:
        -:  966:      //+1 action
    #####:  967:      state->numActions++;
        -:  968:			
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  971:			
    #####:  972:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  state->coins = state->coins + 2;
        -:  975:	}
        -:  976:			
    #####:  977:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  978:	{
        -:  979:	  //discard hand
    #####:  980:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  981:	    {
    #####:  982:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  983:	    }
        -:  984:				
        -:  985:	  //draw 4
    #####:  986:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	    }
        -:  990:				
        -:  991:	  //other players discard hand and redraw if hand size > 4
    #####:  992:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  997:		    {
        -:  998:		      //discard hand
    #####:  999:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1000:			{
    #####: 1001:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1002:			}
        -: 1003:							
        -: 1004:		      //draw 4
    #####: 1005:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:			{
    #####: 1007:			  drawCard(i, state);
call    0 never executed
        -: 1008:			}
        -: 1009:		    }
        -: 1010:		}
        -: 1011:	    }
        -: 1012:				
        -: 1013:	}
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case steward:
    #####: 1017:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
        -: 1019:	  //+2 cards
    #####: 1020:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1021:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1022:	}
    #####: 1023:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
        -: 1025:	  //+2 coins
    #####: 1026:	  state->coins = state->coins + 2;
        -: 1027:	}
        -: 1028:      else
        -: 1029:	{
        -: 1030:	  //trash 2 cards in hand
    #####: 1031:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1032:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:		
        -: 1039:    case tribute:
    #####: 1040:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1041:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1042:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:	  state->deckCount[nextPlayer]--;
        -: 1044:	}
    #####: 1045:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1046:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1047:	  state->discardCount[nextPlayer]--;
        -: 1048:	}
        -: 1049:	else{
        -: 1050:	  //No Card to Reveal
        -: 1051:	  if (DEBUG){
        -: 1052:	    printf("No cards to reveal\n");
        -: 1053:	  }
        -: 1054:	}
        -: 1055:      }
        -: 1056:	    
        -: 1057:      else{
    #####: 1058:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1060:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1061:	    state->deckCount[nextPlayer]++;
    #####: 1062:	    state->discard[nextPlayer][i] = -1;
    #####: 1063:	    state->discardCount[nextPlayer]--;
        -: 1064:	  }
        -: 1065:			    
    #####: 1066:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1067:	} 
    #####: 1068:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
    #####: 1071:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1073:	state->deckCount[nextPlayer]--;
        -: 1074:      }    
        -: 1075:		       
    #####: 1076:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1077:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1078:	state->playedCardCount++;
    #####: 1079:	tributeRevealedCards[1] = -1;
        -: 1080:      }
        -: 1081:
    #####: 1082:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1083:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1084:	  state->coins += 2;
        -: 1085:	}
        -: 1086:		    
    #####: 1087:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1088:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1089:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1090:	}
        -: 1091:	else{//Action Card
    #####: 1092:	  state->numActions = state->numActions + 2;
        -: 1093:	}
        -: 1094:      }
        -: 1095:	    
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case ambassador:
    #####: 1099:      j = 0;		//used to check if player has enough cards to discard
        -: 1100:
    #####: 1101:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1102:	{
    #####: 1103:	  return -1;				
        -: 1104:	}
        -: 1105:
    #####: 1106:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1114:	    {
    #####: 1115:	      j++;
        -: 1116:	    }
        -: 1117:	}
    #####: 1118:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  return -1;				
        -: 1121:	}
        -: 1122:
        -: 1123:      if (DEBUG) 
        -: 1124:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1125:
        -: 1126:      //increase supply count for choosen card by amount being discarded
    #####: 1127:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1128:			
        -: 1129:      //each other player gains a copy of revealed card
    #####: 1130:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1133:	    {
    #####: 1134:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1135:	    }
        -: 1136:	}
        -: 1137:
        -: 1138:      //discard played card from hand
    #####: 1139:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1140:
        -: 1141:      //trash copies of cards returned to supply
    #####: 1142:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1147:		{
    #####: 1148:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1149:		  break;
        -: 1150:		}
        -: 1151:	    }
        -: 1152:	}			
        -: 1153:
    #####: 1154:      return 0;
        -: 1155:		
        -: 1156:    case cutpurse:
        -: 1157:
    #####: 1158:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1159:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	{
    #####: 1161:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1164:		{
    #####: 1165:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1166:		    {
    #####: 1167:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1168:		      break;
        -: 1169:		    }
    #####: 1170:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1171:		    {
    #####: 1172:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1173:			{
        -: 1174:			  if (DEBUG)
        -: 1175:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1176:			}	
    #####: 1177:		      break;
        -: 1178:		    }		
        -: 1179:		}
        -: 1180:					
        -: 1181:	    }
        -: 1182:				
        -: 1183:	}				
        -: 1184:
        -: 1185:      //discard played card from hand
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1187:
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:		
        -: 1191:    case embargo: 
        -: 1192:      //+2 Coins
    #####: 1193:      state->coins = state->coins + 2;
        -: 1194:			
        -: 1195:      //see if selected pile is in play
    #####: 1196:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:			
        -: 1201:      //add embargo token to selected supply pile
    #####: 1202:      state->embargoTokens[choice1]++;
        -: 1203:			
        -: 1204:      //trash card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case outpost:
        -: 1209:      //set outpost flag
    #####: 1210:      state->outpostPlayed++;
        -: 1211:			
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case salvager:
        -: 1217:      //+1 buy
    #####: 1218:      state->numBuys++;
        -: 1219:			
    #####: 1220:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1221:	{
        -: 1222:	  //gain coins equal to trashed card
    #####: 1223:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1224:	  //trash card
    #####: 1225:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1226:	}
        -: 1227:			
        -: 1228:      //discard card
    #####: 1229:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case sea_hag:
    #####: 1233:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1234:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1235:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1236:	  state->discardCount[i]++;
    #####: 1237:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1238:	}
        -: 1239:      }
    #####: 1240:      return 0;
        -: 1241:		
        -: 1242:    case treasure_map:
        -: 1243:      //search hand for another treasure_map
    #####: 1244:      index = -1;
    #####: 1245:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1248:	    {
    #####: 1249:	      index = i;
    #####: 1250:	      break;
        -: 1251:	    }
        -: 1252:	}
    #####: 1253:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1254:	{
        -: 1255:	  //trash both treasure cards
    #####: 1256:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1258:
        -: 1259:	  //gain 4 Gold cards
    #####: 1260:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:	    {
    #####: 1262:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1263:	    }
        -: 1264:				
        -: 1265:	  //return success
    #####: 1266:	  return 1;
        -: 1267:	}
        -: 1268:			
        -: 1269:      //no second treasure_map found in hand
    #####: 1270:      return -1;
        -: 1271:    }
        -: 1272:	
    #####: 1273:  return -1;
        -: 1274:}
        -: 1275:
function discardCard called 13 returned 100% blocks executed 89%
       13: 1276:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1277:{
        -: 1278:	
        -: 1279:  //if card is not trashed, added to Played pile 
       13: 1280:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1281:    {
        -: 1282:      //add card to played pile
       13: 1283:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       13: 1284:      state->playedCardCount++;
        -: 1285:    }
        -: 1286:	
        -: 1287:  //set played card to -1
       13: 1288:  state->hand[currentPlayer][handPos] = -1;
        -: 1289:	
        -: 1290:  //remove card from player's hand
       13: 1291:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 1292:    {
        -: 1293:      //reduce number of cards in hand
        2: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
       11: 1296:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:  else 	
        -: 1302:    {
        -: 1303:      //replace discarded card with last card in hand
       11: 1304:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1305:      //set last card to -1
       11: 1306:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1307:      //reduce number of cards in hand
       11: 1308:      state->handCount[currentPlayer]--;
        -: 1309:    }
        -: 1310:	
       13: 1311:  return 0;
        -: 1312:}
        -: 1313:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1314:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1315:{
        -: 1316:  //Note: supplyPos is enum of choosen card
        -: 1317:	
        -: 1318:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1319:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1320:    {
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //added card for [whoseTurn] current player:
        -: 1325:  // toFlag = 0 : add to discard
        -: 1326:  // toFlag = 1 : add to deck
        -: 1327:  // toFlag = 2 : add to hand
        -: 1328:
    #####: 1329:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1330:    {
    #####: 1331:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1332:      state->deckCount[player]++;
        -: 1333:    }
    #####: 1334:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1335:    {
    #####: 1336:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1337:      state->handCount[player]++;
        -: 1338:    }
        -: 1339:  else
        -: 1340:    {
    #####: 1341:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1342:      state->discardCount[player]++;
        -: 1343:    }
        -: 1344:	
        -: 1345:  //decrease number in supply pile
    #####: 1346:  state->supplyCount[supplyPos]--;
        -: 1347:	 
    #####: 1348:  return 0;
        -: 1349:}
        -: 1350:
function updateCoins called 24 returned 100% blocks executed 82%
       24: 1351:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1352:{
        -: 1353:  int i;
        -: 1354:	
        -: 1355:  //reset coin count
       24: 1356:  state->coins = 0;
        -: 1357:
        -: 1358:  //add coins for each Treasure card in player's hand
      144: 1359:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1360:    {
      120: 1361:      if (state->hand[player][i] == copper)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1362:	{
       88: 1363:	  state->coins += 1;
        -: 1364:	}
       32: 1365:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1366:	{
    #####: 1367:	  state->coins += 2;
        -: 1368:	}
       32: 1369:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1370:	{
    #####: 1371:	  state->coins += 3;
        -: 1372:	}	
        -: 1373:    }	
        -: 1374:
        -: 1375:  //add bonus
       24: 1376:  state->coins += bonus;
        -: 1377:
       24: 1378:  return 0;
        -: 1379:}
        -: 1380:
        -: 1381:
        -: 1382://end of dominion.c
        -: 1383:
