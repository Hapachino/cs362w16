        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for numHandCards() function.
        -:    5: * Requirements
        -:    6: *      - initial hand has 5 cards
        -:    7: *      - hand count is incremented after draw
        -:    8: *      - hand count is decremented after discard
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 4 returned 100% blocks executed 87%
        4:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        4:   22:    int seed = 1000;
        4:   23:    int numPlayers = 2;
        -:   24:    int expCardCount;   //expected card count
        -:   25:    struct gameState G, testG;
        4:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        4:   29:    printf("TESTING - numHandCards()\n");
call    0 returned 100%
        -:   30:    //initialize game state
        4:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        4:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
       12:   36:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   37:    {
        8:   38:        printf("Player %d\n", i + 1);
call    0 returned 100%
        8:   39:        expCardCount = 5;
       48:   40:        for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   41:        {
       40:   42:            if (numHandCards(&G) != expCardCount + j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   43:                printf("ERROR - Cards in hand: %d, Expected: %d\n",
call    0 never executed
call    1 never executed
        -:   44:                        numHandCards(&G), expCardCount + j);
        -:   45:            else
       40:   46:                printf("SUCCESS - Cards in hand: %d, Expected: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   47:                        numHandCards(&G), expCardCount + j);
       40:   48:            drawCard(whoseTurn(&G), &G);
call    0 returned 100%
call    1 returned 100%
        -:   49:        }
        8:   50:        endTurn(&G);
call    0 returned 100%
        -:   51:    }
        -:   52:
        4:   53:    printf("TESTING - DISCARD CARDS\n");
call    0 returned 100%
       12:   54:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   55:    {
        8:   56:        printf("Player %d\n", i + 1);
call    0 returned 100%
        8:   57:        expCardCount = 5;
       48:   58:        for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   59:        {
       40:   60:            if (numHandCards(&G) != expCardCount - j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   61:                printf("ERROR - Cards in hand: %d, Expected: %d\n",
call    0 never executed
call    1 never executed
        -:   62:                        numHandCards(&G), expCardCount - j);
        -:   63:            else
       40:   64:                printf("SUCCESS - Cards in hand: %d, Expected: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   65:                        numHandCards(&G), expCardCount - j);
       40:   66:            discardCard(0, i, &G, 0);
call    0 returned 100%
        -:   67:        }
        8:   68:        endTurn(&G);
call    0 returned 100%
        -:   69:    }
        -:   70:
        4:   71:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   72:
        4:   73:    return 0;
        -:   74:}
