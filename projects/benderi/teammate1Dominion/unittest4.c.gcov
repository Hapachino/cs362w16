        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for isGameOver() function.
        -:    5: * Requirements
        -:    6: *      - game is over when province stack is at 0
        -:    7: *      - game is over when any 3 supply stacks are at 0
        -:    8: */
        -:    9:
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 4 returned 100% blocks executed 83%
        4:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        4:   22:    int seed = 1000;
        -:   23:    struct gameState G, testG;
        4:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   25:                    remodel, smithy, village, baron, great_hall};
        -:   26:
        4:   27:    printf("TESTING - isGameOver\n\n");
call    0 returned 100%
        -:   28:    //initialize game state
        4:   29:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        4:   30:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //supply of province > 0, game continues
        4:   35:    printf("supplyCount[province] = %d\n", G.supplyCount[province]);
call    0 returned 100%
        4:   36:    if (isGameOver(&G))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   37:        printf("ERROR - game over but should continue.\n");
call    0 never executed
        -:   38:    else
        4:   39:        printf("SUCCESS - Game continues.\n");
call    0 returned 100%
        -:   40:
        -:   41:    //supply of province = 0, game over 
        4:   42:    G.supplyCount[province] = 0;
        4:   43:    printf("supplyCount[province] = %d\n", G.supplyCount[province]);
call    0 returned 100%
        4:   44:    if (isGameOver(&G))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:   45:        printf("SUCCESS - Game over.\n");
call    0 returned 100%
        -:   46:    else
    #####:   47:        printf("ERROR - game continues but should be over.\n");
call    0 never executed
        -:   48:
        -:   49:    //reset supply count of province
        4:   50:    G.supplyCount[province] = 12;
       16:   51:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   52:    {
        -:   53:        //set supply pile to 0
       12:   54:        G.supplyCount[i] = 0;
       12:   55:        printf("%d piles now have 0 cards.\n", i + 1);
call    0 returned 100%
        -:   56:        //if three supply piles are at 0, game is over
       12:   57:        if (isGameOver(&G) && i == 2)
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4:   58:            printf("SUCCESS - Game over.\n");
call    0 returned 100%
        8:   59:        else if (isGameOver(&G) && i < 2)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
    #####:   60:            printf("ERROR - game over but should continue.\n");
call    0 never executed
        -:   61:        else
        8:   62:            printf("SUCCESS - Game continues.\n");
call    0 returned 100%
        -:   63:    }
        -:   64:
        4:   65:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   66:
        4:   67:    return 0;
        -:   68:}
