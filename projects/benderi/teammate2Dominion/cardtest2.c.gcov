        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Adventurer card.
        -:    5: * Business Requirements
        -:    6: *      - draw cards until at least 2 treasure cards are drawn
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 4 returned 100% blocks executed 84%
        4:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        4:   20:    int seed = 1000;
        4:   21:    int numPlayers = 2;
        4:   22:    int thisPlayer = 0;
        -:   23:    int cardDrawn1, cardDrawn2;
        4:   24:    int treasureCnt1 = 0, treasureCnt2 = 0;
        -:   25:    struct gameState G, testG;
        4:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        4:   29:    printf("TESTING - ADVENTURER CARD\n");
call    0 returned 100%
        -:   30:    //initialize game state
        4:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        4:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
        -:   36:    //give Adventurer card to player
        4:   37:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = adventurer;
        4:   38:    testG.handCount[thisPlayer]++;
        4:   39:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   40:        printf("SUCCESS - Adventurer card given to player.\n");
call    0 returned 100%
        -:   41:    else
    #####:   42:        printf("ERROR - Adventurer card not given.\n");
call    0 never executed
        -:   43:
        -:   44:    //play Adventurer card
        -:   45:    //teammate's refactored function call is adventurerCard
        4:   46:    adventurerCard(&testG);
call    0 returned 100%
        -:   47:    //playAdventurer(thisPlayer, &testG);
        -:   48:
        -:   49:    //verify that at least 2 new treasure cards were added to hand
       36:   50:    for (i = 0; i < testG.handCount[thisPlayer]; i++) 
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:   51:    {
       32:   52:       cardDrawn1 = testG.hand[thisPlayer][i];
       32:   53:       if (cardDrawn1 == copper || cardDrawn1 == silver || cardDrawn1 == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       24:   54:          treasureCnt1++;
        -:   55:    }
       24:   56:    for (i = 0; i < G.handCount[thisPlayer]; i++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   57:    {
       20:   58:       cardDrawn2 = G.hand[thisPlayer][i];
       20:   59:       if (cardDrawn2 == copper || cardDrawn2 == silver || cardDrawn2 == gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       16:   60:          treasureCnt2++;
        -:   61:    }
        4:   62:    if ((treasureCnt1 - treasureCnt2) > 0 || (treasureCnt1 - treasureCnt2) < 3 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        4:   63:       printf("SUCCESS - %d additional treasure cards drawn.\n", 
call    0 returned 100%
        -:   64:                  (treasureCnt1 - treasureCnt2));
        -:   65:    else
    #####:   66:       printf("ERROR - Less than 1 or more than 3 treasure cards drawn.\n");
call    0 never executed
        -:   67:
        -:   68:
        -:   69:    //verify more cards in test state hand than original hand
        4:   70:    if (G.handCount[thisPlayer] < testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   71:       printf("SUCCESS - Additional cards added to test hand.\n");
call    0 returned 100%
        -:   72:    else
    #####:   73:       printf("ERROR - No additional cards added to test hand.\n");
call    0 never executed
        -:   74:
        4:   75:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   76:
        4:   77:    return 0;
        -:   78:
        -:   79:}
