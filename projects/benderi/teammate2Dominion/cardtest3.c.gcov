        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Council Room card.
        -:    5: * Requirements
        -:    6: *      - current player draws +4 cards
        -:    7: *      - current player gets +1 buy
        -:    8: *      - each other player draws +1 card
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 1 returned 100% blocks executed 78%
        1:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayers = 3;
        1:   24:    int thisPlayer = 0;
        -:   25:    struct gameState G, testG;
        1:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        1:   29:    printf("TESTING - COUNCIL ROOM CARD\n");
call    0 returned 100%
        -:   30:    //initialize game state
        1:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
        -:   36:    //give Council Room card to first player
        1:   37:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = council_room;
        1:   38:    testG.handCount[thisPlayer]++;
        1:   39:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   40:        printf("SUCCESS - Council Room card given to player.\n");
call    0 returned 100%
        -:   41:    else
    #####:   42:        printf("ERROR - Council Room card not given.\n");
call    0 never executed
        -:   43:
        -:   44:    //play Council Room card, +4 cards 
        -:   45:    //reordered parameters and renamed to match teammates function
        1:   46:    councilRoomCard(&testG, thisPlayer, 0);
call    0 returned 100%
        -:   47:    //playCouncil_room(thisPlayer, &testG, 0);
        1:   48:    if (G.handCount[thisPlayer] + 4 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   49:        printf("SUCCESS - Player 1 drew 4 new cards, discarded 1.\n");
call    0 returned 100%
        -:   50:    else
    #####:   51:        printf("ERROR - Player 1 did not draw/discard correct # of cards.\n");
call    0 never executed
        -:   52:
        -:   53:    //check for +1 buy to first player
        1:   54:    if (G.numBuys + 1 == testG.numBuys)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:        printf("SUCCESS - Player 1 gained +1 buy.\n");
call    0 returned 100%
        -:   56:    else
    #####:   57:        printf("ERROR - Player 1 did not get +1 buy.\n");
call    0 never executed
        -:   58:
        -:   59:    //check other players to verify +1 card
        3:   60:    for (i = 1; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   61:    {
        2:   62:        if (G.handCount[i] + 1 == testG.handCount[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   63:            printf("SUCCESS - Player %d drew 1 card.\n", (i + 1));
call    0 never executed
        -:   64:        else
        2:   65:            printf("ERROR - Player %d did not draw 1 card.\n", (i + 1));
call    0 returned 100%
        -:   66:    }
        -:   67:
        1:   68:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   69:
        1:   70:    return 0;
        -:   71:   
        -:   72:}
