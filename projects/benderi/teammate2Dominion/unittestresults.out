TESTING - numHandCards()
Player 1
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 6, Expected: 6
SUCCESS - Cards in hand: 7, Expected: 7
SUCCESS - Cards in hand: 8, Expected: 8
SUCCESS - Cards in hand: 9, Expected: 9
Player 2
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 6, Expected: 6
SUCCESS - Cards in hand: 7, Expected: 7
SUCCESS - Cards in hand: 8, Expected: 8
SUCCESS - Cards in hand: 9, Expected: 9
TESTING - DISCARD CARDS
Player 1
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 4, Expected: 4
SUCCESS - Cards in hand: 3, Expected: 3
SUCCESS - Cards in hand: 2, Expected: 2
SUCCESS - Cards in hand: 1, Expected: 1
Player 2
SUCCESS - Cards in hand: 5, Expected: 5
SUCCESS - Cards in hand: 4, Expected: 4
SUCCESS - Cards in hand: 3, Expected: 3
SUCCESS - Cards in hand: 2, Expected: 2
SUCCESS - Cards in hand: 1, Expected: 1
TEST COMPLETE

TESTING - endTurn()
SUCCESS - Current player: 0, Expected player: 0
SUCCESS - Current player: 1, Expected player: 1
SUCCESS - Current player: 2, Expected player: 2
SUCCESS - Current player: 3, Expected player: 3
SUCCESS - Current player: 0, Expected player: 0
SUCCESS - Current player: 1, Expected player: 1
SUCCESS - Current player: 2, Expected player: 2
SUCCESS - Current player: 3, Expected player: 3
SUCCESS - Current player: 0, Expected player: 0
SUCCESS - Current player: 1, Expected player: 1
SUCCESS - Current player: 2, Expected player: 2
SUCCESS - Current player: 3, Expected player: 3
TEST COMPLETE

TESTING - getCost()
SUCCESS - Returned cost: 0, Expected cost: 0
SUCCESS - Returned cost: 2, Expected cost: 2
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 8, Expected cost: 8
SUCCESS - Returned cost: 0, Expected cost: 0
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 6, Expected cost: 6
SUCCESS - Returned cost: 6, Expected cost: 6
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 3, Expected cost: 3
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 2, Expected cost: 2
SUCCESS - Returned cost: 5, Expected cost: 5
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: 4, Expected cost: 4
SUCCESS - Returned cost: -1, Expected cost: -1
TEST COMPLETE

TESTING - isGameOver

supplyCount[province] = 12
SUCCESS - Game continues.
supplyCount[province] = 0
SUCCESS - Game over.
1 piles now have 0 cards.
SUCCESS - Game continues.
2 piles now have 0 cards.
SUCCESS - Game continues.
3 piles now have 0 cards.
SUCCESS - Game over.
TEST COMPLETE

TESTING - SMITHY CARD
SUCCESS - Smithy card given to player.
ERROR - Player did not gain/discard correct # of cards.
expected: 8, actual: 9
SUCCESS - Count of estate cards unchanged.
SUCCESS - Count of duchy cards unchanged.
SUCCESS - Count of province cards unchanged.
TEST COMPLETE

TESTING - ADVENTURER CARD
SUCCESS - Adventurer card given to player.
SUCCESS - 2 additional treasure cards drawn.
SUCCESS - Additional cards added to test hand.
TEST COMPLETE

TESTING - COUNCIL ROOM CARD
SUCCESS - Council Room card given to player.
SUCCESS - Player 1 drew 4 new cards, discarded 1.
SUCCESS - Player 1 gained +1 buy.
ERROR - Player 2 did not draw 1 card.
ERROR - Player 3 did not draw 1 card.
TEST COMPLETE

TESTING - VILLAGE CARD
SUCCESS - Village card given to player.
ERROR - Player did not gain/discard correct # of cards.
expected: 6, actual: 5
SUCCESS - Player gained 2 actions.
TEST COMPLETE

File 'unittest1.c'
Lines executed:90.00% of 30
Branches executed:100.00% of 14
Taken at least once:78.57% of 14
Calls executed:77.27% of 22
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for numHandCards() function.
        -:    5: * Requirements
        -:    6: *      - initial hand has 5 cards
        -:    7: *      - hand count is incremented after draw
        -:    8: *      - hand count is decremented after discard
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 4 returned 100% blocks executed 87%
        4:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        4:   22:    int seed = 1000;
        4:   23:    int numPlayers = 2;
        -:   24:    int expCardCount;   //expected card count
        -:   25:    struct gameState G, testG;
        4:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        4:   29:    printf("TESTING - numHandCards()\n");
call    0 returned 100%
        -:   30:    //initialize game state
        4:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        4:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
       12:   36:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   37:    {
        8:   38:        printf("Player %d\n", i + 1);
call    0 returned 100%
        8:   39:        expCardCount = 5;
       48:   40:        for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   41:        {
       40:   42:            if (numHandCards(&G) != expCardCount + j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   43:                printf("ERROR - Cards in hand: %d, Expected: %d\n",
call    0 never executed
call    1 never executed
        -:   44:                        numHandCards(&G), expCardCount + j);
        -:   45:            else
       40:   46:                printf("SUCCESS - Cards in hand: %d, Expected: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   47:                        numHandCards(&G), expCardCount + j);
       40:   48:            drawCard(whoseTurn(&G), &G);
call    0 returned 100%
call    1 returned 100%
        -:   49:        }
        8:   50:        endTurn(&G);
call    0 returned 100%
        -:   51:    }
        -:   52:
        4:   53:    printf("TESTING - DISCARD CARDS\n");
call    0 returned 100%
       12:   54:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   55:    {
        8:   56:        printf("Player %d\n", i + 1);
call    0 returned 100%
        8:   57:        expCardCount = 5;
       48:   58:        for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   59:        {
       40:   60:            if (numHandCards(&G) != expCardCount - j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   61:                printf("ERROR - Cards in hand: %d, Expected: %d\n",
call    0 never executed
call    1 never executed
        -:   62:                        numHandCards(&G), expCardCount - j);
        -:   63:            else
       40:   64:                printf("SUCCESS - Cards in hand: %d, Expected: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   65:                        numHandCards(&G), expCardCount - j);
       40:   66:            discardCard(0, i, &G, 0);
call    0 returned 100%
        -:   67:        }
        8:   68:        endTurn(&G);
call    0 returned 100%
        -:   69:    }
        -:   70:
        4:   71:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   72:
        4:   73:    return 0;
        -:   74:}
File 'unittest2.c'
Lines executed:87.50% of 16
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
Calls executed:70.00% of 10
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for endTurn() function.
        -:    5: * Requirements
        -:    6: *      - End current player turn
        -:    7: *      - Advance to next player
        -:    8: *      - Do not advance if game is over
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 4 returned 100% blocks executed 85%
        4:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        4:   22:    int seed = 1000;
        -:   23:    struct gameState G, testG;
        4:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   25:                    remodel, smithy, village, baron, great_hall};
        -:   26:
        4:   27:    printf("TESTING - endTurn()\n");
call    0 returned 100%
        -:   28:    //initialize game state
        4:   29:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        4:   30:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //multiple tests to verify last player turn loops back to first player
       16:   35:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   36:    {
       60:   37:        for (j = 0; j < MAX_PLAYERS; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   38:        {
        -:   39:            // test that current player is who we expect
       48:   40:            if (whoseTurn(&G) != j)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   41:                printf("ERROR - Current player: %d, Expected player: %d\n",
call    0 never executed
call    1 never executed
        -:   42:                        whoseTurn(&G), j);
        -:   43:            else
       48:   44:                printf("SUCCESS - Current player: %d, Expected player: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   45:                        whoseTurn(&G), j);
       48:   46:            endTurn(&G);    //end current player turn
call    0 returned 100%
        -:   47:        }
        -:   48:    }
        4:   49:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   50:
        4:   51:    return 0;
        -:   52:}
File 'unittest3.c'
Lines executed:84.21% of 19
Branches executed:100.00% of 8
Taken at least once:62.50% of 8
Calls executed:64.29% of 14
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for getCost() function.
        -:    5: * Requirements
        -:    6: *      - Correct value of card is returned
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 4 returned 100% blocks executed 77%
        4:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        4:   20:    int seed = 1000;
        -:   21:    struct gameState G, testG;
        4:   22:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   23:                    remodel, smithy, village, baron, great_hall};
        -:   24:
        4:   25:    int cards[27] = {curse, estate, duchy, province,
        -:   26:                     copper, silver, gold, adventurer, council_room,
        -:   27:                     feast, gardens, mine, remodel, smithy, village,
        -:   28:                     baron, great_hall, minion, steward, tribute,
        -:   29:                     ambassador, cutpurse, embargo, outpost, 
        -:   30:                     salvager, sea_hag, treasure_map};
        4:   31:    int values[27] = {0, 2, 5, 8,
        -:   32:                      0, 3, 6, 6, 5,
        -:   33:                      4, 4, 5, 4, 4, 3,
        -:   34:                      4, 3, 5, 3, 5, 
        -:   35:                      3, 4, 2, 5,
        -:   36:                      4, 4, 4};
        -:   37:
        4:   38:    printf("TESTING - getCost()\n");
call    0 returned 100%
        -:   39:    //initialize game state
        4:   40:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        4:   41:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   42:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   43:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   44:
        -:   45:
        -:   46:    //test each card against its expected value
      112:   47:    for (i = 0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   48:    {
      108:   49:        if (getCost(cards[i]) != values[i])
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   50:            printf("ERROR - Returned cost: %d, Expected cost: %d\n",
call    0 never executed
call    1 never executed
        -:   51:                    getCost(cards[i]), values[i]);
        -:   52:        else
      108:   53:            printf("SUCCESS - Returned cost: %d, Expected cost: %d\n",
call    0 returned 100%
call    1 returned 100%
        -:   54:                    getCost(cards[i]), values[i]);
        -:   55:    }
        -:   56:
        4:   57:    if (getCost(treasure_map + 1) != -1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   58:        printf("ERROR - Returned cost: %d, Expected cost: -1\n",
call    0 never executed
call    1 never executed
        -:   59:                getCost(treasure_map + 1));
        -:   60:    else
        4:   61:        printf("SUCCESS - Returned cost: %d, Expected cost: -1\n",
call    0 returned 100%
call    1 returned 100%
        -:   62:                getCost(treasure_map + 1));
        -:   63:
        4:   64:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   65:
        4:   66:    return 0;
        -:   67:}
File 'unittest4.c'
Lines executed:85.71% of 28
Branches executed:87.50% of 16
Taken at least once:56.25% of 16
Calls executed:77.78% of 18
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for isGameOver() function.
        -:    5: * Requirements
        -:    6: *      - game is over when province stack is at 0
        -:    7: *      - game is over when any 3 supply stacks are at 0
        -:    8: */
        -:    9:
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 4 returned 100% blocks executed 83%
        4:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        4:   22:    int seed = 1000;
        -:   23:    struct gameState G, testG;
        4:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   25:                    remodel, smithy, village, baron, great_hall};
        -:   26:
        4:   27:    printf("TESTING - isGameOver\n\n");
call    0 returned 100%
        -:   28:    //initialize game state
        4:   29:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        4:   30:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //supply of province > 0, game continues
        4:   35:    printf("supplyCount[province] = %d\n", G.supplyCount[province]);
call    0 returned 100%
        4:   36:    if (isGameOver(&G))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   37:        printf("ERROR - game over but should continue.\n");
call    0 never executed
        -:   38:    else
        4:   39:        printf("SUCCESS - Game continues.\n");
call    0 returned 100%
        -:   40:
        -:   41:    //supply of province = 0, game over 
        4:   42:    G.supplyCount[province] = 0;
        4:   43:    printf("supplyCount[province] = %d\n", G.supplyCount[province]);
call    0 returned 100%
        4:   44:    if (isGameOver(&G))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:   45:        printf("SUCCESS - Game over.\n");
call    0 returned 100%
        -:   46:    else
    #####:   47:        printf("ERROR - game continues but should be over.\n");
call    0 never executed
        -:   48:
        -:   49:    //reset supply count of province
        4:   50:    G.supplyCount[province] = 12;
       16:   51:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   52:    {
        -:   53:        //set supply pile to 0
       12:   54:        G.supplyCount[i] = 0;
       12:   55:        printf("%d piles now have 0 cards.\n", i + 1);
call    0 returned 100%
        -:   56:        //if three supply piles are at 0, game is over
       12:   57:        if (isGameOver(&G) && i == 2)
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4:   58:            printf("SUCCESS - Game over.\n");
call    0 returned 100%
        8:   59:        else if (isGameOver(&G) && i < 2)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
    #####:   60:            printf("ERROR - game over but should continue.\n");
call    0 never executed
        -:   61:        else
        8:   62:            printf("SUCCESS - Game continues.\n");
call    0 returned 100%
        -:   63:    }
        -:   64:
        4:   65:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   66:
        4:   67:    return 0;
        -:   68:}
File 'cardtest1.c'
Lines executed:80.65% of 31
Branches executed:100.00% of 12
Taken at least once:50.00% of 12
Calls executed:62.50% of 16
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Smithy card.
        -:    5: * Requirements
        -:    6: *      - player draws 3 new cards
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 3 returned 100% blocks executed 75%
        3:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        3:   20:    int seed = 1000;
        3:   21:    int numPlayers = 2;
        3:   22:    int thisPlayer = 0;
        -:   23:    struct gameState G, testG;
        3:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   25:                    remodel, smithy, village, baron, great_hall};
        -:   26:
        3:   27:    printf("TESTING - SMITHY CARD\n");
call    0 returned 100%
        -:   28:    //initialize game state
        3:   29:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        3:   30:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        3:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //give Smithy card to player
        3:   35:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = smithy;
        3:   36:    testG.handCount[thisPlayer]++;
        3:   37:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   38:        printf("SUCCESS - Smithy card given to player.\n");
call    0 returned 100%
        -:   39:    else
    #####:   40:        printf("ERROR - Smithy card not given.\n");
call    0 never executed
        -:   41:
        -:   42:    //play Smithy
        -:   43:    //changed function to match refactored code
        3:   44:    smithyCard(&testG, 0);
call    0 returned 100%
        -:   45:    //playSmithy(thisPlayer, &testG, 0);
        3:   46:    if (G.handCount[thisPlayer] + 3 == testG.handCount[thisPlayer])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   47:        printf("SUCCESS - Player gained 3 new cards, discarded 1.\n");
call    0 never executed
        -:   48:    else
        -:   49:    {
        3:   50:        printf("ERROR - Player did not gain/discard correct # of cards.\n");
call    0 returned 100%
        3:   51:        printf("expected: %d, actual: %d\n", G.handCount[thisPlayer] + 3,
call    0 returned 100%
        -:   52:                    testG.handCount[thisPlayer]);
        -:   53:    }
        -:   54:
        -:   55:    //test game state to verify same number of Victory cards
        3:   56:    if (G.supplyCount[estate] == testG.supplyCount[estate])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   57:       printf("SUCCESS - Count of estate cards unchanged.\n");
call    0 returned 100%
        -:   58:    else
    #####:   59:       printf("ERROR - Count of estate cards has changed.\n");
call    0 never executed
        3:   60:    if (G.supplyCount[duchy] == testG.supplyCount[duchy])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   61:       printf("SUCCESS - Count of duchy cards unchanged.\n");
call    0 returned 100%
        -:   62:    else
    #####:   63:       printf("ERROR - Count of duchy cards has changed.\n");
call    0 never executed
        3:   64:    if (G.supplyCount[province] == testG.supplyCount[province])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   65:       printf("SUCCESS - Count of province cards unchanged.\n");
call    0 returned 100%
        -:   66:    else
    #####:   67:       printf("ERROR - Count of province cards has changed.\n");
call    0 never executed
        -:   68:
        3:   69:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   70:
        3:   71:    return 0;
        -:   72:}
File 'cardtest2.c'
Lines executed:87.88% of 33
Branches executed:92.31% of 26
Taken at least once:61.54% of 26
Calls executed:63.64% of 11
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Adventurer card.
        -:    5: * Business Requirements
        -:    6: *      - draw cards until at least 2 treasure cards are drawn
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 4 returned 100% blocks executed 84%
        4:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        4:   20:    int seed = 1000;
        4:   21:    int numPlayers = 2;
        4:   22:    int thisPlayer = 0;
        -:   23:    int cardDrawn1, cardDrawn2;
        4:   24:    int treasureCnt1 = 0, treasureCnt2 = 0;
        -:   25:    struct gameState G, testG;
        4:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        4:   29:    printf("TESTING - ADVENTURER CARD\n");
call    0 returned 100%
        -:   30:    //initialize game state
        4:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        4:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        4:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
        -:   36:    //give Adventurer card to player
        4:   37:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = adventurer;
        4:   38:    testG.handCount[thisPlayer]++;
        4:   39:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   40:        printf("SUCCESS - Adventurer card given to player.\n");
call    0 returned 100%
        -:   41:    else
    #####:   42:        printf("ERROR - Adventurer card not given.\n");
call    0 never executed
        -:   43:
        -:   44:    //play Adventurer card
        -:   45:    //teammate's refactored function call is adventurerCard
        4:   46:    adventurerCard(&testG);
call    0 returned 100%
        -:   47:    //playAdventurer(thisPlayer, &testG);
        -:   48:
        -:   49:    //verify that at least 2 new treasure cards were added to hand
       36:   50:    for (i = 0; i < testG.handCount[thisPlayer]; i++) 
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:   51:    {
       32:   52:       cardDrawn1 = testG.hand[thisPlayer][i];
       32:   53:       if (cardDrawn1 == copper || cardDrawn1 == silver || cardDrawn1 == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       24:   54:          treasureCnt1++;
        -:   55:    }
       24:   56:    for (i = 0; i < G.handCount[thisPlayer]; i++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   57:    {
       20:   58:       cardDrawn2 = G.hand[thisPlayer][i];
       20:   59:       if (cardDrawn2 == copper || cardDrawn2 == silver || cardDrawn2 == gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       16:   60:          treasureCnt2++;
        -:   61:    }
        4:   62:    if ((treasureCnt1 - treasureCnt2) > 0 || (treasureCnt1 - treasureCnt2) < 3 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        4:   63:       printf("SUCCESS - %d additional treasure cards drawn.\n", 
call    0 returned 100%
        -:   64:                  (treasureCnt1 - treasureCnt2));
        -:   65:    else
    #####:   66:       printf("ERROR - Less than 1 or more than 3 treasure cards drawn.\n");
call    0 never executed
        -:   67:
        -:   68:
        -:   69:    //verify more cards in test state hand than original hand
        4:   70:    if (G.handCount[thisPlayer] < testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   71:       printf("SUCCESS - Additional cards added to test hand.\n");
call    0 returned 100%
        -:   72:    else
    #####:   73:       printf("ERROR - No additional cards added to test hand.\n");
call    0 never executed
        -:   74:
        4:   75:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   76:
        4:   77:    return 0;
        -:   78:
        -:   79:}
File 'cardtest3.c'
Lines executed:82.14% of 28
Branches executed:100.00% of 12
Taken at least once:58.33% of 12
Calls executed:61.54% of 13
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Council Room card.
        -:    5: * Requirements
        -:    6: *      - current player draws +4 cards
        -:    7: *      - current player gets +1 buy
        -:    8: *      - each other player draws +1 card
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
function main called 1 returned 100% blocks executed 78%
        1:   18:int main() 
        -:   19:{
        -:   20:    int i, j;
        -:   21:    int outcome;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayers = 3;
        1:   24:    int thisPlayer = 0;
        -:   25:    struct gameState G, testG;
        1:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                    remodel, smithy, village, baron, great_hall};
        -:   28:
        1:   29:    printf("TESTING - COUNCIL ROOM CARD\n");
call    0 returned 100%
        -:   30:    //initialize game state
        1:   31:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   32:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        1:   34:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:
        -:   36:    //give Council Room card to first player
        1:   37:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = council_room;
        1:   38:    testG.handCount[thisPlayer]++;
        1:   39:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   40:        printf("SUCCESS - Council Room card given to player.\n");
call    0 returned 100%
        -:   41:    else
    #####:   42:        printf("ERROR - Council Room card not given.\n");
call    0 never executed
        -:   43:
        -:   44:    //play Council Room card, +4 cards 
        -:   45:    //reordered parameters and renamed to match teammates function
        1:   46:    councilRoomCard(&testG, thisPlayer, 0);
call    0 returned 100%
        -:   47:    //playCouncil_room(thisPlayer, &testG, 0);
        1:   48:    if (G.handCount[thisPlayer] + 4 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   49:        printf("SUCCESS - Player 1 drew 4 new cards, discarded 1.\n");
call    0 returned 100%
        -:   50:    else
    #####:   51:        printf("ERROR - Player 1 did not draw/discard correct # of cards.\n");
call    0 never executed
        -:   52:
        -:   53:    //check for +1 buy to first player
        1:   54:    if (G.numBuys + 1 == testG.numBuys)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:        printf("SUCCESS - Player 1 gained +1 buy.\n");
call    0 returned 100%
        -:   56:    else
    #####:   57:        printf("ERROR - Player 1 did not get +1 buy.\n");
call    0 never executed
        -:   58:
        -:   59:    //check other players to verify +1 card
        3:   60:    for (i = 1; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   61:    {
        2:   62:        if (G.handCount[i] + 1 == testG.handCount[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   63:            printf("SUCCESS - Player %d drew 1 card.\n", (i + 1));
call    0 never executed
        -:   64:        else
        2:   65:            printf("ERROR - Player %d did not draw 1 card.\n", (i + 1));
call    0 returned 100%
        -:   66:    }
        -:   67:
        1:   68:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   69:
        1:   70:    return 0;
        -:   71:   
        -:   72:}
File 'cardtest4.c'
Lines executed:84.00% of 25
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:66.67% of 12
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for Village card.
        -:    5: * Requirements
        -:    6: *      - player draws 1 card
        -:    7: *      - player gains 2 actions
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
function main called 3 returned 100% blocks executed 78%
        3:   17:int main() 
        -:   18:{
        -:   19:    int i, j;
        -:   20:    int outcome;
        3:   21:    int seed = 1000;
        3:   22:    int numPlayers = 2;
        3:   23:    int thisPlayer = 0;
        -:   24:    struct gameState G, testG;
        3:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:                    remodel, smithy, village, baron, great_hall};
        -:   27:
        3:   28:    printf("TESTING - VILLAGE CARD\n");
call    0 returned 100%
        -:   29:    //initialize game state
        3:   30:    outcome = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        3:   31:    if (outcome == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:        printf("ERROR - Game initialization failed.\n");
call    0 never executed
        3:   33:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   34:
        -:   35:    //give Village card to first player
        3:   36:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = village;
        3:   37:    testG.handCount[thisPlayer]++;
        3:   38:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   39:        printf("SUCCESS - Village card given to player.\n");
call    0 returned 100%
        -:   40:    else
    #####:   41:        printf("ERROR - Village card not given.\n");
call    0 never executed
        -:   42:
        -:   43:    //play Village card
        -:   44:    //teammate refactored code for this card as villageCard
        3:   45:    villageCard(&testG, testG.hand[thisPlayer][testG.handCount[thisPlayer]-1]);
call    0 returned 100%
        -:   46:    //cardEffect(village, 0, 0, 0, &testG, 
        -:   47:    //        testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], 0);
        -:   48:    
        -:   49:    //test that player gained 1 card
        3:   50:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   51:        printf("SUCCESS - Player gained 1 new card, discarded 1.\n");
call    0 never executed
        -:   52:    else
        -:   53:    {
        3:   54:        printf("ERROR - Player did not gain/discard correct # of cards.\n");
call    0 returned 100%
        3:   55:        printf("expected: %d, actual: %d\n", G.handCount[thisPlayer] + 1,
call    0 returned 100%
        -:   56:                    testG.handCount[thisPlayer]);
        -:   57:    }
        -:   58:
        -:   59:    //test that player gained 2 actions
        3:   60:    if (G.numActions + 2 == testG.numActions)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   61:        printf("SUCCESS - Player gained 2 actions.\n");
call    0 returned 100%
        -:   62:    else
    #####:   63:        printf("ERROR - Player did not gain 2 actions.\n");
call    0 never executed
        -:   64:
        -:   65:
        3:   66:    printf("TEST COMPLETE\n\n");
call    0 returned 100%
        -:   67:
        3:   68:    return 0;
        -:   69:}
File 'dominion.c'
Lines executed:38.23% of 565
Branches executed:32.13% of 417
Taken at least once:28.78% of 417
Calls executed:21.21% of 99
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:35
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2017 returned 100% blocks executed 100%
     2017:    8:int compare(const void* a, const void* b) {
     2017:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
      136:   10:    return 1;
     1881:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      448:   12:    return -1;
     1433:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 35 returned 100% blocks executed 95%
       35:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       35:   44:  SelectStream(1);
call    0 returned 100%
       35:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       35:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       35:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      385:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:  {
     3850:   59:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
     3500:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:    }
        -:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       35:   73:  if (numPlayers == 2)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   74:  {
       18:   75:    state->supplyCount[curse] = 10;
        -:   76:  }
       17:   77:  else if (numPlayers == 3)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   78:  {
        1:   79:    state->supplyCount[curse] = 20;
        -:   80:  }
        -:   81:  else
        -:   82:  {
       16:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       35:   87:  if (numPlayers == 2)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   88:  {
       18:   89:    state->supplyCount[estate] = 8;
       18:   90:    state->supplyCount[duchy] = 8;
       18:   91:    state->supplyCount[province] = 8;
        -:   92:  }
        -:   93:  else
        -:   94:  {
       17:   95:    state->supplyCount[estate] = 12;
       17:   96:    state->supplyCount[duchy] = 12;
       17:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       35:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       35:  102:  state->supplyCount[silver] = 40;
       35:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      735:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:  {
     5775:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:    {
     5425:  110:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      350:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:        {
      140:  115:          if (numPlayers == 2){
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       36:  116:            state->supplyCount[i] = 8;
        -:  117:          }
       34:  118:          else{ state->supplyCount[i] = 12; }
        -:  119:        }
        -:  120:        else
        -:  121:        {
      280:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      350:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     5075:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:    }
        -:  131:
        -:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      138:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:  {
      103:  140:    state->deckCount[i] = 0;
      412:  141:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:    {
      309:  143:      state->deck[i][j] = estate;
      309:  144:      state->deckCount[i]++;
        -:  145:    }
      824:  146:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:    {
      721:  148:      state->deck[i][j] = copper;
      721:  149:      state->deckCount[i]++;
        -:  150:    }
        -:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
      138:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:  {
      103:  156:    if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
        -:  160:  }
        -:  161:
        -:  162:  //draw player hands
      138:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:  {
        -:  165:    //initialize hand size to zero
      103:  166:    state->handCount[i] = 0;
      103:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
        -:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      980:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:  {
      945:  178:    state->embargoTokens[i] = 0;
        -:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
       35:  182:  state->outpostPlayed = 0;
       35:  183:  state->phase = 0;
       35:  184:  state->numActions = 1;
       35:  185:  state->numBuys = 1;
       35:  186:  state->playedCardCount = 0;
       35:  187:  state->whoseTurn = 0;
       35:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      210:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      175:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       35:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       35:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 127 returned 100% blocks executed 94%
      127:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      127:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      127:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      127:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1524:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1270:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1270:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1270:  217:    newDeckPos++;
     4377:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     3107:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1270:  221:    state->deckCount[player]--;
        -:  222:  }
     1397:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1270:  224:    state->deck[player][i] = newDeck[i];
     1270:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      127:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 160 returned 100% blocks executed 100%
      160:  311:int numHandCards(struct gameState *state) {
      160:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 374 returned 100% blocks executed 100%
      374:  346:int whoseTurn(struct gameState *state) {
      374:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 64 returned 100% blocks executed 100%
       64:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       64:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:
        -:  355:  //Discard hand
      384:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      320:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      320:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       64:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
       64:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       44:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       20:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       64:  370:  state->outpostPlayed = 0;
       64:  371:  state->phase = 0;
       64:  372:  state->numActions = 1;
       64:  373:  state->coins = 0;
       64:  374:  state->numBuys = 1;
       64:  375:  state->playedCardCount = 0;
       64:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      384:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      320:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       64:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       64:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 28 returned 100% blocks executed 100%
       28:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       28:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  396:  {
        4:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       24:  401:  j = 0;
      624:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:  {
      600:  404:    if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:    {
       36:  406:      j++;
        -:  407:    }
        -:  408:  }
       24:  409:  if ( j >= 3)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  410:  {
        4:  411:    return 1;
        -:  412:  }
        -:  413:
       20:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:    {
    #####:  469:      players[i] = -9999;
        -:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:    }
        -:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      j = i;
        -:  484:    }
        -:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:    {
    #####:  494:      players[i]++;
        -:  495:    }
        -:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      j = i;
        -:  505:    }
        -:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      players[i] = 1;
        -:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
        -:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 583 returned 100% blocks executed 92%
      583:  525:int drawCard(int player, struct gameState *state)
        -:  526:{
        -:  527:
        -:  528:  int count;
        -:  529:  int deckCounter;
        -:  530:
        -:  531:  ///Deck is empty
      583:  532:  if (state->deckCount[player] <= 0){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  533:
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
      264:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      240:  538:      state->deck[player][i] = state->discard[player][i];
      240:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
       24:  542:    state->deckCount[player] = state->discardCount[player];
       24:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
       24:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:
       24:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
       24:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:
       24:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
       24:  563:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  564:      return -1;
        -:  565:
       24:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       24:  567:    state->deckCount[player]--;
       24:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:    ///DECK HAS CARDS!
        -:  572:  else{
      559:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
      559:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
      559:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      559:  581:    state->deckCount[player]--;
      559:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
      583:  585:  return 0;
        -:  586:}
        -:  587:
function getCost called 224 returned 100% blocks executed 100%
      224:  588:int getCost(int cardNumber)
        -:  589:{
      224:  590:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  591:  {
        -:  592:    case curse:
        8:  593:      return 0;
        -:  594:    case estate:
        8:  595:      return 2;
        -:  596:    case duchy:
        8:  597:      return 5;
        -:  598:    case province:
        8:  599:      return 8;
        -:  600:    case copper:
        8:  601:      return 0;
        -:  602:    case silver:
        8:  603:      return 3;
        -:  604:    case gold:
        8:  605:      return 6;
        -:  606:    case adventurer:
        8:  607:      return 6;
        -:  608:    case council_room:
        8:  609:      return 5;
        -:  610:    case feast:
        8:  611:      return 4;
        -:  612:    case gardens:
        8:  613:      return 4;
        -:  614:    case mine:
        8:  615:      return 5;
        -:  616:    case remodel:
        8:  617:      return 4;
        -:  618:    case smithy:
        8:  619:      return 4;
        -:  620:    case village:
        8:  621:      return 3;
        -:  622:    case baron:
        8:  623:      return 4;
        -:  624:    case great_hall:
        8:  625:      return 3;
        -:  626:    case minion:
        8:  627:      return 5;
        -:  628:    case steward:
        8:  629:      return 3;
        -:  630:    case tribute:
        8:  631:      return 5;
        -:  632:    case ambassador:
        8:  633:      return 3;
        -:  634:    case cutpurse:
        8:  635:      return 4;
        -:  636:    case embargo:
        8:  637:      return 2;
        -:  638:    case outpost:
        8:  639:      return 5;
        -:  640:    case salvager:
        8:  641:      return 4;
        -:  642:    case sea_hag:
        8:  643:      return 4;
        -:  644:    case treasure_map:
        8:  645:      return 4;
        -:  646:  }
        -:  647:
        8:  648:  return -1;
        -:  649:}
        -:  650:
function adventurerCard called 4 returned 100% blocks executed 69%
        4:  651:int adventurerCard( struct gameState * state ){
        -:  652:
        -:  653:  //local vars that I have the feeling need to be adapted
        -:  654:  //somehowe else b/c they get reused for every card...hmm class and constructor time?
        4:  655:  int z = 0;
        4:  656:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  657:  int cardDrawn;
        -:  658:  int temphand[MAX_HAND];
        4:  659:  int drawntreasure = 0;
        -:  660:
       16:  661:  while (drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        8:  662:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  663:      shuffle(currentPlayer, state);
call    0 never executed
        -:  664:    }
        8:  665:    drawCard(currentPlayer, state);
call    0 returned 100%
        8:  666:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        8:  667:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        8:  668:      drawntreasure++;
        -:  669:    else{
    #####:  670:      temphand[z] = cardDrawn;
    #####:  671:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  672:      z++;
        -:  673:    }
        -:  674:
        -:  675:  }
        8:  676:  while (z - 1 > 0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  677:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  678:    z = z - 1;
        -:  679:  }
        4:  680:  return 0;
        -:  681:}
        -:  682:
        -:  683:
function councilRoomCard called 5 returned 100% blocks executed 75%
        5:  684:int councilRoomCard(struct gameState * state, int currentPlayer, int handPos){
        -:  685:
        -:  686:  int i;
        -:  687:
        -:  688:  //+4 Cards
       25:  689:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  690:  {
       20:  691:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  692:  }
        -:  693:
        -:  694:  //+1 Buy
        5:  695:  state->numBuys++;
        -:  696:
        -:  697:  //Each other player draws a card
        5:  698:  for (i; i < state->numPlayers; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  699:  {
    #####:  700:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  701:    {
    #####:  702:      drawCard(i, state);
call    0 never executed
        -:  703:    }
        -:  704:  }
        -:  705:
        -:  706:  //put played card in played card pile
        5:  707:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  708:
        5:  709:  return 0;
        -:  710:
        -:  711:}
        -:  712:
function smithyCard called 5 returned 100% blocks executed 100%
        5:  713:int smithyCard(struct gameState * state, int handPos){
        -:  714:
        5:  715:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  716:  int i;
        -:  717:  //+3 Cards
       25:  718:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  719:  {
       20:  720:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  721:  }
        -:  722:
        -:  723:  //discard card from hand
        5:  724:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  725:
        5:  726:  return 0;
        -:  727:
        -:  728:}
        -:  729:
function villageCard called 5 returned 100% blocks executed 100%
        5:  730:int villageCard(struct gameState* state, int handPos){
        -:  731:
        5:  732:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  733:
        -:  734:  //+2 Actions
        5:  735:  state->numActions = state->numActions + 2;
        -:  736:
        -:  737:  //discard played card from hand
        5:  738:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5:  739:  return 0;
        -:  740:}
        -:  741:
function baronCard called 0 returned 0% blocks executed 0%
    #####:  742:int baronCard(struct gameState *state, int choice1){
    #####:  743:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  744:
    #####:  745:  state->numBuys++;//Increase buys by 1!
    #####:  746:  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
        -:  747:
    #####:  748:    int p = 0;//Iterator for hand!
    #####:  749:    int card_not_discarded = 0;//Flag for discard set!
        -:  750:
    #####:  751:    while (card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  752:      if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  753:        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  754:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  755:        state->discardCount[currentPlayer]++;
    #####:  756:        for (; p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  757:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  758:        }
    #####:  759:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  760:        state->handCount[currentPlayer]--;
    #####:  761:        card_not_discarded = 0;//Exit the loop
        -:  762:      }
    #####:  763:      else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  764:        if (DEBUG) {
        -:  765:          printf("No estate cards in your hand, invalid choice\n");
        -:  766:          printf("Must gain an estate if there are any\n");
        -:  767:        }
    #####:  768:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  770:          state->supplyCount[estate]--;//Decrement estates
    #####:  771:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  772:            isGameOver(state);
call    0 never executed
        -:  773:          }
        -:  774:        }
    #####:  775:        card_not_discarded = 0;//Exit the loop
        -:  776:      }
        -:  777:
        -:  778:      else{
    #####:  779:        p++;//Next card
        -:  780:      }
        -:  781:    }
        -:  782:  }
        -:  783:
        -:  784:  else{
    #####:  785:    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  786:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  787:      state->supplyCount[estate]--;//Decrement Estates
    #####:  788:      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:        isGameOver(state);
call    0 never executed
        -:  790:      }
        -:  791:    }
        -:  792:  }
        -:  793:
        -:  794:
    #####:  795:  return 0;
        -:  796:
        -:  797:}
        -:  798:
function great_hallCard called 0 returned 0% blocks executed 0%
    #####:  799:int great_hallCard(struct gameState *state, int currentPlayer, int handPos){
        -:  800:
        -:  801:  //+1 Card
    #####:  802:  drawCard(currentPlayer, state);
call    0 never executed
        -:  803:
        -:  804:  //+1 Actions
    #####:  805:  state->numActions++;
        -:  806:
        -:  807:  //discard card from hand
    #####:  808:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  809:
    #####:  810:  return 0;
        -:  811:}
        -:  812:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  813:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  814:{
        -:  815:  int i;
        -:  816:  int j;
        -:  817:  int k;
        -:  818:  int x;
        -:  819:  int index;
    #####:  820:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  821:  int nextPlayer = currentPlayer + 1;
        -:  822:
    #####:  823:  int tributeRevealedCards[2] = {-1, -1};
        -:  824:  int temphand[MAX_HAND];// moved above the if statement
    #####:  825:  int drawntreasure=0;
        -:  826:  int cardDrawn;
    #####:  827:  int z = 0;// this is the counter for the temp hand
    #####:  828:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  829:    nextPlayer = 0;
        -:  830:  }
        -:  831:
        -:  832:
        -:  833:  //uses switch to select card and perform actions
    #####:  834:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  835:  {
        -:  836:    case adventurer:
        -:  837:
    #####:  838:      adventurerCard(state);
call    0 never executed
        -:  839:
        -:  840:
        -:  841:    case council_room:
        -:  842:
    #####:  843:      councilRoomCard(state, currentPlayer ,handPos);
call    0 never executed
        -:  844:
        -:  845:
        -:  846:    case feast:
        -:  847:      //gain card with cost up to 5
        -:  848:      //Backup hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  851:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  852:      }
        -:  853:          //Backup hand
        -:  854:
        -:  855:          //Update Coins for Buy
    #####:  856:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  857:          x = 1;//Condition to loop on
    #####:  858:          while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  859:            if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  860:              if (DEBUG)
        -:  861:                printf("None of that card left, sorry!\n");
        -:  862:
        -:  863:              if (DEBUG){
        -:  864:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  865:              }
        -:  866:            }
    #####:  867:            else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  868:              printf("That card is too expensive!\n");
call    0 never executed
        -:  869:
        -:  870:              if (DEBUG){
        -:  871:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  872:              }
        -:  873:            }
        -:  874:            else{
        -:  875:
        -:  876:              if (DEBUG){
        -:  877:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:              }
        -:  879:
    #####:  880:              gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  881:              x = 0;//No more buying cards
        -:  882:
        -:  883:              if (DEBUG){
        -:  884:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  885:              }
        -:  886:
        -:  887:            }
        -:  888:          }
        -:  889:
        -:  890:          //Reset Hand
    #####:  891:          for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  892:            state->hand[currentPlayer][i] = temphand[i];
    #####:  893:            temphand[i] = -1;
        -:  894:          }
        -:  895:          //Reset Hand
        -:  896:
    #####:  897:          return 0;
        -:  898:
        -:  899:    case gardens:
    #####:  900:      return -1;
        -:  901:
        -:  902:    case mine:
    #####:  903:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:
    #####:  905:          if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  906:          {
    #####:  907:            return -1;
        -:  908:          }
        -:  909:
    #####:  910:          if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  911:          {
    #####:  912:            return -1;
        -:  913:          }
        -:  914:
    #####:  915:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  916:          {
    #####:  917:            return -1;
        -:  918:          }
        -:  919:
    #####:  920:          gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  921:
        -:  922:          //discard card from hand
    #####:  923:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  924:
        -:  925:          //discard trashed card
    #####:  926:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  927:          {
    #####:  928:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  929:            {
    #####:  930:              discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  931:              break;
        -:  932:            }
        -:  933:          }
        -:  934:
    #####:  935:          return 0;
        -:  936:
        -:  937:    case remodel:
    #####:  938:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  939:
    #####:  940:          if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  941:          {
    #####:  942:            return -1;
        -:  943:          }
        -:  944:
    #####:  945:          gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  946:
        -:  947:          //discard card from hand
    #####:  948:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  949:
        -:  950:          //discard trashed card
    #####:  951:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  952:          {
    #####:  953:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  954:            {
    #####:  955:              discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  956:              break;
        -:  957:            }
        -:  958:          }
        -:  959:
        -:  960:
    #####:  961:          return 0;
        -:  962:
        -:  963:    case smithy:
    #####:  964:      smithyCard(state, handPos);
call    0 never executed
        -:  965:
        -:  966:    case village:
    #####:  967:      villageCard(state, handPos);
call    0 never executed
        -:  968:
        -:  969:    case baron:
    #####:  970:      baronCard(state, choice1);
call    0 never executed
        -:  971:
        -:  972:    case great_hall:
    #####:  973:      great_hallCard(state, currentPlayer, handPos);
call    0 never executed
        -:  974:
        -:  975:    case minion:
        -:  976:      //+1 action
    #####:  977:      state->numActions++;
        -:  978:
        -:  979:          //discard card from hand
    #####:  980:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  981:
    #####:  982:          if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  983:          {
    #####:  984:            state->coins = state->coins + 2;
        -:  985:          }
        -:  986:
    #####:  987:          else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  988:          {
        -:  989:            //discard hand
    #####:  990:            while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  991:            {
    #####:  992:              discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  993:            }
        -:  994:
        -:  995:            //draw 4
    #####:  996:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  997:            {
    #####:  998:              drawCard(currentPlayer, state);
call    0 never executed
        -:  999:            }
        -: 1000:
        -: 1001:            //other players discard hand and redraw if hand size > 4
    #####: 1002:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:            {
    #####: 1004:              if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:              {
    #####: 1006:                if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1007:                {
        -: 1008:                  //discard hand
    #####: 1009:                  while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1010:                  {
    #####: 1011:                    discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1012:                  }
        -: 1013:
        -: 1014:                  //draw 4
    #####: 1015:                  for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1016:                  {
    #####: 1017:                    drawCard(i, state);
call    0 never executed
        -: 1018:                  }
        -: 1019:                }
        -: 1020:              }
        -: 1021:            }
        -: 1022:
        -: 1023:          }
    #####: 1024:          return 0;
        -: 1025:
        -: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:      {
        -: 1029:        //+2 cards
    #####: 1030:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:      }
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:      {
        -: 1035:        //+2 coins
    #####: 1036:        state->coins = state->coins + 2;
        -: 1037:      }
        -: 1038:      else
        -: 1039:      {
        -: 1040:        //trash 2 cards in hand
    #####: 1041:        discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:      }
        -: 1044:
        -: 1045:          //discard card from hand
    #####: 1046:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:          return 0;
        -: 1048:
        -: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:        if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:          state->deckCount[nextPlayer]--;
        -: 1054:        }
    #####: 1055:        else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:          state->discardCount[nextPlayer]--;
        -: 1058:        }
        -: 1059:        else{
        -: 1060:          //No Card to Reveal
        -: 1061:          if (DEBUG){
        -: 1062:            printf("No cards to reveal\n");
        -: 1063:          }
        -: 1064:        }
        -: 1065:      }
        -: 1066:
        -: 1067:      else{
    #####: 1068:        if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:            state->deckCount[nextPlayer]++;
    #####: 1072:            state->discard[nextPlayer][i] = -1;
    #####: 1073:            state->discardCount[nextPlayer]--;
        -: 1074:          }
        -: 1075:
    #####: 1076:          shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:        }
    #####: 1078:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:        state->deckCount[nextPlayer]--;
    #####: 1081:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:        state->deckCount[nextPlayer]--;
        -: 1084:      }
        -: 1085:
    #####: 1086:          if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1087:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:            state->playedCardCount++;
    #####: 1089:            tributeRevealedCards[1] = -1;
        -: 1090:          }
        -: 1091:
    #####: 1092:          for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:              state->coins += 2;
        -: 1095:            }
        -: 1096:
    #####: 1097:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:            }
        -: 1101:            else{//Action Card
    #####: 1102:              state->numActions = state->numActions + 2;
        -: 1103:            }
        -: 1104:          }
        -: 1105:
    #####: 1106:          return 0;
        -: 1107:
        -: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:          if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:          {
    #####: 1113:            return -1;
        -: 1114:          }
        -: 1115:
    #####: 1116:          if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            return -1;
        -: 1119:          }
        -: 1120:
    #####: 1121:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:          {
    #####: 1123:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:            {
    #####: 1125:              j++;
        -: 1126:            }
        -: 1127:          }
    #####: 1128:          if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:          {
    #####: 1130:            return -1;
        -: 1131:          }
        -: 1132:
        -: 1133:          if (DEBUG)
        -: 1134:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:          //increase supply count for choosen card by amount being discarded
    #####: 1137:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:
        -: 1139:          //each other player gains a copy of revealed card
    #####: 1140:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:          {
    #####: 1142:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:            {
    #####: 1144:              gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:            }
        -: 1146:          }
        -: 1147:
        -: 1148:          //discard played card from hand
    #####: 1149:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1150:
        -: 1151:          //trash copies of cards returned to supply
    #####: 1152:          for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:          {
    #####: 1154:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:            {
    #####: 1156:              if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:              {
    #####: 1158:                discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:                break;
        -: 1160:              }
        -: 1161:            }
        -: 1162:          }
        -: 1163:
    #####: 1164:          return 0;
        -: 1165:
        -: 1166:    case cutpurse:
        -: 1167:
    #####: 1168:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1169:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1170:          {
    #####: 1171:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1172:            {
    #####: 1173:              for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1174:              {
    #####: 1175:                if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1176:                {
    #####: 1177:                  discardCard(j, i, state, 0);
call    0 never executed
    #####: 1178:                  break;
        -: 1179:                }
    #####: 1180:                if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1181:                {
    #####: 1182:                  for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1183:                  {
        -: 1184:                    if (DEBUG)
        -: 1185:                      printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1186:                  }
    #####: 1187:                  break;
        -: 1188:                }
        -: 1189:              }
        -: 1190:
        -: 1191:            }
        -: 1192:
        -: 1193:          }
        -: 1194:
        -: 1195:          //discard played card from hand
    #####: 1196:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1197:
    #####: 1198:          return 0;
        -: 1199:
        -: 1200:
        -: 1201:    case embargo:
        -: 1202:      //+2 Coins
    #####: 1203:      state->coins = state->coins + 2;
        -: 1204:
        -: 1205:          //see if selected pile is in play
    #####: 1206:          if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1207:          {
    #####: 1208:            return -1;
        -: 1209:          }
        -: 1210:
        -: 1211:          //add embargo token to selected supply pile
    #####: 1212:          state->embargoTokens[choice1]++;
        -: 1213:
        -: 1214:          //trash card
    #####: 1215:          discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1216:          return 0;
        -: 1217:
        -: 1218:    case outpost:
        -: 1219:      //set outpost flag
    #####: 1220:      state->outpostPlayed++;
        -: 1221:
        -: 1222:          //discard card
    #####: 1223:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1224:          return 0;
        -: 1225:
        -: 1226:    case salvager:
        -: 1227:      //+1 buy
    #####: 1228:      state->numBuys++;
        -: 1229:
    #####: 1230:          if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1231:          {
        -: 1232:            //gain coins equal to trashed card
    #####: 1233:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1234:            //trash card
    #####: 1235:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1236:          }
        -: 1237:
        -: 1238:          //discard card
    #####: 1239:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1240:          return 0;
        -: 1241:
        -: 1242:    case sea_hag:
    #####: 1243:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1244:        if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1245:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1246:          state->discardCount[i]++;
    #####: 1247:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1248:        }
        -: 1249:      }
    #####: 1250:          return 0;
        -: 1251:
        -: 1252:    case treasure_map:
        -: 1253:      //search hand for another treasure_map
    #####: 1254:      index = -1;
    #####: 1255:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1256:          {
    #####: 1257:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1258:            {
    #####: 1259:              index = i;
    #####: 1260:              break;
        -: 1261:            }
        -: 1262:          }
    #####: 1263:          if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1264:          {
        -: 1265:            //trash both treasure cards
    #####: 1266:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1267:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1268:
        -: 1269:            //gain 4 Gold cards
    #####: 1270:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:            {
    #####: 1272:              gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1273:            }
        -: 1274:
        -: 1275:            //return success
    #####: 1276:            return 1;
        -: 1277:          }
        -: 1278:
        -: 1279:          //no second treasure_map found in hand
    #####: 1280:          return -1;
        -: 1281:  }
        -: 1282:
    #####: 1283:  return -1;
        -: 1284:}
        -: 1285:
function discardCard called 55 returned 100% blocks executed 89%
       55: 1286:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1287:{
        -: 1288:
        -: 1289:  //if card is not trashed, added to Played pile
       55: 1290:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1291:  {
        -: 1292:    //add card to played pile
       55: 1293:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       55: 1294:    state->playedCardCount++;
        -: 1295:  }
        -: 1296:
        -: 1297:  //set played card to -1
       55: 1298:  state->hand[currentPlayer][handPos] = -1;
        -: 1299:
        -: 1300:  //remove card from player's hand
       55: 1301:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 1302:  {
        -: 1303:    //reduce number of cards in hand
        8: 1304:    state->handCount[currentPlayer]--;
        -: 1305:  }
       47: 1306:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:  {
        -: 1308:    //reduce number of cards in hand
    #####: 1309:    state->handCount[currentPlayer]--;
        -: 1310:  }
        -: 1311:  else
        -: 1312:  {
        -: 1313:    //replace discarded card with last card in hand
       47: 1314:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1315:    //set last card to -1
       47: 1316:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1317:    //reduce number of cards in hand
       47: 1318:    state->handCount[currentPlayer]--;
        -: 1319:  }
        -: 1320:
       55: 1321:  return 0;
        -: 1322:}
        -: 1323:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1324:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1325:{
        -: 1326:  //Note: supplyPos is enum of choosen card
        -: 1327:
        -: 1328:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1329:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1330:  {
    #####: 1331:    return -1;
        -: 1332:  }
        -: 1333:
        -: 1334:  //added card for [whoseTurn] current player:
        -: 1335:  // toFlag = 0 : add to discard
        -: 1336:  // toFlag = 1 : add to deck
        -: 1337:  // toFlag = 2 : add to hand
        -: 1338:
    #####: 1339:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1340:  {
    #####: 1341:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1342:    state->deckCount[player]++;
        -: 1343:  }
    #####: 1344:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1345:  {
    #####: 1346:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1347:    state->handCount[player]++;
        -: 1348:  }
        -: 1349:  else
        -: 1350:  {
    #####: 1351:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1352:    state->discardCount[player]++;
        -: 1353:  }
        -: 1354:
        -: 1355:  //decrease number in supply pile
    #####: 1356:  state->supplyCount[supplyPos]--;
        -: 1357:
    #####: 1358:  return 0;
        -: 1359:}
        -: 1360:
function updateCoins called 99 returned 100% blocks executed 82%
       99: 1361:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1362:{
        -: 1363:  int i;
        -: 1364:
        -: 1365:  //reset coin count
       99: 1366:  state->coins = 0;
        -: 1367:
        -: 1368:  //add coins for each Treasure card in player's hand
      594: 1369:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1370:  {
      495: 1371:    if (state->hand[player][i] == copper)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1372:    {
      364: 1373:      state->coins += 1;
        -: 1374:    }
      131: 1375:    else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1376:    {
    #####: 1377:      state->coins += 2;
        -: 1378:    }
      131: 1379:    else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1380:    {
    #####: 1381:      state->coins += 3;
        -: 1382:    }
        -: 1383:  }
        -: 1384:
        -: 1385:  //add bonus
       99: 1386:  state->coins += bonus;
        -: 1387:
       99: 1388:  return 0;
        -: 1389:}
        -: 1390:
        -: 1391:
        -: 1392://end of dominion.c
        -: 1393:
