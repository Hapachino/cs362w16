        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:84
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    41944:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    41944:   11:  if (*(int*)a < *(int*)b)
    14980:   12:    return -1;
    26964:   13:  return 0;
    41944:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1501:   44:  SelectStream(1);
     1501:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     3002:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1501:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    32962:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   329578:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   284635:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        3:   63:	      return -1;
        -:   64:	    }
   149806:   65:        }
    14980:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1498:   73:  if (numPlayers == 2)
        -:   74:    {
     1498:   75:      state->supplyCount[curse] = 10;
     1498:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1498:   87:  if (numPlayers == 2)
        -:   88:    {
     1498:   89:      state->supplyCount[estate] = 8;
     1498:   90:      state->supplyCount[duchy] = 8;
     1498:   91:      state->supplyCount[province] = 8;
     1498:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1498:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1498:  102:  state->supplyCount[silver] = 40;
     1498:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    62916:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   494340:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   232190:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    28530:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2860:  115:		  if (numPlayers == 2){ 
     2860:  116:		    state->supplyCount[i] = 8; 
     2860:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     2860:  119:		}
        -:  120:	      else
        -:  121:		{
    12120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    14980:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   217210:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   217210:  130:	}
        -:  131:
    29960:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     8988:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     2996:  140:      state->deckCount[i] = 0;
    23968:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     8988:  143:	  state->deck[i][j] = estate;
     8988:  144:	  state->deckCount[i]++;
     8988:  145:	}
    47936:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    20972:  148:	  state->deck[i][j] = copper;
    20972:  149:	  state->deckCount[i]++;		
    20972:  150:	}
     2996:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     8988:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     2996:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     2996:  160:    }
        -:  161:
        -:  162:  //draw player hands
     8988:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2996:  166:      state->handCount[i] = 0;
     2996:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     2996:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    83888:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    40446:  178:      state->embargoTokens[i] = 0;
    40446:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1498:  182:  state->outpostPlayed = 0;
     1498:  183:  state->phase = 0;
     1498:  184:  state->numActions = 1;
     1498:  185:  state->numBuys = 1;
     1498:  186:  state->playedCardCount = 0;
     1498:  187:  state->whoseTurn = 0;
     1498:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    17976:  192:  for (it = 0; it < 5; it++){
     7490:  193:    drawCard(state->whoseTurn, state);
     7490:  194:  }
        -:  195:
     1498:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1498:  198:  return 0;
     1501:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2996:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2996:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     2996:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    65912:  214:  while (state->deckCount[player] > 0) {
    29960:  215:    card = floor(Random() * state->deckCount[player]);
    29960:  216:    newDeck[newDeckPos] = state->deck[player][card];
    29960:  217:    newDeckPos++;
   209670:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    74875:  219:      state->deck[player][i] = state->deck[player][i+1];
    74875:  220:    }
    29960:  221:    state->deckCount[player]--;
        -:  222:  }
    65912:  223:  for (i = 0; i < newDeckPos; i++) {
    29960:  224:    state->deck[player][i] = newDeck[i];
    29960:  225:    state->deckCount[player]++;
    29960:  226:  }
        -:  227:
     2996:  228:  return 0;
     2996:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       82:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     7681:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
     7681:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     7681:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     7681:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7681:  576:    state->deckCount[player]--;
     7681:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     7681:  580:  return 0;
     7681:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       82:  653:  int currentPlayer = whoseTurn(state);
       82:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       82:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       82:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       82:  660:  int z = 0;// this is the counter for the temp hand
       82:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       82:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
      170:  670:      while(drawntreasure<2){
       63:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  672:	  shuffle(currentPlayer, state);
    #####:  673:	}
       63:  674:	drawCard(currentPlayer, state);
       63:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      101:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       44:  677:	  drawntreasure++;
        -:  678:	else{
       19:  679:	  temphand[z]=cardDrawn;
       19:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       19:  681:	  z++;
        -:  682:	}
        -:  683:      }
       82:  684:      while(z-1>=0){
       19:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       19:  686:	z=z-1;
        -:  687:      }
       22:  688:      discardCard(handPos, currentPlayer, state, 0);
       22:  689:      return 0;
        -:  690:			
        -:  691:    case council_room:
        -:  692:      //+4 Cards
       10:  693:      for (i = 0; i < 4; i++)
        -:  694:	{
        4:  695:	  drawCard(currentPlayer, state);
        4:  696:	}
        -:  697:			
        -:  698:      //+1 Buy
        1:  699:      state->numBuys++;
        -:  700:			
        -:  701:      //Each other player draws a card
        6:  702:      for (i = 0; i < state->numPlayers; i++)
        -:  703:	{
        2:  704:	  if ( i != currentPlayer )
        -:  705:	    {
        1:  706:	      drawCard(i, state);
        1:  707:	    }
        2:  708:	}
        -:  709:			
        -:  710:      //put played card in played card pile
        1:  711:      discardCard(handPos, currentPlayer, state, 0);
        -:  712:			
        1:  713:      return 0;
        -:  714:			
        -:  715:    case feast:
        -:  716:      //gain card with cost up to 5
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  719:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  721:      }
        -:  722:      //Backup hand
        -:  723:
        -:  724:      //Update Coins for Buy
    #####:  725:      updateCoins(currentPlayer, state, 5);
    #####:  726:      x = 1;//Condition to loop on
    #####:  727:      while( x == 1) {//Buy one card
    #####:  728:	if (supplyCount(choice1, state) <= 0){
        -:  729:	  if (DEBUG)
        -:  730:	    printf("None of that card left, sorry!\n");
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  734:	  }
    #####:  735:	}
    #####:  736:	else if (state->coins < getCost(choice1)){
    #####:  737:	  printf("That card is too expensive!\n");
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  741:	  }
    #####:  742:	}
        -:  743:	else{
        -:  744:
        -:  745:	  if (DEBUG){
        -:  746:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:	  }
        -:  748:
    #####:  749:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  750:	  x = 0;//No more buying cards
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
        -:  756:	}
        -:  757:      }     
        -:  758:
        -:  759:      //Reset Hand
    #####:  760:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  761:	state->hand[currentPlayer][i] = temphand[i];
    #####:  762:	temphand[i] = -1;
    #####:  763:      }
        -:  764:      //Reset Hand
        -:  765:      			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case gardens:
    #####:  769:      return -1;
        -:  770:			
        -:  771:    case mine:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:		
    #####:  779:      if (choice2 > treasure_map || choice2 < curse)
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:
    #####:  784:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      gainCard(choice2, state, 2, currentPlayer);
        -:  790:
        -:  791:      //discard card from hand
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:
        -:  794:      //discard trashed card
    #####:  795:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  796:	{
    #####:  797:	  if (state->hand[currentPlayer][i] == j)
        -:  798:	    {
    #####:  799:	      discardCard(i, currentPlayer, state, 0);			
    #####:  800:	      break;
        -:  801:	    }
    #####:  802:	}
        -:  803:			
    #####:  804:      return 0;
        -:  805:			
        -:  806:    case remodel:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:
    #####:  814:      gainCard(choice2, state, 0, currentPlayer);
        -:  815:
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:
        -:  819:      //discard trashed card
    #####:  820:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  821:	{
    #####:  822:	  if (state->hand[currentPlayer][i] == j)
        -:  823:	    {
    #####:  824:	      discardCard(i, currentPlayer, state, 0);			
    #####:  825:	      break;
        -:  826:	    }
    #####:  827:	}
        -:  828:
        -:  829:
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case smithy:
        -:  833:      //+3 Cards
      304:  834:      for (i = 0; i < 3; i++)
        -:  835:	{
      114:  836:	  drawCard(currentPlayer, state);
      114:  837:	}
        -:  838:			
        -:  839:      //discard card from hand
       38:  840:      discardCard(handPos, currentPlayer, state, 0);
       38:  841:      return 0;
        -:  842:		
        -:  843:    case village:
        -:  844:      //+1 Card
        5:  845:      drawCard(currentPlayer, state);
        -:  846:			
        -:  847:      //+2 Actions
        5:  848:      state->numActions = state->numActions + 2;
        -:  849:			
        -:  850:      //discard played card from hand
        5:  851:      discardCard(handPos, currentPlayer, state, 0);
        5:  852:      return 0;
        -:  853:		
        -:  854:    case baron:
    #####:  855:      state->numBuys++;//Increase buys by 1!
    #####:  856:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  857:	int p = 0;//Iterator for hand!
    #####:  858:	int card_not_discarded = 1;//Flag for discard set!
    #####:  859:	while(card_not_discarded){
    #####:  860:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  861:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  862:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  863:	    state->discardCount[currentPlayer]++;
    #####:  864:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  865:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  866:	    }
    #####:  867:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  868:	    state->handCount[currentPlayer]--;
    #####:  869:	    card_not_discarded = 0;//Exit the loop
    #####:  870:	  }
    #####:  871:	  else if (p > state->handCount[currentPlayer]){
        -:  872:	    if(DEBUG) {
        -:  873:	      printf("No estate cards in your hand, invalid choice\n");
        -:  874:	      printf("Must gain an estate if there are any\n");
        -:  875:	    }
    #####:  876:	    if (supplyCount(estate, state) > 0){
    #####:  877:	      gainCard(estate, state, 0, currentPlayer);
    #####:  878:	      state->supplyCount[estate]--;//Decrement estates
    #####:  879:	      if (supplyCount(estate, state) == 0){
    #####:  880:		isGameOver(state);
    #####:  881:	      }
    #####:  882:	    }
    #####:  883:	    card_not_discarded = 0;//Exit the loop
    #####:  884:	  }
        -:  885:			    
        -:  886:	  else{
    #####:  887:	    p++;//Next card
        -:  888:	  }
        -:  889:	}
    #####:  890:      }
        -:  891:			    
        -:  892:      else{
    #####:  893:	if (supplyCount(estate, state) > 0){
    #####:  894:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  895:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  896:	  if (supplyCount(estate, state) == 0){
    #####:  897:	    isGameOver(state);
    #####:  898:	  }
    #####:  899:	}
        -:  900:      }
        -:  901:	    
        -:  902:      
    #####:  903:      return 0;
        -:  904:		
        -:  905:    case great_hall:
        -:  906:      //+1 Card
    #####:  907:      drawCard(currentPlayer, state);
        -:  908:			
        -:  909:      //+1 Actions
    #####:  910:      state->numActions++;
        -:  911:			
        -:  912:      //discard card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
    #####:  914:      return 0;
        -:  915:		
        -:  916:    case minion:
        -:  917:      //+1 action
    #####:  918:      state->numActions++;
        -:  919:			
        -:  920:      //discard card from hand
    #####:  921:      discardCard(handPos, currentPlayer, state, 0);
        -:  922:			
    #####:  923:      if (choice1)		//+2 coins
        -:  924:	{
    #####:  925:	  state->coins = state->coins + 2;
    #####:  926:	}
        -:  927:			
    #####:  928:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  929:	{
        -:  930:	  //discard hand
    #####:  931:	  while(numHandCards(state) > 0)
        -:  932:	    {
    #####:  933:	      discardCard(handPos, currentPlayer, state, 0);
        -:  934:	    }
        -:  935:				
        -:  936:	  //draw 4
    #####:  937:	  for (i = 0; i < 4; i++)
        -:  938:	    {
    #####:  939:	      drawCard(currentPlayer, state);
    #####:  940:	    }
        -:  941:				
        -:  942:	  //other players discard hand and redraw if hand size > 4
    #####:  943:	  for (i = 0; i < state->numPlayers; i++)
        -:  944:	    {
    #####:  945:	      if (i != currentPlayer)
        -:  946:		{
    #####:  947:		  if ( state->handCount[i] > 4 )
        -:  948:		    {
        -:  949:		      //discard hand
    #####:  950:		      while( state->handCount[i] > 0 )
        -:  951:			{
    #####:  952:			  discardCard(handPos, i, state, 0);
        -:  953:			}
        -:  954:							
        -:  955:		      //draw 4
    #####:  956:		      for (j = 0; j < 4; j++)
        -:  957:			{
    #####:  958:			  drawCard(i, state);
    #####:  959:			}
    #####:  960:		    }
    #####:  961:		}
    #####:  962:	    }
        -:  963:				
    #####:  964:	}
    #####:  965:      return 0;
        -:  966:		
        -:  967:    case steward:
       16:  968:      if (choice1 == 1)
        -:  969:	{
        -:  970:	  //+2 cards
        2:  971:	  drawCard(currentPlayer, state);
        2:  972:	  drawCard(currentPlayer, state);
        2:  973:	}
       14:  974:      else if (choice1 == 2)
        -:  975:	{
        -:  976:	  //+2 coins
        2:  977:	  state->coins = state->coins + 2;
        2:  978:	}
        -:  979:      else
        -:  980:	{
        -:  981:	  //trash 2 cards in hand
       12:  982:	  discardCard(choice2, currentPlayer, state, 1);
       12:  983:	  discardCard(choice3, currentPlayer, state, 1);
        -:  984:	}
        -:  985:			
        -:  986:      //discard card from hand
       16:  987:      discardCard(handPos, currentPlayer, state, 0);
       16:  988:      return 0;
        -:  989:		
        -:  990:    case tribute:
    #####:  991:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  992:	if (state->deckCount[nextPlayer] > 0){
    #####:  993:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  994:	  state->deckCount[nextPlayer]--;
    #####:  995:	}
    #####:  996:	else if (state->discardCount[nextPlayer] > 0){
    #####:  997:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  998:	  state->discardCount[nextPlayer]--;
    #####:  999:	}
        -: 1000:	else{
        -: 1001:	  //No Card to Reveal
        -: 1002:	  if (DEBUG){
        -: 1003:	    printf("No cards to reveal\n");
        -: 1004:	  }
        -: 1005:	}
    #####: 1006:      }
        -: 1007:	    
        -: 1008:      else{
    #####: 1009:	if (state->deckCount[nextPlayer] == 0){
    #####: 1010:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1011:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1012:	    state->deckCount[nextPlayer]++;
    #####: 1013:	    state->discard[nextPlayer][i] = -1;
    #####: 1014:	    state->discardCount[nextPlayer]--;
    #####: 1015:	  }
        -: 1016:			    
    #####: 1017:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1018:	} 
    #####: 1019:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1021:	state->deckCount[nextPlayer]--;
    #####: 1022:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1024:	state->deckCount[nextPlayer]--;
        -: 1025:      }    
        -: 1026:		       
    #####: 1027:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1028:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1029:	state->playedCardCount++;
    #####: 1030:	tributeRevealedCards[1] = -1;
    #####: 1031:      }
        -: 1032:
    #####: 1033:      for (i = 0; i <= 2; i ++){
    #####: 1034:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1035:	  state->coins += 2;
    #####: 1036:	}
        -: 1037:		    
    #####: 1038:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1039:	  drawCard(currentPlayer, state);
    #####: 1040:	  drawCard(currentPlayer, state);
    #####: 1041:	}
        -: 1042:	else{//Action Card
    #####: 1043:	  state->numActions = state->numActions + 2;
        -: 1044:	}
    #####: 1045:      }
        -: 1046:	    
    #####: 1047:      return 0;
        -: 1048:		
        -: 1049:    case ambassador:
    #####: 1050:      j = 0;		//used to check if player has enough cards to discard
        -: 1051:
    #####: 1052:      if (choice2 > 2 || choice2 < 0)
        -: 1053:	{
    #####: 1054:	  return -1;				
        -: 1055:	}
        -: 1056:
    #####: 1057:      if (choice1 == handPos)
        -: 1058:	{
    #####: 1059:	  return -1;
        -: 1060:	}
        -: 1061:
    #####: 1062:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1063:	{
    #####: 1064:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1065:	    {
    #####: 1066:	      j++;
    #####: 1067:	    }
    #####: 1068:	}
    #####: 1069:      if (j < choice2)
        -: 1070:	{
    #####: 1071:	  return -1;				
        -: 1072:	}
        -: 1073:
        -: 1074:      if (DEBUG) 
        -: 1075:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1076:
        -: 1077:      //increase supply count for choosen card by amount being discarded
    #####: 1078:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1079:			
        -: 1080:      //each other player gains a copy of revealed card
    #####: 1081:      for (i = 0; i < state->numPlayers; i++)
        -: 1082:	{
    #####: 1083:	  if (i != currentPlayer)
        -: 1084:	    {
    #####: 1085:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1086:	    }
    #####: 1087:	}
        -: 1088:
        -: 1089:      //discard played card from hand
    #####: 1090:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1091:
        -: 1092:      //trash copies of cards returned to supply
    #####: 1093:      for (j = 0; j < choice2; j++)
        -: 1094:	{
    #####: 1095:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	    {
    #####: 1097:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1098:		{
    #####: 1099:		  discardCard(i, currentPlayer, state, 1);
    #####: 1100:		  break;
        -: 1101:		}
    #####: 1102:	    }
    #####: 1103:	}			
        -: 1104:
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case cutpurse:
        -: 1108:
    #####: 1109:      updateCoins(currentPlayer, state, 2);
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
        -: 1113:	    {
    #####: 1114:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1115:		{
    #####: 1116:		  if (state->hand[i][j] == copper)
        -: 1117:		    {
    #####: 1118:		      discardCard(j, i, state, 0);
    #####: 1119:		      break;
        -: 1120:		    }
    #####: 1121:		  if (j == state->handCount[i])
        -: 1122:		    {
    #####: 1123:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1124:			{
        -: 1125:			  if (DEBUG)
        -: 1126:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1127:			}	
    #####: 1128:		      break;
        -: 1129:		    }		
    #####: 1130:		}
        -: 1131:					
    #####: 1132:	    }
        -: 1133:				
    #####: 1134:	}				
        -: 1135:
        -: 1136:      //discard played card from hand
    #####: 1137:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:
        -: 1141:		
        -: 1142:    case embargo: 
        -: 1143:      //+2 Coins
    #####: 1144:      state->coins = state->coins + 2;
        -: 1145:			
        -: 1146:      //see if selected pile is in play
    #####: 1147:      if ( state->supplyCount[choice1] == -1 )
        -: 1148:	{
    #####: 1149:	  return -1;
        -: 1150:	}
        -: 1151:			
        -: 1152:      //add embargo token to selected supply pile
    #####: 1153:      state->embargoTokens[choice1]++;
        -: 1154:			
        -: 1155:      //trash card
    #####: 1156:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1157:      return 0;
        -: 1158:		
        -: 1159:    case outpost:
        -: 1160:      //set outpost flag
    #####: 1161:      state->outpostPlayed++;
        -: 1162:			
        -: 1163:      //discard card
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case salvager:
        -: 1168:      //+1 buy
    #####: 1169:      state->numBuys++;
        -: 1170:			
    #####: 1171:      if (choice1)
        -: 1172:	{
        -: 1173:	  //gain coins equal to trashed card
    #####: 1174:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1175:	  //trash card
    #####: 1176:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1177:	}
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case sea_hag:
    #####: 1184:      for (i = 0; i < state->numPlayers; i++){
    #####: 1185:	if (i != currentPlayer){
    #####: 1186:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1187:	  state->discardCount[i]++;
    #####: 1188:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1189:	}
    #####: 1190:      }
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case treasure_map:
        -: 1194:      //search hand for another treasure_map
    #####: 1195:      index = -1;
    #####: 1196:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1197:	{
    #####: 1198:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1199:	    {
    #####: 1200:	      index = i;
    #####: 1201:	      break;
        -: 1202:	    }
    #####: 1203:	}
    #####: 1204:      if (index > -1)
        -: 1205:	{
        -: 1206:	  //trash both treasure cards
    #####: 1207:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1208:	  discardCard(index, currentPlayer, state, 1);
        -: 1209:
        -: 1210:	  //gain 4 Gold cards
    #####: 1211:	  for (i = 0; i < 4; i++)
        -: 1212:	    {
    #####: 1213:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1214:	    }
        -: 1215:				
        -: 1216:	  //return success
    #####: 1217:	  return 1;
        -: 1218:	}
        -: 1219:			
        -: 1220:      //no second treasure_map found in hand
    #####: 1221:      return -1;
        -: 1222:    }
        -: 1223:	
    #####: 1224:  return -1;
       82: 1225:}
        -: 1226:
        -: 1227:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1228:{
        -: 1229:	
        -: 1230:  //if card is not trashed, added to Played pile 
      104: 1231:  if (trashFlag < 1)
        -: 1232:    {
        -: 1233:      //add card to played pile
       80: 1234:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       80: 1235:      state->playedCardCount++;
       80: 1236:    }
        -: 1237:	
        -: 1238:  //set played card to -1
      104: 1239:  state->hand[currentPlayer][handPos] = -1;
        -: 1240:	
        -: 1241:  //remove card from player's hand
      104: 1242:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1243:    {
        -: 1244:      //reduce number of cards in hand
        8: 1245:      state->handCount[currentPlayer]--;
        8: 1246:    }
       96: 1247:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1248:    {
        -: 1249:      //reduce number of cards in hand
    #####: 1250:      state->handCount[currentPlayer]--;
    #####: 1251:    }
        -: 1252:  else 	
        -: 1253:    {
        -: 1254:      //replace discarded card with last card in hand
       96: 1255:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1256:      //set last card to -1
       96: 1257:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1258:      //reduce number of cards in hand
       96: 1259:      state->handCount[currentPlayer]--;
        -: 1260:    }
        -: 1261:	
      104: 1262:  return 0;
        -: 1263:}
        -: 1264:
        -: 1265:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1266:{
        -: 1267:  //Note: supplyPos is enum of choosen card
        -: 1268:	
        -: 1269:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1270:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1271:    {
    #####: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
        -: 1275:  //added card for [whoseTurn] current player:
        -: 1276:  // toFlag = 0 : add to discard
        -: 1277:  // toFlag = 1 : add to deck
        -: 1278:  // toFlag = 2 : add to hand
        -: 1279:
    #####: 1280:  if (toFlag == 1)
        -: 1281:    {
    #####: 1282:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1283:      state->deckCount[player]++;
    #####: 1284:    }
    #####: 1285:  else if (toFlag == 2)
        -: 1286:    {
    #####: 1287:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1288:      state->handCount[player]++;
    #####: 1289:    }
        -: 1290:  else
        -: 1291:    {
    #####: 1292:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1293:      state->discardCount[player]++;
        -: 1294:    }
        -: 1295:	
        -: 1296:  //decrease number in supply pile
    #####: 1297:  state->supplyCount[supplyPos]--;
        -: 1298:	 
    #####: 1299:  return 0;
    #####: 1300:}
        -: 1301:
        -: 1302:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1303:{
        -: 1304:  int i;
        -: 1305:	
        -: 1306:  //reset coin count
     5788: 1307:  state->coins = 0;
        -: 1308:
        -: 1309:  //add coins for each Treasure card in player's hand
    52296: 1310:  for (i = 0; i < state->handCount[player]; i++)
        -: 1311:    {
    20360: 1312:      if (state->hand[player][i] == copper)
        -: 1313:	{
    10282: 1314:	  state->coins += 1;
    10282: 1315:	}
    10078: 1316:      else if (state->hand[player][i] == silver)
        -: 1317:	{
     4290: 1318:	  state->coins += 2;
     4290: 1319:	}
     5788: 1320:      else if (state->hand[player][i] == gold)
        -: 1321:	{
     4290: 1322:	  state->coins += 3;
     4290: 1323:	}	
    20360: 1324:    }	
        -: 1325:
        -: 1326:  //add bonus
     5788: 1327:  state->coins += bonus;
        -: 1328:
     5788: 1329:  return 0;
        -: 1330:}
        -: 1331:
        -: 1332:
        -: 1333://end of dominion.c
        -: 1334:
