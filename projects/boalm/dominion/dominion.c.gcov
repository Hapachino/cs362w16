        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:99
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    14980:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    14980:   11:  if (*(int*)a < *(int*)b)
     5350:   12:    return -1;
     9630:   13:  return 0;
    14980:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      535:   44:  SelectStream(1);
      535:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1070:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      535:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11770:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   117700:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   101650:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    53500:   65:        }
     5350:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      535:   73:  if (numPlayers == 2)
        -:   74:    {
      535:   75:      state->supplyCount[curse] = 10;
      535:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      535:   87:  if (numPlayers == 2)
        -:   88:    {
      535:   89:      state->supplyCount[estate] = 8;
      535:   90:      state->supplyCount[duchy] = 8;
      535:   91:      state->supplyCount[province] = 8;
      535:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      535:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      535:  102:  state->supplyCount[silver] = 40;
      535:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    22470:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   176550:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    82925:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10217:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      966:  115:		  if (numPlayers == 2){ 
      966:  116:		    state->supplyCount[i] = 8; 
      966:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
      966:  119:		}
        -:  120:	      else
        -:  121:		{
     4384:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     5350:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    77575:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    77575:  130:	}
        -:  131:
    10700:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3210:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1070:  140:      state->deckCount[i] = 0;
     8560:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3210:  143:	  state->deck[i][j] = estate;
     3210:  144:	  state->deckCount[i]++;
     3210:  145:	}
    17120:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     7490:  148:	  state->deck[i][j] = copper;
     7490:  149:	  state->deckCount[i]++;		
     7490:  150:	}
     1070:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3210:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1070:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     1070:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3210:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1070:  166:      state->handCount[i] = 0;
     1070:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     1070:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    29960:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    14445:  178:      state->embargoTokens[i] = 0;
    14445:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      535:  182:  state->outpostPlayed = 0;
      535:  183:  state->phase = 0;
      535:  184:  state->numActions = 1;
      535:  185:  state->numBuys = 1;
      535:  186:  state->playedCardCount = 0;
      535:  187:  state->whoseTurn = 0;
      535:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6420:  192:  for (it = 0; it < 5; it++){
     2675:  193:    drawCard(state->whoseTurn, state);
     2675:  194:  }
        -:  195:
      535:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      535:  198:  return 0;
      535:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1070:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1070:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1070:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    23540:  214:  while (state->deckCount[player] > 0) {
    10700:  215:    card = floor(Random() * state->deckCount[player]);
    10700:  216:    newDeck[newDeckPos] = state->deck[player][card];
    10700:  217:    newDeckPos++;
    74822:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    26711:  219:      state->deck[player][i] = state->deck[player][i+1];
    26711:  220:    }
    10700:  221:    state->deckCount[player]--;
        -:  222:  }
    23540:  223:  for (i = 0; i < newDeckPos; i++) {
    10700:  224:    state->deck[player][i] = newDeck[i];
    10700:  225:    state->deckCount[player]++;
    10700:  226:  }
        -:  227:
     1070:  228:  return 0;
     1070:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       11:  280:  who = state->whoseTurn;
        -:  281:
       11:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        3:  285:    return -1;
        8:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        7:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        3:  293:    return -1;
        -:  294:  } else {
        4:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        4:  297:    gainCard(supplyPos, state, 2, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        4:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        4:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        4:  308:  return 0;
       11:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       46:  326:  int count = 0;
        -:  327:
        -:  328:  // for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  //   {
        -:  330:  //     if (state->deck[player][i] == card) count++;
        -:  331:  //   }
        -:  332:
        -:  333:  // for (i = 0; i < state->handCount[player]; i++)
        -:  334:  //   {
        -:  335:  //     if (state->hand[player][i] == card) count++;
        -:  336:  //   }
        -:  337:
        -:  338:  // for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  //   {
        -:  340:  //     if (state->discard[player][i] == card) count++;
        -:  341:  //   }
       46:  342:  count += state->deckCount[player];
       46:  343:  count += state->discardCount[player];
       46:  344:  count += state->handCount[player];
        -:  345:
       46:  346:  return count;
        -:  347:}
        -:  348:
        -:  349:int whoseTurn(struct gameState *state) {
       52:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
       78:  398:  if (state->supplyCount[province] == 0)
        -:  399:    {
       13:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply pile are at 0, the game ends
       65:  404:  j = 0;
     3380:  405:  for (i = 0; i < 25; i++)
        -:  406:    {
     1625:  407:      if (state->supplyCount[i] == 0)
        -:  408:	{
      143:  409:	  j++;
      143:  410:	}
     1625:  411:    }
       65:  412:  if ( j >= 3)
        -:  413:    {
       39:  414:      return 1;
        -:  415:    }
        -:  416:
       26:  417:  return 0;
       78:  418:}
        -:  419:
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
      156:  423:  int score = 0;
        -:  424:  //score from hand
     1144:  425:  for (i = 0; i < state->handCount[player]; i++)
        -:  426:    {
      416:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
      494:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
      416:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
      442:  430:      if (state->hand[player][i] == province) { score = score + 6; };
      416:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      416:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      416:  433:    }
        -:  434:
        -:  435:  //score from discard
      650:  436:  for (i = 0; i < state->discardCount[player]; i++)
        -:  437:    {
      299:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
      169:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
      182:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
      195:  441:      if (state->discard[player][i] == province) { score = score + 6; };
      169:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      169:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      169:  444:    }
        -:  445:
        -:  446:  //score from deck
     2756:  447:  for (i = 0; i < state->deckCount[player]; i++)
        -:  448:    {
     1222:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
     1612:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
     1222:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1274:  452:      if (state->deck[player][i] == province) { score = score + 6; };
     1222:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1222:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1222:  455:    }
        -:  456:
      156:  457:  return score;
        -:  458:}
        -:  459:
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	int count;
        -:  530:  int deckCounter;
     2831:  531:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  532:    
        -:  533:    //Step 1 Shuffle the discard pile back into a deck
        -:  534:    int i;
        -:  535:    //Move discard to deck
    #####:  536:    for (i = 0; i < state->discardCount[player];i++){
    #####:  537:      state->deck[player][i] = state->discard[player][i];
    #####:  538:      state->discard[player][i] = -1;
    #####:  539:    }
        -:  540:
    #####:  541:    state->deckCount[player] = state->discardCount[player];
    #####:  542:    state->discardCount[player] = 0;//Reset discard
        -:  543:
        -:  544:    //Shufffle the deck
    #####:  545:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  546:   
        -:  547:    if (DEBUG){//Debug statements
        -:  548:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  549:    }
        -:  550:    
    #####:  551:    state->discardCount[player] = 0;
        -:  552:
        -:  553:    //Step 2 Draw Card
    #####:  554:    count = state->handCount[player];//Get current player's hand count
        -:  555:    
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Current hand count: %d\n", count);
        -:  558:    }
        -:  559:    
    #####:  560:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  561:
    #####:  562:    if (deckCounter == 0)
    #####:  563:      return -1;
        -:  564:
    #####:  565:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  566:    state->deckCount[player]--;
    #####:  567:    state->handCount[player]++;//Increment hand count
    #####:  568:  }
        -:  569:
        -:  570:  else{
     2831:  571:    int count = state->handCount[player];//Get current hand count for player
        -:  572:    int deckCounter;
        -:  573:    if (DEBUG){//Debug statements
        -:  574:      printf("Current hand count: %d\n", count);
        -:  575:    }
        -:  576:
     2831:  577:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2831:  578:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2831:  579:    state->deckCount[player]--;
     2831:  580:    state->handCount[player]++;//Increment hand count
        -:  581:  }
        -:  582:
     2831:  583:  return 0;
     2831:  584:}
        -:  585:
        -:  586:int getCost(int cardNumber)
        -:  587:{
       11:  588:  switch( cardNumber ) 
        -:  589:    {
        -:  590:    case curse:
    #####:  591:      return 0;
        -:  592:    case estate:
    #####:  593:      return 2;
        -:  594:    case duchy:
    #####:  595:      return 5;
        -:  596:    case province:
    #####:  597:      return 8;
        -:  598:    case copper:
    #####:  599:      return 0;
        -:  600:    case silver:
       11:  601:      return 3;
        -:  602:    case gold:
    #####:  603:      return 6;
        -:  604:    case adventurer:
    #####:  605:      return 6;
        -:  606:    case council_room:
    #####:  607:      return 5;
        -:  608:    case feast:
    #####:  609:      return 4;
        -:  610:    case gardens:
    #####:  611:      return 4;
        -:  612:    case mine:
    #####:  613:      return 5;
        -:  614:    case remodel:
    #####:  615:      return 4;
        -:  616:    case smithy:
    #####:  617:      return 4;
        -:  618:    case village:
    #####:  619:      return 3;
        -:  620:    case baron:
    #####:  621:      return 4;
        -:  622:    case great_hall:
    #####:  623:      return 3;
        -:  624:    case minion:
    #####:  625:      return 5;
        -:  626:    case steward:
    #####:  627:      return 3;
        -:  628:    case tribute:
    #####:  629:      return 5;
        -:  630:    case ambassador:
    #####:  631:      return 3;
        -:  632:    case cutpurse:
    #####:  633:      return 4;
        -:  634:    case embargo: 
    #####:  635:      return 2;
        -:  636:    case outpost:
    #####:  637:      return 5;
        -:  638:    case salvager:
    #####:  639:      return 4;
        -:  640:    case sea_hag:
    #####:  641:      return 4;
        -:  642:    case treasure_map:
    #####:  643:      return 4;
        -:  644:    }
        -:  645:	
    #####:  646:  return -1;
       11:  647:}
        -:  648:
        -:  649:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  650:{
        -:  651:  int i;
        -:  652:  int j;
        -:  653:  int k;
        -:  654:  int x;
        -:  655:  int index;
       52:  656:  int currentPlayer = whoseTurn(state);
       52:  657:  int nextPlayer = currentPlayer + 1;
        -:  658:
       52:  659:  int tributeRevealedCards[2] = {-1, -1};
        -:  660:  int temphand[MAX_HAND];// moved above the if statement
       52:  661:  int drawntreasure=0;
        -:  662:  int cardDrawn;
       52:  663:  int z = 0;// this is the counter for the temp hand
       52:  664:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  665:    nextPlayer = 0;
    #####:  666:  }
        -:  667:  
        -:  668:	
        -:  669:  //uses switch to select card and perform actions
       52:  670:  switch( card ) 
        -:  671:    {
        -:  672:    case adventurer:
      104:  673:      while(drawntreasure<2){
       39:  674:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  675:	  shuffle(currentPlayer, state);
    #####:  676:	}
       39:  677:	drawCard(currentPlayer, state);
       39:  678:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       65:  679:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       26:  680:	  drawntreasure++;
        -:  681:	else{
       13:  682:	  temphand[z]=cardDrawn;
       13:  683:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       13:  684:	  z++;
        -:  685:	}
        -:  686:      }
       52:  687:      while(z-1>=0){
       13:  688:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       13:  689:	z=z-1;
        -:  690:      }
       13:  691:      discardCard(handPos, currentPlayer, state, 0);
       13:  692:      return 0;
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
      130:  696:      for (i = 0; i < 4; i++)
        -:  697:	{
       52:  698:	  drawCard(currentPlayer, state);
       52:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
       13:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
       78:  705:      for (i = 0; i < state->numPlayers; i++)
        -:  706:	{
       26:  707:	  if ( i != currentPlayer )
        -:  708:	    {
       13:  709:	      drawCard(i, state);
       13:  710:	    }
       26:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
       13:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
       13:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
    #####:  731:	if (supplyCount(choice1, state) <= 0){
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
        -:  836:      //+3 Cards
      104:  837:      for (i = 0; i < 3; i++)
        -:  838:	{
       39:  839:	  drawCard(currentPlayer, state);
       39:  840:	}
        -:  841:			
        -:  842:      //discard card from hand
       13:  843:      discardCard(handPos, currentPlayer, state, 0);
       13:  844:      return 0;
        -:  845:		
        -:  846:    case village:
        -:  847:      //+1 Card
       13:  848:      drawCard(currentPlayer, state);
        -:  849:			
        -:  850:      //+2 Actions
       13:  851:      state->numActions = state->numActions + 2;
        -:  852:			
        -:  853:      //discard played card from hand
       13:  854:      discardCard(handPos, currentPlayer, state, 0);
       13:  855:      return 0;
        -:  856:		
        -:  857:    case baron:
    #####:  858:      state->numBuys++;//Increase buys by 1!
    #####:  859:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  860:	int p = 0;//Iterator for hand!
    #####:  861:	int card_not_discarded = 1;//Flag for discard set!
    #####:  862:	while(card_not_discarded){
    #####:  863:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  864:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  865:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  866:	    state->discardCount[currentPlayer]++;
    #####:  867:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  868:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  869:	    }
    #####:  870:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  871:	    state->handCount[currentPlayer]--;
    #####:  872:	    card_not_discarded = 0;//Exit the loop
    #####:  873:	  }
    #####:  874:	  else if (p > state->handCount[currentPlayer]){
        -:  875:	    if(DEBUG) {
        -:  876:	      printf("No estate cards in your hand, invalid choice\n");
        -:  877:	      printf("Must gain an estate if there are any\n");
        -:  878:	    }
    #####:  879:	    if (supplyCount(estate, state) > 0){
    #####:  880:	      gainCard(estate, state, 0, currentPlayer);
    #####:  881:	      state->supplyCount[estate]--;//Decrement estates
    #####:  882:	      if (supplyCount(estate, state) == 0){
    #####:  883:		isGameOver(state);
    #####:  884:	      }
    #####:  885:	    }
    #####:  886:	    card_not_discarded = 0;//Exit the loop
    #####:  887:	  }
        -:  888:			    
        -:  889:	  else{
    #####:  890:	    p++;//Next card
        -:  891:	  }
        -:  892:	}
    #####:  893:      }
        -:  894:			    
        -:  895:      else{
    #####:  896:	if (supplyCount(estate, state) > 0){
    #####:  897:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  898:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  899:	  if (supplyCount(estate, state) == 0){
    #####:  900:	    isGameOver(state);
    #####:  901:	  }
    #####:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case great_hall:
        -:  909:      //+1 Card
    #####:  910:      drawCard(currentPlayer, state);
        -:  911:			
        -:  912:      //+1 Actions
    #####:  913:      state->numActions++;
        -:  914:			
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
    #####:  917:      return 0;
        -:  918:		
        -:  919:    case minion:
        -:  920:      //+1 action
    #####:  921:      state->numActions++;
        -:  922:			
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
        -:  925:			
    #####:  926:      if (choice1)		//+2 coins
        -:  927:	{
    #####:  928:	  state->coins = state->coins + 2;
    #####:  929:	}
        -:  930:			
    #####:  931:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  932:	{
        -:  933:	  //discard hand
    #####:  934:	  while(numHandCards(state) > 0)
        -:  935:	    {
    #####:  936:	      discardCard(handPos, currentPlayer, state, 0);
        -:  937:	    }
        -:  938:				
        -:  939:	  //draw 4
    #####:  940:	  for (i = 0; i < 4; i++)
        -:  941:	    {
    #####:  942:	      drawCard(currentPlayer, state);
    #####:  943:	    }
        -:  944:				
        -:  945:	  //other players discard hand and redraw if hand size > 4
    #####:  946:	  for (i = 0; i < state->numPlayers; i++)
        -:  947:	    {
    #####:  948:	      if (i != currentPlayer)
        -:  949:		{
    #####:  950:		  if ( state->handCount[i] > 4 )
        -:  951:		    {
        -:  952:		      //discard hand
    #####:  953:		      while( state->handCount[i] > 0 )
        -:  954:			{
    #####:  955:			  discardCard(handPos, i, state, 0);
        -:  956:			}
        -:  957:							
        -:  958:		      //draw 4
    #####:  959:		      for (j = 0; j < 4; j++)
        -:  960:			{
    #####:  961:			  drawCard(i, state);
    #####:  962:			}
    #####:  963:		    }
    #####:  964:		}
    #####:  965:	    }
        -:  966:				
    #####:  967:	}
    #####:  968:      return 0;
        -:  969:		
        -:  970:    case steward:
    #####:  971:      if (choice1 == 1)
        -:  972:	{
        -:  973:	  //+2 cards
    #####:  974:	  drawCard(currentPlayer, state);
    #####:  975:	  drawCard(currentPlayer, state);
    #####:  976:	}
    #####:  977:      else if (choice1 == 2)
        -:  978:	{
        -:  979:	  //+2 coins
    #####:  980:	  state->coins = state->coins + 2;
    #####:  981:	}
        -:  982:      else
        -:  983:	{
        -:  984:	  //trash 2 cards in hand
    #####:  985:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  986:	  discardCard(choice3, currentPlayer, state, 1);
        -:  987:	}
        -:  988:			
        -:  989:      //discard card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case tribute:
    #####:  994:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  995:	if (state->deckCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  997:	  state->deckCount[nextPlayer]--;
    #####:  998:	}
    #####:  999:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1001:	  state->discardCount[nextPlayer]--;
    #####: 1002:	}
        -: 1003:	else{
        -: 1004:	  //No Card to Reveal
        -: 1005:	  if (DEBUG){
        -: 1006:	    printf("No cards to reveal\n");
        -: 1007:	  }
        -: 1008:	}
    #####: 1009:      }
        -: 1010:	    
        -: 1011:      else{
    #####: 1012:	if (state->deckCount[nextPlayer] == 0){
    #####: 1013:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1014:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1015:	    state->deckCount[nextPlayer]++;
    #####: 1016:	    state->discard[nextPlayer][i] = -1;
    #####: 1017:	    state->discardCount[nextPlayer]--;
    #####: 1018:	  }
        -: 1019:			    
    #####: 1020:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1021:	} 
    #####: 1022:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1024:	state->deckCount[nextPlayer]--;
    #####: 1025:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
        -: 1028:      }    
        -: 1029:		       
    #####: 1030:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1031:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1032:	state->playedCardCount++;
    #####: 1033:	tributeRevealedCards[1] = -1;
    #####: 1034:      }
        -: 1035:
    #####: 1036:      for (i = 0; i <= 2; i ++){
    #####: 1037:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1038:	  state->coins += 2;
    #####: 1039:	}
        -: 1040:		    
    #####: 1041:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1042:	  drawCard(currentPlayer, state);
    #####: 1043:	  drawCard(currentPlayer, state);
    #####: 1044:	}
        -: 1045:	else{//Action Card
    #####: 1046:	  state->numActions = state->numActions + 2;
        -: 1047:	}
    #####: 1048:      }
        -: 1049:	    
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case ambassador:
    #####: 1053:      j = 0;		//used to check if player has enough cards to discard
        -: 1054:
    #####: 1055:      if (choice2 > 2 || choice2 < 0)
        -: 1056:	{
    #####: 1057:	  return -1;				
        -: 1058:	}
        -: 1059:
    #####: 1060:      if (choice1 == handPos)
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:
    #####: 1065:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1066:	{
    #####: 1067:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1068:	    {
    #####: 1069:	      j++;
    #####: 1070:	    }
    #####: 1071:	}
    #####: 1072:      if (j < choice2)
        -: 1073:	{
    #####: 1074:	  return -1;				
        -: 1075:	}
        -: 1076:
        -: 1077:      if (DEBUG) 
        -: 1078:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1079:
        -: 1080:      //increase supply count for choosen card by amount being discarded
    #####: 1081:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1082:			
        -: 1083:      //each other player gains a copy of revealed card
    #####: 1084:      for (i = 0; i < state->numPlayers; i++)
        -: 1085:	{
    #####: 1086:	  if (i != currentPlayer)
        -: 1087:	    {
    #####: 1088:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1089:	    }
    #####: 1090:	}
        -: 1091:
        -: 1092:      //discard played card from hand
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1094:
        -: 1095:      //trash copies of cards returned to supply
    #####: 1096:      for (j = 0; j < choice2; j++)
        -: 1097:	{
    #####: 1098:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1099:	    {
    #####: 1100:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1101:		{
    #####: 1102:		  discardCard(i, currentPlayer, state, 1);
    #####: 1103:		  break;
        -: 1104:		}
    #####: 1105:	    }
    #####: 1106:	}			
        -: 1107:
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case cutpurse:
        -: 1111:
    #####: 1112:      updateCoins(currentPlayer, state, 2);
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
        -: 1116:	    {
    #####: 1117:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1118:		{
    #####: 1119:		  if (state->hand[i][j] == copper)
        -: 1120:		    {
    #####: 1121:		      discardCard(j, i, state, 0);
    #####: 1122:		      break;
        -: 1123:		    }
    #####: 1124:		  if (j == state->handCount[i])
        -: 1125:		    {
    #####: 1126:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1127:			{
        -: 1128:			  if (DEBUG)
        -: 1129:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1130:			}	
    #####: 1131:		      break;
        -: 1132:		    }		
    #####: 1133:		}
        -: 1134:					
    #####: 1135:	    }
        -: 1136:				
    #####: 1137:	}				
        -: 1138:
        -: 1139:      //discard played card from hand
    #####: 1140:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1141:
    #####: 1142:      return 0;
        -: 1143:
        -: 1144:		
        -: 1145:    case embargo: 
        -: 1146:      //+2 Coins
    #####: 1147:      state->coins = state->coins + 2;
        -: 1148:			
        -: 1149:      //see if selected pile is in play
    #####: 1150:      if ( state->supplyCount[choice1] == -1 )
        -: 1151:	{
    #####: 1152:	  return -1;
        -: 1153:	}
        -: 1154:			
        -: 1155:      //add embargo token to selected supply pile
    #####: 1156:      state->embargoTokens[choice1]++;
        -: 1157:			
        -: 1158:      //trash card
    #####: 1159:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case outpost:
        -: 1163:      //set outpost flag
    #####: 1164:      state->outpostPlayed++;
        -: 1165:			
        -: 1166:      //discard card
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case salvager:
        -: 1171:      //+1 buy
    #####: 1172:      state->numBuys++;
        -: 1173:			
    #####: 1174:      if (choice1)
        -: 1175:	{
        -: 1176:	  //gain coins equal to trashed card
    #####: 1177:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1178:	  //trash card
    #####: 1179:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1180:	}
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case sea_hag:
    #####: 1187:      for (i = 0; i < state->numPlayers; i++){
    #####: 1188:	if (i != currentPlayer){
    #####: 1189:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1190:	  state->discardCount[i]++;
    #####: 1191:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1192:	}
    #####: 1193:      }
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case treasure_map:
        -: 1197:      //search hand for another treasure_map
    #####: 1198:      index = -1;
    #####: 1199:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1200:	{
    #####: 1201:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1202:	    {
    #####: 1203:	      index = i;
    #####: 1204:	      break;
        -: 1205:	    }
    #####: 1206:	}
    #####: 1207:      if (index > -1)
        -: 1208:	{
        -: 1209:	  //trash both treasure cards
    #####: 1210:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:	  discardCard(index, currentPlayer, state, 1);
        -: 1212:
        -: 1213:	  //gain 4 Gold cards
    #####: 1214:	  for (i = 0; i < 4; i++)
        -: 1215:	    {
    #####: 1216:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1217:	    }
        -: 1218:				
        -: 1219:	  //return success
    #####: 1220:	  return 1;
        -: 1221:	}
        -: 1222:			
        -: 1223:      //no second treasure_map found in hand
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
    #####: 1227:  return -1;
       52: 1228:}
        -: 1229:
        -: 1230:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1231:{
        -: 1232:	
        -: 1233:  //if card is not trashed, added to Played pile 
       52: 1234:  if (trashFlag < 1)
        -: 1235:    {
        -: 1236:      //add card to played pile
       52: 1237:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       52: 1238:      state->playedCardCount++;
       52: 1239:    }
        -: 1240:	
        -: 1241:  //set played card to -1
       52: 1242:  state->hand[currentPlayer][handPos] = -1;
        -: 1243:	
        -: 1244:  //remove card from player's hand
       52: 1245:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
    #####: 1249:    }
       52: 1250:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1251:    {
        -: 1252:      //reduce number of cards in hand
    #####: 1253:      state->handCount[currentPlayer]--;
    #####: 1254:    }
        -: 1255:  else 	
        -: 1256:    {
        -: 1257:      //replace discarded card with last card in hand
       52: 1258:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1259:      //set last card to -1
       52: 1260:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1261:      //reduce number of cards in hand
       52: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        -: 1264:	
       52: 1265:  return 0;
        -: 1266:}
        -: 1267:
        -: 1268:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1269:{
        -: 1270:  //Note: supplyPos is enum of choosen card
        -: 1271:	
        -: 1272:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1273:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1274:    {
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:	
        -: 1278:  //added card for [whoseTurn] current player:
        -: 1279:  // toFlag = 0 : add to discard
        -: 1280:  // toFlag = 1 : add to deck
        -: 1281:  // toFlag = 2 : add to hand
        -: 1282:
        4: 1283:  if (toFlag == 1)
        -: 1284:    {
    #####: 1285:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1286:      state->deckCount[player]++;
    #####: 1287:    }
        4: 1288:  else if (toFlag == 2)
        -: 1289:    {
        2: 1290:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1291:      state->handCount[player]++;
        2: 1292:    }
        -: 1293:  else
        -: 1294:    {
        2: 1295:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1296:      state->discardCount[player]++;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //decrease number in supply pile
        4: 1300:  state->supplyCount[supplyPos]--;
        -: 1301:	 
        4: 1302:  return 0;
        4: 1303:}
        -: 1304:
        -: 1305:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1306:{
        -: 1307:  int i;
        -: 1308:	
        -: 1309:  //reset coin count
     1855: 1310:  state->coins = 0;
        -: 1311:
        -: 1312:  //add coins for each Treasure card in player's hand
    16980: 1313:  for (i = 0; i < state->handCount[player]; i++)
        -: 1314:    {
     6635: 1315:      if (state->hand[player][i] == copper)
        -: 1316:	{
     3460: 1317:	  state->coins += 1;
     3460: 1318:	}
     3175: 1319:      else if (state->hand[player][i] == silver)
        -: 1320:	{
     1320: 1321:	  state->coins += 2;
     1320: 1322:	}
     1855: 1323:      else if (state->hand[player][i] == gold)
        -: 1324:	{
     1320: 1325:	  state->coins += 3;
     1320: 1326:	}	
     6635: 1327:    }	
        -: 1328:
        -: 1329:  //add bonus
     1855: 1330:  state->coins += bonus;
        -: 1331:
     1855: 1332:  return 0;
        -: 1333:}
        -: 1334:
        -: 1335:
        -: 1336://end of dominion.c
        -: 1337:
