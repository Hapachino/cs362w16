        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1://*********************************************
        -:    2://a program to test adventurer card from
        -:    3://dominion as implemented in dominion.c using
        -:    4://randomized inputs.
        -:    5://Author: Michael Byrne, OSU byrnemi
        -:    6://For: CS 362 Software Engineering 2
        -:    7://Sources: as noted
        -:    8://*********************************************
        -:    9:#include "dominion.h"
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:#include <stdlib.h>
        -:   13:#include <assert.h>
        -:   14:
function main called 2 returned 100% blocks executed 86%
        2:   15:int main (int argc, char** argv) {
        -:   16:    int i, j, m;
        -:   17:    int testCard;
        2:   18:    int errors=0;
        -:   19:    int adPos;
        -:   20:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        2:   21:			sea_hag, tribute, smithy, council_room};
        2:   22:    int numPlayers = 2;
        2:   23:    int player = 0;
        2:   24:    int otherPlayer = 0;
        -:   25:    struct gameState G;
        -:   26:    time_t t;
        2:   27:    srand((unsigned) time(&t));
call    0 returned 100%
call    1 returned 100%
        -:   28:
        -:   29:
        -:   30:    int testHand[50];
        -:   31:    int testDiscard[50];
        -:   32:    int testDeck[50];
        -:   33://------------------- end prologue, begin tests: 20 randomized tests of 50 card hands --------------//
        -:   34:
        2:   35:    printf("starting testing for adventurer card\n");
call    0 returned 100%
       42:   36:    for(i=0;i<20;i++){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   37://------------------- PART ONE: BUILD TEST CASE GENERATOR ------------------------------------------//
        -:   38:        //printf("game %d\n",i);
       40:   39:        initializeGame(2, k, 2, &G);
call    0 returned 100%
       40:   40:        G.handCount[player] = 50;
        -:   41:        //G.handCount[otherPlayer] = 50;
       40:   42:        G.whoseTurn = 1;
       40:   43:        G.deckCount[player] = 50;
       40:   44:        int treasureCount = 0;
        -:   45:
        -:   46:        //here we create a random hand
     2040:   47:        for(j=0;j<50;j++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2000:   48:            testCard = rand () % treasure_map;
call    0 returned 100%
     2000:   49:            G.hand[player][j] = testCard;
     2000:   50:            testHand[j] = testCard;
        -:   51:            //printf("added card %d\n",testCard);
     2000:   52:            if (testCard == copper || testCard == silver || testCard == gold){
branch  0 taken 96% (fallthrough)
branch  1 taken 5%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
      247:   53:                treasureCount++;
        -:   54:            }
        -:   55:
        -:   56:        }
        -:   57:
        -:   58:        //now we make a discard pile
     2040:   59:        for(j=0;j<50;j++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2000:   60:            testCard = rand () % treasure_map;
call    0 returned 100%
     2000:   61:            G.discard[player][j] = testCard;
     2000:   62:            testDiscard[j] = testCard;
        -:   63:            //printf("added discard %d\n",testCard);
        -:   64:
        -:   65:        }
        -:   66:
        -:   67:        //now we make a player deck
     2040:   68:        for(j=0;j<50;j++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2000:   69:            testCard = rand () % treasure_map;
call    0 returned 100%
     2000:   70:            G.deck[player][j] = testCard;
     2000:   71:            testDeck[j] = testCard;
        -:   72:            //printf("added deck %d\n",testCard);
        -:   73:
        -:   74:        }
        -:   75:
        -:   76:        //now we find an adventurer to play
     1094:   77:        for (j=0;j<50;j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1087:   78:            if (G.hand[player][j]== adventurer){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:   79:                //printf("found smithy at %d\n",j);
       33:   80:                adPos = j;
       33:   81:                break;
        -:   82:
        -:   83:            }
        -:   84:        }
        -:   85:  //------------------- PART TWO: EXECUTE SYSTEM UNDER TEST ------------------------------------------//
        -:   86:        //first we look at the players deck
       40:   87:        int found = 0;
       40:   88:        int flipped =0;
       40:   89:        int unflippedActual = 0;
        -:   90:        //we count the number of cards flipped until we hit two treasures
      613:   91:        for (j=50;j>0;j--){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
      613:   92:            int revealed = G.deck[player][j];
      613:   93:            if (revealed == copper || revealed == silver || revealed == gold){
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
        -:   94:                //printf("found coin\n");
       80:   95:                found++;
        -:   96:            }
      613:   97:            if (found == 2){
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       40:   98:                break;
        -:   99:            }
        -:  100:        }
       40:  101:        flipped = j;
        -:  102:
        -:  103:        //printf("deck should have %d cards\n",flipped);
        -:  104:        int temp[50];
       40:  105:        int actual = 0;
       40:  106:        playAdventurer(0,&G,0,0,&temp);
call    0 returned 100%
        -:  107:   //------------------- PART THREE: EXECUTE ORACLE TESTS ---------------------------------------------//
        -:  108:        //did we flip as many as the function?
       40:  109:        if(flipped != G.deckCount[player]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  110:            printf("too many/few cards flipped\n");
call    0 never executed
    #####:  111:            errors++;
        -:  112:        }
       40:  113:        int postCount = 0;
        -:  114:        //let's check players hand for two extra treasures
     2120:  115:        for (j=0;j<52;j++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2080:  116:            if (G.hand[player][j] == copper || G.hand[player][j] == silver || G.hand[player][j] == gold){
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
        -:  117:                //printf("found coin\n");
      327:  118:                postCount++;
        -:  119:            }
        -:  120:        }
       40:  121:        if(treasureCount+2 != postCount){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  122:            printf("treasures added incorrectly\n");
call    0 never executed
    #####:  123:            errors++;
        -:  124:        }
        -:  125:    //------------------- ADDITIONAL TESTS -------------------------------------------------------------//
        -:  126:        //try running adventurer with no deck
       40:  127:        G.deckCount[player] = -1;
       40:  128:        playAdventurer(0,&G,0,0,&temp);
call    0 returned 100%
       40:  129:        if (G.handCount[player] != 52){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  130:            printf("no treasure cards added on 0 deck attempt\n");
call    0 never executed
    #####:  131:            errors++;
        -:  132:        }
        -:  133:        //try running with no treasures
        -:  134:        int newTmp[50];
       40:  135:        G.deckCount[player] = 50;
     2040:  136:        for (j=0;j<50;j++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2000:  137:            if (G.deck[player][j]== copper || G.deck[player][j]== silver || G.deck[player][j]== gold ){
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
      200:  138:                G.deck[player][j] = 0;
        -:  139:            }
        -:  140:
        -:  141:        }
       40:  142:        playAdventurer(0,&G,0,0,&newTmp);
call    0 returned 100%
       40:  143:        if (G.deckCount[player] != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  144:            printf("adventurer failed with 0 initial treasures in deck\n");
call    0 never executed
    #####:  145:            errors++;
        -:  146:        }
        -:  147:           //try running with one treasure
        -:  148:        int newTmp2[50];
       40:  149:        G.deckCount[player] = 50;
       40:  150:        int randomInsert = rand () % 50;
call    0 returned 100%
     2040:  151:        for (j=0;j<50;j++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2000:  152:            if (G.deck[player][j]== copper || G.deck[player][j]== silver || G.deck[player][j]== gold ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  153:                G.deck[player][j] = 0;
        -:  154:            }
        -:  155:        }
       40:  156:        G.deck[player][randomInsert] = copper;
       40:  157:        playAdventurer(0,&G,0,0,&newTmp2);
call    0 returned 100%
       40:  158:        if (G.deckCount[player] != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  159:            printf("adventurer failed with 1 initial treasures\n");
call    0 never executed
    #####:  160:            errors++;
        -:  161:        }
        -:  162:
        -:  163:
        -:  164:
        -:  165:
        -:  166:
        -:  167:
        -:  168:    }
        2:  169:    printf("tests complete! %d errors\n",errors);
call    0 returned 100%
        2:  170:	return 0;
        -:  171:}
        -:  172:
