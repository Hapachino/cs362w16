File 'randomtestcard.c'
Lines executed:85.25% of 61
Branches executed:89.47% of 38
Taken at least once:76.32% of 38
Calls executed:93.75% of 16
randomtestcard.c:creating 'randomtestcard.c.gcov'

        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:
        -:    2:
        -:    3://*********************************************
        -:    4://a program to test embargo card from
        -:    5://dominion as implemented in dominion.c using
        -:    6://randomized inputs.
        -:    7://Author: Michael Byrne, OSU byrnemi
        -:    8://For: CS 362 Software Engineering 2
        -:    9://Sources: as noted
        -:   10://*********************************************
        -:   11:#include "dominion.h"
        -:   12:#include <stdio.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:#include <assert.h>
        -:   16:
        -:   17:
        -:   18:int isInHand(int cardType, int player, int handSize, struct gameState *state);
        -:   19:
function main called 2 returned 100% blocks executed 96%
        2:   20:int main (int argc, char** argv) {
        -:   21:    int i, j, m;
        -:   22:    int testCard, choice1, cardPos, flag, retFlag;
        2:   23:    int supplyInPlay = 0;
        -:   24:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        2:   25:			sea_hag, tribute, smithy, council_room};
        2:   26:    int numPlayers = 2;
        2:   27:    int player = 0;
        2:   28:    int errors=0;
        -:   29:
        -:   30:    struct gameState G;
        -:   31:    time_t t;
        2:   32:    srand((unsigned) time(&t));
call    0 returned 100%
call    1 returned 100%
        -:   33:
        -:   34:
        -:   35:    int testHand[50];
        -:   36:    int testDiscard[50];
        -:   37:    int testDeck[50];
        -:   38://------------------- end prologue, begin tests: 20 randomized tests of 50 card hands --------------//
        -:   39:
        -:   40:
        2:   41:    printf("starting testing for embargo card\n");
call    0 returned 100%
       22:   42:    for(i=0;i<10;i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   43:
        -:   44://------------------- PART ONE: BUILD TEST CASE GENERATOR ------------------------------------------//
        -:   45:        //printf("game %d\n",i);
       20:   46:        retFlag = 0;
       20:   47:        flag = 0;
       20:   48:        initializeGame(2, k, 2, &G);
call    0 returned 100%
       20:   49:        G.handCount[player] = 5;
       20:   50:        G.whoseTurn = 0;
       20:   51:        G.deckCount[player] = 5;
        -:   52:
        -:   53:        //here we create a random hand
      120:   54:        for(j=0;j<5;j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:   55:            testCard = rand () % treasure_map;
call    0 returned 100%
      100:   56:            if (j != 2){
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       80:   57:                G.hand[player][j] = testCard;
       80:   58:                testHand[j] = testCard;
        -:   59:            }
        -:   60:            else{
       20:   61:                G.hand[player][j] = embargo;
       20:   62:                testHand[j] = embargo;
        -:   63:            }
        -:   64:            //printf("hand %d start %d\n",i,testCard);
        -:   65:        }
       20:   66:        testCard = 0;
        -:   67:
        -:   68:         //and a random deck
      120:   69:        for(j=0;j<5;j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:   70:            testCard = rand () % treasure_map;
call    0 returned 100%
      100:   71:            G.deck[player][j] = testCard;
      100:   72:            testDeck[j] = testCard;
        -:   73:            //printf("added card %d\n",testCard);
        -:   74:         }
       20:   75:        testCard = 0;
        -:   76:          //and a random discard
      120:   77:        for(j=0;j<5;j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:   78:            testCard = rand () % treasure_map;
call    0 returned 100%
      100:   79:            G.discard[player][j] = testCard;
      100:   80:            testDiscard[j] = testCard;
        -:   81:            //printf("added discard %d\n",testCard);
        -:   82:         }
       20:   83:        testCard = 0;
        -:   84:
        -:   85:        //produce a random choice between 0 and treasure for supply pile to embargo
       20:   86:        int choice1 = rand () % treasure_map;
call    0 returned 100%
        -:   87:        //printf("embargo %d pile\n",choice1);
        -:   88:
        -:   89:
        -:   90:
        -:   91:
        -:   92:    //------------------- PART TWO: EXECUTE SYSTEM UNDER TEST ------------------------------------------//
        -:   93:
       20:   94:        retFlag = playCard(2,choice1,0,0,&G);
call    0 returned 100%
       20:   95:        int beforeCoins = G.coins;
       20:   96:        cardEffect(22,choice1,0,0,&G,2,0);
call    0 returned 100%
       20:   97:        int afterCoins = G.coins;
        -:   98:
        -:   99:
        -:  100:    //------------------- PART THREE: EXECUTE ORACLE TESTS ---------------------------------------------//
        -:  101:
        -:  102:
       20:  103:        supplyInPlay = 0;
      220:  104:        for (j=0;j<10;j++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  105:            if (choice1 == k[j]){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        6:  106:                supplyInPlay = 1;
        6:  107:                printf("selected supply is in play\n");
call    0 returned 100%
        -:  108:            }
        -:  109:        }
        -:  110:        //step 1: verify that there is an embargo on randomly chosen pile
       20:  111:        if (G.embargoTokens[choice1] != 1 && supplyInPlay == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 30% (fallthrough)
branch  3 taken 70%
        6:  112:            printf("something went wrong pile not embargoed!\n");
call    0 returned 100%
        6:  113:            errors++;
        -:  114:        }
        -:  115:
        -:  116:        //step 2: verify that pile is embargoed, try to draw from embargoed pile
       20:  117:        int gainFlag = gainCard(choice1,&G,0,0);
call    0 returned 100%
       20:  118:        if (gainFlag != -1 && choice1 != curse && choice1 != village && choice1 != gold && choice1 != silver && choice1 != copper != choice1 != province && choice1 != estate && choice1 != duchy){
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 91% (fallthrough)
branch  7 taken 9%
branch  8 taken 90% (fallthrough)
branch  9 taken 10%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 89% (fallthrough)
branch 13 taken 11%
        8:  119:            printf("embargo not acknowledged\n");
call    0 returned 100%
        -:  120:            errors;
        -:  121:        }
        -:  122:        //step 3: check coins
       20:  123:        if (beforeCoins+2 != afterCoins)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  124:        {
    #####:  125:            printf("coins not added correctly\n");
call    0 never executed
    #####:  126:            errors++;
        -:  127:        }
        -:  128:
        -:  129:        //bug: gaincard does not check for embargo
        -:  130:
        -:  131:
        -:  132:
        -:  133:
        -:  134:        }
        -:  135:
        -:  136:
        2:  137:    printf("tests complete! %d errors\n",errors);
call    0 returned 100%
        2:  138:	return 0;
        -:  139:}
        -:  140:
        -:  141:
        -:  142:
function isInHand called 0 returned 0% blocks executed 0%
    #####:  143:int isInHand(int cardType, int player, int handSize, struct gameState *state){
    #####:  144:    int count = 0;
    #####:  145:    int i = 0;
    #####:  146:    for (i;i<handSize;i++){
branch  0 never executed
branch  1 never executed
    #####:  147:        if (state->hand[player][i]==cardType){
branch  0 never executed
branch  1 never executed
    #####:  148:            count++;
        -:  149:        }
        -:  150:    }
    #####:  151:    return count;
        -:  152:}
        -:  153:
        -:  154:
        -:  155:
