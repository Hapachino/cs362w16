starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
tests complete! 5 errors
starting testing for adventurer card
treasures added incorrectly
no treasure cards added on 0 deck attempt
tests complete! 2 errors
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'isGameOver'
Lines executed:90.00% of 10
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:93.33% of 30
Branches executed:100.00% of 28
Taken at least once:92.86% of 28
No calls

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'gainCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 18
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playSteward'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 5

Function 'playGreat_hall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 13
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 1

Function 'playSmithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'cardEffect'
Lines executed:14.03% of 221
Branches executed:20.22% of 183
Taken at least once:9.29% of 183
Calls executed:16.07% of 56

Function 'playCard'
Lines executed:85.71% of 14
Branches executed:100.00% of 10
Taken at least once:70.00% of 10
Calls executed:100.00% of 3

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

File 'dominion.c'
Lines executed:40.55% of 577
Branches executed:42.45% of 417
Taken at least once:33.81% of 417
Calls executed:26.60% of 94
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function playSmithy called 40 returned 100% blocks executed 100%
       40:    9:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
       40:   10:  int i = 0;
      160:   11:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   12:  {
      120:   13:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:   14:  }
        -:   15:      //discard card from hand
       40:   16:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       40:   17:  return 1;
        -:   18:}
        -:   19:
function playAdventurer called 120 returned 100% blocks executed 100%
      120:   20:int playAdventurer(int drawntreasure, struct gameState *state,int currentPlayer,int z,int temphand[MAX_HAND]){
        -:   21:  int cardDrawn;
        -:   22:
     5258:   23:  while(drawntreasure<2){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     5018:   24:    drawCard(currentPlayer, state);
call    0 returned 100%
     5018:   25:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:   26:
     5258:   27:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      240:   28:      drawntreasure++;
        -:   29:    else{
     4778:   30:      temphand[z]=cardDrawn;
     4778:   31:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4778:   32:      z++;
        -:   33:    }
        -:   34:  }
        -:   35:
     5018:   36:  while(z-1>=0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     4778:   37:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4778:   38:    z=z-1;
        -:   39:  }
      120:   40:  return 0;
        -:   41:}
        -:   42:
function playVillage called 0 returned 0% blocks executed 0%
    #####:   43:int playVillage(int handPos,struct gameState *state,int currentPlayer){
    #####:   44:  drawCard(currentPlayer, state);
call    0 never executed
    #####:   45:  state->numActions = state->numActions + 2;
    #####:   46:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   47:  return 0;
        -:   48:}
        -:   49:
function playGreat_hall called 0 returned 0% blocks executed 0%
    #####:   50:int playGreat_hall(int handPos, struct gameState *state,int currentPlayer){
        -:   51:   //+1 Card
    #####:   52:  drawCard(currentPlayer, state);
call    0 never executed
        -:   53:      //+1 Actions
    #####:   54:  state->numActions--;
        -:   55:      //discard card from hand
    #####:   56:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   57:  return 0;
        -:   58:}
        -:   59:
        -:   60:
function playSteward called 0 returned 0% blocks executed 0%
    #####:   61:int playSteward(int choice1,int choice2,int choice3,int currentPlayer,struct gameState *state,int handPos){
    #####:   62:  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:   63:  {
        -:   64:    //+2 cards
    #####:   65:    drawCard(currentPlayer, state);
call    0 never executed
    #####:   66:    drawCard(currentPlayer, state);
call    0 never executed
        -:   67:  }
    #####:   68:  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:   69:  {
        -:   70:    //+2 coins
    #####:   71:    state->coins = state->coins + 2;
        -:   72:  }
        -:   73:  else
        -:   74:  {
        -:   75:    //trash 2 cards in hand
    #####:   76:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:   77:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:   78:  }
        -:   79:
        -:   80:      //discard card from hand
    #####:   81:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   82:  return 0;
        -:   83:}
        -:   84:
        -:   85:
function compare called 621592 returned 100% blocks executed 100%
   621592:   86:int compare(const void* a, const void* b) {
   621592:   87:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     4425:   88:    return 1;
   617167:   89:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   166052:   90:    return -1;
   451115:   91:  return 0;
        -:   92:}
        -:   93:
function newGame called 0 returned 0% blocks executed 0%
    #####:   94:struct gameState* newGame() {
    #####:   95:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   96:  return g;
        -:   97:}
        -:   98:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   99:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  100:		  int k8, int k9, int k10) {
    #####:  101:  int* k = malloc(10 * sizeof(int));
    #####:  102:  k[0] = k1;
    #####:  103:  k[1] = k2;
    #####:  104:  k[2] = k3;
    #####:  105:  k[3] = k4;
    #####:  106:  k[4] = k5;
    #####:  107:  k[5] = k6;
    #####:  108:  k[6] = k7;
    #####:  109:  k[7] = k8;
    #####:  110:  k[8] = k9;
    #####:  111:  k[9] = k10;
    #####:  112:  return k;
        -:  113:}
        -:  114:
function initializeGame called 20422 returned 100% blocks executed 88%
    20422:  115:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  116:		   struct gameState *state) {
        -:  117:
        -:  118:  int i;
        -:  119:  int j;
        -:  120:  int it;
        -:  121:  //set up random number generator
    20422:  122:  SelectStream(1);
call    0 returned 100%
    20422:  123:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  124:
        -:  125:  //check number of players
    20422:  126:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  127:    {
    #####:  128:      return -1;
        -:  129:    }
        -:  130:
        -:  131:  //set number of players
    20422:  132:  state->numPlayers = numPlayers;
        -:  133:
        -:  134:  //check selected kingdom cards are different
   224642:  135:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  136:    {
  2246420:  137:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  138:        {
  2042200:  139:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  140:	    {
    #####:  141:	      return -1;
        -:  142:	    }
        -:  143:        }
        -:  144:    }
        -:  145:
        -:  146:
        -:  147:  //initialize supply
        -:  148:  ///////////////////////////////
        -:  149:
        -:  150:  //set number of Curse cards
    20422:  151:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  152:    {
    20422:  153:      state->supplyCount[curse] = 10;
        -:  154:    }
    #####:  155:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  156:    {
    #####:  157:      state->supplyCount[curse] = 20;
        -:  158:    }
        -:  159:  else
        -:  160:    {
    #####:  161:      state->supplyCount[curse] = 30;
        -:  162:    }
        -:  163:
        -:  164:  //set number of Victory cards
    20422:  165:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  166:    {
    20422:  167:      state->supplyCount[estate] = 8;
    20422:  168:      state->supplyCount[duchy] = 8;
    20422:  169:      state->supplyCount[province] = 8;
        -:  170:    }
        -:  171:  else
        -:  172:    {
    #####:  173:      state->supplyCount[estate] = 12;
    #####:  174:      state->supplyCount[duchy] = 12;
    #####:  175:      state->supplyCount[province] = 12;
        -:  176:    }
        -:  177:
        -:  178:  //set number of Treasure cards
    20422:  179:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    20422:  180:  state->supplyCount[silver] = 40;
    20422:  181:  state->supplyCount[gold] = 30;
        -:  182:
        -:  183:  //set number of Kingdom cards
   428862:  184:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  185:    {
  3369630:  186:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  187:	{
  3165410:  188:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  189:	    {
        -:  190:	      //check if card is a 'Victory' Kingdom card
   204523:  191:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  192:		{
      303:  193:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      303:  194:		    state->supplyCount[i] = 8;
        -:  195:		  }
    #####:  196:		  else{ state->supplyCount[i] = 12; }
        -:  197:		}
        -:  198:	      else
        -:  199:		{
   203917:  200:		  state->supplyCount[i] = 10;
        -:  201:		}
   204220:  202:	      break;
        -:  203:	    }
        -:  204:	  else    //card is not in the set choosen for the game
        -:  205:	    {
  2961190:  206:	      state->supplyCount[i] = -1;
        -:  207:	    }
        -:  208:	}
        -:  209:
        -:  210:    }
        -:  211:
        -:  212:  ////////////////////////
        -:  213:  //supply intilization complete
        -:  214:
        -:  215:  //set player decks
    61266:  216:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  217:    {
    40844:  218:      state->deckCount[i] = 0;
   163376:  219:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  220:	{
   122532:  221:	  state->deck[i][j] = estate;
   122532:  222:	  state->deckCount[i]++;
        -:  223:	}
   326752:  224:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  225:	{
   285908:  226:	  state->deck[i][j] = copper;
   285908:  227:	  state->deckCount[i]++;
        -:  228:	}
        -:  229:    }
        -:  230:
        -:  231:  //shuffle player decks
    61266:  232:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  233:    {
    40844:  234:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  235:	{
    #####:  236:	  return -1;
        -:  237:	}
        -:  238:    }
        -:  239:
        -:  240:  //draw player hands
    61266:  241:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  242:    {
        -:  243:      //initialize hand size to zero
    40844:  244:      state->handCount[i] = 0;
    40844:  245:      state->discardCount[i] = 0;
        -:  246:      //draw 5 cards
        -:  247:      // for (j = 0; j < 5; j++)
        -:  248:      //	{
        -:  249:      //	  drawCard(i, state);
        -:  250:      //	}
        -:  251:    }
        -:  252:
        -:  253:  //set embargo tokens to 0 for all supply piles
   571816:  254:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  255:    {
   551394:  256:      state->embargoTokens[i] = 0;
        -:  257:    }
        -:  258:
        -:  259:  //initialize first player's turn
    20422:  260:  state->outpostPlayed = 0;
    20422:  261:  state->phase = 0;
    20422:  262:  state->numActions = 1;
    20422:  263:  state->numBuys = 1;
    20422:  264:  state->playedCardCount = 0;
    20422:  265:  state->whoseTurn = 0;
    20422:  266:  state->handCount[state->whoseTurn] = 0;
        -:  267:  //int it; move to top
        -:  268:
        -:  269:  //Moved draw cards to here, only drawing at the start of a turn
   122532:  270:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   102110:  271:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  272:  }
        -:  273:
    20422:  274:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  275:
    20422:  276:  return 0;
        -:  277:}
        -:  278:
function shuffle called 41064 returned 100% blocks executed 100%
    41064:  279:int shuffle(int player, struct gameState *state) {
        -:  280:
        -:  281:
        -:  282:  int newDeck[MAX_DECK];
    41064:  283:  int newDeckPos = 0;
        -:  284:  int card;
        -:  285:  int i;
        -:  286:
    41064:  287:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      142:  288:    return -1;
    40922:  289:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  290:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  291:
   492449:  292:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   410605:  293:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   410605:  294:    newDeck[newDeckPos] = state->deck[player][card];
   410605:  295:    newDeckPos++;
  1682933:  296:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
  1272328:  297:      state->deck[player][i] = state->deck[player][i+1];
        -:  298:    }
   410605:  299:    state->deckCount[player]--;
        -:  300:  }
   451527:  301:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   410605:  302:    state->deck[player][i] = newDeck[i];
   410605:  303:    state->deckCount[player]++;
        -:  304:  }
        -:  305:
    40922:  306:  return 0;
        -:  307:}
        -:  308:
function playCard called 40057 returned 100% blocks executed 86%
    40057:  309:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  310:{
        -:  311:  int card;
    40057:  312:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  313:
        -:  314:  //check if it is the right phase
    40057:  315:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  316:    {
    #####:  317:      return -1;
        -:  318:    }
        -:  319:
        -:  320:  //check if player has enough actions
    40057:  321:  if ( state->numActions < 1 )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  322:    {
    20000:  323:      return -1;
        -:  324:    }
        -:  325:
        -:  326:  //get card played
    20057:  327:  card = handCard(handPos, state);
call    0 returned 100%
        -:  328:
        -:  329:  //check if selected card is an action
    20057:  330:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  331:    {
    #####:  332:      return -1;
        -:  333:    }
        -:  334:
        -:  335:  //play card
    20057:  336:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  337:    {
        3:  338:      return -1;
        -:  339:    }
        -:  340:
        -:  341:  //reduce number of actions
    20054:  342:  state->numActions--;
        -:  343:
        -:  344:  //update coins (Treasure cards may be added with card draws)
    20054:  345:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  346:
    20054:  347:  return 0;
        -:  348:}
        -:  349:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  350:int buyCard(int supplyPos, struct gameState *state) {
        -:  351:  int who;
    #####:  352:  if (DEBUG){
        -:  353:    printf("Entering buyCard...\n");
        -:  354:  }
        -:  355:
        -:  356:  // I don't know what to do about the phase thing.
        -:  357:
    #####:  358:  who = state->whoseTurn;
        -:  359:
    #####:  360:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  361:    if (DEBUG)
        -:  362:      printf("You do not have any buys left\n");
    #####:  363:    return -1;
    #####:  364:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  365:    if (DEBUG)
        -:  366:      printf("There are not any of that type of card left\n");
    #####:  367:    return -1;
    #####:  368:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:    if (DEBUG)
        -:  370:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  371:    return -1;
        -:  372:  } else {
    #####:  373:    state->phase=1;
        -:  374:    //state->supplyCount[supplyPos]--;
    #####:  375:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  376:
    #####:  377:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  378:    state->numBuys--;
    #####:  379:    if (DEBUG)
        -:  380:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  381:  }
        -:  382:
        -:  383:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  384:  //state->discardCount[who]++;
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  389:int numHandCards(struct gameState *state) {
    #####:  390:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  391:}
        -:  392:
function handCard called 21153 returned 100% blocks executed 100%
    21153:  393:int handCard(int handPos, struct gameState *state) {
    21153:  394:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    21153:  395:  return state->hand[currentPlayer][handPos];
        -:  396:}
        -:  397:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  398:int supplyCount(int card, struct gameState *state) {
       10:  399:  return state->supplyCount[card];
        -:  400:}
        -:  401:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  402:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  403:  int i;
    #####:  404:  int count = 0;
        -:  405:
    #####:  406:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  409:    }
        -:  410:
    #####:  411:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  414:    }
        -:  415:
    #####:  416:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  419:    }
        -:  420:
    #####:  421:  return count;
        -:  422:}
        -:  423:
function whoseTurn called 41220 returned 100% blocks executed 100%
    41220:  424:int whoseTurn(struct gameState *state) {
    41220:  425:  return state->whoseTurn;
        -:  426:}
        -:  427:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  428:int endTurn(struct gameState *state) {
        -:  429:  int k;
        -:  430:  int i;
    #####:  431:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  432:
        -:  433:  //Discard hand
    #####:  434:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  435:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  436:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  437:  }
    #####:  438:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  439:
        -:  440:  //Code for determining the player
    #####:  441:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  442:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  443:  }
        -:  444:  else{
    #####:  445:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  446:  }
        -:  447:
    #####:  448:  state->outpostPlayed = 0;
    #####:  449:  state->phase = 0;
    #####:  450:  state->numActions = 1;
    #####:  451:  state->coins = 0;
    #####:  452:  state->numBuys = 1;
    #####:  453:  state->playedCardCount = 0;
    #####:  454:  state->handCount[state->whoseTurn] = 0;
        -:  455:
        -:  456:  //int k; move to top
        -:  457:  //Next player draws hand
    #####:  458:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  459:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  460:  }
        -:  461:
        -:  462:  //Update money
    #####:  463:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  464:
    #####:  465:  return 0;
        -:  466:}
        -:  467:
function isGameOver called 100 returned 100% blocks executed 91%
      100:  468:int isGameOver(struct gameState *state) {
        -:  469:  int i;
        -:  470:  int j;
        -:  471:
        -:  472:  //if stack of Province cards is empty, the game ends
      100:  473:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  474:    {
    #####:  475:      return 1;
        -:  476:    }
        -:  477:
        -:  478:  //if three supply pile are at 0, the game ends
      100:  479:  j = 0;
     2600:  480:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  481:    {
     2500:  482:      if (state->supplyCount[i] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  483:	{
        3:  484:	  j++;
        -:  485:	}
        -:  486:    }
      100:  487:  if ( j >= 3)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  488:    {
        1:  489:      return 1;
        -:  490:    }
        -:  491:
       99:  492:  return 0;
        -:  493:}
        -:  494:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  495:int scoreFor (int player, struct gameState *state) {
        -:  496:
        -:  497:  int i;
    #####:  498:  int score = 0;
        -:  499:  //score from hand
    #####:  500:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  503:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  504:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  505:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  506:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  507:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  508:    }
        -:  509:
        -:  510:  //score from discard
    #####:  511:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  514:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  515:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  516:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  517:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  518:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  519:    }
        -:  520:
        -:  521:  //score from deck
    #####:  522:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  525:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  526:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  527:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  528:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  529:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  530:    }
        -:  531:
    #####:  532:  return score;
        -:  533:}
        -:  534:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  535:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  536:  int i;
        -:  537:  int j;
        -:  538:  int highScore;
        -:  539:  int currentPlayer;
        -:  540:
        -:  541:  //get score for each player
    #####:  542:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  543:    {
        -:  544:      //set unused player scores to -9999
    #####:  545:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  546:	{
    #####:  547:	  players[i] = -9999;
        -:  548:	}
        -:  549:      else
        -:  550:	{
    #####:  551:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  552:	}
        -:  553:    }
        -:  554:
        -:  555:  //find highest score
    #####:  556:  j = 0;
    #####:  557:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  558:    {
    #####:  559:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  560:	{
    #####:  561:	  j = i;
        -:  562:	}
        -:  563:    }
    #####:  564:  highScore = players[j];
        -:  565:
        -:  566:  //add 1 to players who had less turns
    #####:  567:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:    {
    #####:  570:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  571:	{
    #####:  572:	  players[i]++;
        -:  573:	}
        -:  574:    }
        -:  575:
        -:  576:  //find new highest score
    #####:  577:  j = 0;
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  581:	{
    #####:  582:	  j = i;
        -:  583:	}
        -:  584:    }
    #####:  585:  highScore = players[j];
        -:  586:
        -:  587:  //set winners in array to 1 and rest to 0
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  591:	{
    #####:  592:	  players[i] = 1;
        -:  593:	}
        -:  594:      else
        -:  595:	{
    #####:  596:	  players[i] = 0;
        -:  597:	}
        -:  598:    }
        -:  599:
    #####:  600:  return 0;
        -:  601:}
        -:  602:
function drawCard called 107248 returned 100% blocks executed 100%
   107248:  603:int drawCard(int player, struct gameState *state)
        -:  604:{	int count;
        -:  605:  int deckCounter;
   107248:  606:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  607:
        -:  608:    //Step 1 Shuffle the discard pile back into a deck
        -:  609:    int i;
        -:  610:    //Move discard to deck
     2385:  611:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2165:  612:      state->deck[player][i] = state->discard[player][i];
     2165:  613:      state->discard[player][i] = -1;
        -:  614:    }
        -:  615:
      220:  616:    state->deckCount[player] = state->discardCount[player];
      220:  617:    state->discardCount[player] = 0;//Reset discard
        -:  618:
        -:  619:    //Shufffle the deck
      220:  620:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  621:
        -:  622:    if (1){//Debug statements
        -:  623:      //printf("Deck count now: %d\n", state->deckCount[player]);
        -:  624:    }
        -:  625:
      220:  626:    state->discardCount[player] = 0;
        -:  627:
        -:  628:    //Step 2 Draw Card
      220:  629:    count = state->handCount[player];//Get current player's hand count
        -:  630:
        -:  631:    if (1){//Debug statements
        -:  632:      //printf("Current hand count: %d\n", count);
        -:  633:    }
        -:  634:
      220:  635:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  636:
      220:  637:    if (deckCounter == 0)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
      142:  638:      return -1;
        -:  639:
       78:  640:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       78:  641:    state->deckCount[player]--;
       78:  642:    state->handCount[player]++;//Increment hand count
        -:  643:  }
        -:  644:
        -:  645:  else{
   107028:  646:    int count = state->handCount[player];//Get current hand count for player
        -:  647:    int deckCounter;
        -:  648:    if (1){//Debug statements
        -:  649:      //printf("Current hand count: %d\n", count);
        -:  650:    }
        -:  651:
   107028:  652:    deckCounter = state->deckCount[player];//Create holder for the deck count
   107028:  653:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   107028:  654:    state->deckCount[player]--;
   107028:  655:    state->handCount[player]++;//Increment hand count
        -:  656:  }
        -:  657:
   107106:  658:  return 0;
        -:  659:}
        -:  660:
function getCost called 20047 returned 100% blocks executed 93%
    20047:  661:int getCost(int cardNumber)
        -:  662:{
    20047:  663:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 0%
branch 27 taken 0%
        -:  664:    {
        -:  665:    case curse:
      762:  666:      return 0;
        -:  667:    case estate:
      789:  668:      return 2;
        -:  669:    case duchy:
      782:  670:      return 5;
        -:  671:    case province:
      744:  672:      return 8;
        -:  673:    case copper:
      758:  674:      return 0;
        -:  675:    case silver:
      805:  676:      return 3;
        -:  677:    case gold:
      725:  678:      return 6;
        -:  679:    case adventurer:
      764:  680:      return 6;
        -:  681:    case council_room:
      790:  682:      return 5;
        -:  683:    case feast:
      786:  684:      return 4;
        -:  685:    case gardens:
      731:  686:      return 4;
        -:  687:    case mine:
      778:  688:      return 5;
        -:  689:    case remodel:
      807:  690:      return 4;
        -:  691:    case smithy:
      770:  692:      return 4;
        -:  693:    case village:
      733:  694:      return 3;
        -:  695:    case baron:
      784:  696:      return 4;
        -:  697:    case great_hall:
      795:  698:      return 3;
        -:  699:    case minion:
      795:  700:      return 5;
        -:  701:    case steward:
      750:  702:      return 3;
        -:  703:    case tribute:
      753:  704:      return 5;
        -:  705:    case ambassador:
      763:  706:      return 3;
        -:  707:    case cutpurse:
      752:  708:      return 4;
        -:  709:    case embargo:
      759:  710:      return 2;
        -:  711:    case outpost:
      799:  712:      return 5;
        -:  713:    case salvager:
      753:  714:      return 4;
        -:  715:    case sea_hag:
      820:  716:      return 4;
        -:  717:    case treasure_map:
    #####:  718:      return 4;
        -:  719:    }
        -:  720:
    #####:  721:  return -1;
        -:  722:}
        -:  723:
function cardEffect called 20067 returned 100% blocks executed 12%
    20067:  724:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  725:{
        -:  726:  int i;
        -:  727:  int j;
        -:  728:  int k;
        -:  729:  int x;
        -:  730:  int index;
    20067:  731:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    20067:  732:  int nextPlayer = currentPlayer + 1;
        -:  733:
    20067:  734:  int tributeRevealedCards[2] = {-1, -1};
        -:  735:  int temphand[MAX_HAND];// moved above the if statement
    20067:  736:  int drawntreasure=0;
        -:  737:  int cardDrawn;
    20067:  738:  int z = 0;// this is the counter for the temp hand
    20067:  739:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    20000:  740:    nextPlayer = 0;
        -:  741:  }
        -:  742:
        -:  743:
        -:  744:  //uses switch to select card and perform actions
    20067:  745:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 99%
branch 15 taken 1%
branch 16 taken 0%
branch 17 taken 1%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  746:    {
        -:  747:    case adventurer:
    #####:  748:      playAdventurer(drawntreasure, state,currentPlayer,z,temphand);
call    0 never executed
    #####:  749:      return 0;
        -:  750:
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  756:	}
        -:  757:
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
call    0 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  772:
    #####:  773:      return 0;
        -:  774:
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
    #####:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  798:
    #####:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
    #####:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
    #####:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:
    #####:  826:      return 0;
        -:  827:
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
    #####:  864:      return 0;
        -:  865:
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:
        -:  892:    case smithy:
    #####:  893:      if (playSmithy(currentPlayer, state, handPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:        return 0;
    #####:  895:      return 0;
        -:  896:
        -:  897:    case village:
    #####:  898:      playVillage(handPos, state, currentPlayer);
call    0 never executed
    #####:  899:      return 0;
        -:  900:
        -:  901:    case baron:
    #####:  902:      state->numBuys++;//Increase buys by 1!
    #####:  903:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  904:	int p = 0;//Iterator for hand!
    #####:  905:	int card_not_discarded = 1;//Flag for discard set!
    #####:  906:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  907:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  909:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  910:	    state->discardCount[currentPlayer]++;
    #####:  911:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  912:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  913:	    }
    #####:  914:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  915:	    state->handCount[currentPlayer]--;
    #####:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
    #####:  918:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  919:	    if(DEBUG) {
        -:  920:	      printf("No estate cards in your hand, invalid choice\n");
        -:  921:	      printf("Must gain an estate if there are any\n");
        -:  922:	    }
    #####:  923:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  925:	      state->supplyCount[estate]--;//Decrement estates
    #####:  926:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:		isGameOver(state);
call    0 never executed
        -:  928:	      }
        -:  929:	    }
    #####:  930:	    card_not_discarded = 0;//Exit the loop
        -:  931:	  }
        -:  932:
        -:  933:	  else{
    #####:  934:	    p++;//Next card
        -:  935:	  }
        -:  936:	}
        -:  937:      }
        -:  938:
        -:  939:      else{
    #####:  940:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  941:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  942:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  943:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	    isGameOver(state);
call    0 never executed
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case great_hall:
    #####:  953:      playGreat_hall(handPos, state,currentPlayer);
call    0 never executed
    #####:  954:      return 0;
        -:  955:
        -:  956:    case minion:
        -:  957:      //+1 action
    #####:  958:      state->numActions++;
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:
    #####:  963:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  state->coins = state->coins + 2;
        -:  966:	}
        -:  967:
    #####:  968:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  969:	{
        -:  970:	  //discard hand
    #####:  971:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  972:	    {
    #####:  973:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  974:	    }
        -:  975:
        -:  976:	  //draw 4
    #####:  977:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  980:	    }
        -:  981:
        -:  982:	  //other players discard hand and redraw if hand size > 4
    #####:  983:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  986:		{
    #####:  987:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  988:		    {
        -:  989:		      //discard hand
    #####:  990:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  991:			{
    #####:  992:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  993:			}
        -:  994:
        -:  995:		      //draw 4
    #####:  996:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  997:			{
    #####:  998:			  drawCard(i, state);
call    0 never executed
        -:  999:			}
        -: 1000:		    }
        -: 1001:		}
        -: 1002:	    }
        -: 1003:
        -: 1004:	}
    #####: 1005:      return 0;
        -: 1006:
        -: 1007:    case steward:
    #####: 1008:      playSteward(choice1,choice2,choice3,currentPlayer,state,handPos);
call    0 never executed
    #####: 1009:      return 0;
        -: 1010:
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
    #####: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	}
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }
        -: 1047:
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (DEBUG)
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:
        -: 1128:    case cutpurse:
        -: 1129:
    20000: 1130:      updateCoins(currentPlayer, state, 2);
call    0 returned 100%
    60000: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1132:	{
    40000: 1133:	  if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1134:	    {
    60000: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1136:		{
    60000: 1137:		  if (state->hand[i][j] == copper)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1138:		    {
    20000: 1139:		      discardCard(j, i, state, 0);
call    0 returned 100%
    20000: 1140:		      break;
        -: 1141:		    }
    40000: 1142:		  if (j == state->handCount[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
    #####: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}
    #####: 1149:		      break;
        -: 1150:		    }
        -: 1151:		}
        -: 1152:
        -: 1153:	    }
        -: 1154:
        -: 1155:	}
        -: 1156:
        -: 1157:      //discard played card from hand
    20000: 1158:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1159:
    20000: 1160:      return 0;
        -: 1161:
        -: 1162:
        -: 1163:    case embargo:
        -: 1164:      //+2 Coins
       20: 1165:      state->coins = state->coins + 2;
        -: 1166:
        -: 1167:      //see if selected pile is in play
       20: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 1169:	{
        6: 1170:	  return -1;
        -: 1171:	}
        -: 1172:
        -: 1173:      //add embargo token to selected supply pile
       14: 1174:      state->embargoTokens[choice1]++;
        -: 1175:
        -: 1176:      //trash card
       14: 1177:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       14: 1178:      return 0;
        -: 1179:
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
       47: 1190:      state->numBuys++;
        -: 1191:
       47: 1192:      if (choice1)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
       46: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1196:	  //trash card
       46: 1197:	  discardCard(choice1, currentPlayer, state, 1);
call    0 returned 100%
        -: 1198:	}
        -: 1199:
        -: 1200:      //discard card
       47: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       47: 1202:      return 0;
        -: 1203:
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 40147 returned 100% blocks executed 88%
    40147: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:
        -: 1251:  //if card is not trashed, added to Played pile
    40147: 1252:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1253:    {
        -: 1254:      //add card to played pile
    40087: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    40087: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:
        -: 1259:  //set played card to -1
    40147: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:
        -: 1262:  //remove card from player's hand
    40147: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
        3: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
    40144: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
    40144: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
    40144: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
    40144: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:
    40147: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 10 returned 100% blocks executed 80%
       10: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
       10: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
        -: 1292:    {
        3: 1293:      return -1;
        -: 1294:    }
        -: 1295:
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
        7: 1301:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
        7: 1306:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
        7: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        7: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:
        -: 1317:  //decrease number in supply pile
        7: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:
        7: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 60676 returned 100% blocks executed 100%
    60676: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:
        -: 1327:  //reset coin count
    60676: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
  2155071: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -: 1332:    {
  2094395: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1334:	{
   284968: 1335:	  state->coins += 1;
        -: 1336:	}
  1809427: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1338:	{
    81683: 1339:	  state->coins += 2;
        -: 1340:	}
  1727744: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1342:	{
    82080: 1343:	  state->coins += 3;
        -: 1344:	}
        -: 1345:    }
        -: 1346:
        -: 1347:  //add bonus
    60676: 1348:  state->coins += bonus;
        -: 1349:
    60676: 1350:  return 0;
        -: 1351:}
starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
tests complete! 3 errors
starting testing for adventurer card
tests complete! 0 errors
starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
tests complete! 6 errors
starting testing for adventurer card
treasures added incorrectly
no treasure cards added on 0 deck attempt
tests complete! 2 errors
starting testing for embargo card
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
selected supply is in play
something went wrong pile not embargoed!
tests complete! 2 errors
starting testing for adventurer card
tests complete! 0 errors
starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
tests complete! 5 errors
starting testing for adventurer card
tests complete! 0 errors
starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
tests complete! 2 errors
starting testing for adventurer card
treasures added incorrectly
no treasure cards added on 0 deck attempt
treasures added incorrectly
no treasure cards added on 0 deck attempt
tests complete! 4 errors
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'discardCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 18
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'updateCoins'
Lines executed:90.91% of 11
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playSteward'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 5

Function 'playGreat_hall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 13
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 1

Function 'playSmithy'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'cardEffect'
Lines executed:6.33% of 221
Branches executed:13.66% of 183
Taken at least once:2.19% of 183
Calls executed:3.57% of 56

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

File 'dominion.c'
Lines executed:28.94% of 577
Branches executed:29.98% of 417
Taken at least once:20.62% of 417
Calls executed:17.02% of 94
dominion.c:creating 'dominion.c.gcov'

starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
tests complete! 3 errors
starting testing for adventurer card
tests complete! 0 errors
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'discardCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 18
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playSteward'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 5

Function 'playGreat_hall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 13
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 1

Function 'playSmithy'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'cardEffect'
Lines executed:6.33% of 221
Branches executed:13.66% of 183
Taken at least once:2.19% of 183
Calls executed:3.57% of 56

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

File 'dominion.c'
Lines executed:29.12% of 577
Branches executed:29.98% of 417
Taken at least once:20.86% of 417
Calls executed:17.02% of 94
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:    9:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
    #####:   10:  int i = 0;
    #####:   11:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:   12:  {
    #####:   13:    drawCard(currentPlayer, state);
call    0 never executed
        -:   14:  }
        -:   15:      //discard card from hand
    #####:   16:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   17:  return 1;
        -:   18:}
        -:   19:
function playAdventurer called 160 returned 100% blocks executed 100%
      160:   20:int playAdventurer(int drawntreasure, struct gameState *state,int currentPlayer,int z,int temphand[MAX_HAND]){
        -:   21:  int cardDrawn;
        -:   22:
     9232:   23:  while(drawntreasure<2){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     8912:   24:    drawCard(currentPlayer, state);
call    0 returned 100%
     8912:   25:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:   26:
     9232:   27:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      320:   28:      drawntreasure++;
        -:   29:    else{
     8592:   30:      temphand[z]=cardDrawn;
     8592:   31:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     8592:   32:      z++;
        -:   33:    }
        -:   34:  }
        -:   35:
     8912:   36:  while(z-1>=0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     8592:   37:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     8592:   38:    z=z-1;
        -:   39:  }
      160:   40:  return 0;
        -:   41:}
        -:   42:
function playVillage called 0 returned 0% blocks executed 0%
    #####:   43:int playVillage(int handPos,struct gameState *state,int currentPlayer){
    #####:   44:  drawCard(currentPlayer, state);
call    0 never executed
    #####:   45:  state->numActions = state->numActions + 2;
    #####:   46:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   47:  return 0;
        -:   48:}
        -:   49:
function playGreat_hall called 0 returned 0% blocks executed 0%
    #####:   50:int playGreat_hall(int handPos, struct gameState *state,int currentPlayer){
        -:   51:   //+1 Card
    #####:   52:  drawCard(currentPlayer, state);
call    0 never executed
        -:   53:      //+1 Actions
    #####:   54:  state->numActions--;
        -:   55:      //discard card from hand
    #####:   56:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   57:  return 0;
        -:   58:}
        -:   59:
        -:   60:
function playSteward called 0 returned 0% blocks executed 0%
    #####:   61:int playSteward(int choice1,int choice2,int choice3,int currentPlayer,struct gameState *state,int handPos){
    #####:   62:  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:   63:  {
        -:   64:    //+2 cards
    #####:   65:    drawCard(currentPlayer, state);
call    0 never executed
    #####:   66:    drawCard(currentPlayer, state);
call    0 never executed
        -:   67:  }
    #####:   68:  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:   69:  {
        -:   70:    //+2 coins
    #####:   71:    state->coins = state->coins + 2;
        -:   72:  }
        -:   73:  else
        -:   74:  {
        -:   75:    //trash 2 cards in hand
    #####:   76:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:   77:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:   78:  }
        -:   79:
        -:   80:      //discard card from hand
    #####:   81:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   82:  return 0;
        -:   83:}
        -:   84:
        -:   85:
function compare called 19007 returned 100% blocks executed 100%
    19007:   86:int compare(const void* a, const void* b) {
    19007:   87:  if (*(int*)a > *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
     8664:   88:    return 1;
    10343:   89:  if (*(int*)a < *(int*)b)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
     5349:   90:    return -1;
     4994:   91:  return 0;
        -:   92:}
        -:   93:
function newGame called 0 returned 0% blocks executed 0%
    #####:   94:struct gameState* newGame() {
    #####:   95:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   96:  return g;
        -:   97:}
        -:   98:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   99:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  100:		  int k8, int k9, int k10) {
    #####:  101:  int* k = malloc(10 * sizeof(int));
    #####:  102:  k[0] = k1;
    #####:  103:  k[1] = k2;
    #####:  104:  k[2] = k3;
    #####:  105:  k[3] = k4;
    #####:  106:  k[4] = k5;
    #####:  107:  k[5] = k6;
    #####:  108:  k[6] = k7;
    #####:  109:  k[7] = k8;
    #####:  110:  k[8] = k9;
    #####:  111:  k[9] = k10;
    #####:  112:  return k;
        -:  113:}
        -:  114:
function initializeGame called 60 returned 100% blocks executed 83%
       60:  115:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  116:		   struct gameState *state) {
        -:  117:
        -:  118:  int i;
        -:  119:  int j;
        -:  120:  int it;
        -:  121:  //set up random number generator
       60:  122:  SelectStream(1);
call    0 returned 100%
       60:  123:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  124:
        -:  125:  //check number of players
       60:  126:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  127:    {
    #####:  128:      return -1;
        -:  129:    }
        -:  130:
        -:  131:  //set number of players
       60:  132:  state->numPlayers = numPlayers;
        -:  133:
        -:  134:  //check selected kingdom cards are different
      660:  135:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  136:    {
     6600:  137:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  138:        {
     6000:  139:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  140:	    {
    #####:  141:	      return -1;
        -:  142:	    }
        -:  143:        }
        -:  144:    }
        -:  145:
        -:  146:
        -:  147:  //initialize supply
        -:  148:  ///////////////////////////////
        -:  149:
        -:  150:  //set number of Curse cards
       60:  151:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  152:    {
       60:  153:      state->supplyCount[curse] = 10;
        -:  154:    }
    #####:  155:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  156:    {
    #####:  157:      state->supplyCount[curse] = 20;
        -:  158:    }
        -:  159:  else
        -:  160:    {
    #####:  161:      state->supplyCount[curse] = 30;
        -:  162:    }
        -:  163:
        -:  164:  //set number of Victory cards
       60:  165:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  166:    {
       60:  167:      state->supplyCount[estate] = 8;
       60:  168:      state->supplyCount[duchy] = 8;
       60:  169:      state->supplyCount[province] = 8;
        -:  170:    }
        -:  171:  else
        -:  172:    {
    #####:  173:      state->supplyCount[estate] = 12;
    #####:  174:      state->supplyCount[duchy] = 12;
    #####:  175:      state->supplyCount[province] = 12;
        -:  176:    }
        -:  177:
        -:  178:  //set number of Treasure cards
       60:  179:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       60:  180:  state->supplyCount[silver] = 40;
       60:  181:  state->supplyCount[gold] = 30;
        -:  182:
        -:  183:  //set number of Kingdom cards
     1260:  184:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  185:    {
     9900:  186:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  187:	{
     9300:  188:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  189:	    {
        -:  190:	      //check if card is a 'Victory' Kingdom card
      600:  191:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  192:		{
    #####:  193:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  194:		    state->supplyCount[i] = 8;
        -:  195:		  }
    #####:  196:		  else{ state->supplyCount[i] = 12; }
        -:  197:		}
        -:  198:	      else
        -:  199:		{
      600:  200:		  state->supplyCount[i] = 10;
        -:  201:		}
      600:  202:	      break;
        -:  203:	    }
        -:  204:	  else    //card is not in the set choosen for the game
        -:  205:	    {
     8700:  206:	      state->supplyCount[i] = -1;
        -:  207:	    }
        -:  208:	}
        -:  209:
        -:  210:    }
        -:  211:
        -:  212:  ////////////////////////
        -:  213:  //supply intilization complete
        -:  214:
        -:  215:  //set player decks
      180:  216:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  217:    {
      120:  218:      state->deckCount[i] = 0;
      480:  219:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  220:	{
      360:  221:	  state->deck[i][j] = estate;
      360:  222:	  state->deckCount[i]++;
        -:  223:	}
      960:  224:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  225:	{
      840:  226:	  state->deck[i][j] = copper;
      840:  227:	  state->deckCount[i]++;
        -:  228:	}
        -:  229:    }
        -:  230:
        -:  231:  //shuffle player decks
      180:  232:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  233:    {
      120:  234:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  235:	{
    #####:  236:	  return -1;
        -:  237:	}
        -:  238:    }
        -:  239:
        -:  240:  //draw player hands
      180:  241:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  242:    {
        -:  243:      //initialize hand size to zero
      120:  244:      state->handCount[i] = 0;
      120:  245:      state->discardCount[i] = 0;
        -:  246:      //draw 5 cards
        -:  247:      // for (j = 0; j < 5; j++)
        -:  248:      //	{
        -:  249:      //	  drawCard(i, state);
        -:  250:      //	}
        -:  251:    }
        -:  252:
        -:  253:  //set embargo tokens to 0 for all supply piles
     1680:  254:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  255:    {
     1620:  256:      state->embargoTokens[i] = 0;
        -:  257:    }
        -:  258:
        -:  259:  //initialize first player's turn
       60:  260:  state->outpostPlayed = 0;
       60:  261:  state->phase = 0;
       60:  262:  state->numActions = 1;
       60:  263:  state->numBuys = 1;
       60:  264:  state->playedCardCount = 0;
       60:  265:  state->whoseTurn = 0;
       60:  266:  state->handCount[state->whoseTurn] = 0;
        -:  267:  //int it; move to top
        -:  268:
        -:  269:  //Moved draw cards to here, only drawing at the start of a turn
      360:  270:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      300:  271:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  272:  }
        -:  273:
       60:  274:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  275:
       60:  276:  return 0;
        -:  277:}
        -:  278:
function shuffle called 440 returned 100% blocks executed 100%
      440:  279:int shuffle(int player, struct gameState *state) {
        -:  280:
        -:  281:
        -:  282:  int newDeck[MAX_DECK];
      440:  283:  int newDeckPos = 0;
        -:  284:  int card;
        -:  285:  int i;
        -:  286:
      440:  287:  if (state->deckCount[player] < 1)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
      202:  288:    return -1;
      238:  289:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  290:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  291:
     5650:  292:  while (state->deckCount[player] > 0) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
     5174:  293:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     5174:  294:    newDeck[newDeckPos] = state->deck[player][card];
     5174:  295:    newDeckPos++;
    65899:  296:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    60725:  297:      state->deck[player][i] = state->deck[player][i+1];
        -:  298:    }
     5174:  299:    state->deckCount[player]--;
        -:  300:  }
     5412:  301:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
     5174:  302:    state->deck[player][i] = newDeck[i];
     5174:  303:    state->deckCount[player]++;
        -:  304:  }
        -:  305:
      238:  306:  return 0;
        -:  307:}
        -:  308:
function playCard called 20 returned 100% blocks executed 79%
       20:  309:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  310:{
        -:  311:  int card;
       20:  312:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  313:
        -:  314:  //check if it is the right phase
       20:  315:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  316:    {
    #####:  317:      return -1;
        -:  318:    }
        -:  319:
        -:  320:  //check if player has enough actions
       20:  321:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  322:    {
    #####:  323:      return -1;
        -:  324:    }
        -:  325:
        -:  326:  //get card played
       20:  327:  card = handCard(handPos, state);
call    0 returned 100%
        -:  328:
        -:  329:  //check if selected card is an action
       20:  330:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  331:    {
    #####:  332:      return -1;
        -:  333:    }
        -:  334:
        -:  335:  //play card
       20:  336:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
        -:  337:    {
        9:  338:      return -1;
        -:  339:    }
        -:  340:
        -:  341:  //reduce number of actions
       11:  342:  state->numActions--;
        -:  343:
        -:  344:  //update coins (Treasure cards may be added with card draws)
       11:  345:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  346:
       11:  347:  return 0;
        -:  348:}
        -:  349:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  350:int buyCard(int supplyPos, struct gameState *state) {
        -:  351:  int who;
    #####:  352:  if (DEBUG){
        -:  353:    printf("Entering buyCard...\n");
        -:  354:  }
        -:  355:
        -:  356:  // I don't know what to do about the phase thing.
        -:  357:
    #####:  358:  who = state->whoseTurn;
        -:  359:
    #####:  360:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  361:    if (DEBUG)
        -:  362:      printf("You do not have any buys left\n");
    #####:  363:    return -1;
    #####:  364:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  365:    if (DEBUG)
        -:  366:      printf("There are not any of that type of card left\n");
    #####:  367:    return -1;
    #####:  368:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:    if (DEBUG)
        -:  370:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  371:    return -1;
        -:  372:  } else {
    #####:  373:    state->phase=1;
        -:  374:    //state->supplyCount[supplyPos]--;
    #####:  375:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  376:
    #####:  377:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  378:    state->numBuys--;
    #####:  379:    if (DEBUG)
        -:  380:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  381:  }
        -:  382:
        -:  383:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  384:  //state->discardCount[who]++;
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  389:int numHandCards(struct gameState *state) {
    #####:  390:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  391:}
        -:  392:
function handCard called 20 returned 100% blocks executed 100%
       20:  393:int handCard(int handPos, struct gameState *state) {
       20:  394:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  395:  return state->hand[currentPlayer][handPos];
        -:  396:}
        -:  397:
function supplyCount called 20 returned 100% blocks executed 100%
       20:  398:int supplyCount(int card, struct gameState *state) {
       20:  399:  return state->supplyCount[card];
        -:  400:}
        -:  401:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  402:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  403:  int i;
    #####:  404:  int count = 0;
        -:  405:
    #####:  406:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  409:    }
        -:  410:
    #####:  411:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  414:    }
        -:  415:
    #####:  416:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  419:    }
        -:  420:
    #####:  421:  return count;
        -:  422:}
        -:  423:
function whoseTurn called 60 returned 100% blocks executed 100%
       60:  424:int whoseTurn(struct gameState *state) {
       60:  425:  return state->whoseTurn;
        -:  426:}
        -:  427:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  428:int endTurn(struct gameState *state) {
        -:  429:  int k;
        -:  430:  int i;
    #####:  431:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  432:
        -:  433:  //Discard hand
    #####:  434:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  435:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  436:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  437:  }
    #####:  438:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  439:
        -:  440:  //Code for determining the player
    #####:  441:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  442:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  443:  }
        -:  444:  else{
    #####:  445:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  446:  }
        -:  447:
    #####:  448:  state->outpostPlayed = 0;
    #####:  449:  state->phase = 0;
    #####:  450:  state->numActions = 1;
    #####:  451:  state->coins = 0;
    #####:  452:  state->numBuys = 1;
    #####:  453:  state->playedCardCount = 0;
    #####:  454:  state->handCount[state->whoseTurn] = 0;
        -:  455:
        -:  456:  //int k; move to top
        -:  457:  //Next player draws hand
    #####:  458:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  459:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  460:  }
        -:  461:
        -:  462:  //Update money
    #####:  463:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  464:
    #####:  465:  return 0;
        -:  466:}
        -:  467:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  468:int isGameOver(struct gameState *state) {
        -:  469:  int i;
        -:  470:  int j;
        -:  471:
        -:  472:  //if stack of Province cards is empty, the game ends
    #####:  473:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  474:    {
    #####:  475:      return 1;
        -:  476:    }
        -:  477:
        -:  478:  //if three supply pile are at 0, the game ends
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j++;
        -:  485:	}
        -:  486:    }
    #####:  487:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      return 1;
        -:  490:    }
        -:  491:
    #####:  492:  return 0;
        -:  493:}
        -:  494:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  495:int scoreFor (int player, struct gameState *state) {
        -:  496:
        -:  497:  int i;
    #####:  498:  int score = 0;
        -:  499:  //score from hand
    #####:  500:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  503:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  504:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  505:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  506:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  507:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  508:    }
        -:  509:
        -:  510:  //score from discard
    #####:  511:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  514:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  515:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  516:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  517:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  518:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  519:    }
        -:  520:
        -:  521:  //score from deck
    #####:  522:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  525:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  526:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  527:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  528:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  529:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  530:    }
        -:  531:
    #####:  532:  return score;
        -:  533:}
        -:  534:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  535:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  536:  int i;
        -:  537:  int j;
        -:  538:  int highScore;
        -:  539:  int currentPlayer;
        -:  540:
        -:  541:  //get score for each player
    #####:  542:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  543:    {
        -:  544:      //set unused player scores to -9999
    #####:  545:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  546:	{
    #####:  547:	  players[i] = -9999;
        -:  548:	}
        -:  549:      else
        -:  550:	{
    #####:  551:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  552:	}
        -:  553:    }
        -:  554:
        -:  555:  //find highest score
    #####:  556:  j = 0;
    #####:  557:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  558:    {
    #####:  559:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  560:	{
    #####:  561:	  j = i;
        -:  562:	}
        -:  563:    }
    #####:  564:  highScore = players[j];
        -:  565:
        -:  566:  //add 1 to players who had less turns
    #####:  567:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:    {
    #####:  570:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  571:	{
    #####:  572:	  players[i]++;
        -:  573:	}
        -:  574:    }
        -:  575:
        -:  576:  //find new highest score
    #####:  577:  j = 0;
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  581:	{
    #####:  582:	  j = i;
        -:  583:	}
        -:  584:    }
    #####:  585:  highScore = players[j];
        -:  586:
        -:  587:  //set winners in array to 1 and rest to 0
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  591:	{
    #####:  592:	  players[i] = 1;
        -:  593:	}
        -:  594:      else
        -:  595:	{
    #####:  596:	  players[i] = 0;
        -:  597:	}
        -:  598:    }
        -:  599:
    #####:  600:  return 0;
        -:  601:}
        -:  602:
function drawCard called 9212 returned 100% blocks executed 100%
     9212:  603:int drawCard(int player, struct gameState *state)
        -:  604:{	int count;
        -:  605:  int deckCounter;
     9212:  606:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  607:
        -:  608:    //Step 1 Shuffle the discard pile back into a deck
        -:  609:    int i;
        -:  610:    //Move discard to deck
     4294:  611:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
     3974:  612:      state->deck[player][i] = state->discard[player][i];
     3974:  613:      state->discard[player][i] = -1;
        -:  614:    }
        -:  615:
      320:  616:    state->deckCount[player] = state->discardCount[player];
      320:  617:    state->discardCount[player] = 0;//Reset discard
        -:  618:
        -:  619:    //Shufffle the deck
      320:  620:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  621:
        -:  622:    if (1){//Debug statements
        -:  623:      //printf("Deck count now: %d\n", state->deckCount[player]);
        -:  624:    }
        -:  625:
      320:  626:    state->discardCount[player] = 0;
        -:  627:
        -:  628:    //Step 2 Draw Card
      320:  629:    count = state->handCount[player];//Get current player's hand count
        -:  630:
        -:  631:    if (1){//Debug statements
        -:  632:      //printf("Current hand count: %d\n", count);
        -:  633:    }
        -:  634:
      320:  635:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  636:
      320:  637:    if (deckCounter == 0)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
      202:  638:      return -1;
        -:  639:
      118:  640:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      118:  641:    state->deckCount[player]--;
      118:  642:    state->handCount[player]++;//Increment hand count
        -:  643:  }
        -:  644:
        -:  645:  else{
     8892:  646:    int count = state->handCount[player];//Get current hand count for player
        -:  647:    int deckCounter;
        -:  648:    if (1){//Debug statements
        -:  649:      //printf("Current hand count: %d\n", count);
        -:  650:    }
        -:  651:
     8892:  652:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8892:  653:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8892:  654:    state->deckCount[player]--;
     8892:  655:    state->handCount[player]++;//Increment hand count
        -:  656:  }
        -:  657:
     9010:  658:  return 0;
        -:  659:}
        -:  660:
function getCost called 0 returned 0% blocks executed 0%
    #####:  661:int getCost(int cardNumber)
        -:  662:{
    #####:  663:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  664:    {
        -:  665:    case curse:
    #####:  666:      return 0;
        -:  667:    case estate:
    #####:  668:      return 2;
        -:  669:    case duchy:
    #####:  670:      return 5;
        -:  671:    case province:
    #####:  672:      return 8;
        -:  673:    case copper:
    #####:  674:      return 0;
        -:  675:    case silver:
    #####:  676:      return 3;
        -:  677:    case gold:
    #####:  678:      return 6;
        -:  679:    case adventurer:
    #####:  680:      return 6;
        -:  681:    case council_room:
    #####:  682:      return 5;
        -:  683:    case feast:
    #####:  684:      return 4;
        -:  685:    case gardens:
    #####:  686:      return 4;
        -:  687:    case mine:
    #####:  688:      return 5;
        -:  689:    case remodel:
    #####:  690:      return 4;
        -:  691:    case smithy:
    #####:  692:      return 4;
        -:  693:    case village:
    #####:  694:      return 3;
        -:  695:    case baron:
    #####:  696:      return 4;
        -:  697:    case great_hall:
    #####:  698:      return 3;
        -:  699:    case minion:
    #####:  700:      return 5;
        -:  701:    case steward:
    #####:  702:      return 3;
        -:  703:    case tribute:
    #####:  704:      return 5;
        -:  705:    case ambassador:
    #####:  706:      return 3;
        -:  707:    case cutpurse:
    #####:  708:      return 4;
        -:  709:    case embargo:
    #####:  710:      return 2;
        -:  711:    case outpost:
    #####:  712:      return 5;
        -:  713:    case salvager:
    #####:  714:      return 4;
        -:  715:    case sea_hag:
    #####:  716:      return 4;
        -:  717:    case treasure_map:
    #####:  718:      return 4;
        -:  719:    }
        -:  720:
    #####:  721:  return -1;
        -:  722:}
        -:  723:
function cardEffect called 40 returned 100% blocks executed 3%
       40:  724:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  725:{
        -:  726:  int i;
        -:  727:  int j;
        -:  728:  int k;
        -:  729:  int x;
        -:  730:  int index;
       40:  731:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       40:  732:  int nextPlayer = currentPlayer + 1;
        -:  733:
       40:  734:  int tributeRevealedCards[2] = {-1, -1};
        -:  735:  int temphand[MAX_HAND];// moved above the if statement
       40:  736:  int drawntreasure=0;
        -:  737:  int cardDrawn;
       40:  738:  int z = 0;// this is the counter for the temp hand
       40:  739:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  740:    nextPlayer = 0;
        -:  741:  }
        -:  742:
        -:  743:
        -:  744:  //uses switch to select card and perform actions
       40:  745:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 100%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  746:    {
        -:  747:    case adventurer:
    #####:  748:      playAdventurer(drawntreasure, state,currentPlayer,z,temphand);
call    0 never executed
    #####:  749:      return 0;
        -:  750:
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  756:	}
        -:  757:
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
call    0 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  772:
    #####:  773:      return 0;
        -:  774:
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
    #####:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  798:
    #####:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
    #####:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
    #####:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:
    #####:  826:      return 0;
        -:  827:
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
    #####:  864:      return 0;
        -:  865:
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:
        -:  892:    case smithy:
    #####:  893:      if (playSmithy(currentPlayer, state, handPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:        return 0;
    #####:  895:      return 0;
        -:  896:
        -:  897:    case village:
    #####:  898:      playVillage(handPos, state, currentPlayer);
call    0 never executed
    #####:  899:      return 0;
        -:  900:
        -:  901:    case baron:
    #####:  902:      state->numBuys++;//Increase buys by 1!
    #####:  903:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  904:	int p = 0;//Iterator for hand!
    #####:  905:	int card_not_discarded = 1;//Flag for discard set!
    #####:  906:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  907:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  909:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  910:	    state->discardCount[currentPlayer]++;
    #####:  911:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  912:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  913:	    }
    #####:  914:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  915:	    state->handCount[currentPlayer]--;
    #####:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
    #####:  918:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  919:	    if(DEBUG) {
        -:  920:	      printf("No estate cards in your hand, invalid choice\n");
        -:  921:	      printf("Must gain an estate if there are any\n");
        -:  922:	    }
    #####:  923:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  925:	      state->supplyCount[estate]--;//Decrement estates
    #####:  926:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:		isGameOver(state);
call    0 never executed
        -:  928:	      }
        -:  929:	    }
    #####:  930:	    card_not_discarded = 0;//Exit the loop
        -:  931:	  }
        -:  932:
        -:  933:	  else{
    #####:  934:	    p++;//Next card
        -:  935:	  }
        -:  936:	}
        -:  937:      }
        -:  938:
        -:  939:      else{
    #####:  940:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  941:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  942:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  943:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	    isGameOver(state);
call    0 never executed
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case great_hall:
    #####:  953:      playGreat_hall(handPos, state,currentPlayer);
call    0 never executed
    #####:  954:      return 0;
        -:  955:
        -:  956:    case minion:
        -:  957:      //+1 action
    #####:  958:      state->numActions++;
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:
    #####:  963:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  state->coins = state->coins + 2;
        -:  966:	}
        -:  967:
    #####:  968:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  969:	{
        -:  970:	  //discard hand
    #####:  971:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  972:	    {
    #####:  973:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  974:	    }
        -:  975:
        -:  976:	  //draw 4
    #####:  977:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  980:	    }
        -:  981:
        -:  982:	  //other players discard hand and redraw if hand size > 4
    #####:  983:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  986:		{
    #####:  987:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  988:		    {
        -:  989:		      //discard hand
    #####:  990:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  991:			{
    #####:  992:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  993:			}
        -:  994:
        -:  995:		      //draw 4
    #####:  996:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  997:			{
    #####:  998:			  drawCard(i, state);
call    0 never executed
        -:  999:			}
        -: 1000:		    }
        -: 1001:		}
        -: 1002:	    }
        -: 1003:
        -: 1004:	}
    #####: 1005:      return 0;
        -: 1006:
        -: 1007:    case steward:
    #####: 1008:      playSteward(choice1,choice2,choice3,currentPlayer,state,handPos);
call    0 never executed
    #####: 1009:      return 0;
        -: 1010:
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
    #####: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	}
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }
        -: 1047:
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (DEBUG)
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
    #####: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}
    #####: 1149:		      break;
        -: 1150:		    }
        -: 1151:		}
        -: 1152:
        -: 1153:	    }
        -: 1154:
        -: 1155:	}
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:
        -: 1163:    case embargo:
        -: 1164:      //+2 Coins
       40: 1165:      state->coins = state->coins + 2;
        -: 1166:
        -: 1167:      //see if selected pile is in play
       40: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -: 1169:	{
       18: 1170:	  return -1;
        -: 1171:	}
        -: 1172:
        -: 1173:      //add embargo token to selected supply pile
       22: 1174:      state->embargoTokens[choice1]++;
        -: 1175:
        -: 1176:      //trash card
       22: 1177:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       22: 1178:      return 0;
        -: 1179:
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1198:	}
        -: 1199:
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 22 returned 100% blocks executed 63%
       22: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:
        -: 1251:  //if card is not trashed, added to Played pile
       22: 1252:  if (trashFlag < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1253:    {
        -: 1254:      //add card to played pile
    #####: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:
        -: 1259:  //set played card to -1
       22: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:
        -: 1262:  //remove card from player's hand
       22: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
    #####: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
       22: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
       22: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
       22: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
       22: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:
       22: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 20 returned 100% blocks executed 80%
       20: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
        -: 1292:    {
        9: 1293:      return -1;
        -: 1294:    }
        -: 1295:
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
       11: 1301:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
       11: 1306:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
       11: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       11: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:
        -: 1317:  //decrease number in supply pile
       11: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:
       11: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 71 returned 100% blocks executed 100%
       71: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:
        -: 1327:  //reset coin count
       71: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
      415: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1332:    {
      344: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1334:	{
      244: 1335:	  state->coins += 1;
        -: 1336:	}
      100: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1338:	{
        1: 1339:	  state->coins += 2;
        -: 1340:	}
       99: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1342:	{
        1: 1343:	  state->coins += 3;
        -: 1344:	}
        -: 1345:    }
        -: 1346:
        -: 1347:  //add bonus
       71: 1348:  state->coins += bonus;
        -: 1349:
       71: 1350:  return 0;
        -: 1351:}
starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
embargo not acknowledged
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
tests complete! 4 errors
starting testing for adventurer card
treasures added incorrectly
no treasure cards added on 0 deck attempt
tests complete! 2 errors
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'discardCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 18
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playSteward'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 5

Function 'playGreat_hall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 13
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 1

Function 'playSmithy'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'cardEffect'
Lines executed:6.33% of 221
Branches executed:13.66% of 183
Taken at least once:2.19% of 183
Calls executed:3.57% of 56

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

File 'dominion.c'
Lines executed:29.12% of 577
Branches executed:29.98% of 417
Taken at least once:20.86% of 417
Calls executed:17.02% of 94
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:    9:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
    #####:   10:  int i = 0;
    #####:   11:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:   12:  {
    #####:   13:    drawCard(currentPlayer, state);
call    0 never executed
        -:   14:  }
        -:   15:      //discard card from hand
    #####:   16:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   17:  return 1;
        -:   18:}
        -:   19:
function playAdventurer called 240 returned 100% blocks executed 100%
      240:   20:int playAdventurer(int drawntreasure, struct gameState *state,int currentPlayer,int z,int temphand[MAX_HAND]){
        -:   21:  int cardDrawn;
        -:   22:
    13756:   23:  while(drawntreasure<2){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    13276:   24:    drawCard(currentPlayer, state);
call    0 returned 100%
    13276:   25:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:   26:
    13756:   27:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      480:   28:      drawntreasure++;
        -:   29:    else{
    12796:   30:      temphand[z]=cardDrawn;
    12796:   31:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    12796:   32:      z++;
        -:   33:    }
        -:   34:  }
        -:   35:
    13276:   36:  while(z-1>=0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    12796:   37:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    12796:   38:    z=z-1;
        -:   39:  }
      240:   40:  return 0;
        -:   41:}
        -:   42:
function playVillage called 0 returned 0% blocks executed 0%
    #####:   43:int playVillage(int handPos,struct gameState *state,int currentPlayer){
    #####:   44:  drawCard(currentPlayer, state);
call    0 never executed
    #####:   45:  state->numActions = state->numActions + 2;
    #####:   46:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   47:  return 0;
        -:   48:}
        -:   49:
function playGreat_hall called 0 returned 0% blocks executed 0%
    #####:   50:int playGreat_hall(int handPos, struct gameState *state,int currentPlayer){
        -:   51:   //+1 Card
    #####:   52:  drawCard(currentPlayer, state);
call    0 never executed
        -:   53:      //+1 Actions
    #####:   54:  state->numActions--;
        -:   55:      //discard card from hand
    #####:   56:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   57:  return 0;
        -:   58:}
        -:   59:
        -:   60:
function playSteward called 0 returned 0% blocks executed 0%
    #####:   61:int playSteward(int choice1,int choice2,int choice3,int currentPlayer,struct gameState *state,int handPos){
    #####:   62:  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:   63:  {
        -:   64:    //+2 cards
    #####:   65:    drawCard(currentPlayer, state);
call    0 never executed
    #####:   66:    drawCard(currentPlayer, state);
call    0 never executed
        -:   67:  }
    #####:   68:  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:   69:  {
        -:   70:    //+2 coins
    #####:   71:    state->coins = state->coins + 2;
        -:   72:  }
        -:   73:  else
        -:   74:  {
        -:   75:    //trash 2 cards in hand
    #####:   76:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:   77:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:   78:  }
        -:   79:
        -:   80:      //discard card from hand
    #####:   81:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   82:  return 0;
        -:   83:}
        -:   84:
        -:   85:
function compare called 28116 returned 100% blocks executed 100%
    28116:   86:int compare(const void* a, const void* b) {
    28116:   87:  if (*(int*)a > *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
    12698:   88:    return 1;
    15418:   89:  if (*(int*)a < *(int*)b)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
     8004:   90:    return -1;
     7414:   91:  return 0;
        -:   92:}
        -:   93:
function newGame called 0 returned 0% blocks executed 0%
    #####:   94:struct gameState* newGame() {
    #####:   95:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   96:  return g;
        -:   97:}
        -:   98:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   99:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  100:		  int k8, int k9, int k10) {
    #####:  101:  int* k = malloc(10 * sizeof(int));
    #####:  102:  k[0] = k1;
    #####:  103:  k[1] = k2;
    #####:  104:  k[2] = k3;
    #####:  105:  k[3] = k4;
    #####:  106:  k[4] = k5;
    #####:  107:  k[5] = k6;
    #####:  108:  k[6] = k7;
    #####:  109:  k[7] = k8;
    #####:  110:  k[8] = k9;
    #####:  111:  k[9] = k10;
    #####:  112:  return k;
        -:  113:}
        -:  114:
function initializeGame called 90 returned 100% blocks executed 83%
       90:  115:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  116:		   struct gameState *state) {
        -:  117:
        -:  118:  int i;
        -:  119:  int j;
        -:  120:  int it;
        -:  121:  //set up random number generator
       90:  122:  SelectStream(1);
call    0 returned 100%
       90:  123:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  124:
        -:  125:  //check number of players
       90:  126:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  127:    {
    #####:  128:      return -1;
        -:  129:    }
        -:  130:
        -:  131:  //set number of players
       90:  132:  state->numPlayers = numPlayers;
        -:  133:
        -:  134:  //check selected kingdom cards are different
      990:  135:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  136:    {
     9900:  137:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  138:        {
     9000:  139:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  140:	    {
    #####:  141:	      return -1;
        -:  142:	    }
        -:  143:        }
        -:  144:    }
        -:  145:
        -:  146:
        -:  147:  //initialize supply
        -:  148:  ///////////////////////////////
        -:  149:
        -:  150:  //set number of Curse cards
       90:  151:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  152:    {
       90:  153:      state->supplyCount[curse] = 10;
        -:  154:    }
    #####:  155:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  156:    {
    #####:  157:      state->supplyCount[curse] = 20;
        -:  158:    }
        -:  159:  else
        -:  160:    {
    #####:  161:      state->supplyCount[curse] = 30;
        -:  162:    }
        -:  163:
        -:  164:  //set number of Victory cards
       90:  165:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  166:    {
       90:  167:      state->supplyCount[estate] = 8;
       90:  168:      state->supplyCount[duchy] = 8;
       90:  169:      state->supplyCount[province] = 8;
        -:  170:    }
        -:  171:  else
        -:  172:    {
    #####:  173:      state->supplyCount[estate] = 12;
    #####:  174:      state->supplyCount[duchy] = 12;
    #####:  175:      state->supplyCount[province] = 12;
        -:  176:    }
        -:  177:
        -:  178:  //set number of Treasure cards
       90:  179:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       90:  180:  state->supplyCount[silver] = 40;
       90:  181:  state->supplyCount[gold] = 30;
        -:  182:
        -:  183:  //set number of Kingdom cards
     1890:  184:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  185:    {
    14850:  186:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  187:	{
    13950:  188:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  189:	    {
        -:  190:	      //check if card is a 'Victory' Kingdom card
      900:  191:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  192:		{
    #####:  193:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  194:		    state->supplyCount[i] = 8;
        -:  195:		  }
    #####:  196:		  else{ state->supplyCount[i] = 12; }
        -:  197:		}
        -:  198:	      else
        -:  199:		{
      900:  200:		  state->supplyCount[i] = 10;
        -:  201:		}
      900:  202:	      break;
        -:  203:	    }
        -:  204:	  else    //card is not in the set choosen for the game
        -:  205:	    {
    13050:  206:	      state->supplyCount[i] = -1;
        -:  207:	    }
        -:  208:	}
        -:  209:
        -:  210:    }
        -:  211:
        -:  212:  ////////////////////////
        -:  213:  //supply intilization complete
        -:  214:
        -:  215:  //set player decks
      270:  216:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  217:    {
      180:  218:      state->deckCount[i] = 0;
      720:  219:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  220:	{
      540:  221:	  state->deck[i][j] = estate;
      540:  222:	  state->deckCount[i]++;
        -:  223:	}
     1440:  224:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  225:	{
     1260:  226:	  state->deck[i][j] = copper;
     1260:  227:	  state->deckCount[i]++;
        -:  228:	}
        -:  229:    }
        -:  230:
        -:  231:  //shuffle player decks
      270:  232:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  233:    {
      180:  234:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  235:	{
    #####:  236:	  return -1;
        -:  237:	}
        -:  238:    }
        -:  239:
        -:  240:  //draw player hands
      270:  241:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  242:    {
        -:  243:      //initialize hand size to zero
      180:  244:      state->handCount[i] = 0;
      180:  245:      state->discardCount[i] = 0;
        -:  246:      //draw 5 cards
        -:  247:      // for (j = 0; j < 5; j++)
        -:  248:      //	{
        -:  249:      //	  drawCard(i, state);
        -:  250:      //	}
        -:  251:    }
        -:  252:
        -:  253:  //set embargo tokens to 0 for all supply piles
     2520:  254:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  255:    {
     2430:  256:      state->embargoTokens[i] = 0;
        -:  257:    }
        -:  258:
        -:  259:  //initialize first player's turn
       90:  260:  state->outpostPlayed = 0;
       90:  261:  state->phase = 0;
       90:  262:  state->numActions = 1;
       90:  263:  state->numBuys = 1;
       90:  264:  state->playedCardCount = 0;
       90:  265:  state->whoseTurn = 0;
       90:  266:  state->handCount[state->whoseTurn] = 0;
        -:  267:  //int it; move to top
        -:  268:
        -:  269:  //Moved draw cards to here, only drawing at the start of a turn
      540:  270:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      450:  271:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  272:  }
        -:  273:
       90:  274:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  275:
       90:  276:  return 0;
        -:  277:}
        -:  278:
function shuffle called 661 returned 100% blocks executed 100%
      661:  279:int shuffle(int player, struct gameState *state) {
        -:  280:
        -:  281:
        -:  282:  int newDeck[MAX_DECK];
      661:  283:  int newDeckPos = 0;
        -:  284:  int card;
        -:  285:  int i;
        -:  286:
      661:  287:  if (state->deckCount[player] < 1)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
      303:  288:    return -1;
      358:  289:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  290:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  291:
     8408:  292:  while (state->deckCount[player] > 0) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
     7692:  293:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     7692:  294:    newDeck[newDeckPos] = state->deck[player][card];
     7692:  295:    newDeckPos++;
    97280:  296:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    89588:  297:      state->deck[player][i] = state->deck[player][i+1];
        -:  298:    }
     7692:  299:    state->deckCount[player]--;
        -:  300:  }
     8050:  301:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
     7692:  302:    state->deck[player][i] = newDeck[i];
     7692:  303:    state->deckCount[player]++;
        -:  304:  }
        -:  305:
      358:  306:  return 0;
        -:  307:}
        -:  308:
function playCard called 30 returned 100% blocks executed 79%
       30:  309:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  310:{
        -:  311:  int card;
       30:  312:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  313:
        -:  314:  //check if it is the right phase
       30:  315:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  316:    {
    #####:  317:      return -1;
        -:  318:    }
        -:  319:
        -:  320:  //check if player has enough actions
       30:  321:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  322:    {
    #####:  323:      return -1;
        -:  324:    }
        -:  325:
        -:  326:  //get card played
       30:  327:  card = handCard(handPos, state);
call    0 returned 100%
        -:  328:
        -:  329:  //check if selected card is an action
       30:  330:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  331:    {
    #####:  332:      return -1;
        -:  333:    }
        -:  334:
        -:  335:  //play card
       30:  336:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
        -:  337:    {
       11:  338:      return -1;
        -:  339:    }
        -:  340:
        -:  341:  //reduce number of actions
       19:  342:  state->numActions--;
        -:  343:
        -:  344:  //update coins (Treasure cards may be added with card draws)
       19:  345:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  346:
       19:  347:  return 0;
        -:  348:}
        -:  349:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  350:int buyCard(int supplyPos, struct gameState *state) {
        -:  351:  int who;
    #####:  352:  if (DEBUG){
        -:  353:    printf("Entering buyCard...\n");
        -:  354:  }
        -:  355:
        -:  356:  // I don't know what to do about the phase thing.
        -:  357:
    #####:  358:  who = state->whoseTurn;
        -:  359:
    #####:  360:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  361:    if (DEBUG)
        -:  362:      printf("You do not have any buys left\n");
    #####:  363:    return -1;
    #####:  364:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  365:    if (DEBUG)
        -:  366:      printf("There are not any of that type of card left\n");
    #####:  367:    return -1;
    #####:  368:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:    if (DEBUG)
        -:  370:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  371:    return -1;
        -:  372:  } else {
    #####:  373:    state->phase=1;
        -:  374:    //state->supplyCount[supplyPos]--;
    #####:  375:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  376:
    #####:  377:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  378:    state->numBuys--;
    #####:  379:    if (DEBUG)
        -:  380:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  381:  }
        -:  382:
        -:  383:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  384:  //state->discardCount[who]++;
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  389:int numHandCards(struct gameState *state) {
    #####:  390:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  391:}
        -:  392:
function handCard called 30 returned 100% blocks executed 100%
       30:  393:int handCard(int handPos, struct gameState *state) {
       30:  394:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       30:  395:  return state->hand[currentPlayer][handPos];
        -:  396:}
        -:  397:
function supplyCount called 30 returned 100% blocks executed 100%
       30:  398:int supplyCount(int card, struct gameState *state) {
       30:  399:  return state->supplyCount[card];
        -:  400:}
        -:  401:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  402:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  403:  int i;
    #####:  404:  int count = 0;
        -:  405:
    #####:  406:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  409:    }
        -:  410:
    #####:  411:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  414:    }
        -:  415:
    #####:  416:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  419:    }
        -:  420:
    #####:  421:  return count;
        -:  422:}
        -:  423:
function whoseTurn called 90 returned 100% blocks executed 100%
       90:  424:int whoseTurn(struct gameState *state) {
       90:  425:  return state->whoseTurn;
        -:  426:}
        -:  427:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  428:int endTurn(struct gameState *state) {
        -:  429:  int k;
        -:  430:  int i;
    #####:  431:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  432:
        -:  433:  //Discard hand
    #####:  434:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  435:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  436:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  437:  }
    #####:  438:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  439:
        -:  440:  //Code for determining the player
    #####:  441:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  442:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  443:  }
        -:  444:  else{
    #####:  445:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  446:  }
        -:  447:
    #####:  448:  state->outpostPlayed = 0;
    #####:  449:  state->phase = 0;
    #####:  450:  state->numActions = 1;
    #####:  451:  state->coins = 0;
    #####:  452:  state->numBuys = 1;
    #####:  453:  state->playedCardCount = 0;
    #####:  454:  state->handCount[state->whoseTurn] = 0;
        -:  455:
        -:  456:  //int k; move to top
        -:  457:  //Next player draws hand
    #####:  458:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  459:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  460:  }
        -:  461:
        -:  462:  //Update money
    #####:  463:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  464:
    #####:  465:  return 0;
        -:  466:}
        -:  467:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  468:int isGameOver(struct gameState *state) {
        -:  469:  int i;
        -:  470:  int j;
        -:  471:
        -:  472:  //if stack of Province cards is empty, the game ends
    #####:  473:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  474:    {
    #####:  475:      return 1;
        -:  476:    }
        -:  477:
        -:  478:  //if three supply pile are at 0, the game ends
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j++;
        -:  485:	}
        -:  486:    }
    #####:  487:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      return 1;
        -:  490:    }
        -:  491:
    #####:  492:  return 0;
        -:  493:}
        -:  494:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  495:int scoreFor (int player, struct gameState *state) {
        -:  496:
        -:  497:  int i;
    #####:  498:  int score = 0;
        -:  499:  //score from hand
    #####:  500:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  503:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  504:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  505:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  506:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  507:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  508:    }
        -:  509:
        -:  510:  //score from discard
    #####:  511:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  514:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  515:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  516:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  517:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  518:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  519:    }
        -:  520:
        -:  521:  //score from deck
    #####:  522:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  525:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  526:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  527:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  528:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  529:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  530:    }
        -:  531:
    #####:  532:  return score;
        -:  533:}
        -:  534:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  535:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  536:  int i;
        -:  537:  int j;
        -:  538:  int highScore;
        -:  539:  int currentPlayer;
        -:  540:
        -:  541:  //get score for each player
    #####:  542:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  543:    {
        -:  544:      //set unused player scores to -9999
    #####:  545:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  546:	{
    #####:  547:	  players[i] = -9999;
        -:  548:	}
        -:  549:      else
        -:  550:	{
    #####:  551:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  552:	}
        -:  553:    }
        -:  554:
        -:  555:  //find highest score
    #####:  556:  j = 0;
    #####:  557:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  558:    {
    #####:  559:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  560:	{
    #####:  561:	  j = i;
        -:  562:	}
        -:  563:    }
    #####:  564:  highScore = players[j];
        -:  565:
        -:  566:  //add 1 to players who had less turns
    #####:  567:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:    {
    #####:  570:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  571:	{
    #####:  572:	  players[i]++;
        -:  573:	}
        -:  574:    }
        -:  575:
        -:  576:  //find new highest score
    #####:  577:  j = 0;
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  581:	{
    #####:  582:	  j = i;
        -:  583:	}
        -:  584:    }
    #####:  585:  highScore = players[j];
        -:  586:
        -:  587:  //set winners in array to 1 and rest to 0
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  591:	{
    #####:  592:	  players[i] = 1;
        -:  593:	}
        -:  594:      else
        -:  595:	{
    #####:  596:	  players[i] = 0;
        -:  597:	}
        -:  598:    }
        -:  599:
    #####:  600:  return 0;
        -:  601:}
        -:  602:
function drawCard called 13726 returned 100% blocks executed 100%
    13726:  603:int drawCard(int player, struct gameState *state)
        -:  604:{	int count;
        -:  605:  int deckCounter;
    13726:  606:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  607:
        -:  608:    //Step 1 Shuffle the discard pile back into a deck
        -:  609:    int i;
        -:  610:    //Move discard to deck
     6373:  611:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     5892:  612:      state->deck[player][i] = state->discard[player][i];
     5892:  613:      state->discard[player][i] = -1;
        -:  614:    }
        -:  615:
      481:  616:    state->deckCount[player] = state->discardCount[player];
      481:  617:    state->discardCount[player] = 0;//Reset discard
        -:  618:
        -:  619:    //Shufffle the deck
      481:  620:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  621:
        -:  622:    if (1){//Debug statements
        -:  623:      //printf("Deck count now: %d\n", state->deckCount[player]);
        -:  624:    }
        -:  625:
      481:  626:    state->discardCount[player] = 0;
        -:  627:
        -:  628:    //Step 2 Draw Card
      481:  629:    count = state->handCount[player];//Get current player's hand count
        -:  630:
        -:  631:    if (1){//Debug statements
        -:  632:      //printf("Current hand count: %d\n", count);
        -:  633:    }
        -:  634:
      481:  635:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  636:
      481:  637:    if (deckCounter == 0)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
      303:  638:      return -1;
        -:  639:
      178:  640:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      178:  641:    state->deckCount[player]--;
      178:  642:    state->handCount[player]++;//Increment hand count
        -:  643:  }
        -:  644:
        -:  645:  else{
    13245:  646:    int count = state->handCount[player];//Get current hand count for player
        -:  647:    int deckCounter;
        -:  648:    if (1){//Debug statements
        -:  649:      //printf("Current hand count: %d\n", count);
        -:  650:    }
        -:  651:
    13245:  652:    deckCounter = state->deckCount[player];//Create holder for the deck count
    13245:  653:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13245:  654:    state->deckCount[player]--;
    13245:  655:    state->handCount[player]++;//Increment hand count
        -:  656:  }
        -:  657:
    13423:  658:  return 0;
        -:  659:}
        -:  660:
function getCost called 0 returned 0% blocks executed 0%
    #####:  661:int getCost(int cardNumber)
        -:  662:{
    #####:  663:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  664:    {
        -:  665:    case curse:
    #####:  666:      return 0;
        -:  667:    case estate:
    #####:  668:      return 2;
        -:  669:    case duchy:
    #####:  670:      return 5;
        -:  671:    case province:
    #####:  672:      return 8;
        -:  673:    case copper:
    #####:  674:      return 0;
        -:  675:    case silver:
    #####:  676:      return 3;
        -:  677:    case gold:
    #####:  678:      return 6;
        -:  679:    case adventurer:
    #####:  680:      return 6;
        -:  681:    case council_room:
    #####:  682:      return 5;
        -:  683:    case feast:
    #####:  684:      return 4;
        -:  685:    case gardens:
    #####:  686:      return 4;
        -:  687:    case mine:
    #####:  688:      return 5;
        -:  689:    case remodel:
    #####:  690:      return 4;
        -:  691:    case smithy:
    #####:  692:      return 4;
        -:  693:    case village:
    #####:  694:      return 3;
        -:  695:    case baron:
    #####:  696:      return 4;
        -:  697:    case great_hall:
    #####:  698:      return 3;
        -:  699:    case minion:
    #####:  700:      return 5;
        -:  701:    case steward:
    #####:  702:      return 3;
        -:  703:    case tribute:
    #####:  704:      return 5;
        -:  705:    case ambassador:
    #####:  706:      return 3;
        -:  707:    case cutpurse:
    #####:  708:      return 4;
        -:  709:    case embargo:
    #####:  710:      return 2;
        -:  711:    case outpost:
    #####:  712:      return 5;
        -:  713:    case salvager:
    #####:  714:      return 4;
        -:  715:    case sea_hag:
    #####:  716:      return 4;
        -:  717:    case treasure_map:
    #####:  718:      return 4;
        -:  719:    }
        -:  720:
    #####:  721:  return -1;
        -:  722:}
        -:  723:
function cardEffect called 60 returned 100% blocks executed 3%
       60:  724:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  725:{
        -:  726:  int i;
        -:  727:  int j;
        -:  728:  int k;
        -:  729:  int x;
        -:  730:  int index;
       60:  731:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       60:  732:  int nextPlayer = currentPlayer + 1;
        -:  733:
       60:  734:  int tributeRevealedCards[2] = {-1, -1};
        -:  735:  int temphand[MAX_HAND];// moved above the if statement
       60:  736:  int drawntreasure=0;
        -:  737:  int cardDrawn;
       60:  738:  int z = 0;// this is the counter for the temp hand
       60:  739:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  740:    nextPlayer = 0;
        -:  741:  }
        -:  742:
        -:  743:
        -:  744:  //uses switch to select card and perform actions
       60:  745:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 100%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  746:    {
        -:  747:    case adventurer:
    #####:  748:      playAdventurer(drawntreasure, state,currentPlayer,z,temphand);
call    0 never executed
    #####:  749:      return 0;
        -:  750:
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  756:	}
        -:  757:
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
call    0 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  772:
    #####:  773:      return 0;
        -:  774:
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
    #####:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  798:
    #####:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
    #####:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
    #####:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:
    #####:  826:      return 0;
        -:  827:
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
    #####:  864:      return 0;
        -:  865:
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:
        -:  892:    case smithy:
    #####:  893:      if (playSmithy(currentPlayer, state, handPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:        return 0;
    #####:  895:      return 0;
        -:  896:
        -:  897:    case village:
    #####:  898:      playVillage(handPos, state, currentPlayer);
call    0 never executed
    #####:  899:      return 0;
        -:  900:
        -:  901:    case baron:
    #####:  902:      state->numBuys++;//Increase buys by 1!
    #####:  903:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  904:	int p = 0;//Iterator for hand!
    #####:  905:	int card_not_discarded = 1;//Flag for discard set!
    #####:  906:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  907:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  909:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  910:	    state->discardCount[currentPlayer]++;
    #####:  911:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  912:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  913:	    }
    #####:  914:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  915:	    state->handCount[currentPlayer]--;
    #####:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
    #####:  918:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  919:	    if(DEBUG) {
        -:  920:	      printf("No estate cards in your hand, invalid choice\n");
        -:  921:	      printf("Must gain an estate if there are any\n");
        -:  922:	    }
    #####:  923:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  925:	      state->supplyCount[estate]--;//Decrement estates
    #####:  926:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:		isGameOver(state);
call    0 never executed
        -:  928:	      }
        -:  929:	    }
    #####:  930:	    card_not_discarded = 0;//Exit the loop
        -:  931:	  }
        -:  932:
        -:  933:	  else{
    #####:  934:	    p++;//Next card
        -:  935:	  }
        -:  936:	}
        -:  937:      }
        -:  938:
        -:  939:      else{
    #####:  940:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  941:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  942:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  943:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	    isGameOver(state);
call    0 never executed
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case great_hall:
    #####:  953:      playGreat_hall(handPos, state,currentPlayer);
call    0 never executed
    #####:  954:      return 0;
        -:  955:
        -:  956:    case minion:
        -:  957:      //+1 action
    #####:  958:      state->numActions++;
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:
    #####:  963:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  state->coins = state->coins + 2;
        -:  966:	}
        -:  967:
    #####:  968:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  969:	{
        -:  970:	  //discard hand
    #####:  971:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  972:	    {
    #####:  973:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  974:	    }
        -:  975:
        -:  976:	  //draw 4
    #####:  977:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  980:	    }
        -:  981:
        -:  982:	  //other players discard hand and redraw if hand size > 4
    #####:  983:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  986:		{
    #####:  987:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  988:		    {
        -:  989:		      //discard hand
    #####:  990:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  991:			{
    #####:  992:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  993:			}
        -:  994:
        -:  995:		      //draw 4
    #####:  996:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  997:			{
    #####:  998:			  drawCard(i, state);
call    0 never executed
        -:  999:			}
        -: 1000:		    }
        -: 1001:		}
        -: 1002:	    }
        -: 1003:
        -: 1004:	}
    #####: 1005:      return 0;
        -: 1006:
        -: 1007:    case steward:
    #####: 1008:      playSteward(choice1,choice2,choice3,currentPlayer,state,handPos);
call    0 never executed
    #####: 1009:      return 0;
        -: 1010:
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
    #####: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	}
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }
        -: 1047:
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (DEBUG)
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
    #####: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}
    #####: 1149:		      break;
        -: 1150:		    }
        -: 1151:		}
        -: 1152:
        -: 1153:	    }
        -: 1154:
        -: 1155:	}
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:
        -: 1163:    case embargo:
        -: 1164:      //+2 Coins
       60: 1165:      state->coins = state->coins + 2;
        -: 1166:
        -: 1167:      //see if selected pile is in play
       60: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -: 1169:	{
       22: 1170:	  return -1;
        -: 1171:	}
        -: 1172:
        -: 1173:      //add embargo token to selected supply pile
       38: 1174:      state->embargoTokens[choice1]++;
        -: 1175:
        -: 1176:      //trash card
       38: 1177:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       38: 1178:      return 0;
        -: 1179:
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1198:	}
        -: 1199:
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 38 returned 100% blocks executed 63%
       38: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:
        -: 1251:  //if card is not trashed, added to Played pile
       38: 1252:  if (trashFlag < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1253:    {
        -: 1254:      //add card to played pile
    #####: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:
        -: 1259:  //set played card to -1
       38: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:
        -: 1262:  //remove card from player's hand
       38: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
    #####: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
       38: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
       38: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
       38: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
       38: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:
       38: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 30 returned 100% blocks executed 80%
       30: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
       30: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
        -: 1292:    {
       11: 1293:      return -1;
        -: 1294:    }
        -: 1295:
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
       19: 1301:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
       19: 1306:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
       19: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       19: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:
        -: 1317:  //decrease number in supply pile
       19: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:
       19: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 109 returned 100% blocks executed 100%
      109: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:
        -: 1327:  //reset coin count
      109: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
      635: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1332:    {
      526: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1334:	{
      366: 1335:	  state->coins += 1;
        -: 1336:	}
      160: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1338:	{
        1: 1339:	  state->coins += 2;
        -: 1340:	}
      159: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1342:	{
        2: 1343:	  state->coins += 3;
        -: 1344:	}
        -: 1345:    }
        -: 1346:
        -: 1347:  //add bonus
      109: 1348:  state->coins += bonus;
        -: 1349:
      109: 1350:  return 0;
        -: 1351:}
starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
tests complete! 6 errors
starting testing for adventurer card
tests complete! 0 errors
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'discardCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 18
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playSteward'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 5

Function 'playGreat_hall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 13
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 1

Function 'playSmithy'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'cardEffect'
Lines executed:6.33% of 221
Branches executed:13.66% of 183
Taken at least once:2.19% of 183
Calls executed:3.57% of 56

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

File 'dominion.c'
Lines executed:29.12% of 577
Branches executed:29.98% of 417
Taken at least once:20.86% of 417
Calls executed:17.02% of 94
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:    9:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
    #####:   10:  int i = 0;
    #####:   11:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:   12:  {
    #####:   13:    drawCard(currentPlayer, state);
call    0 never executed
        -:   14:  }
        -:   15:      //discard card from hand
    #####:   16:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   17:  return 1;
        -:   18:}
        -:   19:
function playAdventurer called 320 returned 100% blocks executed 100%
      320:   20:int playAdventurer(int drawntreasure, struct gameState *state,int currentPlayer,int z,int temphand[MAX_HAND]){
        -:   21:  int cardDrawn;
        -:   22:
    18496:   23:  while(drawntreasure<2){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    17856:   24:    drawCard(currentPlayer, state);
call    0 returned 100%
    17856:   25:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:   26:
    18496:   27:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      640:   28:      drawntreasure++;
        -:   29:    else{
    17216:   30:      temphand[z]=cardDrawn;
    17216:   31:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    17216:   32:      z++;
        -:   33:    }
        -:   34:  }
        -:   35:
    17856:   36:  while(z-1>=0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    17216:   37:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    17216:   38:    z=z-1;
        -:   39:  }
      320:   40:  return 0;
        -:   41:}
        -:   42:
function playVillage called 0 returned 0% blocks executed 0%
    #####:   43:int playVillage(int handPos,struct gameState *state,int currentPlayer){
    #####:   44:  drawCard(currentPlayer, state);
call    0 never executed
    #####:   45:  state->numActions = state->numActions + 2;
    #####:   46:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   47:  return 0;
        -:   48:}
        -:   49:
function playGreat_hall called 0 returned 0% blocks executed 0%
    #####:   50:int playGreat_hall(int handPos, struct gameState *state,int currentPlayer){
        -:   51:   //+1 Card
    #####:   52:  drawCard(currentPlayer, state);
call    0 never executed
        -:   53:      //+1 Actions
    #####:   54:  state->numActions--;
        -:   55:      //discard card from hand
    #####:   56:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   57:  return 0;
        -:   58:}
        -:   59:
        -:   60:
function playSteward called 0 returned 0% blocks executed 0%
    #####:   61:int playSteward(int choice1,int choice2,int choice3,int currentPlayer,struct gameState *state,int handPos){
    #####:   62:  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:   63:  {
        -:   64:    //+2 cards
    #####:   65:    drawCard(currentPlayer, state);
call    0 never executed
    #####:   66:    drawCard(currentPlayer, state);
call    0 never executed
        -:   67:  }
    #####:   68:  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:   69:  {
        -:   70:    //+2 coins
    #####:   71:    state->coins = state->coins + 2;
        -:   72:  }
        -:   73:  else
        -:   74:  {
        -:   75:    //trash 2 cards in hand
    #####:   76:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:   77:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:   78:  }
        -:   79:
        -:   80:      //discard card from hand
    #####:   81:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   82:  return 0;
        -:   83:}
        -:   84:
        -:   85:
function compare called 37931 returned 100% blocks executed 100%
    37931:   86:int compare(const void* a, const void* b) {
    37931:   87:  if (*(int*)a > *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
    17194:   88:    return 1;
    20737:   89:  if (*(int*)a < *(int*)b)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
    10741:   90:    return -1;
     9996:   91:  return 0;
        -:   92:}
        -:   93:
function newGame called 0 returned 0% blocks executed 0%
    #####:   94:struct gameState* newGame() {
    #####:   95:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   96:  return g;
        -:   97:}
        -:   98:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   99:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  100:		  int k8, int k9, int k10) {
    #####:  101:  int* k = malloc(10 * sizeof(int));
    #####:  102:  k[0] = k1;
    #####:  103:  k[1] = k2;
    #####:  104:  k[2] = k3;
    #####:  105:  k[3] = k4;
    #####:  106:  k[4] = k5;
    #####:  107:  k[5] = k6;
    #####:  108:  k[6] = k7;
    #####:  109:  k[7] = k8;
    #####:  110:  k[8] = k9;
    #####:  111:  k[9] = k10;
    #####:  112:  return k;
        -:  113:}
        -:  114:
function initializeGame called 120 returned 100% blocks executed 83%
      120:  115:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  116:		   struct gameState *state) {
        -:  117:
        -:  118:  int i;
        -:  119:  int j;
        -:  120:  int it;
        -:  121:  //set up random number generator
      120:  122:  SelectStream(1);
call    0 returned 100%
      120:  123:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  124:
        -:  125:  //check number of players
      120:  126:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  127:    {
    #####:  128:      return -1;
        -:  129:    }
        -:  130:
        -:  131:  //set number of players
      120:  132:  state->numPlayers = numPlayers;
        -:  133:
        -:  134:  //check selected kingdom cards are different
     1320:  135:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  136:    {
    13200:  137:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  138:        {
    12000:  139:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  140:	    {
    #####:  141:	      return -1;
        -:  142:	    }
        -:  143:        }
        -:  144:    }
        -:  145:
        -:  146:
        -:  147:  //initialize supply
        -:  148:  ///////////////////////////////
        -:  149:
        -:  150:  //set number of Curse cards
      120:  151:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  152:    {
      120:  153:      state->supplyCount[curse] = 10;
        -:  154:    }
    #####:  155:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  156:    {
    #####:  157:      state->supplyCount[curse] = 20;
        -:  158:    }
        -:  159:  else
        -:  160:    {
    #####:  161:      state->supplyCount[curse] = 30;
        -:  162:    }
        -:  163:
        -:  164:  //set number of Victory cards
      120:  165:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  166:    {
      120:  167:      state->supplyCount[estate] = 8;
      120:  168:      state->supplyCount[duchy] = 8;
      120:  169:      state->supplyCount[province] = 8;
        -:  170:    }
        -:  171:  else
        -:  172:    {
    #####:  173:      state->supplyCount[estate] = 12;
    #####:  174:      state->supplyCount[duchy] = 12;
    #####:  175:      state->supplyCount[province] = 12;
        -:  176:    }
        -:  177:
        -:  178:  //set number of Treasure cards
      120:  179:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      120:  180:  state->supplyCount[silver] = 40;
      120:  181:  state->supplyCount[gold] = 30;
        -:  182:
        -:  183:  //set number of Kingdom cards
     2520:  184:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  185:    {
    19800:  186:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  187:	{
    18600:  188:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  189:	    {
        -:  190:	      //check if card is a 'Victory' Kingdom card
     1200:  191:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  192:		{
    #####:  193:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  194:		    state->supplyCount[i] = 8;
        -:  195:		  }
    #####:  196:		  else{ state->supplyCount[i] = 12; }
        -:  197:		}
        -:  198:	      else
        -:  199:		{
     1200:  200:		  state->supplyCount[i] = 10;
        -:  201:		}
     1200:  202:	      break;
        -:  203:	    }
        -:  204:	  else    //card is not in the set choosen for the game
        -:  205:	    {
    17400:  206:	      state->supplyCount[i] = -1;
        -:  207:	    }
        -:  208:	}
        -:  209:
        -:  210:    }
        -:  211:
        -:  212:  ////////////////////////
        -:  213:  //supply intilization complete
        -:  214:
        -:  215:  //set player decks
      360:  216:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  217:    {
      240:  218:      state->deckCount[i] = 0;
      960:  219:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  220:	{
      720:  221:	  state->deck[i][j] = estate;
      720:  222:	  state->deckCount[i]++;
        -:  223:	}
     1920:  224:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  225:	{
     1680:  226:	  state->deck[i][j] = copper;
     1680:  227:	  state->deckCount[i]++;
        -:  228:	}
        -:  229:    }
        -:  230:
        -:  231:  //shuffle player decks
      360:  232:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  233:    {
      240:  234:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  235:	{
    #####:  236:	  return -1;
        -:  237:	}
        -:  238:    }
        -:  239:
        -:  240:  //draw player hands
      360:  241:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  242:    {
        -:  243:      //initialize hand size to zero
      240:  244:      state->handCount[i] = 0;
      240:  245:      state->discardCount[i] = 0;
        -:  246:      //draw 5 cards
        -:  247:      // for (j = 0; j < 5; j++)
        -:  248:      //	{
        -:  249:      //	  drawCard(i, state);
        -:  250:      //	}
        -:  251:    }
        -:  252:
        -:  253:  //set embargo tokens to 0 for all supply piles
     3360:  254:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  255:    {
     3240:  256:      state->embargoTokens[i] = 0;
        -:  257:    }
        -:  258:
        -:  259:  //initialize first player's turn
      120:  260:  state->outpostPlayed = 0;
      120:  261:  state->phase = 0;
      120:  262:  state->numActions = 1;
      120:  263:  state->numBuys = 1;
      120:  264:  state->playedCardCount = 0;
      120:  265:  state->whoseTurn = 0;
      120:  266:  state->handCount[state->whoseTurn] = 0;
        -:  267:  //int it; move to top
        -:  268:
        -:  269:  //Moved draw cards to here, only drawing at the start of a turn
      720:  270:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      600:  271:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  272:  }
        -:  273:
      120:  274:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  275:
      120:  276:  return 0;
        -:  277:}
        -:  278:
function shuffle called 881 returned 100% blocks executed 100%
      881:  279:int shuffle(int player, struct gameState *state) {
        -:  280:
        -:  281:
        -:  282:  int newDeck[MAX_DECK];
      881:  283:  int newDeckPos = 0;
        -:  284:  int card;
        -:  285:  int i;
        -:  286:
      881:  287:  if (state->deckCount[player] < 1)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
      403:  288:    return -1;
      478:  289:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  290:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  291:
    11328:  292:  while (state->deckCount[player] > 0) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    10372:  293:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    10372:  294:    newDeck[newDeckPos] = state->deck[player][card];
    10372:  295:    newDeckPos++;
   131550:  296:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   121178:  297:      state->deck[player][i] = state->deck[player][i+1];
        -:  298:    }
    10372:  299:    state->deckCount[player]--;
        -:  300:  }
    10850:  301:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    10372:  302:    state->deck[player][i] = newDeck[i];
    10372:  303:    state->deckCount[player]++;
        -:  304:  }
        -:  305:
      478:  306:  return 0;
        -:  307:}
        -:  308:
function playCard called 40 returned 100% blocks executed 79%
       40:  309:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  310:{
        -:  311:  int card;
       40:  312:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  313:
        -:  314:  //check if it is the right phase
       40:  315:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  316:    {
    #####:  317:      return -1;
        -:  318:    }
        -:  319:
        -:  320:  //check if player has enough actions
       40:  321:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  322:    {
    #####:  323:      return -1;
        -:  324:    }
        -:  325:
        -:  326:  //get card played
       40:  327:  card = handCard(handPos, state);
call    0 returned 100%
        -:  328:
        -:  329:  //check if selected card is an action
       40:  330:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  331:    {
    #####:  332:      return -1;
        -:  333:    }
        -:  334:
        -:  335:  //play card
       40:  336:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 68%
        -:  337:    {
       13:  338:      return -1;
        -:  339:    }
        -:  340:
        -:  341:  //reduce number of actions
       27:  342:  state->numActions--;
        -:  343:
        -:  344:  //update coins (Treasure cards may be added with card draws)
       27:  345:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  346:
       27:  347:  return 0;
        -:  348:}
        -:  349:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  350:int buyCard(int supplyPos, struct gameState *state) {
        -:  351:  int who;
    #####:  352:  if (DEBUG){
        -:  353:    printf("Entering buyCard...\n");
        -:  354:  }
        -:  355:
        -:  356:  // I don't know what to do about the phase thing.
        -:  357:
    #####:  358:  who = state->whoseTurn;
        -:  359:
    #####:  360:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  361:    if (DEBUG)
        -:  362:      printf("You do not have any buys left\n");
    #####:  363:    return -1;
    #####:  364:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  365:    if (DEBUG)
        -:  366:      printf("There are not any of that type of card left\n");
    #####:  367:    return -1;
    #####:  368:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:    if (DEBUG)
        -:  370:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  371:    return -1;
        -:  372:  } else {
    #####:  373:    state->phase=1;
        -:  374:    //state->supplyCount[supplyPos]--;
    #####:  375:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  376:
    #####:  377:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  378:    state->numBuys--;
    #####:  379:    if (DEBUG)
        -:  380:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  381:  }
        -:  382:
        -:  383:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  384:  //state->discardCount[who]++;
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  389:int numHandCards(struct gameState *state) {
    #####:  390:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  391:}
        -:  392:
function handCard called 40 returned 100% blocks executed 100%
       40:  393:int handCard(int handPos, struct gameState *state) {
       40:  394:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       40:  395:  return state->hand[currentPlayer][handPos];
        -:  396:}
        -:  397:
function supplyCount called 40 returned 100% blocks executed 100%
       40:  398:int supplyCount(int card, struct gameState *state) {
       40:  399:  return state->supplyCount[card];
        -:  400:}
        -:  401:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  402:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  403:  int i;
    #####:  404:  int count = 0;
        -:  405:
    #####:  406:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  409:    }
        -:  410:
    #####:  411:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  414:    }
        -:  415:
    #####:  416:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  419:    }
        -:  420:
    #####:  421:  return count;
        -:  422:}
        -:  423:
function whoseTurn called 120 returned 100% blocks executed 100%
      120:  424:int whoseTurn(struct gameState *state) {
      120:  425:  return state->whoseTurn;
        -:  426:}
        -:  427:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  428:int endTurn(struct gameState *state) {
        -:  429:  int k;
        -:  430:  int i;
    #####:  431:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  432:
        -:  433:  //Discard hand
    #####:  434:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  435:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  436:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  437:  }
    #####:  438:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  439:
        -:  440:  //Code for determining the player
    #####:  441:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  442:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  443:  }
        -:  444:  else{
    #####:  445:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  446:  }
        -:  447:
    #####:  448:  state->outpostPlayed = 0;
    #####:  449:  state->phase = 0;
    #####:  450:  state->numActions = 1;
    #####:  451:  state->coins = 0;
    #####:  452:  state->numBuys = 1;
    #####:  453:  state->playedCardCount = 0;
    #####:  454:  state->handCount[state->whoseTurn] = 0;
        -:  455:
        -:  456:  //int k; move to top
        -:  457:  //Next player draws hand
    #####:  458:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  459:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  460:  }
        -:  461:
        -:  462:  //Update money
    #####:  463:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  464:
    #####:  465:  return 0;
        -:  466:}
        -:  467:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  468:int isGameOver(struct gameState *state) {
        -:  469:  int i;
        -:  470:  int j;
        -:  471:
        -:  472:  //if stack of Province cards is empty, the game ends
    #####:  473:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  474:    {
    #####:  475:      return 1;
        -:  476:    }
        -:  477:
        -:  478:  //if three supply pile are at 0, the game ends
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j++;
        -:  485:	}
        -:  486:    }
    #####:  487:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      return 1;
        -:  490:    }
        -:  491:
    #####:  492:  return 0;
        -:  493:}
        -:  494:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  495:int scoreFor (int player, struct gameState *state) {
        -:  496:
        -:  497:  int i;
    #####:  498:  int score = 0;
        -:  499:  //score from hand
    #####:  500:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  503:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  504:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  505:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  506:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  507:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  508:    }
        -:  509:
        -:  510:  //score from discard
    #####:  511:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  514:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  515:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  516:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  517:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  518:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  519:    }
        -:  520:
        -:  521:  //score from deck
    #####:  522:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  525:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  526:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  527:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  528:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  529:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  530:    }
        -:  531:
    #####:  532:  return score;
        -:  533:}
        -:  534:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  535:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  536:  int i;
        -:  537:  int j;
        -:  538:  int highScore;
        -:  539:  int currentPlayer;
        -:  540:
        -:  541:  //get score for each player
    #####:  542:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  543:    {
        -:  544:      //set unused player scores to -9999
    #####:  545:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  546:	{
    #####:  547:	  players[i] = -9999;
        -:  548:	}
        -:  549:      else
        -:  550:	{
    #####:  551:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  552:	}
        -:  553:    }
        -:  554:
        -:  555:  //find highest score
    #####:  556:  j = 0;
    #####:  557:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  558:    {
    #####:  559:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  560:	{
    #####:  561:	  j = i;
        -:  562:	}
        -:  563:    }
    #####:  564:  highScore = players[j];
        -:  565:
        -:  566:  //add 1 to players who had less turns
    #####:  567:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:    {
    #####:  570:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  571:	{
    #####:  572:	  players[i]++;
        -:  573:	}
        -:  574:    }
        -:  575:
        -:  576:  //find new highest score
    #####:  577:  j = 0;
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  581:	{
    #####:  582:	  j = i;
        -:  583:	}
        -:  584:    }
    #####:  585:  highScore = players[j];
        -:  586:
        -:  587:  //set winners in array to 1 and rest to 0
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  591:	{
    #####:  592:	  players[i] = 1;
        -:  593:	}
        -:  594:      else
        -:  595:	{
    #####:  596:	  players[i] = 0;
        -:  597:	}
        -:  598:    }
        -:  599:
    #####:  600:  return 0;
        -:  601:}
        -:  602:
function drawCard called 18456 returned 100% blocks executed 100%
    18456:  603:int drawCard(int player, struct gameState *state)
        -:  604:{	int count;
        -:  605:  int deckCounter;
    18456:  606:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  607:
        -:  608:    //Step 1 Shuffle the discard pile back into a deck
        -:  609:    int i;
        -:  610:    //Move discard to deck
     8613:  611:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
     7972:  612:      state->deck[player][i] = state->discard[player][i];
     7972:  613:      state->discard[player][i] = -1;
        -:  614:    }
        -:  615:
      641:  616:    state->deckCount[player] = state->discardCount[player];
      641:  617:    state->discardCount[player] = 0;//Reset discard
        -:  618:
        -:  619:    //Shufffle the deck
      641:  620:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  621:
        -:  622:    if (1){//Debug statements
        -:  623:      //printf("Deck count now: %d\n", state->deckCount[player]);
        -:  624:    }
        -:  625:
      641:  626:    state->discardCount[player] = 0;
        -:  627:
        -:  628:    //Step 2 Draw Card
      641:  629:    count = state->handCount[player];//Get current player's hand count
        -:  630:
        -:  631:    if (1){//Debug statements
        -:  632:      //printf("Current hand count: %d\n", count);
        -:  633:    }
        -:  634:
      641:  635:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  636:
      641:  637:    if (deckCounter == 0)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
      403:  638:      return -1;
        -:  639:
      238:  640:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      238:  641:    state->deckCount[player]--;
      238:  642:    state->handCount[player]++;//Increment hand count
        -:  643:  }
        -:  644:
        -:  645:  else{
    17815:  646:    int count = state->handCount[player];//Get current hand count for player
        -:  647:    int deckCounter;
        -:  648:    if (1){//Debug statements
        -:  649:      //printf("Current hand count: %d\n", count);
        -:  650:    }
        -:  651:
    17815:  652:    deckCounter = state->deckCount[player];//Create holder for the deck count
    17815:  653:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    17815:  654:    state->deckCount[player]--;
    17815:  655:    state->handCount[player]++;//Increment hand count
        -:  656:  }
        -:  657:
    18053:  658:  return 0;
        -:  659:}
        -:  660:
function getCost called 0 returned 0% blocks executed 0%
    #####:  661:int getCost(int cardNumber)
        -:  662:{
    #####:  663:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  664:    {
        -:  665:    case curse:
    #####:  666:      return 0;
        -:  667:    case estate:
    #####:  668:      return 2;
        -:  669:    case duchy:
    #####:  670:      return 5;
        -:  671:    case province:
    #####:  672:      return 8;
        -:  673:    case copper:
    #####:  674:      return 0;
        -:  675:    case silver:
    #####:  676:      return 3;
        -:  677:    case gold:
    #####:  678:      return 6;
        -:  679:    case adventurer:
    #####:  680:      return 6;
        -:  681:    case council_room:
    #####:  682:      return 5;
        -:  683:    case feast:
    #####:  684:      return 4;
        -:  685:    case gardens:
    #####:  686:      return 4;
        -:  687:    case mine:
    #####:  688:      return 5;
        -:  689:    case remodel:
    #####:  690:      return 4;
        -:  691:    case smithy:
    #####:  692:      return 4;
        -:  693:    case village:
    #####:  694:      return 3;
        -:  695:    case baron:
    #####:  696:      return 4;
        -:  697:    case great_hall:
    #####:  698:      return 3;
        -:  699:    case minion:
    #####:  700:      return 5;
        -:  701:    case steward:
    #####:  702:      return 3;
        -:  703:    case tribute:
    #####:  704:      return 5;
        -:  705:    case ambassador:
    #####:  706:      return 3;
        -:  707:    case cutpurse:
    #####:  708:      return 4;
        -:  709:    case embargo:
    #####:  710:      return 2;
        -:  711:    case outpost:
    #####:  712:      return 5;
        -:  713:    case salvager:
    #####:  714:      return 4;
        -:  715:    case sea_hag:
    #####:  716:      return 4;
        -:  717:    case treasure_map:
    #####:  718:      return 4;
        -:  719:    }
        -:  720:
    #####:  721:  return -1;
        -:  722:}
        -:  723:
function cardEffect called 80 returned 100% blocks executed 3%
       80:  724:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  725:{
        -:  726:  int i;
        -:  727:  int j;
        -:  728:  int k;
        -:  729:  int x;
        -:  730:  int index;
       80:  731:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       80:  732:  int nextPlayer = currentPlayer + 1;
        -:  733:
       80:  734:  int tributeRevealedCards[2] = {-1, -1};
        -:  735:  int temphand[MAX_HAND];// moved above the if statement
       80:  736:  int drawntreasure=0;
        -:  737:  int cardDrawn;
       80:  738:  int z = 0;// this is the counter for the temp hand
       80:  739:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  740:    nextPlayer = 0;
        -:  741:  }
        -:  742:
        -:  743:
        -:  744:  //uses switch to select card and perform actions
       80:  745:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 100%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  746:    {
        -:  747:    case adventurer:
    #####:  748:      playAdventurer(drawntreasure, state,currentPlayer,z,temphand);
call    0 never executed
    #####:  749:      return 0;
        -:  750:
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  756:	}
        -:  757:
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
call    0 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  772:
    #####:  773:      return 0;
        -:  774:
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
    #####:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  798:
    #####:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
    #####:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
    #####:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:
    #####:  826:      return 0;
        -:  827:
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
    #####:  864:      return 0;
        -:  865:
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:
        -:  892:    case smithy:
    #####:  893:      if (playSmithy(currentPlayer, state, handPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:        return 0;
    #####:  895:      return 0;
        -:  896:
        -:  897:    case village:
    #####:  898:      playVillage(handPos, state, currentPlayer);
call    0 never executed
    #####:  899:      return 0;
        -:  900:
        -:  901:    case baron:
    #####:  902:      state->numBuys++;//Increase buys by 1!
    #####:  903:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  904:	int p = 0;//Iterator for hand!
    #####:  905:	int card_not_discarded = 1;//Flag for discard set!
    #####:  906:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  907:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  909:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  910:	    state->discardCount[currentPlayer]++;
    #####:  911:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  912:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  913:	    }
    #####:  914:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  915:	    state->handCount[currentPlayer]--;
    #####:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
    #####:  918:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  919:	    if(DEBUG) {
        -:  920:	      printf("No estate cards in your hand, invalid choice\n");
        -:  921:	      printf("Must gain an estate if there are any\n");
        -:  922:	    }
    #####:  923:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  925:	      state->supplyCount[estate]--;//Decrement estates
    #####:  926:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:		isGameOver(state);
call    0 never executed
        -:  928:	      }
        -:  929:	    }
    #####:  930:	    card_not_discarded = 0;//Exit the loop
        -:  931:	  }
        -:  932:
        -:  933:	  else{
    #####:  934:	    p++;//Next card
        -:  935:	  }
        -:  936:	}
        -:  937:      }
        -:  938:
        -:  939:      else{
    #####:  940:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  941:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  942:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  943:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	    isGameOver(state);
call    0 never executed
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case great_hall:
    #####:  953:      playGreat_hall(handPos, state,currentPlayer);
call    0 never executed
    #####:  954:      return 0;
        -:  955:
        -:  956:    case minion:
        -:  957:      //+1 action
    #####:  958:      state->numActions++;
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:
    #####:  963:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  state->coins = state->coins + 2;
        -:  966:	}
        -:  967:
    #####:  968:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  969:	{
        -:  970:	  //discard hand
    #####:  971:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  972:	    {
    #####:  973:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  974:	    }
        -:  975:
        -:  976:	  //draw 4
    #####:  977:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  980:	    }
        -:  981:
        -:  982:	  //other players discard hand and redraw if hand size > 4
    #####:  983:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  986:		{
    #####:  987:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  988:		    {
        -:  989:		      //discard hand
    #####:  990:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  991:			{
    #####:  992:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  993:			}
        -:  994:
        -:  995:		      //draw 4
    #####:  996:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  997:			{
    #####:  998:			  drawCard(i, state);
call    0 never executed
        -:  999:			}
        -: 1000:		    }
        -: 1001:		}
        -: 1002:	    }
        -: 1003:
        -: 1004:	}
    #####: 1005:      return 0;
        -: 1006:
        -: 1007:    case steward:
    #####: 1008:      playSteward(choice1,choice2,choice3,currentPlayer,state,handPos);
call    0 never executed
    #####: 1009:      return 0;
        -: 1010:
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
    #####: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	}
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }
        -: 1047:
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (DEBUG)
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
    #####: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}
    #####: 1149:		      break;
        -: 1150:		    }
        -: 1151:		}
        -: 1152:
        -: 1153:	    }
        -: 1154:
        -: 1155:	}
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:
        -: 1163:    case embargo:
        -: 1164:      //+2 Coins
       80: 1165:      state->coins = state->coins + 2;
        -: 1166:
        -: 1167:      //see if selected pile is in play
       80: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 33% (fallthrough)
branch  1 taken 68%
        -: 1169:	{
       26: 1170:	  return -1;
        -: 1171:	}
        -: 1172:
        -: 1173:      //add embargo token to selected supply pile
       54: 1174:      state->embargoTokens[choice1]++;
        -: 1175:
        -: 1176:      //trash card
       54: 1177:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       54: 1178:      return 0;
        -: 1179:
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1198:	}
        -: 1199:
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 54 returned 100% blocks executed 63%
       54: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:
        -: 1251:  //if card is not trashed, added to Played pile
       54: 1252:  if (trashFlag < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1253:    {
        -: 1254:      //add card to played pile
    #####: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:
        -: 1259:  //set played card to -1
       54: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:
        -: 1262:  //remove card from player's hand
       54: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
    #####: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
       54: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
       54: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
       54: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
       54: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:
       54: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 40 returned 100% blocks executed 80%
       40: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
       40: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 68%
        -: 1292:    {
       13: 1293:      return -1;
        -: 1294:    }
        -: 1295:
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
       27: 1301:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
       27: 1306:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
       27: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       27: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:
        -: 1317:  //decrease number in supply pile
       27: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:
       27: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 147 returned 100% blocks executed 100%
      147: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:
        -: 1327:  //reset coin count
      147: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
      855: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1332:    {
      708: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1334:	{
      488: 1335:	  state->coins += 1;
        -: 1336:	}
      220: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1338:	{
        2: 1339:	  state->coins += 2;
        -: 1340:	}
      218: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1342:	{
        2: 1343:	  state->coins += 3;
        -: 1344:	}
        -: 1345:    }
        -: 1346:
        -: 1347:  //add bonus
      147: 1348:  state->coins += bonus;
        -: 1349:
      147: 1350:  return 0;
        -: 1351:}
starting testing for embargo card
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
selected supply is in play
something went wrong pile not embargoed!
embargo not acknowledged
tests complete! 4 errors
starting testing for adventurer card
treasures added incorrectly
no treasure cards added on 0 deck attempt
tests complete! 2 errors
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'discardCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:69.23% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 18
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playSteward'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 5

Function 'playGreat_hall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 13
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 1

Function 'playSmithy'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'cardEffect'
Lines executed:6.33% of 221
Branches executed:13.66% of 183
Taken at least once:2.19% of 183
Calls executed:3.57% of 56

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

File 'dominion.c'
Lines executed:29.12% of 577
Branches executed:29.98% of 417
Taken at least once:20.86% of 417
Calls executed:17.02% of 94
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:    9:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
    #####:   10:  int i = 0;
    #####:   11:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:   12:  {
    #####:   13:    drawCard(currentPlayer, state);
call    0 never executed
        -:   14:  }
        -:   15:      //discard card from hand
    #####:   16:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   17:  return 1;
        -:   18:}
        -:   19:
function playAdventurer called 400 returned 100% blocks executed 100%
      400:   20:int playAdventurer(int drawntreasure, struct gameState *state,int currentPlayer,int z,int temphand[MAX_HAND]){
        -:   21:  int cardDrawn;
        -:   22:
    23340:   23:  while(drawntreasure<2){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    22540:   24:    drawCard(currentPlayer, state);
call    0 returned 100%
    22540:   25:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:   26:
    23340:   27:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      800:   28:      drawntreasure++;
        -:   29:    else{
    21740:   30:      temphand[z]=cardDrawn;
    21740:   31:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    21740:   32:      z++;
        -:   33:    }
        -:   34:  }
        -:   35:
    22540:   36:  while(z-1>=0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    21740:   37:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    21740:   38:    z=z-1;
        -:   39:  }
      400:   40:  return 0;
        -:   41:}
        -:   42:
function playVillage called 0 returned 0% blocks executed 0%
    #####:   43:int playVillage(int handPos,struct gameState *state,int currentPlayer){
    #####:   44:  drawCard(currentPlayer, state);
call    0 never executed
    #####:   45:  state->numActions = state->numActions + 2;
    #####:   46:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   47:  return 0;
        -:   48:}
        -:   49:
function playGreat_hall called 0 returned 0% blocks executed 0%
    #####:   50:int playGreat_hall(int handPos, struct gameState *state,int currentPlayer){
        -:   51:   //+1 Card
    #####:   52:  drawCard(currentPlayer, state);
call    0 never executed
        -:   53:      //+1 Actions
    #####:   54:  state->numActions--;
        -:   55:      //discard card from hand
    #####:   56:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   57:  return 0;
        -:   58:}
        -:   59:
        -:   60:
function playSteward called 0 returned 0% blocks executed 0%
    #####:   61:int playSteward(int choice1,int choice2,int choice3,int currentPlayer,struct gameState *state,int handPos){
    #####:   62:  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:   63:  {
        -:   64:    //+2 cards
    #####:   65:    drawCard(currentPlayer, state);
call    0 never executed
    #####:   66:    drawCard(currentPlayer, state);
call    0 never executed
        -:   67:  }
    #####:   68:  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:   69:  {
        -:   70:    //+2 coins
    #####:   71:    state->coins = state->coins + 2;
        -:   72:  }
        -:   73:  else
        -:   74:  {
        -:   75:    //trash 2 cards in hand
    #####:   76:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:   77:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:   78:  }
        -:   79:
        -:   80:      //discard card from hand
    #####:   81:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   82:  return 0;
        -:   83:}
        -:   84:
        -:   85:
function compare called 48318 returned 100% blocks executed 100%
    48318:   86:int compare(const void* a, const void* b) {
    48318:   87:  if (*(int*)a > *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
    21931:   88:    return 1;
    26387:   89:  if (*(int*)a < *(int*)b)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
    13726:   90:    return -1;
    12661:   91:  return 0;
        -:   92:}
        -:   93:
function newGame called 0 returned 0% blocks executed 0%
    #####:   94:struct gameState* newGame() {
    #####:   95:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   96:  return g;
        -:   97:}
        -:   98:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   99:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  100:		  int k8, int k9, int k10) {
    #####:  101:  int* k = malloc(10 * sizeof(int));
    #####:  102:  k[0] = k1;
    #####:  103:  k[1] = k2;
    #####:  104:  k[2] = k3;
    #####:  105:  k[3] = k4;
    #####:  106:  k[4] = k5;
    #####:  107:  k[5] = k6;
    #####:  108:  k[6] = k7;
    #####:  109:  k[7] = k8;
    #####:  110:  k[8] = k9;
    #####:  111:  k[9] = k10;
    #####:  112:  return k;
        -:  113:}
        -:  114:
function initializeGame called 150 returned 100% blocks executed 83%
      150:  115:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  116:		   struct gameState *state) {
        -:  117:
        -:  118:  int i;
        -:  119:  int j;
        -:  120:  int it;
        -:  121:  //set up random number generator
      150:  122:  SelectStream(1);
call    0 returned 100%
      150:  123:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  124:
        -:  125:  //check number of players
      150:  126:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  127:    {
    #####:  128:      return -1;
        -:  129:    }
        -:  130:
        -:  131:  //set number of players
      150:  132:  state->numPlayers = numPlayers;
        -:  133:
        -:  134:  //check selected kingdom cards are different
     1650:  135:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  136:    {
    16500:  137:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  138:        {
    15000:  139:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  140:	    {
    #####:  141:	      return -1;
        -:  142:	    }
        -:  143:        }
        -:  144:    }
        -:  145:
        -:  146:
        -:  147:  //initialize supply
        -:  148:  ///////////////////////////////
        -:  149:
        -:  150:  //set number of Curse cards
      150:  151:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  152:    {
      150:  153:      state->supplyCount[curse] = 10;
        -:  154:    }
    #####:  155:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  156:    {
    #####:  157:      state->supplyCount[curse] = 20;
        -:  158:    }
        -:  159:  else
        -:  160:    {
    #####:  161:      state->supplyCount[curse] = 30;
        -:  162:    }
        -:  163:
        -:  164:  //set number of Victory cards
      150:  165:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  166:    {
      150:  167:      state->supplyCount[estate] = 8;
      150:  168:      state->supplyCount[duchy] = 8;
      150:  169:      state->supplyCount[province] = 8;
        -:  170:    }
        -:  171:  else
        -:  172:    {
    #####:  173:      state->supplyCount[estate] = 12;
    #####:  174:      state->supplyCount[duchy] = 12;
    #####:  175:      state->supplyCount[province] = 12;
        -:  176:    }
        -:  177:
        -:  178:  //set number of Treasure cards
      150:  179:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      150:  180:  state->supplyCount[silver] = 40;
      150:  181:  state->supplyCount[gold] = 30;
        -:  182:
        -:  183:  //set number of Kingdom cards
     3150:  184:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  185:    {
    24750:  186:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  187:	{
    23250:  188:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  189:	    {
        -:  190:	      //check if card is a 'Victory' Kingdom card
     1500:  191:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  192:		{
    #####:  193:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  194:		    state->supplyCount[i] = 8;
        -:  195:		  }
    #####:  196:		  else{ state->supplyCount[i] = 12; }
        -:  197:		}
        -:  198:	      else
        -:  199:		{
     1500:  200:		  state->supplyCount[i] = 10;
        -:  201:		}
     1500:  202:	      break;
        -:  203:	    }
        -:  204:	  else    //card is not in the set choosen for the game
        -:  205:	    {
    21750:  206:	      state->supplyCount[i] = -1;
        -:  207:	    }
        -:  208:	}
        -:  209:
        -:  210:    }
        -:  211:
        -:  212:  ////////////////////////
        -:  213:  //supply intilization complete
        -:  214:
        -:  215:  //set player decks
      450:  216:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  217:    {
      300:  218:      state->deckCount[i] = 0;
     1200:  219:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  220:	{
      900:  221:	  state->deck[i][j] = estate;
      900:  222:	  state->deckCount[i]++;
        -:  223:	}
     2400:  224:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  225:	{
     2100:  226:	  state->deck[i][j] = copper;
     2100:  227:	  state->deckCount[i]++;
        -:  228:	}
        -:  229:    }
        -:  230:
        -:  231:  //shuffle player decks
      450:  232:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  233:    {
      300:  234:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  235:	{
    #####:  236:	  return -1;
        -:  237:	}
        -:  238:    }
        -:  239:
        -:  240:  //draw player hands
      450:  241:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  242:    {
        -:  243:      //initialize hand size to zero
      300:  244:      state->handCount[i] = 0;
      300:  245:      state->discardCount[i] = 0;
        -:  246:      //draw 5 cards
        -:  247:      // for (j = 0; j < 5; j++)
        -:  248:      //	{
        -:  249:      //	  drawCard(i, state);
        -:  250:      //	}
        -:  251:    }
        -:  252:
        -:  253:  //set embargo tokens to 0 for all supply piles
     4200:  254:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  255:    {
     4050:  256:      state->embargoTokens[i] = 0;
        -:  257:    }
        -:  258:
        -:  259:  //initialize first player's turn
      150:  260:  state->outpostPlayed = 0;
      150:  261:  state->phase = 0;
      150:  262:  state->numActions = 1;
      150:  263:  state->numBuys = 1;
      150:  264:  state->playedCardCount = 0;
      150:  265:  state->whoseTurn = 0;
      150:  266:  state->handCount[state->whoseTurn] = 0;
        -:  267:  //int it; move to top
        -:  268:
        -:  269:  //Moved draw cards to here, only drawing at the start of a turn
      900:  270:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      750:  271:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  272:  }
        -:  273:
      150:  274:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  275:
      150:  276:  return 0;
        -:  277:}
        -:  278:
function shuffle called 1105 returned 100% blocks executed 100%
     1105:  279:int shuffle(int player, struct gameState *state) {
        -:  280:
        -:  281:
        -:  282:  int newDeck[MAX_DECK];
     1105:  283:  int newDeckPos = 0;
        -:  284:  int card;
        -:  285:  int i;
        -:  286:
     1105:  287:  if (state->deckCount[player] < 1)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
      507:  288:    return -1;
      598:  289:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  290:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  291:
    14326:  292:  while (state->deckCount[player] > 0) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    13130:  293:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    13130:  294:    newDeck[newDeckPos] = state->deck[player][card];
    13130:  295:    newDeckPos++;
   168682:  296:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   155552:  297:      state->deck[player][i] = state->deck[player][i+1];
        -:  298:    }
    13130:  299:    state->deckCount[player]--;
        -:  300:  }
    13728:  301:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    13130:  302:    state->deck[player][i] = newDeck[i];
    13130:  303:    state->deckCount[player]++;
        -:  304:  }
        -:  305:
      598:  306:  return 0;
        -:  307:}
        -:  308:
function playCard called 50 returned 100% blocks executed 79%
       50:  309:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  310:{
        -:  311:  int card;
       50:  312:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  313:
        -:  314:  //check if it is the right phase
       50:  315:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  316:    {
    #####:  317:      return -1;
        -:  318:    }
        -:  319:
        -:  320:  //check if player has enough actions
       50:  321:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  322:    {
    #####:  323:      return -1;
        -:  324:    }
        -:  325:
        -:  326:  //get card played
       50:  327:  card = handCard(handPos, state);
call    0 returned 100%
        -:  328:
        -:  329:  //check if selected card is an action
       50:  330:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  331:    {
    #####:  332:      return -1;
        -:  333:    }
        -:  334:
        -:  335:  //play card
       50:  336:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
        -:  337:    {
       17:  338:      return -1;
        -:  339:    }
        -:  340:
        -:  341:  //reduce number of actions
       33:  342:  state->numActions--;
        -:  343:
        -:  344:  //update coins (Treasure cards may be added with card draws)
       33:  345:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  346:
       33:  347:  return 0;
        -:  348:}
        -:  349:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  350:int buyCard(int supplyPos, struct gameState *state) {
        -:  351:  int who;
    #####:  352:  if (DEBUG){
        -:  353:    printf("Entering buyCard...\n");
        -:  354:  }
        -:  355:
        -:  356:  // I don't know what to do about the phase thing.
        -:  357:
    #####:  358:  who = state->whoseTurn;
        -:  359:
    #####:  360:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  361:    if (DEBUG)
        -:  362:      printf("You do not have any buys left\n");
    #####:  363:    return -1;
    #####:  364:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  365:    if (DEBUG)
        -:  366:      printf("There are not any of that type of card left\n");
    #####:  367:    return -1;
    #####:  368:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:    if (DEBUG)
        -:  370:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  371:    return -1;
        -:  372:  } else {
    #####:  373:    state->phase=1;
        -:  374:    //state->supplyCount[supplyPos]--;
    #####:  375:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  376:
    #####:  377:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  378:    state->numBuys--;
    #####:  379:    if (DEBUG)
        -:  380:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  381:  }
        -:  382:
        -:  383:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  384:  //state->discardCount[who]++;
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  389:int numHandCards(struct gameState *state) {
    #####:  390:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  391:}
        -:  392:
function handCard called 50 returned 100% blocks executed 100%
       50:  393:int handCard(int handPos, struct gameState *state) {
       50:  394:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       50:  395:  return state->hand[currentPlayer][handPos];
        -:  396:}
        -:  397:
function supplyCount called 50 returned 100% blocks executed 100%
       50:  398:int supplyCount(int card, struct gameState *state) {
       50:  399:  return state->supplyCount[card];
        -:  400:}
        -:  401:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  402:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  403:  int i;
    #####:  404:  int count = 0;
        -:  405:
    #####:  406:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  409:    }
        -:  410:
    #####:  411:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  414:    }
        -:  415:
    #####:  416:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  419:    }
        -:  420:
    #####:  421:  return count;
        -:  422:}
        -:  423:
function whoseTurn called 150 returned 100% blocks executed 100%
      150:  424:int whoseTurn(struct gameState *state) {
      150:  425:  return state->whoseTurn;
        -:  426:}
        -:  427:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  428:int endTurn(struct gameState *state) {
        -:  429:  int k;
        -:  430:  int i;
    #####:  431:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  432:
        -:  433:  //Discard hand
    #####:  434:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  435:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  436:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  437:  }
    #####:  438:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  439:
        -:  440:  //Code for determining the player
    #####:  441:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  442:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  443:  }
        -:  444:  else{
    #####:  445:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  446:  }
        -:  447:
    #####:  448:  state->outpostPlayed = 0;
    #####:  449:  state->phase = 0;
    #####:  450:  state->numActions = 1;
    #####:  451:  state->coins = 0;
    #####:  452:  state->numBuys = 1;
    #####:  453:  state->playedCardCount = 0;
    #####:  454:  state->handCount[state->whoseTurn] = 0;
        -:  455:
        -:  456:  //int k; move to top
        -:  457:  //Next player draws hand
    #####:  458:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  459:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  460:  }
        -:  461:
        -:  462:  //Update money
    #####:  463:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  464:
    #####:  465:  return 0;
        -:  466:}
        -:  467:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  468:int isGameOver(struct gameState *state) {
        -:  469:  int i;
        -:  470:  int j;
        -:  471:
        -:  472:  //if stack of Province cards is empty, the game ends
    #####:  473:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  474:    {
    #####:  475:      return 1;
        -:  476:    }
        -:  477:
        -:  478:  //if three supply pile are at 0, the game ends
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j++;
        -:  485:	}
        -:  486:    }
    #####:  487:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      return 1;
        -:  490:    }
        -:  491:
    #####:  492:  return 0;
        -:  493:}
        -:  494:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  495:int scoreFor (int player, struct gameState *state) {
        -:  496:
        -:  497:  int i;
    #####:  498:  int score = 0;
        -:  499:  //score from hand
    #####:  500:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  503:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  504:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  505:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  506:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  507:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  508:    }
        -:  509:
        -:  510:  //score from discard
    #####:  511:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  514:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  515:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  516:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  517:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  518:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  519:    }
        -:  520:
        -:  521:  //score from deck
    #####:  522:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  525:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  526:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  527:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  528:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  529:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  530:    }
        -:  531:
    #####:  532:  return score;
        -:  533:}
        -:  534:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  535:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  536:  int i;
        -:  537:  int j;
        -:  538:  int highScore;
        -:  539:  int currentPlayer;
        -:  540:
        -:  541:  //get score for each player
    #####:  542:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  543:    {
        -:  544:      //set unused player scores to -9999
    #####:  545:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  546:	{
    #####:  547:	  players[i] = -9999;
        -:  548:	}
        -:  549:      else
        -:  550:	{
    #####:  551:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  552:	}
        -:  553:    }
        -:  554:
        -:  555:  //find highest score
    #####:  556:  j = 0;
    #####:  557:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  558:    {
    #####:  559:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  560:	{
    #####:  561:	  j = i;
        -:  562:	}
        -:  563:    }
    #####:  564:  highScore = players[j];
        -:  565:
        -:  566:  //add 1 to players who had less turns
    #####:  567:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:    {
    #####:  570:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  571:	{
    #####:  572:	  players[i]++;
        -:  573:	}
        -:  574:    }
        -:  575:
        -:  576:  //find new highest score
    #####:  577:  j = 0;
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  581:	{
    #####:  582:	  j = i;
        -:  583:	}
        -:  584:    }
    #####:  585:  highScore = players[j];
        -:  586:
        -:  587:  //set winners in array to 1 and rest to 0
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  591:	{
    #####:  592:	  players[i] = 1;
        -:  593:	}
        -:  594:      else
        -:  595:	{
    #####:  596:	  players[i] = 0;
        -:  597:	}
        -:  598:    }
        -:  599:
    #####:  600:  return 0;
        -:  601:}
        -:  602:
function drawCard called 23290 returned 100% blocks executed 100%
    23290:  603:int drawCard(int player, struct gameState *state)
        -:  604:{	int count;
        -:  605:  int deckCounter;
    23290:  606:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  607:
        -:  608:    //Step 1 Shuffle the discard pile back into a deck
        -:  609:    int i;
        -:  610:    //Move discard to deck
    10935:  611:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
    10130:  612:      state->deck[player][i] = state->discard[player][i];
    10130:  613:      state->discard[player][i] = -1;
        -:  614:    }
        -:  615:
      805:  616:    state->deckCount[player] = state->discardCount[player];
      805:  617:    state->discardCount[player] = 0;//Reset discard
        -:  618:
        -:  619:    //Shufffle the deck
      805:  620:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  621:
        -:  622:    if (1){//Debug statements
        -:  623:      //printf("Deck count now: %d\n", state->deckCount[player]);
        -:  624:    }
        -:  625:
      805:  626:    state->discardCount[player] = 0;
        -:  627:
        -:  628:    //Step 2 Draw Card
      805:  629:    count = state->handCount[player];//Get current player's hand count
        -:  630:
        -:  631:    if (1){//Debug statements
        -:  632:      //printf("Current hand count: %d\n", count);
        -:  633:    }
        -:  634:
      805:  635:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  636:
      805:  637:    if (deckCounter == 0)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
      507:  638:      return -1;
        -:  639:
      298:  640:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      298:  641:    state->deckCount[player]--;
      298:  642:    state->handCount[player]++;//Increment hand count
        -:  643:  }
        -:  644:
        -:  645:  else{
    22485:  646:    int count = state->handCount[player];//Get current hand count for player
        -:  647:    int deckCounter;
        -:  648:    if (1){//Debug statements
        -:  649:      //printf("Current hand count: %d\n", count);
        -:  650:    }
        -:  651:
    22485:  652:    deckCounter = state->deckCount[player];//Create holder for the deck count
    22485:  653:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    22485:  654:    state->deckCount[player]--;
    22485:  655:    state->handCount[player]++;//Increment hand count
        -:  656:  }
        -:  657:
    22783:  658:  return 0;
        -:  659:}
        -:  660:
function getCost called 0 returned 0% blocks executed 0%
    #####:  661:int getCost(int cardNumber)
        -:  662:{
    #####:  663:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  664:    {
        -:  665:    case curse:
    #####:  666:      return 0;
        -:  667:    case estate:
    #####:  668:      return 2;
        -:  669:    case duchy:
    #####:  670:      return 5;
        -:  671:    case province:
    #####:  672:      return 8;
        -:  673:    case copper:
    #####:  674:      return 0;
        -:  675:    case silver:
    #####:  676:      return 3;
        -:  677:    case gold:
    #####:  678:      return 6;
        -:  679:    case adventurer:
    #####:  680:      return 6;
        -:  681:    case council_room:
    #####:  682:      return 5;
        -:  683:    case feast:
    #####:  684:      return 4;
        -:  685:    case gardens:
    #####:  686:      return 4;
        -:  687:    case mine:
    #####:  688:      return 5;
        -:  689:    case remodel:
    #####:  690:      return 4;
        -:  691:    case smithy:
    #####:  692:      return 4;
        -:  693:    case village:
    #####:  694:      return 3;
        -:  695:    case baron:
    #####:  696:      return 4;
        -:  697:    case great_hall:
    #####:  698:      return 3;
        -:  699:    case minion:
    #####:  700:      return 5;
        -:  701:    case steward:
    #####:  702:      return 3;
        -:  703:    case tribute:
    #####:  704:      return 5;
        -:  705:    case ambassador:
    #####:  706:      return 3;
        -:  707:    case cutpurse:
    #####:  708:      return 4;
        -:  709:    case embargo:
    #####:  710:      return 2;
        -:  711:    case outpost:
    #####:  712:      return 5;
        -:  713:    case salvager:
    #####:  714:      return 4;
        -:  715:    case sea_hag:
    #####:  716:      return 4;
        -:  717:    case treasure_map:
    #####:  718:      return 4;
        -:  719:    }
        -:  720:
    #####:  721:  return -1;
        -:  722:}
        -:  723:
function cardEffect called 100 returned 100% blocks executed 3%
      100:  724:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  725:{
        -:  726:  int i;
        -:  727:  int j;
        -:  728:  int k;
        -:  729:  int x;
        -:  730:  int index;
      100:  731:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      100:  732:  int nextPlayer = currentPlayer + 1;
        -:  733:
      100:  734:  int tributeRevealedCards[2] = {-1, -1};
        -:  735:  int temphand[MAX_HAND];// moved above the if statement
      100:  736:  int drawntreasure=0;
        -:  737:  int cardDrawn;
      100:  738:  int z = 0;// this is the counter for the temp hand
      100:  739:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  740:    nextPlayer = 0;
        -:  741:  }
        -:  742:
        -:  743:
        -:  744:  //uses switch to select card and perform actions
      100:  745:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 100%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  746:    {
        -:  747:    case adventurer:
    #####:  748:      playAdventurer(drawntreasure, state,currentPlayer,z,temphand);
call    0 never executed
    #####:  749:      return 0;
        -:  750:
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  756:	}
        -:  757:
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
call    0 never executed
        -:  767:	    }
        -:  768:	}
        -:  769:
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  772:
    #####:  773:      return 0;
        -:  774:
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
    #####:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  798:
    #####:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
    #####:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
    #####:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:
    #####:  826:      return 0;
        -:  827:
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
    #####:  864:      return 0;
        -:  865:
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:
        -:  892:    case smithy:
    #####:  893:      if (playSmithy(currentPlayer, state, handPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:        return 0;
    #####:  895:      return 0;
        -:  896:
        -:  897:    case village:
    #####:  898:      playVillage(handPos, state, currentPlayer);
call    0 never executed
    #####:  899:      return 0;
        -:  900:
        -:  901:    case baron:
    #####:  902:      state->numBuys++;//Increase buys by 1!
    #####:  903:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  904:	int p = 0;//Iterator for hand!
    #####:  905:	int card_not_discarded = 1;//Flag for discard set!
    #####:  906:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  907:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  908:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  909:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  910:	    state->discardCount[currentPlayer]++;
    #####:  911:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  912:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  913:	    }
    #####:  914:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  915:	    state->handCount[currentPlayer]--;
    #####:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
    #####:  918:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  919:	    if(DEBUG) {
        -:  920:	      printf("No estate cards in your hand, invalid choice\n");
        -:  921:	      printf("Must gain an estate if there are any\n");
        -:  922:	    }
    #####:  923:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  925:	      state->supplyCount[estate]--;//Decrement estates
    #####:  926:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:		isGameOver(state);
call    0 never executed
        -:  928:	      }
        -:  929:	    }
    #####:  930:	    card_not_discarded = 0;//Exit the loop
        -:  931:	  }
        -:  932:
        -:  933:	  else{
    #####:  934:	    p++;//Next card
        -:  935:	  }
        -:  936:	}
        -:  937:      }
        -:  938:
        -:  939:      else{
    #####:  940:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  941:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  942:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  943:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	    isGameOver(state);
call    0 never executed
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case great_hall:
    #####:  953:      playGreat_hall(handPos, state,currentPlayer);
call    0 never executed
    #####:  954:      return 0;
        -:  955:
        -:  956:    case minion:
        -:  957:      //+1 action
    #####:  958:      state->numActions++;
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:
    #####:  963:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  state->coins = state->coins + 2;
        -:  966:	}
        -:  967:
    #####:  968:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  969:	{
        -:  970:	  //discard hand
    #####:  971:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  972:	    {
    #####:  973:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  974:	    }
        -:  975:
        -:  976:	  //draw 4
    #####:  977:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  980:	    }
        -:  981:
        -:  982:	  //other players discard hand and redraw if hand size > 4
    #####:  983:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  986:		{
    #####:  987:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  988:		    {
        -:  989:		      //discard hand
    #####:  990:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  991:			{
    #####:  992:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  993:			}
        -:  994:
        -:  995:		      //draw 4
    #####:  996:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  997:			{
    #####:  998:			  drawCard(i, state);
call    0 never executed
        -:  999:			}
        -: 1000:		    }
        -: 1001:		}
        -: 1002:	    }
        -: 1003:
        -: 1004:	}
    #####: 1005:      return 0;
        -: 1006:
        -: 1007:    case steward:
    #####: 1008:      playSteward(choice1,choice2,choice3,currentPlayer,state,handPos);
call    0 never executed
    #####: 1009:      return 0;
        -: 1010:
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
    #####: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	}
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }
        -: 1047:
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:
    #####: 1068:      return 0;
        -: 1069:
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (DEBUG)
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
    #####: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}
    #####: 1149:		      break;
        -: 1150:		    }
        -: 1151:		}
        -: 1152:
        -: 1153:	    }
        -: 1154:
        -: 1155:	}
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:
        -: 1163:    case embargo:
        -: 1164:      //+2 Coins
      100: 1165:      state->coins = state->coins + 2;
        -: 1166:
        -: 1167:      //see if selected pile is in play
      100: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1169:	{
       34: 1170:	  return -1;
        -: 1171:	}
        -: 1172:
        -: 1173:      //add embargo token to selected supply pile
       66: 1174:      state->embargoTokens[choice1]++;
        -: 1175:
        -: 1176:      //trash card
       66: 1177:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
       66: 1178:      return 0;
        -: 1179:
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1198:	}
        -: 1199:
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 66 returned 100% blocks executed 63%
       66: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:
        -: 1251:  //if card is not trashed, added to Played pile
       66: 1252:  if (trashFlag < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1253:    {
        -: 1254:      //add card to played pile
    #####: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:
        -: 1259:  //set played card to -1
       66: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:
        -: 1262:  //remove card from player's hand
       66: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
    #####: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
       66: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
       66: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
       66: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
       66: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:
       66: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 50 returned 100% blocks executed 80%
       50: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
       50: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
        -: 1292:    {
       17: 1293:      return -1;
        -: 1294:    }
        -: 1295:
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
       33: 1301:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
       33: 1306:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
       33: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       33: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:
        -: 1317:  //decrease number in supply pile
       33: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:
       33: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 183 returned 100% blocks executed 100%
      183: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:
        -: 1327:  //reset coin count
      183: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
     1065: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1332:    {
      882: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1334:	{
      609: 1335:	  state->coins += 1;
        -: 1336:	}
      273: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1338:	{
        2: 1339:	  state->coins += 2;
        -: 1340:	}
      271: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1342:	{
        2: 1343:	  state->coins += 3;
        -: 1344:	}
        -: 1345:    }
        -: 1346:
        -: 1347:  //add bonus
      183: 1348:  state->coins += bonus;
        -: 1349:
      183: 1350:  return 0;
        -: 1351:}
