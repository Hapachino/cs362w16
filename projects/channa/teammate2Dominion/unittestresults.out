----------------- TESTING updateCoins() with coppers and silvers:

Test player 0 with 5 copper(s), 0 silver(s), and 8 bonus.
G.coins = 13, expected = 13

Test player 0 with 4 copper(s), 1 silver(s), and 6 bonus.
G.coins = 12, expected = 12

Test player 0 with 3 copper(s), 2 silver(s), and 4 bonus.
G.coins = 11, expected = 11

Test player 0 with 2 copper(s), 3 silver(s), and 1 bonus.
G.coins = 9, expected = 9

Test player 0 with 1 copper(s), 4 silver(s), and 1 bonus.
G.coins = 10, expected = 10

Test player 0 with 0 copper(s), 5 silver(s), and 7 bonus.
G.coins = 17, expected = 17

Test player 1 with 5 copper(s), 0 silver(s), and 2 bonus.
G.coins = 7, expected = 7

Test player 1 with 4 copper(s), 1 silver(s), and 3 bonus.
G.coins = 9, expected = 9

Test player 1 with 3 copper(s), 2 silver(s), and 7 bonus.
G.coins = 14, expected = 14

Test player 1 with 2 copper(s), 3 silver(s), and 8 bonus.
G.coins = 16, expected = 16

Test player 1 with 1 copper(s), 4 silver(s), and 9 bonus.
G.coins = 18, expected = 18

Test player 1 with 0 copper(s), 5 silver(s), and 3 bonus.
G.coins = 13, expected = 13

----------------- TESTING updateCoins() with coppers and golds:

Test player 0 with 5 copper(s), 0 gold(s), and 3 bonus.
G.coins = 8, expected = 8

Test player 0 with 4 copper(s), 1 gold(s), and 2 bonus.
G.coins = 9, expected = 9

Test player 0 with 3 copper(s), 2 gold(s), and 8 bonus.
G.coins = 17, expected = 17

Test player 0 with 2 copper(s), 3 gold(s), and 9 bonus.
G.coins = 20, expected = 20

Test player 0 with 1 copper(s), 4 gold(s), and 3 bonus.
G.coins = 16, expected = 16

Test player 0 with 0 copper(s), 5 gold(s), and 5 bonus.
G.coins = 20, expected = 20

Test player 1 with 5 copper(s), 0 gold(s), and 9 bonus.
G.coins = 14, expected = 14

Test player 1 with 4 copper(s), 1 gold(s), and 8 bonus.
G.coins = 15, expected = 15

Test player 1 with 3 copper(s), 2 gold(s), and 4 bonus.
G.coins = 13, expected = 13

Test player 1 with 2 copper(s), 3 gold(s), and 8 bonus.
G.coins = 19, expected = 19

Test player 1 with 1 copper(s), 4 gold(s), and 4 bonus.
G.coins = 17, expected = 17

Test player 1 with 0 copper(s), 5 gold(s), and 2 bonus.
G.coins = 17, expected = 17

All tests passed!
----------------- TESTING fullDeckCount():

----------------- Testing for Player 0:
Adding the following to
    deck:         5 coppers
    hand:         10 golds
    discard pile: 2 provinces
    hand:         3 smithys
    discard pile: 4 tributes
    deck:         5 embargos
estate result: 3, expected: 3
copper result: 7, expected: 7
updated copper result: 12, expected: 12
gold result: 10, expected: 10
province result: 2, expected: 2
smithy result: 3, expected: 3
tribute result: 4, expected: 4
embargo result: 5, expected: 5

----------------- Testing for Player 1:
Adding the following to
    deck:         5 coppers
    hand:         10 golds
    discard pile: 2 provinces
    hand:         3 smithys
    discard pile: 4 tributes
    deck:         5 embargos
estate result: 3, expected: 3
copper result: 7, expected: 7
updated copper result: 12, expected: 12
gold result: 10, expected: 10
province result: 2, expected: 2
smithy result: 3, expected: 3
tribute result: 4, expected: 4
embargo result: 5, expected: 5

All tests passed!
----------------- TESTING isGameOver():
Test 1: No changes
Game is over: 0, expected: 0

Test 2: Empty province pile
Game is over: 1, expected: 1

Test 3: 1 empty supply pile
Game is over: 0, expected: 0

Test 4: 2 empty supply piles
Game is over: 0, expected: 0

Test 5: 3 empty supply piles
Game is over: 1, expected: 1

Test 6: Re-test with 2 empty supply piles
Game is over: 0, expected: 0

Test 7: Re-test with 1 empty supply piles
Game is over: 0, expected: 0

Test 8: Re-test with 0 empty supply piles
Game is over: 0, expected: 0

Test 9: Re-test with almost empty province pile
Game is over: 0, expected: 0

All tests passed!
----------------- TESTING scoreFor():

----------------- Test 1 - Player 0:
Adding the following to discard:
    1 duchy
    2 provinces
    5 great halls
    4 gardens
    2 curses
deckCount: 5
discardCount: 14
handCount: 5
Player 0 score: 22, expected: 29

----------------- Test 2 - Player 1:
No changes and all cards in deck:
deckCount: 10
discardCount: 0
handCount: 0
Player 1 score: 0, expected: 3

2/2 test(s) failed!
----------------- Testing smithy
----------------- BEFORE PLAYER ACTIONS AND BUYS
estate count: 8
duchy count: 8
province count: 8
k[0] count: 10
k[1] count: 8
k[2] count: 10
k[3] count: 8
k[4] count: 10
k[5] count: 10
k[6] count: 10
k[7] count: 10
k[8] count: 10
k[9] count: 10
----------------- Player 0:
----------------- AFTER PUT SMITHY IN HAND
DECK COUNT
Position 0, Card: 1
Position 1, Card: 1
Position 2, Card: 4
Position 3, Card: 4
Position 4, Card: 4
DISCARD COUNT
HAND COUNT
Position 0, Card: 4
Position 1, Card: 4
Position 2, Card: 1
Position 3, Card: 4
Position 4, Card: 4
Position 5, Card: 13
----------------- AFTER PUT 5 MORE CARDS IN DECK
DECK COUNT
Position 0, Card: 1
Position 1, Card: 1
Position 2, Card: 4
Position 3, Card: 4
Position 4, Card: 4
Position 5, Card: 7
Position 6, Card: 21
Position 7, Card: 12
Position 8, Card: 25
Position 9, Card: 14
DISCARD COUNT
HAND COUNT
Position 0, Card: 4
Position 1, Card: 4
Position 2, Card: 1
Position 3, Card: 4
Position 4, Card: 4
Position 5, Card: 13
----------------- AFTER PLAY SMITHY
DECK COUNT
Position 0, Card: 1
Position 1, Card: 1
Position 2, Card: 4
Position 3, Card: 4
Position 4, Card: 4
Position 5, Card: 7
Position 6, Card: 21
Deck count: 7, Expected: 7
DISCARD COUNT
Discard count: 0, Expected: 1
----------------- TEST FAILED!
HAND COUNT
Position 0, Card: 4
Position 1, Card: 4
Position 2, Card: 1
Position 3, Card: 4
Position 4, Card: 4
Position 5, Card: 12
Position 6, Card: 14
Position 7, Card: 25
Hand count: 8, Expected: 8
----------------- Player 1:
----------------- Check that no state changes were made to other player's deck
DECK COUNT
Position 0, Card: 4
Position 1, Card: 4
Position 2, Card: 1
Position 3, Card: 4
Position 4, Card: 4
Position 5, Card: 4
Position 6, Card: 4
Position 7, Card: 1
Position 8, Card: 1
Position 9, Card: 4
Copper count: 7, Expected: 7
Estate count: 3, Expected: 3
Deck count: 10, Expected: 10
DISCARD COUNT
Discard count: 0, Expected: 0
HAND COUNT
Hand count: 0, Expected: 0
----------------- Check that no state changes were made to victory and kingdom card piles
estate count: 8
duchy count: 8
province count: 8
k[0] count: 10
k[1] count: 8
k[2] count: 10
k[3] count: 8
k[4] count: 10
k[5] count: 10
k[6] count: 10
k[7] count: 10
k[8] count: 10
k[9] count: 10
No state changes for victory and kingdom card piles: 1

Some test(s) failed!
----------------- Testing adventurer
----------------- Player 0:
----------------- Test 1: coppers at top of deck
----------------- Initial counts
DECK COUNT
1
1
4
4
4
DISCARD COUNT
HAND COUNT
4
4
1
4
4
----------------- After playAdventurer
DECK COUNT
1
1
4
Card count: 3, Expected: 3
Expected:
1
1
4
DISCARD COUNT
Card count: 0, Expected: 0
HAND COUNT
4
4
1
4
4
4
4
Card count: 7, Expected: 7
Expected:
4
4
1
4
4
4
4
----------------- Test 2: coppers at bottom of deck
----------------- Initial counts
DECK COUNT
4
4
4
1
1
DISCARD COUNT
HAND COUNT
4
4
1
4
4
----------------- After playAdventurer
DECK COUNT
4
Card count: 1, Expected: 1
Expected:
4
DISCARD COUNT
1
Card count: 1, Expected: 2
----------------- TEST FAILED!
Expected:
1
1
----------------- TEST FAILED!
HAND COUNT
4
4
1
4
4
4
4
Card count: 7, Expected: 7
Expected:
4
4
1
4
4
4
4
----------------- Test 3: coppers interspersed through deck
----------------- Initial counts
DECK COUNT
4
1
4
1
4
DISCARD COUNT
HAND COUNT
4
4
1
4
4
----------------- After playAdventurer
DECK COUNT
4
1
Card count: 2, Expected: 2
Expected:
4
1
DISCARD COUNT
Card count: 0, Expected: 1
----------------- TEST FAILED!
Expected:
1
----------------- TEST FAILED!
HAND COUNT
4
4
1
4
4
4
4
Card count: 7, Expected: 7
Expected:
4
4
1
4
4
4
4
----------------- Player 1:
----------------- Test 4: Check that no state changes were made to other player's deck
DECK COUNT
Position 0, Card: 4
Position 1, Card: 4
Position 2, Card: 1
Position 3, Card: 4
Position 4, Card: 4
Position 5, Card: 4
Position 6, Card: 4
Position 7, Card: 1
Position 8, Card: 1
Position 9, Card: 4
Copper count: 7, Expected: 7
Estate count: 3, Expected: 3
Deck count: 10, Expected: 10
DISCARD COUNT
Discard count: 0, Expected: 0
HAND COUNT
Hand count: 0, Expected: 0
----------------- Test 5: Check that no state changes were made to estate pile
Estate count: 8, Expected: 8

Some test(s) failed!
----------------- Testing cutpurse

----------------- Test 1: 4 hands with coppers
----------------- AFTER PUT CUTPURSE IN HAND FOR PLAYER 0:
----------------- AFTER MOVE CARDS FROM DECKS TO HANDS FOR OTHER PLAYER(S):
Initial coins: 4
----------------- Player 0
HAND COUNT
Copper count: 4
----------------- Player 1
HAND COUNT
Copper count: 7
----------------- Player 2
HAND COUNT
Copper count: 7
----------------- Player 3
HAND COUNT
Copper count: 7
----------------- AFTER PLAY CUTPURSE
Updated coins: 6, Expected: 6
----------------- Player 0
HAND COUNT
Copper count: 4, Expected: 4
----------------- Player 1
HAND COUNT
Copper count: 6, Expected: 6
----------------- Player 2
HAND COUNT
Copper count: 6, Expected: 6
----------------- Player 3
HAND COUNT
Copper count: 6, Expected: 6

----------------- Test 2: 3 hands with coppers
----------------- AFTER PUT CUTPURSE IN HAND FOR PLAYER 0:
----------------- AFTER MOVE CARDS FROM DECKS TO HANDS FOR OTHER PLAYER(S):
Initial coins: 4
----------------- Player 0
HAND COUNT
Copper count: 4
----------------- Player 1
HAND COUNT
Copper count: 7
----------------- Player 2
HAND COUNT
Copper count: 7
----------------- AFTER PLAY CUTPURSE
Updated coins: 6, Expected: 6
----------------- Player 0
HAND COUNT
Copper count: 4, Expected: 4
----------------- Player 1
HAND COUNT
Copper count: 6, Expected: 6
----------------- Player 2
HAND COUNT
Copper count: 6, Expected: 6

----------------- Test 3: 2 hands with coppers
----------------- AFTER PUT CUTPURSE IN HAND FOR PLAYER 0:
----------------- AFTER MOVE CARDS FROM DECKS TO HANDS FOR OTHER PLAYER(S):
Initial coins: 4
----------------- Player 0
HAND COUNT
Copper count: 4
----------------- Player 1
HAND COUNT
Copper count: 7
----------------- AFTER PLAY CUTPURSE
Updated coins: 6, Expected: 6
----------------- Player 0
HAND COUNT
Copper count: 4, Expected: 4
----------------- Player 1
HAND COUNT
Copper count: 6, Expected: 6

----------------- Test 4: hand with no coppers
----------------- AFTER PUT CUTPURSE IN HAND FOR PLAYER 0:
----------------- AFTER MAKE A HAND WITH NO COPPERS FOR PLAYER 1:
Initial coins: 4
----------------- Player 0
HAND COUNT
Copper count: 4
----------------- Player 1
HAND COUNT
Copper count: 0
----------------- Player 2
HAND COUNT
Copper count: 7
----------------- Player 3
HAND COUNT
Copper count: 7
----------------- AFTER PLAY CUTPURSE
Updated coins: 6, Expected: 6
----------------- Player 0
HAND COUNT
Copper count: 4, Expected: 4
----------------- Player 1
HAND COUNT
Copper count: 0, Expected: 0
----------------- Player 2
HAND COUNT
Copper count: 6, Expected: 6
----------------- Player 3
HAND COUNT
Copper count: 6, Expected: 6
Check if satisfied condition for revealing cards
(j == handCount):
j = 9, handCount: 10
----------------- TEST FAILED!

Some test(s) failed!
----------------- Testing remodel

----------------- Test 1 (Cost 2): Trash embargo
CONTROL CARDS IN HAND ARE COPPERS:

choice1 cost: 2, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 2, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 2, choice2 cost: 4
Result: 0, Expected: 0
Discard count: 1, Expected: 2
----------------- TEST FAILED!
Gained count: 1, Expected: 1
Hand count: 3, Expected: 3

choice1 cost: 2, choice2 cost: 5
Result: 0, Expected: -1
----------------- TEST FAILED!
Discard count: 1, Expected: 0
----------------- TEST FAILED!
Gained count: 1, Expected: 0
----------------- TEST FAILED!
Hand count: 3, Expected: 5
----------------- TEST FAILED!

choice1 cost: 2, choice2 cost: 6
Result: 0, Expected: -1
----------------- TEST FAILED!
Discard count: 1, Expected: 0
----------------- TEST FAILED!
Gained count: 1, Expected: 0
----------------- TEST FAILED!
Hand count: 3, Expected: 5
----------------- TEST FAILED!

CONTROL CARDS IN HAND ARE ESTATES:

choice1 cost: 2, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 2, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 2, choice2 cost: 4
Result: 0, Expected: 0
Discard count: 1, Expected: 2
----------------- TEST FAILED!
Gained count: 1, Expected: 1
Hand count: 3, Expected: 3

choice1 cost: 2, choice2 cost: 5
Result: 0, Expected: -1
----------------- TEST FAILED!
Discard count: 1, Expected: 0
----------------- TEST FAILED!
Gained count: 1, Expected: 0
----------------- TEST FAILED!
Hand count: 3, Expected: 5
----------------- TEST FAILED!

choice1 cost: 2, choice2 cost: 6
Result: 0, Expected: -1
----------------- TEST FAILED!
Discard count: 1, Expected: 0
----------------- TEST FAILED!
Gained count: 1, Expected: 0
----------------- TEST FAILED!
Hand count: 3, Expected: 5
----------------- TEST FAILED!

----------------- Test 2 (Cost 3): Trash village
CONTROL CARDS IN HAND ARE COPPERS:

choice1 cost: 3, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 3, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 3, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 3, choice2 cost: 5
Result: 0, Expected: 0
Discard count: 1, Expected: 2
----------------- TEST FAILED!
Gained count: 1, Expected: 1
Hand count: 3, Expected: 3

choice1 cost: 3, choice2 cost: 6
Result: 0, Expected: -1
----------------- TEST FAILED!
Discard count: 1, Expected: 0
----------------- TEST FAILED!
Gained count: 1, Expected: 0
----------------- TEST FAILED!
Hand count: 3, Expected: 5
----------------- TEST FAILED!

CONTROL CARDS IN HAND ARE ESTATES:

choice1 cost: 3, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 3, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 3, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 3, choice2 cost: 5
Result: 0, Expected: 0
Discard count: 1, Expected: 2
----------------- TEST FAILED!
Gained count: 1, Expected: 1
Hand count: 3, Expected: 3

choice1 cost: 3, choice2 cost: 6
Result: 0, Expected: -1
----------------- TEST FAILED!
Discard count: 1, Expected: 0
----------------- TEST FAILED!
Gained count: 1, Expected: 0
----------------- TEST FAILED!
Hand count: 3, Expected: 5
----------------- TEST FAILED!

----------------- Test 3 (Cost 4): Trash smithy
CONTROL CARDS IN HAND ARE COPPERS:

choice1 cost: 4, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 5
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 6
Result: 0, Expected: 0
Discard count: 1, Expected: 2
----------------- TEST FAILED!
Gained count: 1, Expected: 1
Hand count: 3, Expected: 3

CONTROL CARDS IN HAND ARE ESTATES:

choice1 cost: 4, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 5
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 4, choice2 cost: 6
Result: 0, Expected: 0
Discard count: 1, Expected: 2
----------------- TEST FAILED!
Gained count: 1, Expected: 1
Hand count: 3, Expected: 3

----------------- Test 4 (Cost 5): Trash mine
CONTROL CARDS IN HAND ARE COPPERS:

choice1 cost: 5, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 5
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 6
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

CONTROL CARDS IN HAND ARE ESTATES:

choice1 cost: 5, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 5
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 5, choice2 cost: 6
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

----------------- Test 5 (Cost 6): Trash adventurer
CONTROL CARDS IN HAND ARE COPPERS:

choice1 cost: 6, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 5
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 6
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

CONTROL CARDS IN HAND ARE ESTATES:

choice1 cost: 6, choice2 cost: 2
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 3
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 4
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 5
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!

choice1 cost: 6, choice2 cost: 6
Result: -1, Expected: 0
----------------- TEST FAILED!
Discard count: 0, Expected: 2
----------------- TEST FAILED!
Gained count: 0, Expected: 1
----------------- TEST FAILED!
Hand count: 5, Expected: 3
----------------- TEST FAILED!
Some test(s) failed!
File 'dominion.c'
Lines executed:39.40% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1575:    8:int compare(const void* a, const void* b) {
     1575:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     1575:   11:  if (*(int*)a < *(int*)b)
      375:   12:    return -1;
     1200:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       35:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       35:   44:  SelectStream(1);
       35:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       35:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       35:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      385:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     3850:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     3500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       35:   73:  if (numPlayers == 2)
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        3:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       35:   87:  if (numPlayers == 2)
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       35:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       35:  102:  state->supplyCount[silver] = 40;
       35:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      735:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     5775:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     5425:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      350:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      134:  115:		  if (numPlayers == 2){ 
       61:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        6:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      283:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      350:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     5075:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      110:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       75:  140:      state->deckCount[i] = 0;
      300:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      225:  143:	  state->deck[i][j] = estate;
      225:  144:	  state->deckCount[i]++;
        -:  145:	}
      600:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      525:  148:	  state->deck[i][j] = copper;
      525:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      110:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       75:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      110:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       75:  166:      state->handCount[i] = 0;
       75:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      980:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      945:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       35:  182:  state->outpostPlayed = 0;
       35:  183:  state->phase = 0;
       35:  184:  state->numActions = 1;
       35:  185:  state->numBuys = 1;
       35:  186:  state->playedCardCount = 0;
       35:  187:  state->whoseTurn = 0;
       35:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      210:  192:  for (it = 0; it < 5; it++){
      175:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       35:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       35:  198:  return 0;
        -:  199:}
        -:  200:
       75:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       75:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       75:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       75:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      900:  214:  while (state->deckCount[player] > 0) {
      750:  215:    card = floor(Random() * state->deckCount[player]);
      750:  216:    newDeck[newDeckPos] = state->deck[player][card];
      750:  217:    newDeckPos++;
     2623:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1873:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      750:  221:    state->deckCount[player]--;
        -:  222:  }
      825:  223:  for (i = 0; i < newDeckPos; i++) {
      750:  224:    state->deck[player][i] = newDeck[i];
      750:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       75:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       12:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       20:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       20:  326:  int count = 0;
        -:  327:
      230:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      210:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
      198:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
      178:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
      108:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
       88:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       20:  343:  return count;
        -:  344:}
        -:  345:
       58:  346:int whoseTurn(struct gameState *state) {
       58:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
        8:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        7:  414:  return 0;
        -:  415:}
        -:  416:
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       16:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       14:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       14:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       14:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       14:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       14:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       14:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       16:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       14:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       14:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       14:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       14:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       14:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       14:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      187:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      187:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      187:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      187:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      187:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      187:  576:    state->deckCount[player]--;
      187:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      187:  580:  return 0;
        -:  581:}
        -:  582:
      200:  583:int getCost(int cardNumber)
        -:  584:{
      200:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       40:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
       40:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
       40:  614:      return 4;
        -:  615:    case village:
       40:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
       40:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://refactored action cards
        1:  647:int playSmithy(struct gameState *state, int handPos)
        -:  648:{
        1:  649:	int currentPlayer = whoseTurn(state);
        -:  650:	int i;
        -:  651:	//+3 Cards
        4:  652:	for (i = 0; i < 3; i++)
        -:  653:	{
        3:  654:		drawCard(currentPlayer, state);
        -:  655:	}
        -:  656:
        -:  657:	//discard card from hand
        1:  658:	discardCard(handPos, currentPlayer, state, 1);
        1:  659:	return 0;
        -:  660:}
        -:  661: 
        3:  662:int playAdventurer(struct gameState *state)
        -:  663:{
        3:  664:	int drawntreasure=0;	 
        3:  665:	int currentPlayer = whoseTurn(state);
        -:  666:	int temphand[MAX_HAND];
        3:  667:	int z = 0;// this is the counter for the temp hand
       15:  668:	while(drawntreasure<2){
        9:  669:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  670:			shuffle(currentPlayer, state);
        -:  671:		}
        9:  672:		drawCard(currentPlayer, state);
        9:  673:		int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9:  674:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        6:  675:			drawntreasure++;
        -:  676:		else{
        3:  677:			temphand[z]=cardDrawn;
        3:  678:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  679:			z++;
        -:  680:		}
        -:  681:	}
        7:  682:	while(z-1>0){
        1:  683:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  684:		z=z-1;
        -:  685:	}
        3:  686:	return 0;	 
        -:  687:}
        -:  688: 
    #####:  689:int playVillage(struct gameState *state, int handPos)
        -:  690:{
    #####:  691:	 int currentPlayer = whoseTurn(state);
        -:  692:	//+1 Card
    #####:  693:	drawCard(currentPlayer, state);
        -:  694:		
        -:  695:	//+2 Actions
    #####:  696:	state->numActions = state->numActions + 2;
        -:  697:		
        -:  698:	//discard played card from hand
    #####:  699:	discardCard(handPos, currentPlayer, state, 0);
    #####:  700:	return 0;
        -:  701:}
        -:  702: 
    #####:  703:int playFeast(struct gameState *state, int choice1)
        -:  704:{
    #####:  705:	int currentPlayer = whoseTurn(state);
        -:  706:	int temphand[MAX_HAND];
        -:  707:	int i;
        -:  708:	//gain card with cost up to 5
        -:  709:	//Backup hand
    #####:  710:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:	}
        -:  714:	//Backup hand
        -:  715:
        -:  716:	//Update Coins for Buy
    #####:  717:	updateCoins(currentPlayer, state, 5);
    #####:  718:	int x = 1;//Condition to loop on
    #####:  719:	while( x == 1) {//Buy one card
    #####:  720:		if (supplyCount(choice1, state) <= 0){
        -:  721:			if (DEBUG)
        -:  722:				printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:			}
        -:  727:		}
    #####:  728:		else if (state->coins < getCost(choice1)){
    #####:  729:			printf("That card is too expensive!\n");
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:			}
        -:  734:		}
        -:  735:		else{
        -:  736:			if (DEBUG){
        -:  737:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:			}
        -:  739:
    #####:  740:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:			x = 0;//No more buying cards
        -:  742:
        -:  743:			if (DEBUG){
        -:  744:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:			}
        -:  746:		}
        -:  747:	}     
        -:  748:
        -:  749:	//Reset Hand
    #####:  750:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  751:		state->hand[currentPlayer][i] = temphand[i];
    #####:  752:		temphand[i] = -1;
        -:  753:	}
        -:  754:	//Reset Hand
        -:  755:			
    #####:  756:	return 0;
        -:  757:}
        -:  758:
    #####:  759:int playCouncil_Room(struct gameState *state, int handPos)
        -:  760:{
    #####:  761:	int currentPlayer = whoseTurn(state);
    #####:  762:	int i = 0;
        -:  763:	//+4 Cards
    #####:  764:	for (i = 0; i <= 4; i++)
        -:  765:	{
    #####:  766:		drawCard(currentPlayer, state);
        -:  767:	}
        -:  768:			
        -:  769:	//+1 Buy
    #####:  770:	state->numBuys++;
        -:  771:			
        -:  772:	//Each other player draws a card
    #####:  773:	for (i = 0; i < state->numPlayers; i++)
        -:  774:	{
    #####:  775:		if ( i != currentPlayer )
        -:  776:		{
    #####:  777:			drawCard(i, state);
        -:  778:		}
        -:  779:	}
        -:  780:			
        -:  781:	//put played card in played card pile
    #####:  782:	discardCard(handPos, currentPlayer, state, 0);
        -:  783:		
    #####:  784:	return 0;
        -:  785:}
        -:  786:
       54:  787:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  788:{
        -:  789:  int i;
        -:  790:  int j;
        -:  791:  int k;
        -:  792:  int x;
        -:  793:  int index;
       54:  794:  int currentPlayer = whoseTurn(state);
       54:  795:  int nextPlayer = currentPlayer + 1;
        -:  796:
       54:  797:  int tributeRevealedCards[2] = {-1, -1};
        -:  798:  int temphand[MAX_HAND];// moved above the if statement
       54:  799:  int drawntreasure=0;
        -:  800:  int cardDrawn;
       54:  801:  int z = 0;// this is the counter for the temp hand
       54:  802:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  803:    nextPlayer = 0;
        -:  804:  }
        -:  805: 	
        -:  806:  //uses switch to select card and perform actions
       54:  807:  switch( card ) 
        -:  808:    {
        -:  809:    case adventurer:
    #####:  810:		return playAdventurer(state);
        -:  811:			
        -:  812:    case council_room:
    #####:  813:      return playCouncil_Room(state, handPos);
        -:  814:			
        -:  815:    case feast:
    #####:  816:		return playFeast(state, choice1);
        -:  817:			
        -:  818:    case gardens:
    #####:  819:      return -1;
        -:  820:			
        -:  821:    case mine:
    #####:  822:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:	{
    #####:  826:	  return -1;
        -:  827:	}
        -:  828:		
    #####:  829:      if (choice2 > treasure_map || choice2 < curse)
        -:  830:	{
    #####:  831:	  return -1;
        -:  832:	}
        -:  833:
    #####:  834:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:      //discard trashed card
    #####:  845:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:	{
    #####:  847:	  if (state->hand[currentPlayer][i] == j)
        -:  848:	    {
    #####:  849:	      discardCard(i, currentPlayer, state, 0);			
    #####:  850:	      break;
        -:  851:	    }
        -:  852:	}
        -:  853:			
    #####:  854:      return 0;
        -:  855:			
        -:  856:    case remodel:
       50:  857:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
       50:  859:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:	{
       38:  861:	  return -1;
        -:  862:	}
        -:  863:
       12:  864:      gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:      //discard card from hand
       12:  867:      discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:      //discard trashed card
       24:  870:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:	{
       24:  872:	  if (state->hand[currentPlayer][i] == j)
        -:  873:	    {
       12:  874:	      discardCard(i, currentPlayer, state, 0);			
       12:  875:	      break;
        -:  876:	    }
        -:  877:	}
        -:  878:
        -:  879:
       12:  880:      return 0;
        -:  881:		
        -:  882:    case smithy:
    #####:  883:		return playSmithy(state, handPos);
        -:  884:		
        -:  885:    case village:
    #####:  886:		return playVillage(state,handPos);
        -:  887:		
        -:  888:    case baron:
    #####:  889:      state->numBuys++;//Increase buys by 1!
    #####:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:	int p = 0;//Iterator for hand!
    #####:  892:	int card_not_discarded = 1;//Flag for discard set!
    #####:  893:	while(card_not_discarded){
    #####:  894:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:	    state->discardCount[currentPlayer]++;
    #####:  898:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:	    }
    #####:  901:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:	    state->handCount[currentPlayer]--;
    #####:  903:	    card_not_discarded = 0;//Exit the loop
        -:  904:	  }
    #####:  905:	  else if (p > state->handCount[currentPlayer]){
        -:  906:	    if(DEBUG) {
        -:  907:	      printf("No estate cards in your hand, invalid choice\n");
        -:  908:	      printf("Must gain an estate if there are any\n");
        -:  909:	    }
    #####:  910:	    if (supplyCount(estate, state) > 0){
    #####:  911:	      gainCard(estate, state, 0, currentPlayer);
    #####:  912:	      state->supplyCount[estate]--;//Decrement estates
    #####:  913:	      if (supplyCount(estate, state) == 0){
    #####:  914:		isGameOver(state);
        -:  915:	      }
        -:  916:	    }
    #####:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
        -:  919:			    
        -:  920:	  else{
    #####:  921:	    p++;//Next card
        -:  922:	  }
        -:  923:	}
        -:  924:      }
        -:  925:			    
        -:  926:      else{
    #####:  927:	if (supplyCount(estate, state) > 0){
    #####:  928:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  930:	  if (supplyCount(estate, state) == 0){
    #####:  931:	    isGameOver(state);
        -:  932:	  }
        -:  933:	}
        -:  934:      }
        -:  935:	    
        -:  936:      
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case great_hall:
        -:  940:      //+1 Card
    #####:  941:      drawCard(currentPlayer, state);
        -:  942:			
        -:  943:      //+1 Actions
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case minion:
        -:  951:      //+1 action
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
        -:  956:			
    #####:  957:      if (choice1)		//+2 coins
        -:  958:	{
    #####:  959:	  state->coins = state->coins + 2;
        -:  960:	}
        -:  961:			
    #####:  962:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  963:	{
        -:  964:	  //discard hand
    #####:  965:	  while(numHandCards(state) > 0)
        -:  966:	    {
    #####:  967:	      discardCard(handPos, currentPlayer, state, 0);
        -:  968:	    }
        -:  969:				
        -:  970:	  //draw 4
    #####:  971:	  for (i = 0; i < 4; i++)
        -:  972:	    {
    #####:  973:	      drawCard(currentPlayer, state);
        -:  974:	    }
        -:  975:				
        -:  976:	  //other players discard hand and redraw if hand size > 4
    #####:  977:	  for (i = 0; i < state->numPlayers; i++)
        -:  978:	    {
    #####:  979:	      if (i != currentPlayer)
        -:  980:		{
    #####:  981:		  if ( state->handCount[i] > 4 )
        -:  982:		    {
        -:  983:		      //discard hand
    #####:  984:		      while( state->handCount[i] > 0 )
        -:  985:			{
    #####:  986:			  discardCard(handPos, i, state, 0);
        -:  987:			}
        -:  988:							
        -:  989:		      //draw 4
    #####:  990:		      for (j = 0; j < 4; j++)
        -:  991:			{
    #####:  992:			  drawCard(i, state);
        -:  993:			}
        -:  994:		    }
        -:  995:		}
        -:  996:	    }
        -:  997:				
        -:  998:	}
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
        -: 1003:	{
        -: 1004:	  //+2 cards
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
    #####: 1008:      else if (choice1 == 2)
        -: 1009:	{
        -: 1010:	  //+2 coins
    #####: 1011:	  state->coins = state->coins + 2;
        -: 1012:	}
        -: 1013:      else
        -: 1014:	{
        -: 1015:	  //trash 2 cards in hand
    #####: 1016:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1017:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1018:	}
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1026:	if (state->deckCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	  state->deckCount[nextPlayer]--;
        -: 1029:	}
    #####: 1030:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:	  state->discardCount[nextPlayer]--;
        -: 1033:	}
        -: 1034:	else{
        -: 1035:	  //No Card to Reveal
        -: 1036:	  if (DEBUG){
        -: 1037:	    printf("No cards to reveal\n");
        -: 1038:	  }
        -: 1039:	}
        -: 1040:      }
        -: 1041:	    
        -: 1042:      else{
    #####: 1043:	if (state->deckCount[nextPlayer] == 0){
    #####: 1044:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1045:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:	    state->deckCount[nextPlayer]++;
    #####: 1047:	    state->discard[nextPlayer][i] = -1;
    #####: 1048:	    state->discardCount[nextPlayer]--;
        -: 1049:	  }
        -: 1050:			    
    #####: 1051:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1052:	} 
    #####: 1053:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:	state->deckCount[nextPlayer]--;
    #####: 1056:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:	state->deckCount[nextPlayer]--;
        -: 1059:      }    
        -: 1060:		       
    #####: 1061:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1062:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:	state->playedCardCount++;
    #####: 1064:	tributeRevealedCards[1] = -1;
        -: 1065:      }
        -: 1066:
    #####: 1067:      for (i = 0; i <= 2; i ++){
    #####: 1068:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1069:	  state->coins += 2;
        -: 1070:	}
        -: 1071:		    
    #####: 1072:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	  drawCard(currentPlayer, state);
        -: 1075:	}
        -: 1076:	else{//Action Card
    #####: 1077:	  state->numActions = state->numActions + 2;
        -: 1078:	}
        -: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
    #####: 1091:      if (choice1 == handPos)
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1099:	    {
    #####: 1100:	      j++;
        -: 1101:	    }
        -: 1102:	}
    #####: 1103:      if (j < choice2)
        -: 1104:	{
    #####: 1105:	  return -1;				
        -: 1106:	}
        -: 1107:
        -: 1108:      if (DEBUG) 
        -: 1109:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:      //increase supply count for choosen card by amount being discarded
    #####: 1112:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:			
        -: 1114:      //each other player gains a copy of revealed card
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
        -: 1116:	{
    #####: 1117:	  if (i != currentPlayer)
        -: 1118:	    {
    #####: 1119:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1120:	    }
        -: 1121:	}
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1125:
        -: 1126:      //trash copies of cards returned to supply
    #####: 1127:      for (j = 0; j < choice2; j++)
        -: 1128:	{
    #####: 1129:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1130:	    {
    #####: 1131:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1132:		{
    #####: 1133:		  discardCard(i, currentPlayer, state, 1);
    #####: 1134:		  break;
        -: 1135:		}
        -: 1136:	    }
        -: 1137:	}			
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
        4: 1143:      updateCoins(currentPlayer, state, 2);
       17: 1144:      for (i = 0; i < state->numPlayers; i++)
        -: 1145:	{
       13: 1146:	  if (i != currentPlayer)
        -: 1147:	    {
       27: 1148:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1149:		{
       26: 1150:		  if (state->hand[i][j] == copper)
        -: 1151:		    {
        8: 1152:		      discardCard(j, i, state, 0);
        8: 1153:		      break;
        -: 1154:		    }
       18: 1155:		  if (j == state->handCount[i])
        -: 1156:		    {
    #####: 1157:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1158:			{
        -: 1159:			  if (DEBUG)
        -: 1160:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:			}	
    #####: 1162:		      break;
        -: 1163:		    }		
        -: 1164:		}
        -: 1165:					
        -: 1166:	    }
        -: 1167:				
        -: 1168:	}				
        -: 1169:
        -: 1170:      //discard played card from hand
        4: 1171:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1172:
        4: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
        -: 1206:	{
        -: 1207:	  //gain coins equal to trashed card
    #####: 1208:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1209:	  //trash card
    #####: 1210:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1211:	}
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
    #####: 1219:	if (i != currentPlayer){
    #####: 1220:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:	  state->discardCount[i]++;
    #####: 1222:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1223:	}
        -: 1224:      }
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1231:	{
    #####: 1232:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1233:	    {
    #####: 1234:	      index = i;
    #####: 1235:	      break;
        -: 1236:	    }
        -: 1237:	}
    #####: 1238:      if (index > -1)
        -: 1239:	{
        -: 1240:	  //trash both treasure cards
    #####: 1241:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1242:	  discardCard(index, currentPlayer, state, 1);
        -: 1243:
        -: 1244:	  //gain 4 Gold cards
    #####: 1245:	  for (i = 0; i < 4; i++)
        -: 1246:	    {
    #####: 1247:	      gainCard(gold, state, 1, currentPlayer);
        -: 1248:	    }
        -: 1249:				
        -: 1250:	  //return success
    #####: 1251:	  return 1;
        -: 1252:	}
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:	
    #####: 1258:  return -1;
        -: 1259:}
        -: 1260:
       37: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
       37: 1265:  if (trashFlag < 1)
        -: 1266:    {
        -: 1267:      //add card to played pile
       36: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       36: 1269:      state->playedCardCount++;
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
       37: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
       37: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
        4: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
       33: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
       33: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
       33: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
       33: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
       37: 1296:  return 0;
        -: 1297:}
        -: 1298:
       12: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
       12: 1304:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
       12: 1314:  if (toFlag == 1)
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
       12: 1319:  else if (toFlag == 2)
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
       12: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
       12: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
       12: 1333:  return 0;
        -: 1334:}
        -: 1335:
       63: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
       63: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
      382: 1344:  for (i = 0; i < state->handCount[player]; i++)
        -: 1345:    {
      319: 1346:      if (state->hand[player][i] == copper)
        -: 1347:	{
      216: 1348:	  state->coins += 1;
        -: 1349:	}
      103: 1350:      else if (state->hand[player][i] == silver)
        -: 1351:	{
       30: 1352:	  state->coins += 2;
        -: 1353:	}
       73: 1354:      else if (state->hand[player][i] == gold)
        -: 1355:	{
       30: 1356:	  state->coins += 3;
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
       63: 1361:  state->coins += bonus;
        -: 1362:
       63: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
File 'dominion.c'
Lines executed:39.40% of 566
Branches executed:53.48% of 417
Taken at least once:36.69% of 417
Calls executed:23.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1575 returned 100% blocks executed 83%
     1575:    8:int compare(const void* a, const void* b) {
     1575:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     1575:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      375:   12:    return -1;
     1200:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 35 returned 100% blocks executed 95%
       35:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       35:   44:  SelectStream(1);
call    0 returned 100%
       35:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       35:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       35:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      385:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     3850:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     3500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       35:   73:  if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        3:   77:  else if (numPlayers == 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       35:   87:  if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       35:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       35:  102:  state->supplyCount[silver] = 40;
       35:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      735:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     5775:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     5425:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      350:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      134:  115:		  if (numPlayers == 2){ 
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       61:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        6:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      283:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      350:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     5075:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      110:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  139:    {
       75:  140:      state->deckCount[i] = 0;
      300:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      225:  143:	  state->deck[i][j] = estate;
      225:  144:	  state->deckCount[i]++;
        -:  145:	}
      600:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      525:  148:	  state->deck[i][j] = copper;
      525:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      110:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  155:    {
       75:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      110:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       75:  166:      state->handCount[i] = 0;
       75:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      980:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      945:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       35:  182:  state->outpostPlayed = 0;
       35:  183:  state->phase = 0;
       35:  184:  state->numActions = 1;
       35:  185:  state->numBuys = 1;
       35:  186:  state->playedCardCount = 0;
       35:  187:  state->whoseTurn = 0;
       35:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      210:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      175:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       35:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       35:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 75 returned 100% blocks executed 94%
       75:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       75:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       75:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       75:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      900:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      750:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      750:  216:    newDeck[newDeckPos] = state->deck[player][card];
      750:  217:    newDeckPos++;
     2623:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     1873:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      750:  221:    state->deckCount[player]--;
        -:  222:  }
      825:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      750:  224:    state->deck[player][i] = newDeck[i];
      750:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       75:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 12 returned 100% blocks executed 100%
       12:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 20 returned 100% blocks executed 100%
       20:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       20:  326:  int count = 0;
        -:  327:
      230:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  329:    {
      210:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -:  331:    }
        -:  332:
      198:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  334:    {
      178:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  336:    }
        -:  337:
      108:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  339:    {
       88:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -:  341:    }
        -:  342:
       20:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 58 returned 100% blocks executed 100%
       58:  346:int whoseTurn(struct gameState *state) {
       58:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 9 returned 100% blocks executed 100%
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 96%
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
        8:  409:  if ( j >= 3)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        7:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 74%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       16:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  434:    {
       14:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       14:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       14:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       14:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       14:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       14:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       16:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  445:    {
       14:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       14:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
       14:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       14:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       14:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       14:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 187 returned 100% blocks executed 38%
      187:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      187:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      187:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      187:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      187:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      187:  576:    state->deckCount[player]--;
      187:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      187:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 200 returned 100% blocks executed 23%
      200:  583:int getCost(int cardNumber)
        -:  584:{
      200:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 20%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 20%
branch 12 taken 0%
branch 13 taken 20%
branch 14 taken 20%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 20%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       40:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
       40:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
       40:  614:      return 4;
        -:  615:    case village:
       40:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
       40:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://refactored action cards
function playSmithy called 1 returned 100% blocks executed 100%
        1:  647:int playSmithy(struct gameState *state, int handPos)
        -:  648:{
        1:  649:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  650:	int i;
        -:  651:	//+3 Cards
        4:  652:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  653:	{
        3:  654:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  655:	}
        -:  656:
        -:  657:	//discard card from hand
        1:  658:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1:  659:	return 0;
        -:  660:}
        -:  661: 
function playAdventurer called 3 returned 100% blocks executed 94%
        3:  662:int playAdventurer(struct gameState *state)
        -:  663:{
        3:  664:	int drawntreasure=0;	 
        3:  665:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  666:	int temphand[MAX_HAND];
        3:  667:	int z = 0;// this is the counter for the temp hand
       15:  668:	while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  669:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  670:			shuffle(currentPlayer, state);
call    0 never executed
        -:  671:		}
        9:  672:		drawCard(currentPlayer, state);
call    0 returned 100%
        9:  673:		int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9:  674:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6:  675:			drawntreasure++;
        -:  676:		else{
        3:  677:			temphand[z]=cardDrawn;
        3:  678:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  679:			z++;
        -:  680:		}
        -:  681:	}
        7:  682:	while(z-1>0){
branch  0 taken 25%
branch  1 taken 75% (fallthrough)
        1:  683:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  684:		z=z-1;
        -:  685:	}
        3:  686:	return 0;	 
        -:  687:}
        -:  688: 
function playVillage called 0 returned 0% blocks executed 0%
    #####:  689:int playVillage(struct gameState *state, int handPos)
        -:  690:{
    #####:  691:	 int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  692:	//+1 Card
    #####:  693:	drawCard(currentPlayer, state);
call    0 never executed
        -:  694:		
        -:  695:	//+2 Actions
    #####:  696:	state->numActions = state->numActions + 2;
        -:  697:		
        -:  698:	//discard played card from hand
    #####:  699:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  700:	return 0;
        -:  701:}
        -:  702: 
function playFeast called 0 returned 0% blocks executed 0%
    #####:  703:int playFeast(struct gameState *state, int choice1)
        -:  704:{
    #####:  705:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  706:	int temphand[MAX_HAND];
        -:  707:	int i;
        -:  708:	//gain card with cost up to 5
        -:  709:	//Backup hand
    #####:  710:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  711:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:	}
        -:  714:	//Backup hand
        -:  715:
        -:  716:	//Update Coins for Buy
    #####:  717:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  718:	int x = 1;//Condition to loop on
    #####:  719:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  720:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  721:			if (DEBUG)
        -:  722:				printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:			}
        -:  727:		}
    #####:  728:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  729:			printf("That card is too expensive!\n");
call    0 never executed
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:			}
        -:  734:		}
        -:  735:		else{
        -:  736:			if (DEBUG){
        -:  737:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:			}
        -:  739:
    #####:  740:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  741:			x = 0;//No more buying cards
        -:  742:
        -:  743:			if (DEBUG){
        -:  744:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:			}
        -:  746:		}
        -:  747:	}     
        -:  748:
        -:  749:	//Reset Hand
    #####:  750:	for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  751:		state->hand[currentPlayer][i] = temphand[i];
    #####:  752:		temphand[i] = -1;
        -:  753:	}
        -:  754:	//Reset Hand
        -:  755:			
    #####:  756:	return 0;
        -:  757:}
        -:  758:
function playCouncil_Room called 0 returned 0% blocks executed 0%
    #####:  759:int playCouncil_Room(struct gameState *state, int handPos)
        -:  760:{
    #####:  761:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  762:	int i = 0;
        -:  763:	//+4 Cards
    #####:  764:	for (i = 0; i <= 4; i++)
branch  0 never executed
branch  1 never executed
        -:  765:	{
    #####:  766:		drawCard(currentPlayer, state);
call    0 never executed
        -:  767:	}
        -:  768:			
        -:  769:	//+1 Buy
    #####:  770:	state->numBuys++;
        -:  771:			
        -:  772:	//Each other player draws a card
    #####:  773:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:		if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  776:		{
    #####:  777:			drawCard(i, state);
call    0 never executed
        -:  778:		}
        -:  779:	}
        -:  780:			
        -:  781:	//put played card in played card pile
    #####:  782:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  783:		
    #####:  784:	return 0;
        -:  785:}
        -:  786:
function cardEffect called 54 returned 100% blocks executed 15%
       54:  787:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  788:{
        -:  789:  int i;
        -:  790:  int j;
        -:  791:  int k;
        -:  792:  int x;
        -:  793:  int index;
       54:  794:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       54:  795:  int nextPlayer = currentPlayer + 1;
        -:  796:
       54:  797:  int tributeRevealedCards[2] = {-1, -1};
        -:  798:  int temphand[MAX_HAND];// moved above the if statement
       54:  799:  int drawntreasure=0;
        -:  800:  int cardDrawn;
       54:  801:  int z = 0;// this is the counter for the temp hand
       54:  802:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  803:    nextPlayer = 0;
        -:  804:  }
        -:  805: 	
        -:  806:  //uses switch to select card and perform actions
       54:  807:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 93%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 7%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  808:    {
        -:  809:    case adventurer:
    #####:  810:		return playAdventurer(state);
call    0 never executed
        -:  811:			
        -:  812:    case council_room:
    #####:  813:      return playCouncil_Room(state, handPos);
call    0 never executed
        -:  814:			
        -:  815:    case feast:
    #####:  816:		return playFeast(state, choice1);
call    0 never executed
        -:  817:			
        -:  818:    case gardens:
    #####:  819:      return -1;
        -:  820:			
        -:  821:    case mine:
    #####:  822:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  825:	{
    #####:  826:	  return -1;
        -:  827:	}
        -:  828:		
    #####:  829:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  830:	{
    #####:  831:	  return -1;
        -:  832:	}
        -:  833:
    #####:  834:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  843:
        -:  844:      //discard trashed card
    #####:  845:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  846:	{
    #####:  847:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  848:	    {
    #####:  849:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  850:	      break;
        -:  851:	    }
        -:  852:	}
        -:  853:			
    #####:  854:      return 0;
        -:  855:			
        -:  856:    case remodel:
       50:  857:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
       50:  859:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 76% (fallthrough)
branch  3 taken 24%
        -:  860:	{
       38:  861:	  return -1;
        -:  862:	}
        -:  863:
       12:  864:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  865:
        -:  866:      //discard card from hand
       12:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  868:
        -:  869:      //discard trashed card
       24:  870:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  871:	{
       24:  872:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  873:	    {
       12:  874:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
       12:  875:	      break;
        -:  876:	    }
        -:  877:	}
        -:  878:
        -:  879:
       12:  880:      return 0;
        -:  881:		
        -:  882:    case smithy:
    #####:  883:		return playSmithy(state, handPos);
call    0 never executed
        -:  884:		
        -:  885:    case village:
    #####:  886:		return playVillage(state,handPos);
call    0 never executed
        -:  887:		
        -:  888:    case baron:
    #####:  889:      state->numBuys++;//Increase buys by 1!
    #####:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  891:	int p = 0;//Iterator for hand!
    #####:  892:	int card_not_discarded = 1;//Flag for discard set!
    #####:  893:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  894:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  895:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:	    state->discardCount[currentPlayer]++;
    #####:  898:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  899:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:	    }
    #####:  901:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:	    state->handCount[currentPlayer]--;
    #####:  903:	    card_not_discarded = 0;//Exit the loop
        -:  904:	  }
    #####:  905:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  906:	    if(DEBUG) {
        -:  907:	      printf("No estate cards in your hand, invalid choice\n");
        -:  908:	      printf("Must gain an estate if there are any\n");
        -:  909:	    }
    #####:  910:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  911:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  912:	      state->supplyCount[estate]--;//Decrement estates
    #####:  913:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  914:		isGameOver(state);
call    0 never executed
        -:  915:	      }
        -:  916:	    }
    #####:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
        -:  919:			    
        -:  920:	  else{
    #####:  921:	    p++;//Next card
        -:  922:	  }
        -:  923:	}
        -:  924:      }
        -:  925:			    
        -:  926:      else{
    #####:  927:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  929:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  930:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:	    isGameOver(state);
call    0 never executed
        -:  932:	  }
        -:  933:	}
        -:  934:      }
        -:  935:	    
        -:  936:      
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case great_hall:
        -:  940:      //+1 Card
    #####:  941:      drawCard(currentPlayer, state);
call    0 never executed
        -:  942:			
        -:  943:      //+1 Actions
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case minion:
        -:  951:      //+1 action
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  956:			
    #####:  957:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  state->coins = state->coins + 2;
        -:  960:	}
        -:  961:			
    #####:  962:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  963:	{
        -:  964:	  //discard hand
    #####:  965:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  966:	    {
    #####:  967:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  968:	    }
        -:  969:				
        -:  970:	  //draw 4
    #####:  971:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  972:	    {
    #####:  973:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  974:	    }
        -:  975:				
        -:  976:	  //other players discard hand and redraw if hand size > 4
    #####:  977:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  980:		{
    #####:  981:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  982:		    {
        -:  983:		      //discard hand
    #####:  984:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  985:			{
    #####:  986:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  987:			}
        -:  988:							
        -:  989:		      //draw 4
    #####:  990:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  991:			{
    #####:  992:			  drawCard(i, state);
call    0 never executed
        -:  993:			}
        -:  994:		    }
        -:  995:		}
        -:  996:	    }
        -:  997:				
        -:  998:	}
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //+2 cards
    #####: 1005:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1006:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1007:	}
    #####: 1008:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
        -: 1010:	  //+2 coins
    #####: 1011:	  state->coins = state->coins + 2;
        -: 1012:	}
        -: 1013:      else
        -: 1014:	{
        -: 1015:	  //trash 2 cards in hand
    #####: 1016:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1017:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1018:	}
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1026:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	  state->deckCount[nextPlayer]--;
        -: 1029:	}
    #####: 1030:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:	  state->discardCount[nextPlayer]--;
        -: 1033:	}
        -: 1034:	else{
        -: 1035:	  //No Card to Reveal
        -: 1036:	  if (DEBUG){
        -: 1037:	    printf("No cards to reveal\n");
        -: 1038:	  }
        -: 1039:	}
        -: 1040:      }
        -: 1041:	    
        -: 1042:      else{
    #####: 1043:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1044:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1045:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:	    state->deckCount[nextPlayer]++;
    #####: 1047:	    state->discard[nextPlayer][i] = -1;
    #####: 1048:	    state->discardCount[nextPlayer]--;
        -: 1049:	  }
        -: 1050:			    
    #####: 1051:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1052:	} 
    #####: 1053:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:	state->deckCount[nextPlayer]--;
    #####: 1056:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:	state->deckCount[nextPlayer]--;
        -: 1059:      }    
        -: 1060:		       
    #####: 1061:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1062:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:	state->playedCardCount++;
    #####: 1064:	tributeRevealedCards[1] = -1;
        -: 1065:      }
        -: 1066:
    #####: 1067:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1068:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1069:	  state->coins += 2;
        -: 1070:	}
        -: 1071:		    
    #####: 1072:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1073:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:	}
        -: 1076:	else{//Action Card
    #####: 1077:	  state->numActions = state->numActions + 2;
        -: 1078:	}
        -: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
    #####: 1091:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1099:	    {
    #####: 1100:	      j++;
        -: 1101:	    }
        -: 1102:	}
    #####: 1103:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;				
        -: 1106:	}
        -: 1107:
        -: 1108:      if (DEBUG) 
        -: 1109:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:      //increase supply count for choosen card by amount being discarded
    #####: 1112:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:			
        -: 1114:      //each other player gains a copy of revealed card
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1118:	    {
    #####: 1119:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1120:	    }
        -: 1121:	}
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1125:
        -: 1126:      //trash copies of cards returned to supply
    #####: 1127:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1132:		{
    #####: 1133:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1134:		  break;
        -: 1135:		}
        -: 1136:	    }
        -: 1137:	}			
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
        4: 1143:      updateCoins(currentPlayer, state, 2);
call    0 returned 100%
       17: 1144:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -: 1145:	{
       13: 1146:	  if (i != currentPlayer)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1147:	    {
       27: 1148:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1149:		{
       26: 1150:		  if (state->hand[i][j] == copper)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1151:		    {
        8: 1152:		      discardCard(j, i, state, 0);
call    0 returned 100%
        8: 1153:		      break;
        -: 1154:		    }
       18: 1155:		  if (j == state->handCount[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1156:		    {
    #####: 1157:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1158:			{
        -: 1159:			  if (DEBUG)
        -: 1160:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:			}	
    #####: 1162:		      break;
        -: 1163:		    }		
        -: 1164:		}
        -: 1165:					
        -: 1166:	    }
        -: 1167:				
        -: 1168:	}				
        -: 1169:
        -: 1170:      //discard played card from hand
        4: 1171:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 100%
        -: 1172:
        4: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
        -: 1207:	  //gain coins equal to trashed card
    #####: 1208:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1209:	  //trash card
    #####: 1210:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1211:	}
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1219:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1220:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:	  state->discardCount[i]++;
    #####: 1222:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1223:	}
        -: 1224:      }
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
    #####: 1232:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1233:	    {
    #####: 1234:	      index = i;
    #####: 1235:	      break;
        -: 1236:	    }
        -: 1237:	}
    #####: 1238:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
        -: 1240:	  //trash both treasure cards
    #####: 1241:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1242:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1243:
        -: 1244:	  //gain 4 Gold cards
    #####: 1245:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	    {
    #####: 1247:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1248:	    }
        -: 1249:				
        -: 1250:	  //return success
    #####: 1251:	  return 1;
        -: 1252:	}
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:	
    #####: 1258:  return -1;
        -: 1259:}
        -: 1260:
function discardCard called 37 returned 100% blocks executed 89%
       37: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
       37: 1265:  if (trashFlag < 1)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -: 1266:    {
        -: 1267:      //add card to played pile
       36: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       36: 1269:      state->playedCardCount++;
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
       37: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
       37: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
        4: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
       33: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
       33: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
       33: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
       33: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
       37: 1296:  return 0;
        -: 1297:}
        -: 1298:
function gainCard called 12 returned 100% blocks executed 70%
       12: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
       12: 1304:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
       12: 1314:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
       12: 1319:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
       12: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
       12: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
       12: 1333:  return 0;
        -: 1334:}
        -: 1335:
function updateCoins called 63 returned 100% blocks executed 100%
       63: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
       63: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
      382: 1344:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1345:    {
      319: 1346:      if (state->hand[player][i] == copper)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 1347:	{
      216: 1348:	  state->coins += 1;
        -: 1349:	}
      103: 1350:      else if (state->hand[player][i] == silver)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 1351:	{
       30: 1352:	  state->coins += 2;
        -: 1353:	}
       73: 1354:      else if (state->hand[player][i] == gold)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -: 1355:	{
       30: 1356:	  state->coins += 3;
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
       63: 1361:  state->coins += bonus;
        -: 1362:
       63: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
