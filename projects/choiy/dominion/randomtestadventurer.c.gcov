        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestadventurer.c
        -:    3: * random testing adventurer card
        -:    4: */
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <assert.h>
        -:   13:#include <math.h>
        -:   14:
        -:   15:int testAdventurerCard(int card, struct gameState *g, int curplayer, int streamIdx, int randomSeed);
        -:   16:
function main called 1 returned 100% blocks executed 100%
        1:   17:int main(void) {
        1:   18:	puts("Random Testing Adventurer Card");
call    0 returned 100%
        -:   19:
        1:   20:	int numOfIteration = 500;
        1:   21:	int streamidx = 2;
        1:   22:	int randomseed = 1 + floor(Random() * (treasure_map + 1));
call    0 returned 100%
        1:   23:	SelectStream(streamidx);
call    0 returned 100%
        1:   24:	PutSeed(randomseed);
call    0 returned 100%
        -:   25:
        -:   26:	struct gameState G;
        -:   27:	int cnt, i, player;
        -:   28:
      501:   29:	for (cnt = 0; cnt < numOfIteration; ++cnt) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   30:		//for (i = 0; i < sizeof(struct gameState); ++i)
        -:   31:			//((char*)&G)[i] = floor(Random()*256);
        -:   32:
        -:   33:		// set a game
      500:   34:		G.numPlayers = 2;
      500:   35:		player = floor(Random() * 2); // number of players is 2
call    0 returned 100%
        -:   36:
      500:   37:		G.deckCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
      500:   38:		G.discardCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
      500:   39:		G.handCount[player] = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:   40:
        -:   41:		// set cards on the deck
    43000:   42:		for (i = 0; i < G.deckCount[player]; ++i)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    42500:   43:			G.deck[player][i] = floor(Random() * (treasure_map + 1));
call    0 returned 100%
        -:   44:		// set cards discarded
    51000:   45:		for (i = 0; i < G.discardCount[player]; ++i)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    50500:   46:			G.discard[player][i] = floor(Random() * (treasure_map + 1));
call    0 returned 100%
        -:   47:		// set cards on hand
   196000:   48:		for (i = 0; i < G.handCount[player]; ++i)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   195500:   49:			G.hand[player][i] = floor(Random() * (treasure_map + 1));
call    0 returned 100%
        -:   50:
        -:   51:		// test Adventurer Card
      500:   52:		testAdventurerCard(adventurer, &G, player, streamidx, randomseed);
call    0 returned 100%
        -:   53:	}
        -:   54:
        1:   55:	printf("Random Testing Adventurer Card done..\n");
call    0 returned 100%
        -:   56:
        1:   57:	return 0;
        -:   58:}
        -:   59:
        -:   60:
function testAdventurerCard called 500 returned 100% blocks executed 77%
      500:   61:int testAdventurerCard(int card, struct gameState *g, int currentPlayer, int streamIdx, int randomSeed) {
        -:   62:	struct gameState g2;
      500:   63:	memcpy(&g2, g, sizeof(struct gameState));
        -:   64:
        -:   65:	int temphand[MAX_HAND]; // moved above the if statement
      500:   66:	int drawntreasure = 0, cardDrawn, z = 0; // this is the counter for the temp hand
        -:   67:
      500:   68:	SelectStream(streamIdx);
call    0 returned 100%
      500:   69:	PutSeed(randomSeed);
call    0 returned 100%
        -:   70:
      500:   71:	int result = cardEffect(card, 0, 0, 0, g, 0, 0);
call    0 returned 100%
        -:   72:
      500:   73:	PutSeed(randomSeed);
call    0 returned 100%
        -:   74:
     2500:   75:	while (drawntreasure < 2) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1500:   76:		if (g2.deckCount[currentPlayer] < 1) //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   77:			shuffle(currentPlayer, &g2);
call    0 never executed
        -:   78:
     1500:   79:		drawCard(currentPlayer, &g2);
call    0 returned 100%
     1500:   80:		cardDrawn = g2.hand[currentPlayer][g2.handCount[currentPlayer] - 1]; // top card of hand is most recently drawn card
        -:   81:
     2500:   82:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
     1000:   83:			drawntreasure++;
        -:   84:		else {
      500:   85:			temphand[z] = cardDrawn;
      500:   86:			g2.handCount[currentPlayer]--; // this should just remove the top card (the most recently drawn one)
      500:   87:			z++;
        -:   88:		}
        -:   89:	}
        -:   90:
     1500:   91:	while (z - 1 >= 0) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      500:   92:		g2.discard[currentPlayer][g2.discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      500:   93:		z--;
        -:   94:	}
        -:   95:
        -:   96:	// check if g and g2 are the same each other
      500:   97:	assert(g2.deckCount[currentPlayer] == g->deckCount[currentPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:   98:	assert(g2.discardCount[currentPlayer] == g->discardCount[currentPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:   99:	assert(g2.handCount[currentPlayer] == g->handCount[currentPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  100:
      500:  101:	assert(memcmp(&g2, g, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:  102:	assert(result == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:  103:	if (result != 0) printf("Adventurer Card test failed!\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  104:	//else printf("Adventurer Card test passed!\n");
        -:  105:
      500:  106:	return 0;
        -:  107:}
