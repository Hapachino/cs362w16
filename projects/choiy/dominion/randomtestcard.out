File 'randomtestcard.c'
Lines executed:92.73% of 55
Branches executed:100.00% of 30
Taken at least once:73.33% of 30
Calls executed:75.00% of 28
randomtestcard.c:creating 'randomtestcard.c.gcov'

        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestcard.c
        -:    3: * random testing feast card
        -:    4: */
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <assert.h>
        -:   13:#include <math.h>
        -:   14:
        -:   15:int testFeastCard(int card, struct gameState *g, int curplayer, int streamIdx, int randomSeed);
        -:   16:
function main called 1 returned 100% blocks executed 100%
        1:   17:int main(void) {
        1:   18:	puts("Random Testing Feast Card");
call    0 returned 100%
        -:   19:
        1:   20:	int numOfIteration = 500;
        1:   21:	int streamidx = 2;
        1:   22:	int randomseed = 1 + floor(Random() * (treasure_map + 1));
call    0 returned 100%
        1:   23:	SelectStream(streamidx);
call    0 returned 100%
        1:   24:	PutSeed(randomseed);
call    0 returned 100%
        -:   25:
        -:   26:	struct gameState G;
        -:   27:	int cnt, i, player;
        -:   28:
      501:   29:	for (cnt = 0; cnt < numOfIteration; ++cnt) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   30:		//for (i = 0; i < sizeof(struct gameState); ++i)
        -:   31:			//((char*)&G)[i] = floor(Random()*256);
        -:   32:
        -:   33:		// set a game
      500:   34:		G.numPlayers = 2;
      500:   35:		player = floor(Random() * 2); // number of players is 2
call    0 returned 100%
        -:   36:
      500:   37:		G.deckCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
      500:   38:		G.discardCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
      500:   39:		G.handCount[player] = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:   40:
        -:   41:		// set cards on the deck
    43000:   42:		for (i = 0; i < G.deckCount[player]; ++i)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    42500:   43:			G.deck[player][i] = floor(Random() * (treasure_map + 1));
call    0 returned 100%
        -:   44:		// set cards discarded
    51000:   45:		for (i = 0; i < G.discardCount[player]; ++i)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    50500:   46:			G.discard[player][i] = floor(Random() * (treasure_map + 1));
call    0 returned 100%
        -:   47:		// set cards on hand
   196000:   48:		for (i = 0; i < G.handCount[player]; ++i)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   195500:   49:			G.hand[player][i] = floor(Random() * (treasure_map + 1));
call    0 returned 100%
        -:   50:
        -:   51:		// test Feast Card
      500:   52:		testFeastCard(feast, &G, player, streamidx, randomseed);
call    0 returned 100%
        -:   53:	}
        -:   54:
        1:   55:	printf("Random Testing Feast Card done..\n");
call    0 returned 100%
        -:   56:
        1:   57:	return 0;
        -:   58:}
        -:   59:
        -:   60:
function testFeastCard called 500 returned 100% blocks executed 69%
      500:   61:int testFeastCard(int card, struct gameState *g, int currentPlayer, int streamIdx, int randomSeed) {
        -:   62:	struct gameState g2;
      500:   63:	memcpy(&g2, g, sizeof(struct gameState));
        -:   64:
      500:   65:	SelectStream(streamIdx);
call    0 returned 100%
      500:   66:	PutSeed(randomSeed);
call    0 returned 100%
        -:   67:
        -:   68:	int temphand[MAX_HAND]; // moved above the if statement
      500:   69:	int choice1 = -1, i;
        -:   70:
      500:   71:	int result = cardEffect(card, choice1, 0, 0, g, 0, 0);
call    0 returned 100%
        -:   72:
      500:   73:	PutSeed(randomSeed);
call    0 returned 100%
        -:   74:	// gain card with cost up to 5
        -:   75:	// backup hand
   196500:   76:	for (i = 0; i <= g2.handCount[currentPlayer]; ++i) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   196000:   77:		temphand[i] = g2.hand[currentPlayer][i]; // backup card
   196000:   78:		g2.hand[currentPlayer][i] = -1; // set to nothing
        -:   79:	}
        -:   80:
        -:   81:	// update coins for buy
      500:   82:	updateCoins(currentPlayer, &g2, 5);
call    0 returned 100%
        -:   83:
      500:   84:	int x = 1; // condition to loop on
     1500:   85:	while (x == 1) { // buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      500:   86:		if (supplyCount(choice1, &g2) <= 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   87:			if (DEBUG) printf("None of that card left, sorry!\n");
    #####:   88:			if (DEBUG) printf("Cards Left: %d\n", supplyCount(choice1, &g2));
        -:   89:		}
      500:   90:		else if (g2.coins < getCost(choice1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   91:			printf("That card is too expensive!\n");
call    0 never executed
    #####:   92:			if (DEBUG) printf("Coins: %d < %d\n", g2.coins, getCost(choice1));
        -:   93:		}
        -:   94:		else {
      500:   95:			if (DEBUG) printf("Deck Count: %d\n", g2.handCount[currentPlayer] +
        -:   96:					g2.deckCount[currentPlayer] + g2.discardCount[currentPlayer]);
        -:   97:
      500:   98:			gainCard(choice1, &g2, 0, currentPlayer); // gain the card
call    0 returned 100%
      500:   99:			x = 0; // no more buying cards
        -:  100:
      500:  101:			if (DEBUG) printf("Deck Count: %d\n", g2.handCount[currentPlayer] +
        -:  102:					g2.deckCount[currentPlayer] + g2.discardCount[currentPlayer]);
        -:  103:		}
        -:  104:	}
        -:  105:
        -:  106:	// reset hand
   196500:  107:	for (i = 0; i <= g2.handCount[currentPlayer]; ++i) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   196000:  108:		g2.hand[currentPlayer][i] = temphand[i];
   196000:  109:		temphand[i] = -1;
        -:  110:	}
        -:  111:
        -:  112:	// check if g and g2 are the same each other
      500:  113:	assert(g2.deckCount[currentPlayer] == g->deckCount[currentPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:  114:	assert(g2.discardCount[currentPlayer] == g->discardCount[currentPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:  115:	assert(g2.handCount[currentPlayer] == g->handCount[currentPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  116:
      500:  117:	assert(memcmp(&g2, g, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:  118:	assert(result == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      500:  119:	if (result != 0) printf("Feast Card test failed!\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  120:	//else printf("Feast Card test passed!\n");
        -:  121:
      500:  122:	return 0;
        -:  123:}
