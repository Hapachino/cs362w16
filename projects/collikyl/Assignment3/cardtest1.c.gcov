        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include "dominion.h"
        -:    3:#include "rngs.h"
        -:    4:#include "interface.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:
        -:   11:
        -:   12:
        -:   13:#define DRAWCOUNT0 3
        -:   14:#define DRAWCOUNT1 0
        -:   15:
        -:   16:#define DISCARDCOUNT0 0
        -:   17:#define DISCARDCOUNT1 0
        -:   18:
        -:   19:
        -:   20:#define COPPERCHANGE 0
        -:   21:#define SILVERCHANGE 0
        -:   22:#define GOLDCHANGE 0
        -:   23:#define ESTATECHANGE 0
        -:   24:#define DUCHYCHANGE 0
        -:   25:#define PROVINCECHANGE 0
        -:   26:#define CURSECHANGE 0 
        -:   27:
        -:   28:#define TESTACTION -1
        -:   29:#define TESTBUYS 0
        -:   30:#define TESTCOINS 3 
        -:   31:
        -:   32:#define CHOICE1 0
        -:   33:#define CHOICE2 0
        -:   34:#define CHOICE3 0
        -:   35:
function displaySupply called 0 returned 0% blocks executed 0%
    #####:   36:void displaySupply(struct gameState *preTest)
        -:   37:{
    #####:   38:	printf("\n\n\tVictory Point Data\n");
call    0 never executed
    #####:   39:	printf("Estate Count: %d \t", preTest->supplyCount[estate]);
call    0 never executed
    #####:   40:	printf("Duchy Count: %d \t", preTest->supplyCount[duchy]);
call    0 never executed
    #####:   41:	printf("Province Count: %d \t", preTest->supplyCount[province]);
call    0 never executed
    #####:   42:	printf("Curse Count: %d",preTest->supplyCount[curse]);
call    0 never executed
    #####:   43:	printf("\n\n\tTreasure Data\n");
call    0 never executed
    #####:   44:	printf("Copper Count: %d \t", preTest->supplyCount[copper]);
call    0 never executed
    #####:   45:	printf("Silver Count: %d \t", preTest->supplyCount[silver]);
call    0 never executed
    #####:   46:	printf("Gold Count: %d \t", preTest->supplyCount[gold]);
call    0 never executed
        -:   47:
    #####:   48:}
        -:   49:
function _getDeck called 2 returned 100% blocks executed 86%
        2:   50:int *_getDeck(struct gameState *g, int player)
        -:   51:{	
        -:   52:	int deckIndex;
        2:   53:	int deckCount = g->deckCount[player];
        2:   54:	if(deckCount == 0) return 0;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        2:   55:	int *deck = malloc(sizeof(int*)*deckCount);
       17:   56:	for(deckIndex = 0; deckIndex < deckCount; deckIndex++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:   57:	{
       15:   58:		deck[deckIndex] = g->deck[player][deckIndex];
        -:   59:	}
        2:   60:	return deck; 
        -:   61:}
        -:   62:
function _getHand called 6 returned 100% blocks executed 100%
        6:   63:int *_getHand(struct gameState *g, int player)
        -:   64:{
        -:   65:	int handIndex;
        6:   66:	int handCount = g->handCount[player];
        6:   67:	if(handCount == 0) return 0;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:   68:	int *hand = malloc(sizeof(int*)*handCount);
       24:   69:	for(handIndex = 0; handIndex < handCount; handIndex++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:   70:	{
       21:   71:		hand[handIndex] = g->hand[player][handIndex];
        -:   72:	}
        3:   73:	return hand; 
        -:   74:}
        -:   75:
function _getPlayed called 0 returned 0% blocks executed 0%
    #####:   76:int *_getPlayed(struct gameState *g, int player)
        -:   77:{
        -:   78:	int playedIndex;
    #####:   79:	int playedCount = g->playedCardCount;
    #####:   80:	if(playedCount == 0) return 0;
branch  0 never executed
branch  1 never executed
    #####:   81:	int *played = malloc(sizeof(int*)*playedCount);
    #####:   82:	for(playedIndex = 0; playedIndex < playedCount; playedIndex++)
branch  0 never executed
branch  1 never executed
        -:   83:	{
    #####:   84:		played[playedIndex] = g->playedCards[playedIndex];
        -:   85:	}
    #####:   86:	return played; 
        -:   87:}
        -:   88:
function _getDiscard called 0 returned 0% blocks executed 0%
    #####:   89:int *_getDiscard(struct gameState *g, int player)
        -:   90:{
        -:   91:	int discardIndex;
    #####:   92:	int discardCount = g->discardCount[player];
    #####:   93:	if(discardCount == 0) return 0;
branch  0 never executed
branch  1 never executed
    #####:   94:	int *discard = malloc(sizeof(int*)*discardCount);
    #####:   95:	for(discardIndex = 0; discardIndex < discardCount; discardIndex++)
branch  0 never executed
branch  1 never executed
        -:   96:	{
    #####:   97:		discard[discardIndex] = g->discard[player][discardIndex];
        -:   98:	}
    #####:   99:	return discard; 
        -:  100:}
        -:  101:
function _getSupp called 2 returned 100% blocks executed 100%
        2:  102:int *_getSupp(struct gameState *g)
        -:  103:{
        2:  104:	int es = g->supplyCount[1];
        2:  105:	int du = g->supplyCount[2];
        2:  106:	int pr = g->supplyCount[province];
        2:  107:	int cu = g->supplyCount[curse];
        2:  108:	int co = g->supplyCount[copper];
        2:  109:	int si = g->supplyCount[silver];
        2:  110:	int go = g->supplyCount[gold];
        2:  111:	int *supply = malloc(sizeof(int*)*7);
        2:  112:	int hold[7] = {cu,es, du, pr, co, si, go};
        2:  113:	memcpy(supply,(int*)hold,sizeof(int)*7);
        2:  114:	return supply;
        -:  115:}
        -:  116:
function _getUtility called 2 returned 100% blocks executed 100%
        2:  117:int *_getUtility(struct gameState *g)
        -:  118:{
        2:  119:	int a = g->numActions;
        2:  120:	int c = g->coins;
        2:  121:	int b = g->numBuys;
        2:  122:	int *utility = malloc(sizeof(int*)*3);
        2:  123:	int hold[3] = {a,b,c};
        2:  124:	memcpy(utility,(int*)hold,sizeof(int)*3);
        2:  125:	return utility;
        -:  126:}
        -:  127:
function displayPlayers called 0 returned 0% blocks executed 0%
    #####:  128:void displayPlayers(struct gameState *g, int player)
        -:  129:{
        -:  130:	int playerIndex;
    #####:  131:	printf("\n\n\tPlayer Data\n");	
call    0 never executed
    #####:  132:	for(playerIndex = 0; playerIndex <= 1; playerIndex++)
branch  0 never executed
branch  1 never executed
        -:  133:	{
    #####:  134:		printf("Player %d: \tDeck Count: %d \t\tHand Count: %d \t\tDiscard Count %d\n\n",playerIndex,g->deckCount[playerIndex],g->handCount[playerIndex],g->discardCount[player]);
call    0 never executed
        -:  135:	}
    #####:  136:}
        -:  137:
function insertCard called 1 returned 100% blocks executed 100%
        1:  138:void insertCard(struct gameState *g,int player)
        -:  139:{
        1:  140:	int handCount = g->handCount[player];
        1:  141:	g->hand[player][handCount] = 13;
        1:  142:	g->handCount[player]+=1;
        1:  143:}
        -:  144:
function display called 0 returned 0% blocks executed 0%
    #####:  145:void display(struct gameState *g,int player)
        -:  146:{
    #####:  147:	printSupply(g);
call    0 never executed
    #####:  148:	displayPlayers(g,player);
call    0 never executed
    #####:  149:	printDeck(player,g);
call    0 never executed
    #####:  150:	printHand(player,g);
call    0 never executed
    #####:  151:	printDiscard(player,g);
call    0 never executed
    #####:  152:	printDeck(player+1,g);
call    0 never executed
    #####:  153:	printHand(player+1,g);
call    0 never executed
    #####:  154:	printDiscard(player+1,g);
call    0 never executed
    #####:  155:}
        -:  156:
function testDraw called 1 returned 100% blocks executed 74%
        1:  157:void testDraw(struct gameState *preTest,struct gameState *postTest,int player)
        -:  158:{
        1:  159:	printf("\n\tTesting Draw Specifications\n");
call    0 returned 100%
        -:  160:	int i,c;
        1:  161:	int countTest[2] = {DRAWCOUNT0,DRAWCOUNT1};
        1:  162:	int flag = 0;
        3:  163:	for(c = 0; c <= 1; c++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:	{
        2:  165:		int *deck = _getDeck(preTest,player+c);
call    0 returned 100%
        2:  166:		int *hand = _getHand(postTest,player+c);
call    0 returned 100%
        2:  167:		int diffDeck = preTest->deckCount[player+c] - postTest->deckCount[player+c]; //check if # of cards drawn were correct
        2:  168:		if(diffDeck!=countTest[c])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  169:		{
    #####:  170:			printf("Error in deck count for player %d! Player deck count = %d instead of %d\n",diffDeck,countTest[c]);
call    0 never executed
    #####:  171:			flag  = 1;
        -:  172:		}
        5:  173:		for(i=1;i<=countTest[c];i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  174:		{
        3:  175:			if(deck[preTest->deckCount[player]-i] != hand[postTest->handCount[player]-i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  176:			{
    #####:  177:				printf("Error, mistmached card drawn for player %d! Did not come from top of deck\n",player);
call    0 never executed
    #####:  178:				flag = 1;
        -:  179:			}
        -:  180:		}
        2:  181:		free(deck);
        2:  182:		free(hand);
        -:  183:	}
        1:  184:	if(flag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  185:	{
        1:  186:		printf("Draw Test passed.\n");
call    0 returned 100%
        -:  187:	}
        -:  188:	else
        -:  189:	{
    #####:  190:		printf("Draw Test failed.\n");
call    0 never executed
        -:  191:	}
        1:  192:}
        -:  193:
function testHand called 1 returned 100% blocks executed 72%
        1:  194:void testHand(struct gameState *preTest, struct gameState *postTest, int player)
        -:  195:{
        -:  196:	int c,i;
        1:  197:	int flag = 0;
        1:  198:	int offSet[2] = {DRAWCOUNT0,DRAWCOUNT1};
        1:  199:	printf("\n\tTesting Hand Specifications\n");
call    0 returned 100%
        3:  200:	for(c = 0; c <= 1; c++) //player index
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  201:	{
        2:  202:		int *preHand = _getHand(preTest,player+c);
call    0 returned 100%
        2:  203:		int *postHand = _getHand(postTest,player+c);
call    0 returned 100%
        4:  204:		for(i = 0; i <= preTest->handCount[player+c] - offSet[player+c]-1; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  205:		{
        2:  206:			if(preHand[i] != postHand[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  207:			{
        -:  208:				char name[50];
        -:  209:				char name2[50];
    #####:  210:				cardNumToName(preHand[i],name);
call    0 never executed
    #####:  211:				cardNumToName(postHand[i],name2);
call    0 never executed
    #####:  212:				printf("Error, hand for player %d altered incorrectly. Card at position %d is %s. Should be %s\n",player+c,i,name2,name);
call    0 never executed
    #####:  213:				flag = 1;
        -:  214:			}
        -:  215:		}
        2:  216:		free(preHand);
        2:  217:		free(postHand);
        -:  218:	}
        1:  219:	if(flag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  220:	{
    #####:  221:		printf("Hand Test failed\n");
call    0 never executed
        -:  222:	}
        -:  223:	else
        -:  224:	{
        1:  225:		printf("Hand Test passed\n");
call    0 returned 100%
        -:  226:	}
        1:  227:}
        -:  228:
function testDiscard called 1 returned 100% blocks executed 71%
        1:  229:void testDiscard(struct gameState *preTest,struct gameState *postTest, int player)
        -:  230:{
        1:  231:	printf("\n\tTesting Discard Specifications\n");
call    0 returned 100%
        -:  232:	int c;
        1:  233:	int countTest[2] = {DISCARDCOUNT0,DISCARDCOUNT1};
        1:  234:	int flag = 0;
        3:  235:	for(c = 0; c <= 1; c++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  236:	{
        2:  237:		int diff = postTest->discardCount[player+c] - preTest->discardCount[player+c];
        2:  238:		if(diff != countTest[c])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  239:		{
    #####:  240:			printf("Error discarding cards for player %d! Player discarded %d instead of %d\n",c,diff,countTest[c]);
call    0 never executed
    #####:  241:			flag = 1;
        -:  242:		}
        2:  243:		if(flag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  244:		{
        2:  245:			printf("Discard test passed for player: %d\n",c);
call    0 returned 100%
        -:  246:		}
        -:  247:		else
        -:  248:		{
    #####:  249:			printf("Discard test failed for player: %d\n",c);
call    0 never executed
        -:  250:		}
        2:  251:		flag = 0;
        -:  252:	}
        1:  253:	if(flag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  254:	{
    #####:  255:		printf("Discard Test failed.\n");
call    0 never executed
        -:  256:	}
        -:  257:	else
        -:  258:	{
        1:  259:		printf("Discard Test passed.\n");
call    0 returned 100%
        -:  260:	}
        1:  261:}
        -:  262:
function testSupply called 1 returned 100% blocks executed 71%
        1:  263:void testSupply(struct gameState *preTest,struct gameState *postTest)
        -:  264:{
        -:  265:	int i;
        -:  266:	char name[50];
        1:  267:	int flag = 0;
        1:  268:	int *supplyPre = _getSupp(preTest);
call    0 returned 100%
        1:  269:	int *supplyPost = _getSupp(postTest);
call    0 returned 100%
        1:  270:	int supplyCheck[7] = {CURSECHANGE,ESTATECHANGE,DUCHYCHANGE,PROVINCECHANGE,COPPERCHANGE,SILVERCHANGE,GOLDCHANGE};
        1:  271:	printf("\n\tTesting Supply Specifications\n");
call    0 returned 100%
        8:  272:	for(i = 0; i <= 6; i++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  273:	{
        7:  274:		if( (supplyPre[i]-supplyPost[i]) != supplyCheck[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  275:		{
    #####:  276:			cardNumToName(i,name);
call    0 never executed
    #####:  277:			printf("Supply card: %s incorrectly altered to %d. Should be %d\n",name,supplyPost[i],supplyPost[i]+supplyCheck[i]);
call    0 never executed
    #####:  278:			flag = 1;
        -:  279:		}
        -:  280:	}
        1:  281:	if(flag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  282:	{
    #####:  283:		printf("Supply Test failed.\n");
call    0 never executed
        -:  284:	}
        -:  285:	else
        -:  286:	{
        1:  287:		printf("Supply Test passed.\n");
call    0 returned 100%
        -:  288:	}
        1:  289:	free(supplyPre);
        1:  290:	free(supplyPost);
        1:  291:}
function testPlayed called 1 returned 100% blocks executed 47%
        1:  292:void testPlayed(struct gameState *preTest,struct gameState *postTest)
        -:  293:{
        -:  294:	int i;
        -:  295:	int card,card2;
        1:  296:	int diff = postTest->playedCardCount - (preTest -> playedCardCount + 1);
        -:  297:	char name[50];
        -:  298:	char name2[50];
        1:  299:	int flag = 0;
        1:  300:	printf("\n\tTesting Played Specifications\n");
call    0 returned 100%
        1:  301:	if(diff != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  302:	{
    #####:  303:		printf("PlayedCardCount incorrect. Off by %d\n",diff);
call    0 never executed
    #####:  304:		flag = 1;
        -:  305:	}
        1:  306:	for(i = 0; i <= preTest->playedCardCount -1; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  307:	{
    #####:  308:		if(preTest->playedCards[i] != postTest->playedCards[i])
branch  0 never executed
branch  1 never executed
        -:  309:		{
    #####:  310:			flag = 1;
    #####:  311:			card = preTest->playedCards[i];
    #####:  312:			card2 = postTest->playedCards[i];
    #####:  313:			cardNumToName(card,name);
call    0 never executed
    #####:  314:			cardNumToName(card2,name2);
call    0 never executed
    #####:  315:			printf("Error in playedCards pile. Card found is %s, should be %s.\n",name,name2);
call    0 never executed
        -:  316:		}						
        -:  317:	}
        1:  318:	if(flag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  319:	{
    #####:  320:		printf("Played Test failed\n");
call    0 never executed
        -:  321:	}
        -:  322:	else
        -:  323:	{
        1:  324:		printf("Played Test passed.\n");
call    0 returned 100%
        -:  325:	} 		
        1:  326:}
        -:  327:
function testUtility called 1 returned 100% blocks executed 77%
        1:  328:void testUtility(struct gameState *preTest, struct gameState *postTest)
        -:  329:{
        1:  330:	int *preUtility = _getUtility(preTest);
call    0 returned 100%
        1:  331:	int *postUtility = _getUtility(postTest);
call    0 returned 100%
        -:  332:	int i;
        1:  333:	int flag = 0;
        1:  334:	int diff[3] = {TESTACTION,TESTBUYS,TESTCOINS};
        1:  335:	printf("\n\tTesting Utility\n");
call    0 returned 100%
        4:  336:	for(i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  337:	{
        3:  338:		if( (postUtility[i] - preUtility[i]) != diff[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  339:		{
    #####:  340:			printf("Error in utility skill detected\n");
call    0 never executed
    #####:  341:			flag = 1;
        -:  342:		}
        -:  343:	}
        1:  344:	if(flag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  345:	{
    #####:  346:		printf("Utility Test failed\n");
call    0 never executed
        -:  347:	}
        -:  348:	else
        -:  349:	{
        1:  350:		printf("Utility Test passed\n");
call    0 returned 100%
        -:  351:	}
        1:  352:	free(preUtility);
        1:  353:	free(postUtility);
        1:  354:}
function main called 1 returned 100% blocks executed 100%
        1:  355:int main()
        -:  356:{
        -:  357:	int i;
        1:  358:	int seed = 1000;
        1:  359:	int numPlayers = 2;
        1:  360:	int player  = 0;
        -:  361:	int *deckZero,*deckOne;
        -:  362:	struct gameState preTest, postTest;
        1:  363:	int k[10] = {adventurer, council_room, feast, gardens, mine ,remodel, smithy, village, baron, great_hall};
        -:  364:	/* Test Specification Variables */
        1:  365:	int drawCountTestZero = 3;
        1:  366:	int drawCountTestOne = 0;
        -:  367:
        1:  368:	initializeGame(numPlayers,k,seed,&postTest);
call    0 returned 100%
        1:  369:	printf("\n\nBeginning Test for smithy...\n");
call    0 returned 100%
        1:  370:	memcpy(&preTest,&postTest,sizeof(struct gameState));
        1:  371:	insertCard(&postTest,player);
call    0 returned 100%
        1:  372:	playCard((postTest.handCount[player]-1),0,0,0,&postTest);
call    0 returned 100%
        1:  373:	testDraw(&preTest,&postTest,player);
call    0 returned 100%
        1:  374:	testHand(&preTest,&postTest,player);
call    0 returned 100%
        1:  375:	testDiscard(&preTest,&postTest,player);
call    0 returned 100%
        1:  376:	testSupply(&preTest,&postTest);
call    0 returned 100%
        1:  377:	testPlayed(&preTest,&postTest);
call    0 returned 100%
        1:  378:	testUtility(&preTest,&postTest);
call    0 returned 100%
        1:  379:	printf("\n\tTesting finished\n\n");
call    0 returned 100%
        1:  380:}
