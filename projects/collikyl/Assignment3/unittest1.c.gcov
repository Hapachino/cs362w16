        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include "dominion.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7://Draw Card Test
        -:    8:
        -:    9:
function countCheck called 2 returned 100% blocks executed 75%
        2:   10:void countCheck(struct gameState *preState, struct gameState *postState, int player)
        -:   11:{
        2:   12:	int drawCountCheck = postState->deckCount[player] - preState->deckCount[player];
        2:   13:	if( drawCountCheck != -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   14:	{
    #####:   15:		printf("\nError updating deckCount. Returned value %d should be %d\n",drawCountCheck,preState ->deckCount[player]-1);
call    0 never executed
        -:   16:	}
        -:   17:	else
        -:   18:	{
        2:   19:		printf("Passed deckCount check\n");
call    0 returned 100%
        -:   20:	}
        2:   21:}
        -:   22:
function deckCheck called 2 returned 100% blocks executed 88%
        2:   23:void deckCheck(struct gameState *preState, struct gameState *postState, int player)
        -:   24:{
        2:   25:	int postCount = postState->deckCount[player];
        -:   26:	int i;
        2:   27:	int flag = 0;
        9:   28:	for(i = 0; i <= postCount; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:   29:	{
        7:   30:		if(postState->deck[player][i] != preState->deck[player][i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   31:		{
    #####:   32:			flag = 1;
    #####:   33:			printf("Error. Card at position %d in deck has been changed.\n",i);
call    0 never executed
        -:   34:		}
        -:   35:	}
        2:   36:	if(flag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   37:	{
        2:   38:		printf("Passed deck check\n");
call    0 returned 100%
        -:   39:	}
        2:   40:}
        -:   41:
function checkCard called 2 returned 100% blocks executed 75%
        2:   42:void checkCard(struct gameState *preState, struct gameState *postState, int player)
        -:   43:{
        2:   44:	if(preState->deck[player][preState->deckCount[player]-1] != postState->hand[player][postState->handCount[player]-1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   45:	{
    #####:   46:		printf("Error, did not draw top card from deck\n");
call    0 never executed
        -:   47:	}
        -:   48:	else
        -:   49:	{
        2:   50:		printf("Passed checkCard. Drew top card from deck\n");
call    0 returned 100%
        -:   51:	}
        2:   52:}
function main called 1 returned 100% blocks executed 100%
        1:   53:int main()
        -:   54:{
        -:   55:	int i;
        1:   56:        int seed = 1000;
        1:   57:        int numPlayers = 2;
        1:   58:        int player  = 0;
        -:   59:        struct gameState preState, postState;
        1:   60:        int k[10] = {adventurer, council_room, feast, gardens, mine ,remodel, smithy, village, baron, great_hall};
        1:   61:        initializeGame(numPlayers,k,seed,&postState);
call    0 returned 100%
        1:   62:	memcpy(&preState,&postState,sizeof(struct gameState));
        -:   63:	//Check Draw with deckCount > drawCount
        1:   64:	printf("\n\nDrawCard test\n\n");
call    0 returned 100%
        1:   65:	printf("\nTesting drawCard for deckCount > drawCount\n");
call    0 returned 100%
        1:   66:	drawCard(player,&postState);
call    0 returned 100%
        1:   67:	printf("\nTesting deckCount\n");
call    0 returned 100%
        1:   68:	countCheck(&preState,&postState,player);
call    0 returned 100%
        1:   69:	printf("\nTesting deck for prohibited alterations\n");
call    0 returned 100%
        1:   70:	deckCheck(&preState,&postState,player);
call    0 returned 100%
        1:   71:	printf("\nTesting drawn card to see if it came from top of deck\n");
call    0 returned 100%
        1:   72:	checkCard(&preState,&postState,player);
call    0 returned 100%
        1:   73:	printf("\n\n\t\tPassed three cases for deckCount > drawCount. Examining deckCount < drawCount (shuffle occurs)\n\n");
call    0 returned 100%
        3:   74:	for(i = 0; i < postState.deckCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   75:	{
        2:   76:		drawCard(player,&postState);
call    0 returned 100%
        2:   77:		postState.discard[player][i] = 1;
        2:   78:		postState.discardCount[player]++;
        -:   79:	}
        1:   80:	memcpy(&preState,&postState,sizeof(struct gameState));
        1:   81:	drawCard(player,&postState);
call    0 returned 100%
        1:   82:	printf("\nTesting deckCount\n");
call    0 returned 100%
        1:   83:	countCheck(&preState,&postState,player);
call    0 returned 100%
        1:   84:	printf("\nTesting deck for prohibited alterations\n");
call    0 returned 100%
        1:   85:	deckCheck(&preState,&postState,player);
call    0 returned 100%
        1:   86:	printf("\nTesting drawn card to see if it came from top of deck\n");
call    0 returned 100%
        1:   87:	checkCard(&preState,&postState,player);
call    0 returned 100%
        1:   88:	printf("\nPassed three cases for deckCount > drawCount. Examining deckCount < drawCount\n");
call    0 returned 100%
        1:   89:	printf("\n\n\t\tTest Complete\n\n");
call    0 returned 100%
        1:   90:}
