        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include "dominion.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7://Game Over Test
        -:    8:
        -:    9:
function _getSupp called 0 returned 0% blocks executed 0%
    #####:   10:int *_getSupp(struct gameState *g)
        -:   11:{
    #####:   12:        int es = g->supplyCount[1];
    #####:   13:        int du = g->supplyCount[2];
    #####:   14:        int pr = g->supplyCount[province];
    #####:   15:        int cu = g->supplyCount[curse];
    #####:   16:        int co = g->supplyCount[copper];
    #####:   17:        int si = g->supplyCount[silver];
    #####:   18:        int go = g->supplyCount[gold];
    #####:   19:        int *supply = malloc(sizeof(int*)*7);
    #####:   20:        int hold[7] = {cu,es, du, pr, co, si, go};
    #####:   21:        memcpy(supply,(int*)hold,sizeof(int)*7);
    #####:   22:        return supply;
        -:   23:}
        -:   24:
function _resetSupp called 15 returned 100% blocks executed 100%
       15:   25:void _resetSupp(struct gameState *g)
        -:   26:{
       15:   27:	g->supplyCount[1] = 8;
       15:   28: 	g->supplyCount[2] = 8;
       15:   29:	g->supplyCount[province] = 8;
       15:   30:	g->supplyCount[curse] = 10; 
       15:   31:	g->supplyCount[copper] = 46;
       15:   32:	g->supplyCount[silver] = 40; 
       15:   33:	g->supplyCount[gold] = 30;
       15:   34:}
        -:   35:
function testEndProvince called 1 returned 100% blocks executed 86%
        1:   36:void testEndProvince(struct gameState *g)
        -:   37:{
        -:   38:	int i;
        1:   39:	int flag = 0;
        1:   40:	char *names[] = {"curse","estate","duchy","province","copper","silver","gold"};
        1:   41:	printf("\n\nTesting province end criterion\n");
call    0 returned 100%
        9:   42:	for(i = 0; i <= 7; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:   43:	{
        8:   44:		g->supplyCount[i] = 0;
        8:   45:		if(isGameOver(g) && i != 3)
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   46:		{
    #####:   47:			printf("Error. Game ended when %s = %d\n",names[i],g->supplyCount[i]);	
call    0 never executed
        -:   48:		}
        8:   49:		else if(isGameOver(g))
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
        -:   50:		{
        1:   51:			printf("Game ended when %s = %d\n",names[i],g->supplyCount[i]);
call    0 returned 100%
        -:   52:		}
        8:   53:		_resetSupp(g);	
call    0 returned 100%
        -:   54:	}	
        1:   55:}
        -:   56:
function _setZero called 7 returned 100% blocks executed 100%
        7:   57:void _setZero(struct gameState *g, int a, int b, int c)
        -:   58:{
        7:   59:	g->supplyCount[a] = 0;
        7:   60:	g->supplyCount[b] = 0;
        7:   61:	g->supplyCount[c] = 0;
        7:   62:}
        -:   63:
function testEndSupply called 1 returned 100% blocks executed 86%
        1:   64:void testEndSupply(struct gameState *g)
        -:   65:{
        -:   66:	int i,j;
        1:   67:	int flag = 0;
        1:   68:	char *names[] = {"curse","estate","duchy","province","copper","silver","gold"};
        -:   69:
        1:   70:	printf("\nTesting supply count end criterion for %s %s %s\n",names[0],names[1],names[2]);
call    0 returned 100%
        1:   71:	_setZero(g,0,1,2);
call    0 returned 100%
        1:   72:	if(isGameOver(g)) printf("Passed! Game ended when three supply cards reached 0\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
    #####:   73:	else printf("Suppy count end criterion failed\n");
call    0 never executed
        1:   74:	_resetSupp(g);
call    0 returned 100%
        -:   75:
        1:   76:	printf("\nTesting supply count end criterion for %s %s %s\n",names[0],names[1],names[5]);
call    0 returned 100%
        1:   77:	_setZero(g,0,1,5);
call    0 returned 100%
        1:   78:	if(isGameOver(g)) printf("Passed! Game ended when three supply cards reached 0\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
    #####:   79:	else printf("Suppy count end criterion failed\n");
call    0 never executed
        1:   80:	_resetSupp(g);
call    0 returned 100%
        -:   81:
        1:   82:	printf("\nTesting supply count end criterion for %s %s %s\n",names[1],names[2],names[5]);
call    0 returned 100%
        1:   83:	_setZero(g,1,2,5);	
call    0 returned 100%
        1:   84:	if(isGameOver(g)) printf("Passed! Game ended when three supply cards reached 0\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
    #####:   85:	else printf("Suppy count end criterion failed\n");
call    0 never executed
        1:   86:	_resetSupp(g);
call    0 returned 100%
        -:   87:
        1:   88:	printf("\nTesting supply count end criterion for %s %s %s\n",names[5],names[6],names[7]);
call    0 returned 100%
        1:   89:	_setZero(g,5,6,7);	
call    0 returned 100%
        1:   90:	if(isGameOver(g)) printf("Passed! Game ended when three supply cards reached 0\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
    #####:   91:	else printf("Suppy count end criterion failed\n");
call    0 never executed
        1:   92:	_resetSupp(g);
call    0 returned 100%
        -:   93:
        -:   94:
        1:   95:	printf("\nTesting supply count end criterion for %s %s %s\n",names[0],names[6],names[7]);
call    0 returned 100%
        1:   96:	_setZero(g,0,6,7);	
call    0 returned 100%
        1:   97:	if(isGameOver(g)) printf("Passed! Game ended when three supply cards reached 0\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
    #####:   98:	else printf("Suppy count end criterion failed\n");
call    0 never executed
        1:   99:	_resetSupp(g);
call    0 returned 100%
        -:  100:
        -:  101:
        1:  102:	printf("\nTesting supply count end criterion for %s %s %s\n",names[2],names[6],names[7]);
call    0 returned 100%
        1:  103:	_setZero(g,2,6,7);	
call    0 returned 100%
        1:  104:	if(isGameOver(g)) printf("Passed! Game ended when three supply cards reached 0\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
    #####:  105:	else printf("Suppy count end criterion failed\n");
call    0 never executed
        1:  106:	_resetSupp(g);
call    0 returned 100%
        -:  107:
        -:  108:
        1:  109:	printf("\nTesting supply count end criterion for %s %s %s\n",names[1],names[6],names[7]);
call    0 returned 100%
        1:  110:	_setZero(g,1,6,7);	
call    0 returned 100%
        1:  111:	if(isGameOver(g)) printf("Passed! Game ended when three supply cards reached 0\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
    #####:  112:	else printf("Suppy count end criterion failed\n");
call    0 never executed
        1:  113:	_resetSupp(g);
call    0 returned 100%
        1:  114:}
        -:  115:
        -:  116:
function main called 1 returned 100% blocks executed 100%
        1:  117:int main()
        -:  118:{
        -:  119:	int i;
        1:  120:        int seed = 1000;
        1:  121:        int numPlayers = 2;
        1:  122:        int player  = 0;
        -:  123:        struct gameState preState, postState;
        1:  124:        int k[10] = {adventurer, council_room, feast, gardens, mine ,remodel, smithy, village, baron, great_hall};
        1:  125:	initializeGame(numPlayers,k,seed,&postState);
call    0 returned 100%
        1:  126:	memcpy(&preState,&postState,sizeof(struct gameState));
        1:  127:	printf("\n\n\tConducting gameOver test...\n\n");
call    0 returned 100%
        1:  128:	testEndProvince(&postState);
call    0 returned 100%
        1:  129:	testEndSupply(&postState);
call    0 returned 100%
        1:  130:}
        -:  131:	
