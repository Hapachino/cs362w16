TEST: ADVENTURER CARD

FULL DECK
Print hand: 7 4 4 
Check hand count: 3
Should be 2
FAILED
Check if non-treasure cards were drawn: PASSED
Check if adventurer card was discarded: FAILED
Print discard: 1 1 1 1 1 1 1 1 
Check that discard pile is only non-treasure cards: PASSED

EMPTY DECK
Print hand: 7 4 4 
Check hand count: 3
Should be 2
FAILED
Check if non-treasure cards were drawn: PASSED
Check if adventurer card was discarded: FAILED
Print discard: 1 1 1 1 1 1 1 
Check that discard pile is only non-treasure cards: PASSED
TEST: COUNCIL ROOM CARD

FULL DECKS
Print Player 0 hand: 4 4 4 1 
Hand count: 4
Should be 4
PASSED
Check if council room was discarded: PASSED
Discard count: 0
Should be 1
FAILED

Print Player 1 hand: 
Hand count: 0
Should be 1
FAILED

Print Player 2 hand: 
Hand count: 0
Should be 1
FAILED

EMPTY DECKS
Print Player 0 hand: 1 1 4 4 
Hand count: 4
Should be 4
PASSED
Check if council room was discarded: PASSED
Discard count: 0
Should be 1
FAILED

Print Player 1 hand: 
Hand count: 0
Should be 1
FAILED

Print Player 2 hand: 
Hand count: 0
Should be 1
FAILED
TEST: SMITHY CARD

FULL DECK
Print hand: 4 4 4 1 
Hand count: 4
Should be 3
FAILED
Check if smithy was discarded: PASSED
Discard count: 0
Should be 1
FAILED
Check if anything else was discarded: PASSED

EMPTY DECK
Print hand: 1 1 4 4 
Hand count: 4
Should be 3
FAILED
Check if smithy was discarded: PASSED
Discard count: 0
Should be 1
FAILED
Check if anything else was discarded: PASSED
TEST: VILLAGE CARD

Actions: 3
Should be 3
PASSED
Hand count: 1
Should be 1
PASSED
Discard count: 0
Should be 1
FAILED
Village in discard pile: FAILED
TEST: BUYCARD

Test card = silver
TEST: buy with enough coins and buy
Coins: 7; Expected: 7
PASSED
Buys: 0; Expected: 0
PASSED
Card supply: 39; Expected: 39
PASSED
Cards in deck: 1; Expected: 1
PASSED
TEST: buy with not enough buys
Coins: 7; Expected: 7
PASSED
Buys: 0; Expected: 0
PASSED
Card supply: 39; Expected: 39
PASSED
Cards in deck: 1; Expected: 1
PASSED
TEST: buy with not enough supply
Coins: 5; Expected: 5
PASSED
Buys: 1; Expected: 1
PASSED
Card supply: 0; Expected: 0
PASSED
Cards in deck: 1; Expected: 1
PASSED
TEST: buy with not enough coins
Coins: 1; Expected: 1
PASSED
Buys: 1; Expected: 1
PASSED
Card supply: 0; Expected: 0
PASSED
Cards in deck: 1; Expected: 1
PASSED
TEST: DISCARDCARD

Base hand: 5, 1, 2, 3, 4
		   Silver, Estate, Duchy, Province, Copper

TEST: discard first card in hand
Hand count: 4; Expected: 4
PASSED
Print cards in hand: 4 1 2 3 
PASSED
Discard count increment: FAILED
Card in discard pile: FAILED
Played cards increment: PASSED
Card in played cards: FAILED
TEST: discard last card in hand
Hand count: 3; Expected: 3
PASSED
Print cards in hand: 4 1 2 
PASSED
Discard count increment: FAILED
Card in discard pile: FAILED
Played cards increment: PASSED
Card in played cards: PASSED
TEST: trash second card
Hand count: 2; Expected: 2
PASSED
Print cards in hand: 4 2 
PASSED
No discard count increment: PASSED
Card in discard pile: PASSED
No played cards increment: PASSED
Card in played cards: PASSED
TEST: discard from empty hand
Hand count: -1; Expected: 0
FAILED
No discard count increment: PASSED
No played cards increment: FAILED
TEST: ISGAMEOVER

TEST: No piles empty
Game not over - PASSED
TEST: province pile empty
Game over - PASSED
TEST: three random piles empty
Empty piles: 5 21 0 
Game over - PASSED
TEST: two random piles empty
Empty piles: 23 1 
Game not over - PASSED
TEST: more than three random piles empty
Empty piles: 8 15 15 22 18 
Game over - PASSED
TEST: SCOREFOR

TEST: Cards in hand
Player 1
Curse: 20
Estate: 9
Duchy: 3
Province: 5
Gardens: 1
Great Hall: 10
Total deck: 48
Duchypts: 9
provincepts: 30
gardenpts: 4
estatepts: 9
cursepts: -20
great hall: 10
Expected score: 42
Calculated score: 40
FAILED
Player 2
Curse: 15
Estate: 7
Duchy: 3
Province: 9
Gardens: 7
Great Hall: 7
Total deck: 48
Duchypts: 9
provincepts: 54
gardenpts: 28
estatepts: 7
cursepts: -15
great hall: 7
Expected score: 90
Calculated score: 69
FAILED
Player 3
Curse: 6
Estate: 4
Duchy: 0
Province: 12
Gardens: 9
Great Hall: 10
Total deck: 41
Duchypts: 0
provincepts: 72
gardenpts: 36
estatepts: 4
cursepts: -6
great hall: 10
Expected score: 116
Calculated score: 80
FAILED
TEST: Cards in deck
Player 1
Curse: 17
Estate: 9
Duchy: 10
Province: 7
Gardens: 9
Great Hall: 8
Total deck: 60
Duchypts: 30
provincepts: 42
gardenpts: 54
estatepts: 9
cursepts: -17
great hall: 8
Expected score: 126
Calculated score: 0
FAILED
Player 2
Curse: 8
Estate: 9
Duchy: 0
Province: 12
Gardens: 6
Great Hall: 8
Total deck: 43
Duchypts: 0
provincepts: 72
gardenpts: 24
estatepts: 9
cursepts: -8
great hall: 8
Expected score: 105
Calculated score: 0
FAILED
Player 3
Curse: 3
Estate: 6
Duchy: 6
Province: 8
Gardens: 12
Great Hall: 7
Total deck: 42
Duchypts: 18
provincepts: 48
gardenpts: 48
estatepts: 6
cursepts: -3
great hall: 7
Expected score: 124
Calculated score: 0
FAILED
TEST: Cards in discard
Player 1
Curse: 6
Estate: 1
Duchy: 3
Province: 11
Gardens: 11
Great Hall: 10
Total deck: 42
Duchypts: 9
provincepts: 66
gardenpts: 44
estatepts: 1
cursepts: -6
great hall: 10
Expected score: 124
Calculated score: 151
FAILED
Player 2
Curse: 15
Estate: 12
Duchy: 1
Province: 9
Gardens: 0
Great Hall: 12
Total deck: 49
Duchypts: 3
provincepts: 54
gardenpts: 0
estatepts: 12
cursepts: -15
great hall: 12
Expected score: 66
Calculated score: 156
FAILED
Player 3
Curse: 13
Estate: 5
Duchy: 8
Province: 5
Gardens: 0
Great Hall: 4
Total deck: 35
Duchypts: 24
provincepts: 30
gardenpts: 0
estatepts: 5
cursepts: -13
great hall: 4
Expected score: 50
Calculated score: 128
FAILED
TEST: random distribution
Player 1
Curse: 6
Estate: 3
Duchy: 2
Province: 1
Gardens: 4
Great Hall: 10
Total deck: 26
Duchypts: 6
provincepts: 6
gardenpts: 8
estatepts: 3
cursepts: -6
great hall: 10
Expected score: 27
Calculated score: 19
FAILED
Player 2
Curse: 3
Estate: 6
Duchy: 8
Province: 11
Gardens: 5
Great Hall: 6
Total deck: 39
Duchypts: 24
provincepts: 66
gardenpts: 15
estatepts: 6
cursepts: -3
great hall: 6
Expected score: 114
Calculated score: 102
FAILED
Player 3
Curse: 9
Estate: 4
Duchy: 7
Province: 10
Gardens: 12
Great Hall: 5
Total deck: 47
Duchypts: 21
provincepts: 60
gardenpts: 48
estatepts: 4
cursepts: -9
great hall: 5
Expected score: 129
Calculated score: 90
FAILED
File 'dominion.c'
Lines executed:42.25% of 568
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1118:    8:int compare(const void* a, const void* b) {
     1118:    9:  if (*(int*)a > *(int*)b)
      107:   10:    return 1;
     1011:   11:  if (*(int*)a < *(int*)b)
      251:   12:    return -1;
      760:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       19:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       19:   44:  SelectStream(1);
       19:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       19:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       19:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      209:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2090:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       19:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       18:   77:  else if (numPlayers == 3)
        -:   78:    {
       18:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       19:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       18:   95:      state->supplyCount[estate] = 12;
       18:   96:      state->supplyCount[duchy] = 12;
       18:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       19:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       19:  102:  state->supplyCount[silver] = 40;
       19:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      399:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3135:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2945:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      190:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       76:  115:		  if (numPlayers == 2){
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
       36:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      152:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      190:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2755:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       75:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       56:  140:      state->deckCount[i] = 0;
      224:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      168:  143:	  state->deck[i][j] = estate;
      168:  144:	  state->deckCount[i]++;
        -:  145:	}
      448:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      392:  148:	  state->deck[i][j] = copper;
      392:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       75:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       56:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       75:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       56:  166:      state->handCount[i] = 0;
       56:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      532:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      513:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       19:  182:  state->outpostPlayed = 0;
       19:  183:  state->phase = 0;
       19:  184:  state->numActions = 1;
       19:  185:  state->numBuys = 1;
       19:  186:  state->playedCardCount = 0;
       19:  187:  state->whoseTurn = 0;
       19:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      114:  192:  for (it = 0; it < 5; it++){
       95:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       19:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       19:  198:  return 0;
        -:  199:}
        -:  200:
       62:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       62:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       62:  209:  if (state->deckCount[player] < 1)
        1:  210:    return -1;
       61:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      779:  214:  while (state->deckCount[player] > 0) {
      657:  215:    card = floor(Random() * state->deckCount[player]);
      657:  216:    newDeck[newDeckPos] = state->deck[player][card];
      657:  217:    newDeckPos++;
     2426:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1769:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      657:  221:    state->deckCount[player]--;
        -:  222:  }
      718:  223:  for (i = 0; i < newDeckPos; i++) {
      657:  224:    state->deck[player][i] = newDeck[i];
      657:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       61:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        1:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        1:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       16:  320:int supplyCount(int card, struct gameState *state) {
       16:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       79:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       79:  326:  int count = 0;
        -:  327:
      398:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      319:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
     1194:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
     1115:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
     1568:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
     1489:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       79:  343:  return count;
        -:  344:}
        -:  345:
        7:  346:int whoseTurn(struct gameState *state) {
        7:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
       12:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       12:  420:  int score = 0;
        -:  421:  //score from hand
      187:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      175:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      175:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      175:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      175:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      175:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      175:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
      178:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
      166:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
      166:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
      166:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
      166:  438:      if (state->discard[player][i] == province) { score = score + 6; };
      166:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      166:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
      178:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
      166:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
      166:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
      166:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
      166:  449:      if (state->deck[player][i] == province) { score = score + 6; };
      166:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      166:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       12:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      131:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      131:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       42:  533:    for (i = 0; i < state->discardCount[player];i++){
       39:  534:      state->deck[player][i] = state->discard[player][i];
       39:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        3:  538:    state->deckCount[player] = state->discardCount[player];
        3:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        3:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        3:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        3:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        3:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        3:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      128:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      128:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      128:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      128:  576:    state->deckCount[player]--;
      128:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      131:  580:  return 0;
        -:  581:}
        -:  582:
        4:  583:int getCost(int cardNumber)
        -:  584:{
        4:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
        4:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        7:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        7:  653:  int currentPlayer = whoseTurn(state);
        7:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        7:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        7:  658:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:
        -:  662:
        -:  663:  //uses switch to select card and perform actions
        7:  664:  switch( card )
        -:  665:    {
        -:  666:    case adventurer:
        2:  667:      playAdventurer(state);
        2:  668:      return 0;
        -:  669:
        -:  670:    case council_room:
        2:  671:      playCouncilRoom(state, handPos);
        2:  672:      return 0;
        -:  673:
        -:  674:    case feast:
        -:  675:      //gain card with cost up to 5
        -:  676:      //Backup hand
    #####:  677:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  678:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  679:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  680:      }
        -:  681:      //Backup hand
        -:  682:
        -:  683:      //Update Coins for Buy
    #####:  684:      updateCoins(currentPlayer, state, 5);
    #####:  685:      x = 1;//Condition to loop on
    #####:  686:      while( x == 1) {//Buy one card
    #####:  687:	if (supplyCount(choice1, state) <= 0){
        -:  688:	  if (DEBUG)
        -:  689:	    printf("None of that card left, sorry!\n");
        -:  690:
        -:  691:	  if (DEBUG){
        -:  692:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  693:	  }
        -:  694:	}
    #####:  695:	else if (state->coins < getCost(choice1)){
    #####:  696:	  printf("That card is too expensive!\n");
        -:  697:
        -:  698:	  if (DEBUG){
        -:  699:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  700:	  }
        -:  701:	}
        -:  702:	else{
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  706:	  }
        -:  707:
    #####:  708:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:	  x = 0;//No more buying cards
        -:  710:
        -:  711:	  if (DEBUG){
        -:  712:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  713:	  }
        -:  714:
        -:  715:	}
        -:  716:      }
        -:  717:
        -:  718:      //Reset Hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  720:	state->hand[currentPlayer][i] = temphand[i];
    #####:  721:	temphand[i] = -1;
        -:  722:      }
        -:  723:      //Reset Hand
        -:  724:
    #####:  725:      return 0;
        -:  726:
        -:  727:    case gardens:
    #####:  728:      return -1;
        -:  729:
        -:  730:    case mine:
    #####:  731:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  732:
    #####:  733:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:
    #####:  738:      if (choice2 > treasure_map || choice2 < curse)
        -:  739:	{
    #####:  740:	  return -1;
        -:  741:	}
        -:  742:
    #####:  743:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
    #####:  748:      gainCard(choice2, state, 2, currentPlayer);
        -:  749:
        -:  750:      //discard card from hand
    #####:  751:      discardCard(handPos, currentPlayer, state, 0);
        -:  752:
        -:  753:      //discard trashed card
    #####:  754:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  755:	{
    #####:  756:	  if (state->hand[currentPlayer][i] == j)
        -:  757:	    {
    #####:  758:	      discardCard(i, currentPlayer, state, 0);
    #####:  759:	      break;
        -:  760:	    }
        -:  761:	}
        -:  762:
    #####:  763:      return 0;
        -:  764:
        -:  765:    case remodel:
    #####:  766:      playRemodel(state, choice1, choice2, handPos);
    #####:  767:      return 0;
        -:  768:
        -:  769:    case smithy:
        2:  770:      playSmithy(state, handPos);
        2:  771:      return 0;
        -:  772:
        -:  773:    case village:
        -:  774:      //+1 Card
        1:  775:      drawCard(currentPlayer, state);
        -:  776:
        -:  777:      //+2 Actions
        1:  778:      state->numActions = state->numActions + 2;
        -:  779:
        -:  780:      //discard played card from hand
        1:  781:      discardCard(handPos, currentPlayer, state, 0);
        1:  782:      return 0;
        -:  783:
        -:  784:    case baron:
    #####:  785:      state->numBuys++;//Increase buys by 1!
    #####:  786:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  787:	int p = 0;//Iterator for hand!
    #####:  788:	int card_not_discarded = 1;//Flag for discard set!
    #####:  789:	while(card_not_discarded){
    #####:  790:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  791:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  792:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  793:	    state->discardCount[currentPlayer]++;
    #####:  794:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  795:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  796:	    }
    #####:  797:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  798:	    state->handCount[currentPlayer]--;
    #####:  799:	    card_not_discarded = 0;//Exit the loop
        -:  800:	  }
    #####:  801:	  else if (p > state->handCount[currentPlayer]){
        -:  802:	    if(DEBUG) {
        -:  803:	      printf("No estate cards in your hand, invalid choice\n");
        -:  804:	      printf("Must gain an estate if there are any\n");
        -:  805:	    }
    #####:  806:	    if (supplyCount(estate, state) > 0){
    #####:  807:	      gainCard(estate, state, 0, currentPlayer);
    #####:  808:	      state->supplyCount[estate]--;//Decrement estates
    #####:  809:	      if (supplyCount(estate, state) == 0){
    #####:  810:		isGameOver(state);
        -:  811:	      }
        -:  812:	    }
    #####:  813:	    card_not_discarded = 0;//Exit the loop
        -:  814:	  }
        -:  815:
        -:  816:	  else{
    #####:  817:	    p++;//Next card
        -:  818:	  }
        -:  819:	}
        -:  820:      }
        -:  821:
        -:  822:      else{
    #####:  823:	if (supplyCount(estate, state) > 0){
    #####:  824:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  825:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  826:	  if (supplyCount(estate, state) == 0){
    #####:  827:	    isGameOver(state);
        -:  828:	  }
        -:  829:	}
        -:  830:      }
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:
        -:  835:    case great_hall:
    #####:  836:      playGreatHall(state, handPos);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case minion:
        -:  840:      //+1 action
    #####:  841:      state->numActions++;
        -:  842:
        -:  843:      //discard card from hand
    #####:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:
    #####:  846:      if (choice1)		//+2 coins
        -:  847:	{
    #####:  848:	  state->coins = state->coins + 2;
        -:  849:	}
        -:  850:
    #####:  851:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  852:	{
        -:  853:	  //discard hand
    #####:  854:	  while(numHandCards(state) > 0)
        -:  855:	    {
    #####:  856:	      discardCard(handPos, currentPlayer, state, 0);
        -:  857:	    }
        -:  858:
        -:  859:	  //draw 4
    #####:  860:	  for (i = 0; i < 4; i++)
        -:  861:	    {
    #####:  862:	      drawCard(currentPlayer, state);
        -:  863:	    }
        -:  864:
        -:  865:	  //other players discard hand and redraw if hand size > 4
    #####:  866:	  for (i = 0; i < state->numPlayers; i++)
        -:  867:	    {
    #####:  868:	      if (i != currentPlayer)
        -:  869:		{
    #####:  870:		  if ( state->handCount[i] > 4 )
        -:  871:		    {
        -:  872:		      //discard hand
    #####:  873:		      while( state->handCount[i] > 0 )
        -:  874:			{
    #####:  875:			  discardCard(handPos, i, state, 0);
        -:  876:			}
        -:  877:
        -:  878:		      //draw 4
    #####:  879:		      for (j = 0; j < 4; j++)
        -:  880:			{
    #####:  881:			  drawCard(i, state);
        -:  882:			}
        -:  883:		    }
        -:  884:		}
        -:  885:	    }
        -:  886:
        -:  887:	}
    #####:  888:      return 0;
        -:  889:
        -:  890:    case steward:
    #####:  891:      if (choice1 == 1)
        -:  892:	{
        -:  893:	  //+2 cards
    #####:  894:	  drawCard(currentPlayer, state);
    #####:  895:	  drawCard(currentPlayer, state);
        -:  896:	}
    #####:  897:      else if (choice1 == 2)
        -:  898:	{
        -:  899:	  //+2 coins
    #####:  900:	  state->coins = state->coins + 2;
        -:  901:	}
        -:  902:      else
        -:  903:	{
        -:  904:	  //trash 2 cards in hand
    #####:  905:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  906:	  discardCard(choice3, currentPlayer, state, 1);
        -:  907:	}
        -:  908:
        -:  909:      //discard card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
    #####:  911:      return 0;
        -:  912:
        -:  913:    case tribute:
    #####:  914:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  915:	if (state->deckCount[nextPlayer] > 0){
    #####:  916:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	  state->deckCount[nextPlayer]--;
        -:  918:	}
    #####:  919:	else if (state->discardCount[nextPlayer] > 0){
    #####:  920:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  921:	  state->discardCount[nextPlayer]--;
        -:  922:	}
        -:  923:	else{
        -:  924:	  //No Card to Reveal
        -:  925:	  if (DEBUG){
        -:  926:	    printf("No cards to reveal\n");
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:
        -:  931:      else{
    #####:  932:	if (state->deckCount[nextPlayer] == 0){
    #####:  933:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  934:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  935:	    state->deckCount[nextPlayer]++;
    #####:  936:	    state->discard[nextPlayer][i] = -1;
    #####:  937:	    state->discardCount[nextPlayer]--;
        -:  938:	  }
        -:  939:
    #####:  940:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  941:	}
    #####:  942:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  943:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  944:	state->deckCount[nextPlayer]--;
    #####:  945:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  946:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  947:	state->deckCount[nextPlayer]--;
        -:  948:      }
        -:  949:
    #####:  950:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  951:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  952:	state->playedCardCount++;
    #####:  953:	tributeRevealedCards[1] = -1;
        -:  954:      }
        -:  955:
    #####:  956:      for (i = 0; i <= 2; i ++){
    #####:  957:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  958:	  state->coins += 2;
        -:  959:	}
        -:  960:
    #####:  961:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  962:	  drawCard(currentPlayer, state);
    #####:  963:	  drawCard(currentPlayer, state);
        -:  964:	}
        -:  965:	else{//Action Card
    #####:  966:	  state->numActions = state->numActions + 2;
        -:  967:	}
        -:  968:      }
        -:  969:
    #####:  970:      return 0;
        -:  971:
        -:  972:    case ambassador:
    #####:  973:      j = 0;		//used to check if player has enough cards to discard
        -:  974:
    #####:  975:      if (choice2 > 2 || choice2 < 0)
        -:  976:	{
    #####:  977:	  return -1;
        -:  978:	}
        -:  979:
    #####:  980:      if (choice1 == handPos)
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  986:	{
    #####:  987:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  988:	    {
    #####:  989:	      j++;
        -:  990:	    }
        -:  991:	}
    #####:  992:      if (j < choice2)
        -:  993:	{
    #####:  994:	  return -1;
        -:  995:	}
        -:  996:
        -:  997:      if (DEBUG)
        -:  998:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  999:
        -: 1000:      //increase supply count for choosen card by amount being discarded
    #####: 1001:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1002:
        -: 1003:      //each other player gains a copy of revealed card
    #####: 1004:      for (i = 0; i < state->numPlayers; i++)
        -: 1005:	{
    #####: 1006:	  if (i != currentPlayer)
        -: 1007:	    {
    #####: 1008:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1009:	    }
        -: 1010:	}
        -: 1011:
        -: 1012:      //discard played card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:
        -: 1015:      //trash copies of cards returned to supply
    #####: 1016:      for (j = 0; j < choice2; j++)
        -: 1017:	{
    #####: 1018:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1019:	    {
    #####: 1020:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1021:		{
    #####: 1022:		  discardCard(i, currentPlayer, state, 1);
    #####: 1023:		  break;
        -: 1024:		}
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
    #####: 1028:      return 0;
        -: 1029:
        -: 1030:    case cutpurse:
        -: 1031:
    #####: 1032:      updateCoins(currentPlayer, state, 2);
    #####: 1033:      for (i = 0; i < state->numPlayers; i++)
        -: 1034:	{
    #####: 1035:	  if (i != currentPlayer)
        -: 1036:	    {
    #####: 1037:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1038:		{
    #####: 1039:		  if (state->hand[i][j] == copper)
        -: 1040:		    {
    #####: 1041:		      discardCard(j, i, state, 0);
    #####: 1042:		      break;
        -: 1043:		    }
    #####: 1044:		  if (j == state->handCount[i])
        -: 1045:		    {
    #####: 1046:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1047:			{
        -: 1048:			  if (DEBUG)
        -: 1049:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1050:			}
    #####: 1051:		      break;
        -: 1052:		    }
        -: 1053:		}
        -: 1054:
        -: 1055:	    }
        -: 1056:
        -: 1057:	}
        -: 1058:
        -: 1059:      //discard played card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
        -: 1061:
    #####: 1062:      return 0;
        -: 1063:
        -: 1064:
        -: 1065:    case embargo:
        -: 1066:      //+2 Coins
    #####: 1067:      state->coins = state->coins + 2;
        -: 1068:
        -: 1069:      //see if selected pile is in play
    #####: 1070:      if ( state->supplyCount[choice1] == -1 )
        -: 1071:	{
    #####: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
        -: 1075:      //add embargo token to selected supply pile
    #####: 1076:      state->embargoTokens[choice1]++;
        -: 1077:
        -: 1078:      //trash card
    #####: 1079:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1080:      return 0;
        -: 1081:
        -: 1082:    case outpost:
        -: 1083:      //set outpost flag
    #####: 1084:      state->outpostPlayed++;
        -: 1085:
        -: 1086:      //discard card
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1088:      return 0;
        -: 1089:
        -: 1090:    case salvager:
        -: 1091:      //+1 buy
    #####: 1092:      state->numBuys++;
        -: 1093:
    #####: 1094:      if (choice1)
        -: 1095:	{
        -: 1096:	  //gain coins equal to trashed card
    #####: 1097:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1098:	  //trash card
    #####: 1099:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1100:	}
        -: 1101:
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:
        -: 1106:    case sea_hag:
    #####: 1107:      for (i = 0; i < state->numPlayers; i++){
    #####: 1108:	if (i != currentPlayer){
    #####: 1109:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1110:	  state->discardCount[i]++;
    #####: 1111:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1112:	}
        -: 1113:      }
    #####: 1114:      return 0;
        -: 1115:
        -: 1116:    case treasure_map:
        -: 1117:      //search hand for another treasure_map
    #####: 1118:      index = -1;
    #####: 1119:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:	{
    #####: 1121:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1122:	    {
    #####: 1123:	      index = i;
    #####: 1124:	      break;
        -: 1125:	    }
        -: 1126:	}
    #####: 1127:      if (index > -1)
        -: 1128:	{
        -: 1129:	  //trash both treasure cards
    #####: 1130:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1131:	  discardCard(index, currentPlayer, state, 1);
        -: 1132:
        -: 1133:	  //gain 4 Gold cards
    #####: 1134:	  for (i = 0; i < 4; i++)
        -: 1135:	    {
    #####: 1136:	      gainCard(gold, state, 1, currentPlayer);
        -: 1137:	    }
        -: 1138:
        -: 1139:	  //return success
    #####: 1140:	  return 1;
        -: 1141:	}
        -: 1142:
        -: 1143:      //no second treasure_map found in hand
    #####: 1144:      return -1;
        -: 1145:    }
        -: 1146:
    #####: 1147:  return -1;
        -: 1148:}
        -: 1149:
        2: 1150:int playAdventurer(struct gameState *state)
        -: 1151:{
        2: 1152:  int z = 0;
        -: 1153:  int temphand[MAX_HAND];
        2: 1154:  int drawnTreasure = 0;
        -: 1155:  int cardDrawn;
        2: 1156:  int currentPlayer = state->whoseTurn;
        -: 1157:
       23: 1158:  while(drawnTreasure < 2){
       19: 1159:    if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
        1: 1160:      shuffle(currentPlayer, state);
        -: 1161:    }
        -: 1162:
       19: 1163:    drawCard(currentPlayer, state);
       19: 1164:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1165:
       19: 1166:    if (cardDrawn == copper || (cardDrawn == silver && cardDrawn == gold))
        4: 1167:      drawnTreasure++;
        -: 1168:    else{
       15: 1169:      temphand[z]=cardDrawn;
       15: 1170:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       15: 1171:      z++;
        -: 1172:    }
        -: 1173:  }
        -: 1174:
       19: 1175:  while(z-1>=0){
       15: 1176:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       15: 1177:    z=z-1;
        -: 1178:  }
        -: 1179:
        2: 1180:  return 0;
        -: 1181:}
        -: 1182:
        2: 1183:int playCouncilRoom(struct gameState *state, int handPos)
        -: 1184:{
        2: 1185:  int currentPlayer = state->whoseTurn;
        -: 1186:  int i;
        -: 1187:  //+4 Cards
       10: 1188:  for (i = 0; i < 4; i++)
        -: 1189:  {
        8: 1190:    drawCard(currentPlayer, state);
        -: 1191:  }
        -: 1192:
        -: 1193:  //+1 Buy
        2: 1194:  state->numBuys++;
        -: 1195:
        -: 1196:  //Each other player draws a card
        2: 1197:  for (i; i < state->numPlayers; i++)
        -: 1198:  {
    #####: 1199:    if ( i != currentPlayer )
        -: 1200:      {
    #####: 1201:        drawCard(i, state);
        -: 1202:      }
        -: 1203:  }
        -: 1204:
        -: 1205:  //put played card in played card pile
        2: 1206:  discardCard(handPos, currentPlayer, state, 0);
        -: 1207:
        2: 1208:  return 0;
        -: 1209:}
        -: 1210:
        2: 1211:int playSmithy(struct gameState *state, int handPos)
        -: 1212:{
        -: 1213:  int i;
        2: 1214:  int currentPlayer = state->whoseTurn;
        -: 1215:
        -: 1216:  //+3 Cards
       10: 1217:  for (i = 0; i <= 3; i++)
        -: 1218:  {
        8: 1219:    drawCard(currentPlayer, state);
        -: 1220:  }
        -: 1221:
        -: 1222:  //discard card from hand
        2: 1223:  discardCard(handPos, currentPlayer, state, 0);
        -: 1224:
        2: 1225:  return 0;
        -: 1226:}
        -: 1227:
    #####: 1228:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1229:{
        -: 1230:  int i;
        -: 1231:  int j;
    #####: 1232:  int currentPlayer = state->whoseTurn;
        -: 1233:
    #####: 1234:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1235:
    #####: 1236:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1237:  {
    #####: 1238:    return -1;
        -: 1239:  }
        -: 1240:
    #####: 1241:  gainCard(choice2, state, 0, currentPlayer);
        -: 1242:
        -: 1243:  //discard card from hand
    #####: 1244:  discardCard(handPos, currentPlayer, state, j);
        -: 1245:
        -: 1246:  //discard trashed card
    #####: 1247:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:  {
    #####: 1249:    if (state->hand[currentPlayer][i] == j)
        -: 1250:      {
    #####: 1251:        discardCard(i, currentPlayer, state, 0);
    #####: 1252:        break;
        -: 1253:      }
        -: 1254:  }
        -: 1255:
    #####: 1256:  return 0;
        -: 1257:}
        -: 1258:
    #####: 1259:int playGreatHall(struct gameState *state, int handPos)
        -: 1260:{
    #####: 1261:  int currentPlayer = state->whoseTurn;
        -: 1262:
        -: 1263:  //+1 Card
    #####: 1264:  drawCard(currentPlayer, state);
        -: 1265:
        -: 1266:  //+1 Actions
    #####: 1267:  state->numActions++;
        -: 1268:
        -: 1269:  //discard card from hand
    #####: 1270:  discardCard(handPos, currentPlayer, state, 0);
        -: 1271:
    #####: 1272:  return 0;
        -: 1273:}
        -: 1274:
        9: 1275:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1276:{
        -: 1277:
        -: 1278:  //if card is not trashed, added to Played pile
        9: 1279:  if (trashFlag < 1)
        -: 1280:    {
        -: 1281:      //add card to played pile
        8: 1282:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1283:      state->playedCardCount++;
        -: 1284:    }
        -: 1285:
        -: 1286:  //set played card to -1
        9: 1287:  state->hand[currentPlayer][handPos] = -1;
        -: 1288:
        -: 1289:  //remove card from player's hand
        9: 1290:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
        1: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        8: 1295:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1296:    {
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:  else
        -: 1301:    {
        -: 1302:      //replace discarded card with last card in hand
        8: 1303:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1304:      //set last card to -1
        8: 1305:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1306:      //reduce number of cards in hand
        8: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
        -: 1309:
        9: 1310:  return 0;
        -: 1311:}
        -: 1312:
        1: 1313:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1314:{
        -: 1315:  //Note: supplyPos is enum of choosen card
        -: 1316:
        -: 1317:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1318:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:  //added card for [whoseTurn] current player:
        -: 1324:  // toFlag = 0 : add to discard
        -: 1325:  // toFlag = 1 : add to deck
        -: 1326:  // toFlag = 2 : add to hand
        -: 1327:
        1: 1328:  if (toFlag == 1)
        -: 1329:    {
    #####: 1330:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1331:      state->deckCount[player]++;
        -: 1332:    }
        1: 1333:  else if (toFlag == 2)
        -: 1334:    {
    #####: 1335:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1336:      state->handCount[player]++;
        -: 1337:    }
        -: 1338:  else
        -: 1339:    {
        1: 1340:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1341:      state->discardCount[player]++;
        -: 1342:    }
        -: 1343:
        -: 1344:  //decrease number in supply pile
        1: 1345:  state->supplyCount[supplyPos]--;
        -: 1346:
        1: 1347:  return 0;
        -: 1348:}
        -: 1349:
       19: 1350:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1351:{
        -: 1352:  int i;
        -: 1353:
        -: 1354:  //reset coin count
       19: 1355:  state->coins = 0;
        -: 1356:
        -: 1357:  //add coins for each Treasure card in player's hand
      114: 1358:  for (i = 0; i < state->handCount[player]; i++)
        -: 1359:    {
       95: 1360:      if (state->hand[player][i] == copper)
        -: 1361:	{
       76: 1362:	  state->coins += 1;
        -: 1363:	}
       19: 1364:      else if (state->hand[player][i] == silver)
        -: 1365:	{
    #####: 1366:	  state->coins += 2;
        -: 1367:	}
       19: 1368:      else if (state->hand[player][i] == gold)
        -: 1369:	{
    #####: 1370:	  state->coins += 3;
        -: 1371:	}
        -: 1372:    }
        -: 1373:
        -: 1374:  //add bonus
       19: 1375:  state->coins += bonus;
        -: 1376:
       19: 1377:  return 0;
        -: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
