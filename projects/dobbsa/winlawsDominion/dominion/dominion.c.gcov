        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     4512:    8:int compare(const void* a, const void* b) 
        -:    9:{
     4512:   10:  if (*(int*)a > *(int*)b)
     1607:   11:    return 1;
     2905:   12:  if (*(int*)a < *(int*)b)
      730:   13:    return -1;
     2175:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() 
        -:   18:{
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) 
        -:   24:{
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       26:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) 
        -:   40:{
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       26:   45:  SelectStream(1);
       26:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       26:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:  {
    #####:   51:    return -1;
        -:   52:  }
        -:   53:
        -:   54:  //set number of players
       26:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      286:   58:  for (i = 0; i < 10; i++)
        -:   59:  {
     2860:   60:    for (j = 0; j < 10; j++)
        -:   61:    {
     2600:   62:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:    }
        -:   67:  }
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       26:   73:  if (numPlayers == 2)
        -:   74:  {
        6:   75:    state->supplyCount[curse] = 10;
        -:   76:  }
       20:   77:  else if (numPlayers == 3)
        -:   78:  {
       20:   79:    state->supplyCount[curse] = 20;
        -:   80:  }
        -:   81:  else
        -:   82:  {
    #####:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       26:   87:  if (numPlayers == 2)
        -:   88:  {
        6:   89:    state->supplyCount[estate] = 8;
        6:   90:    state->supplyCount[duchy] = 8;
        6:   91:    state->supplyCount[province] = 8;
        -:   92:  }
        -:   93:  else
        -:   94:  {
       20:   95:    state->supplyCount[estate] = 12;
       20:   96:    state->supplyCount[duchy] = 12;
       20:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       26:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       26:  102:  state->supplyCount[silver] = 40;
       26:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      546:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     4308:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	  {
     4046:  110:  	  if (kingdomCards[j] == i)
        -:  111:  	  {
        -:  112:  	    //check if card is a 'Victory' Kingdom card
      258:  113:  	    if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:  		  {
       88:  115:  		    if (numPlayers == 2)
        -:  116:          { 
        4:  117:  		      state->supplyCount[i] = 8; 
        -:  118:  		    }
        -:  119:  		    else
        -:  120:          { 
       40:  121:            state->supplyCount[i] = 12; 
        -:  122:          }
        -:  123:  		  }
        -:  124:  	    else
        -:  125:  		  {
      214:  126:  		    state->supplyCount[i] = 10;
        -:  127:  		  }
      258:  128:  	    break;
        -:  129:  	  }
        -:  130:  	  else    //card is not in the set choosen for the game
        -:  131:  	  {
     3788:  132:  	    state->supplyCount[i] = -1;
        -:  133:  	  }
        -:  134:	  }
        -:  135:  }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
       98:  141:  for (i = 0; i < numPlayers; i++)
        -:  142:  {
       72:  143:    state->deckCount[i] = 0;
      288:  144:    for (j = 0; j < 3; j++)
        -:  145:	  {
      216:  146:      state->deck[i][j] = estate;
      216:  147:	    state->deckCount[i]++;
        -:  148:	  }
      576:  149:    for (j = 3; j < 10; j++)
        -:  150:	  {
      504:  151:      state->deck[i][j] = copper;
      504:  152:	    state->deckCount[i]++;		
        -:  153:	  }
        -:  154:  }
        -:  155:
        -:  156:  //shuffle player decks
       98:  157:  for (i = 0; i < numPlayers; i++)
        -:  158:  {
       72:  159:    if ( shuffle(i, state) < 0 )
        -:  160:	  {
    #####:  161:	    return -1;
        -:  162:	  }
        -:  163:  }
        -:  164:
        -:  165:  //draw player hands
       98:  166:  for (i = 0; i < numPlayers; i++)
        -:  167:  {  
        -:  168:    //initialize hand size to zero
       72:  169:    state->handCount[i] = 0;
       72:  170:    state->discardCount[i] = 0;
        -:  171:    //draw 5 cards
        -:  172:    // for (j = 0; j < 5; j++)
        -:  173:    //	{
        -:  174:    //	  drawCard(i, state);
        -:  175:    //	}
        -:  176:  }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
      728:  179:  for (i = 0; i <= treasure_map; i++)
        -:  180:  {
      702:  181:    state->embargoTokens[i] = 0;
        -:  182:  }
        -:  183:
        -:  184:  //initialize first player's turn
       26:  185:  state->outpostPlayed = 0;
       26:  186:  state->phase = 0;
       26:  187:  state->numActions = 1;
       26:  188:  state->numBuys = 1;
       26:  189:  state->playedCardCount = 0;
       26:  190:  state->whoseTurn = 0;
       26:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
      156:  195:  for (it = 0; it < 5; it++)
        -:  196:  {
      130:  197:    drawCard(state->whoseTurn, state);
        -:  198:  }
        -:  199:
       26:  200:  updateCoins(state->whoseTurn, state, 0);
        -:  201:
       26:  202:  return 0;
        -:  203:}
        -:  204:
       97:  205:int shuffle(int player, struct gameState *state) 
        -:  206:{
        -:  207:  int newDeck[MAX_DECK];
       97:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
       97:  212:  if (state->deckCount[player] < 1)
        5:  213:    return -1;
       92:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
     1511:  217:  while (state->deckCount[player] > 0) 
        -:  218:  {
     1327:  219:    card = floor(Random() * state->deckCount[player]);
     1327:  220:    newDeck[newDeckPos] = state->deck[player][card];
     1327:  221:    newDeckPos++;
    41458:  222:    for (i = card; i < state->deckCount[player]-1; i++) 
        -:  223:    {
    40131:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
     1327:  226:    state->deckCount[player]--;
        -:  227:  }
     1419:  228:  for (i = 0; i < newDeckPos; i++) 
        -:  229:  {
     1327:  230:    state->deck[player][i] = newDeck[i];
     1327:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
       92:  234:  return 0;
        -:  235:}
        -:  236:
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:  {
    #####:  251:    return -1;
        -:  252:  }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:  {
    #####:  266:    return -1;
        -:  267:  }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) 
        -:  279:{
        -:  280:  int who;
        -:  281:  if (DEBUG)
        -:  282:  {
        -:  283:    printf("Entering buyCard...\n");
        -:  284:  }
        -:  285:
        -:  286:  // I don't know what to do about the phase thing.
        -:  287:
    #####:  288:  who = state->whoseTurn;
        -:  289:
    #####:  290:  if (state->numBuys < 1)
        -:  291:  {
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
        -:  295:  } 
    #####:  296:  else if (supplyCount(supplyPos, state) <1)
        -:  297:  {
        -:  298:    if (DEBUG)
        -:  299:      printf("There are not any of that type of card left\n");
    #####:  300:    return -1;
        -:  301:  } 
    #####:  302:  else if (state->coins < getCost(supplyPos))
        -:  303:  {
        -:  304:    if (DEBUG) 
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } 
        -:  308:  else 
        -:  309:  {
    #####:  310:    state->phase=1;
        -:  311:    //state->supplyCount[supplyPos]--;
    #####:  312:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  313:  
    #####:  314:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  315:    state->numBuys--;
        -:  316:    if (DEBUG)
        -:  317:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  318:  }
        -:  319:
        -:  320:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  321:  //state->discardCount[who]++;
        -:  322:    
    #####:  323:  return 0;
        -:  324:}
        -:  325:
    #####:  326:int numHandCards(struct gameState *state) 
        -:  327:{
    #####:  328:  return state->handCount[ whoseTurn(state) ];
        -:  329:}
        -:  330:
    #####:  331:int handCard(int handPos, struct gameState *state) 
        -:  332:{
    #####:  333:  int currentPlayer = whoseTurn(state);
    #####:  334:  return state->hand[currentPlayer][handPos];
        -:  335:}
        -:  336:
    #####:  337:int supplyCount(int card, struct gameState *state) 
        -:  338:{
    #####:  339:  return state->supplyCount[card];
        -:  340:}
        -:  341:
    #####:  342:int fullDeckCount(int player, int card, struct gameState *state) 
        -:  343:{
        -:  344:  int i;
    #####:  345:  int count = 0;
        -:  346:
    #####:  347:  for (i = 0; i < state->deckCount[player]; i++)
        -:  348:  {
    #####:  349:    if (state->deck[player][i] == card) count++;
        -:  350:  }
        -:  351:
    #####:  352:  for (i = 0; i < state->handCount[player]; i++)
        -:  353:  {
    #####:  354:    if (state->hand[player][i] == card) count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->discardCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->discard[player][i] == card) count++;
        -:  360:  }
        -:  361:
    #####:  362:  return count;
        -:  363:}
        -:  364:
       49:  365:int whoseTurn(struct gameState *state) 
        -:  366:{
       49:  367:  return state->whoseTurn;
        -:  368:}
        -:  369:
        1:  370:int endTurn(struct gameState *state) 
        -:  371:{
        -:  372:  int k;
        -:  373:  int i;
        1:  374:  int currentPlayer = whoseTurn(state);
        -:  375:  
        -:  376:  //Discard hand
        6:  377:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  378:  {
        5:  379:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  380:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  381:  }
        1:  382:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  383:    
        -:  384:  //Code for determining the player
        1:  385:  if (currentPlayer < (state->numPlayers - 1))
        -:  386:  { 
        1:  387:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  388:  }
        -:  389:  else
        -:  390:  {
    #####:  391:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  392:  }
        -:  393:
        1:  394:  state->outpostPlayed = 0;
        1:  395:  state->phase = 0;
        1:  396:  state->numActions = 1;
        1:  397:  state->coins = 0;
        1:  398:  state->numBuys = 1;
        1:  399:  state->playedCardCount = 0;
        1:  400:  state->handCount[state->whoseTurn] = 0;
        -:  401:
        -:  402:  //int k; move to top
        -:  403:  //Next player draws hand
        6:  404:  for (k = 0; k < 5; k++)
        -:  405:  {
        5:  406:    drawCard(state->whoseTurn, state);//Draw a card
        -:  407:  }
        -:  408:
        -:  409:  //Update money
        1:  410:  updateCoins(state->whoseTurn, state , 0);
        -:  411:
        1:  412:  return 0;
        -:  413:}
        -:  414:
        3:  415:int isGameOver(struct gameState *state) 
        -:  416:{
        -:  417:  int i;
        -:  418:  int j;
        -:  419:	
        -:  420:  //if stack of Province cards is empty, the game ends
        3:  421:  if (state->supplyCount[province] == 0)
        -:  422:  {
        1:  423:    return 1;
        -:  424:  }
        -:  425:
        -:  426:  //if three supply pile are at 0, the game ends
        2:  427:  j = 0;
       52:  428:  for (i = 0; i < 25; i++)
        -:  429:  {
       50:  430:    if (state->supplyCount[i] == 0)
        -:  431:	  {
        3:  432:	    j++;
        -:  433:	  }
        -:  434:  }
        2:  435:  if ( j >= 3)
        -:  436:  {
        1:  437:    return 1;
        -:  438:  }
        -:  439:
        1:  440:  return 0;
        -:  441:}
        -:  442:
    #####:  443:int scoreFor (int player, struct gameState *state) 
        -:  444:{
        -:  445:  int i;
    #####:  446:  int score = 0;
        -:  447:  //score from hand
    #####:  448:  for (i = 0; i < state->handCount[player]; i++)
        -:  449:  {
    #####:  450:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  451:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  452:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  453:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  454:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  455:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:  }
        -:  457:
        -:  458:  //score from discard
    #####:  459:  for (i = 0; i < state->discardCount[player]; i++)
        -:  460:  {
    #####:  461:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  462:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  463:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  464:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  465:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  466:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  467:  }
        -:  468:
        -:  469:  //score from deck
    #####:  470:  for (i = 0; i < state->discardCount[player]; i++)
        -:  471:  {
    #####:  472:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  473:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  474:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  475:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  476:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  477:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  478:  }
        -:  479:
    #####:  480:  return score;
        -:  481:}
        -:  482:
    #####:  483:int getWinners(int players[MAX_PLAYERS], struct gameState *state) 
        -:  484:{
        -:  485:  int i;	
        -:  486:  int j;
        -:  487:  int highScore;
        -:  488:  int currentPlayer;
        -:  489:
        -:  490:  //get score for each player
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:  {
        -:  493:    //set unused player scores to -9999
    #####:  494:    if (i >= state->numPlayers)
        -:  495:	  {
    #####:  496:	    players[i] = -9999;
        -:  497:	  }
        -:  498:    else
        -:  499:	  {
    #####:  500:	    players[i] = scoreFor (i, state);
        -:  501:	  }
        -:  502:  }
        -:  503:
        -:  504:  //find highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:  {
    #####:  508:    if (players[i] > players[j])
        -:  509:	  {
    #####:  510:	    j = i;
        -:  511:	  }
        -:  512:  }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //add 1 to players who had less turns
    #####:  516:  currentPlayer = whoseTurn(state);
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:  {
    #####:  519:    if ( players[i] == highScore && i > currentPlayer )
        -:  520:	  {
    #####:  521:	    players[i]++;
        -:  522:	  }
        -:  523:  }
        -:  524:
        -:  525:  //find new highest score
    #####:  526:  j = 0;
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:  {
    #####:  529:    if ( players[i] > players[j] )
        -:  530:	  {
    #####:  531:	    j = i;
        -:  532:	  }
        -:  533:  }
    #####:  534:  highScore = players[j];
        -:  535:
        -:  536:  //set winners in array to 1 and rest to 0
    #####:  537:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  538:  {
    #####:  539:    if ( players[i] == highScore )
        -:  540:	  {
    #####:  541:	    players[i] = 1;
        -:  542:	  }
        -:  543:    else
        -:  544:	  {
    #####:  545:	    players[i] = 0;
        -:  546:	  }
        -:  547:  }
        -:  548:
    #####:  549:  return 0;
        -:  550:}
        -:  551:
      233:  552:int drawCard(int player, struct gameState *state)
        -:  553:{	
        -:  554:  int count;
        -:  555:  int deckCounter;
      233:  556:  if (state->deckCount[player] <= 0)//Deck is empty
        -:  557:  {
        -:  558:    //Step 1 Shuffle the discard pile back into a deck
        -:  559:    int i;
        -:  560:    //Move discard to deck
      489:  561:    for (i = 0; i < state->discardCount[player];i++)
        -:  562:    {
      479:  563:      state->deck[player][i] = state->discard[player][i];
      479:  564:      state->discard[player][i] = -1;
        -:  565:    }
        -:  566:
       10:  567:    state->deckCount[player] = state->discardCount[player];
       10:  568:    state->discardCount[player] = 0;//Reset discard
        -:  569:
        -:  570:    //Shufffle the deck
       10:  571:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  572:   
        -:  573:    if (DEBUG)
        -:  574:    {//Debug statements
        -:  575:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  576:    }
        -:  577:    
       10:  578:    state->discardCount[player] = 0;
        -:  579:
        -:  580:    //Step 2 Draw Card
       10:  581:    count = state->handCount[player];//Get current player's hand count
        -:  582:    
        -:  583:    if (DEBUG)
        -:  584:    {//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:    
       10:  588:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  589:
       10:  590:    if (deckCounter == 0)
    #####:  591:      return -1;
        -:  592:
       10:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  594:    state->deckCount[player]--;
       10:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
        -:  598:  else
        -:  599:  {
      223:  600:    int count = state->handCount[player];//Get current hand count for player
        -:  601:    int deckCounter;
        -:  602:    if (DEBUG)
        -:  603:    {//Debug statements
        -:  604:      printf("Current hand count: %d\n", count);
        -:  605:    }
        -:  606:
      223:  607:    deckCounter = state->deckCount[player];//Create holder for the deck count
      223:  608:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      223:  609:    state->deckCount[player]--;
      223:  610:    state->handCount[player]++;//Increment hand count
        -:  611:  }
        -:  612:
      233:  613:  return 0;
        -:  614:}
        -:  615:
    #####:  616:int getCost(int cardNumber)
        -:  617:{
    #####:  618:  switch( cardNumber ) 
        -:  619:  {
        -:  620:    case curse:
    #####:  621:      return 0;
        -:  622:    case estate:
    #####:  623:      return 2;
        -:  624:    case duchy:
    #####:  625:      return 5;
        -:  626:    case province:
    #####:  627:      return 8;
        -:  628:    case copper:
    #####:  629:      return 0;
        -:  630:    case silver:
    #####:  631:      return 3;
        -:  632:    case gold:
    #####:  633:      return 6;
        -:  634:    case adventurer:
    #####:  635:      return 6;
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    case feast:
    #####:  639:      return 4;
        -:  640:    case gardens:
    #####:  641:      return 4;
        -:  642:    case mine:
    #####:  643:      return 5;
        -:  644:    case remodel:
    #####:  645:      return 4;
        -:  646:    case smithy:
    #####:  647:      return 4;
        -:  648:    case village:
    #####:  649:      return 3;
        -:  650:    case baron:
    #####:  651:      return 4;
        -:  652:    case great_hall:
    #####:  653:      return 3;
        -:  654:    case minion:
    #####:  655:      return 5;
        -:  656:    case steward:
    #####:  657:      return 3;
        -:  658:    case tribute:
    #####:  659:      return 5;
        -:  660:    case ambassador:
    #####:  661:      return 3;
        -:  662:    case cutpurse:
    #####:  663:      return 4;
        -:  664:    case embargo: 
    #####:  665:      return 2;
        -:  666:    case outpost:
    #####:  667:      return 5;
        -:  668:    case salvager:
    #####:  669:      return 4;
        -:  670:    case sea_hag:
    #####:  671:      return 4;
        -:  672:    case treasure_map:
    #####:  673:      return 4;
        -:  674:  }
        -:  675:	
    #####:  676:  return -1;
        -:  677:}
        -:  678:
       22:  679:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  680:{
        -:  681:  int i;
        -:  682:  int j;
        -:  683:  int k;
        -:  684:  int x;
        -:  685:  int index;
       22:  686:  int currentPlayer = whoseTurn(state);
       22:  687:  int nextPlayer = currentPlayer + 1;
        -:  688:
       22:  689:  int tributeRevealedCards[2] = {-1, -1};
        -:  690:  int temphand[MAX_HAND];// moved above the if statement
        -:  691:  //int drawntreasure=0;
        -:  692:  //int cardDrawn;
        -:  693:  //int z = 0;// this is the counter for the temp hand
       22:  694:  if (nextPlayer > (state->numPlayers - 1))
        -:  695:  {
    #####:  696:    nextPlayer = 0;
        -:  697:  }
        -:  698:  
        -:  699:	
        -:  700:  //uses switch to select card and perform actions
       22:  701:  switch( card ) 
        -:  702:  {
        -:  703:    case adventurer:
       10:  704:      return playAdventurer(state);
        -:  705:			
        -:  706:    case council_room:
        6:  707:      return playCouncil_Room(state, handPos);
        -:  708:			
        -:  709:    case feast:
        -:  710:      //gain card with cost up to 5
        -:  711:      //Backup hand
    #####:  712:      for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  713:      {
    #####:  714:	      temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  715:	      state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  716:      }
        -:  717:      //Backup hand
        -:  718:
        -:  719:      //Update Coins for Buy
    #####:  720:      updateCoins(currentPlayer, state, 5);
    #####:  721:      x = 1;//Condition to loop on
    #####:  722:      while( x == 1) //Buy one card
        -:  723:      {
    #####:  724:	      if (supplyCount(choice1, state) <= 0)
        -:  725:        {
        -:  726:	        if (DEBUG)
        -:  727:	          printf("None of that card left, sorry!\n");
        -:  728:          if (DEBUG)
        -:  729:          {
        -:  730:	          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  731:	        }
        -:  732:	      }
    #####:  733:	      else if (state->coins < getCost(choice1))
        -:  734:        {
    #####:  735:	        printf("That card is too expensive!\n");
        -:  736:
        -:  737:	        if (DEBUG)
        -:  738:          {
        -:  739:	          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	        }
        -:  741:	      }
        -:  742:	      else
        -:  743:        {
        -:  744:      	  if (DEBUG)
        -:  745:          {
        -:  746:	          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:	        }
        -:  748:
    #####:  749:	        gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  750:      	  x = 0;//No more buying cards
        -:  751:
        -:  752:      	  if (DEBUG)
        -:  753:          {
        -:  754:      	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:      	  }
        -:  756:	      }
        -:  757:      }     
        -:  758:
        -:  759:      //Reset Hand
    #####:  760:      for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  761:      {
    #####:  762:	      state->hand[currentPlayer][i] = temphand[i];
    #####:  763:	      temphand[i] = -1;
        -:  764:      }
        -:  765:      //Reset Hand
        -:  766:      			
    #####:  767:      return 0;
        -:  768:			
        -:  769:    case gardens:
    #####:  770:      return -1;
        -:  771:			
        -:  772:    case mine:
    #####:  773:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:
    #####:  775:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  776:	    {
    #####:  777:	      return -1;
        -:  778:	    }
        -:  779:		
    #####:  780:      if (choice2 > treasure_map || choice2 < curse)
        -:  781:	    {
    #####:  782:	      return -1;
        -:  783:	    }
        -:  784:
    #####:  785:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  786:	    {
    #####:  787:	      return -1;
        -:  788:	    }
        -:  789:
    #####:  790:      gainCard(choice2, state, 2, currentPlayer);
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
        -:  794:
        -:  795:      //discard trashed card
    #####:  796:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  797:	    {
    #####:  798:	      if (state->hand[currentPlayer][i] == j)
        -:  799:	      {
    #####:  800:	        discardCard(i, currentPlayer, state, 0);			
    #####:  801:	        break;
        -:  802:	      }
        -:  803:	    }
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case remodel:
    #####:  808:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  809:
    #####:  810:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  811:	    {
    #####:  812:	      return -1;
        -:  813:	    }
        -:  814:
    #####:  815:      gainCard(choice2, state, 0, currentPlayer);
        -:  816:
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
        -:  819:
        -:  820:      //discard trashed card
    #####:  821:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  822:	    {
    #####:  823:	      if (state->hand[currentPlayer][i] == j)
        -:  824:	      {
    #####:  825:	        discardCard(i, currentPlayer, state, 0);			
    #####:  826:	        break;
        -:  827:	      }
        -:  828:	    }
        -:  829:
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case smithy:
        4:  833:      return playSmithy(state, handPos);
        -:  834:		
        -:  835:    case village:
        2:  836:      return playVillage(state, handPos);
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0)//Boolean true or going to discard an estate
        -:  841:      {
    #####:  842:	      int p = 0;//Iterator for hand!
    #####:  843:	      int card_not_discarded = 1;//Flag for discard set!
    #####:  844:	      while(card_not_discarded)
        -:  845:        {
    #####:  846:	        if (state->hand[currentPlayer][p] == estate)//Found an estate card!
        -:  847:          {
    #####:  848:	          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  849:      	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  850:      	    state->discardCount[currentPlayer]++;
    #####:  851:      	    for (;p < state->handCount[currentPlayer]; p++)
        -:  852:            {
    #####:  853:      	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  854:      	    }
    #####:  855:      	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  856:      	    state->handCount[currentPlayer]--;
    #####:  857:      	    card_not_discarded = 0;//Exit the loop
        -:  858:      	  }
    #####:  859:  	      else if (p > state->handCount[currentPlayer])
        -:  860:          {
        -:  861:  	        if(DEBUG) 
        -:  862:            {
        -:  863:  	          printf("No estate cards in your hand, invalid choice\n");
        -:  864:  	          printf("Must gain an estate if there are any\n");
        -:  865:  	        }
    #####:  866:  	        if (supplyCount(estate, state) > 0)
        -:  867:            {
    #####:  868:  	          gainCard(estate, state, 0, currentPlayer);
    #####:  869:  	          state->supplyCount[estate]--;//Decrement estates
    #####:  870:  	          if (supplyCount(estate, state) == 0)
        -:  871:              {
    #####:  872:  		          isGameOver(state);
        -:  873:  	          }
        -:  874:  	        }
    #####:  875:  	        card_not_discarded = 0;//Exit the loop
        -:  876:  	      }
        -:  877:	        else
        -:  878:          {
    #####:  879:	          p++;//Next card
        -:  880:	        }
        -:  881:	      }
        -:  882:      }
        -:  883:			else
        -:  884:      {
    #####:  885:	      if (supplyCount(estate, state) > 0)
        -:  886:        {
    #####:  887:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  888:	        state->supplyCount[estate]--;//Decrement Estates
    #####:  889:	        if (supplyCount(estate, state) == 0)
        -:  890:          {
    #####:  891:	          isGameOver(state);
        -:  892:	        }
        -:  893:	      }
        -:  894:      }
        -:  895:	          
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case great_hall:
    #####:  899:      return playGreat_Hall(state, handPos);
        -:  900:		
        -:  901:    case minion:
        -:  902:      //+1 action
    #####:  903:      state->numActions++;
        -:  904:			
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
        -:  907:			
    #####:  908:      if (choice1)		//+2 coins
        -:  909:	    {
    #####:  910:	      state->coins = state->coins + 2;
        -:  911:	    }
        -:  912:			
    #####:  913:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  914:	    {
        -:  915:	      //discard hand
    #####:  916:	      while(numHandCards(state) > 0)
        -:  917:	      {
    #####:  918:	        discardCard(handPos, currentPlayer, state, 0);
        -:  919:	      }
        -:  920:				
        -:  921:	      //draw 4
    #####:  922:	      for (i = 0; i < 4; i++)
        -:  923:	      {
    #####:  924:	        drawCard(currentPlayer, state);
        -:  925:	      }
        -:  926:				
        -:  927:    	  //other players discard hand and redraw if hand size > 4
    #####:  928:    	  for (i = 0; i < state->numPlayers; i++)
        -:  929:    	  {
    #####:  930:    	    if (i != currentPlayer)
        -:  931:    		  {
    #####:  932:    		    if ( state->handCount[i] > 4 )
        -:  933:    		    {
        -:  934:    		      //discard hand
    #####:  935:    		      while( state->handCount[i] > 0 )
        -:  936:    			    {
    #####:  937:    			      discardCard(handPos, i, state, 0);
        -:  938:    			    }
        -:  939:    							
        -:  940:    		      //draw 4
    #####:  941:    		      for (j = 0; j < 4; j++)
        -:  942:    			    {
    #####:  943:    			      drawCard(i, state);
        -:  944:    			    }
        -:  945:    		    }
        -:  946:    		  }
        -:  947:    	  }			
        -:  948:	    }
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
        -:  953:	    {
        -:  954:    	  //+2 cards
    #####:  955:    	  drawCard(currentPlayer, state);
    #####:  956:    	  drawCard(currentPlayer, state);
        -:  957:	    }
    #####:  958:      else if (choice1 == 2)
        -:  959:	    {
        -:  960:	      //+2 coins
    #####:  961:    	  state->coins = state->coins + 2;
        -:  962:    	}
        -:  963:      else
        -:  964:	    {
        -:  965:    	  //trash 2 cards in hand
    #####:  966:    	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:    	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	    }
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -:  976:      {
    #####:  977:	      if (state->deckCount[nextPlayer] > 0)
        -:  978:        {
    #####:  979:	        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  980:	        state->deckCount[nextPlayer]--;
        -:  981:	      }
    #####:  982:  	    else if (state->discardCount[nextPlayer] > 0)
        -:  983:        {
    #####:  984:  	      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  985:  	      state->discardCount[nextPlayer]--;
        -:  986:  	    }
        -:  987:  	    else
        -:  988:        {
        -:  989:      	  //No Card to Reveal
        -:  990:      	  if (DEBUG)
        -:  991:          {
        -:  992:      	    printf("No cards to reveal\n");
        -:  993:      	  }
        -:  994:  	    }
        -:  995:      }
        -:  996:	    
        -:  997:      else
        -:  998:      {
    #####:  999:	      if (state->deckCount[nextPlayer] == 0)
        -: 1000:        {
    #####: 1001:	        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1002:          {
    #####: 1003:      	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1004:      	    state->deckCount[nextPlayer]++;
    #####: 1005:      	    state->discard[nextPlayer][i] = -1;
    #####: 1006:      	    state->discardCount[nextPlayer]--;
        -: 1007:	        } 
    #####: 1008:	        shuffle(nextPlayer,state);//Shuffle the deck
        -: 1009:	      } 
    #####: 1010:      	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1012:      	state->deckCount[nextPlayer]--;
    #####: 1013:      	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1014:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1015:      	state->deckCount[nextPlayer]--;
        -: 1016:      }    
        -: 1017:		       
    #####: 1018:      if (tributeRevealedCards[0] == tributeRevealedCards[1])//If we have a duplicate card, just drop one 
        -: 1019:      {
    #####: 1020:      	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1021:      	state->playedCardCount++;
    #####: 1022:      	tributeRevealedCards[1] = -1;
        -: 1023:      }
        -: 1024:
    #####: 1025:      for (i = 0; i <= 2; i ++)
        -: 1026:      {
    #####: 1027:	      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)//Treasure cards
        -: 1028:        {
    #####: 1029:	        state->coins += 2;
        -: 1030:	      }	    
    #####: 1031:      	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)//Victory Card Found
        -: 1032:        {
    #####: 1033:      	  drawCard(currentPlayer, state);
    #####: 1034:      	  drawCard(currentPlayer, state);
        -: 1035:      	}
        -: 1036:      	else//Action Card
        -: 1037:        {
    #####: 1038:      	  state->numActions = state->numActions + 2;
        -: 1039:      	}
        -: 1040:      }
        -: 1041:	    
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case ambassador:
    #####: 1045:      j = 0;		//used to check if player has enough cards to discard
        -: 1046:
    #####: 1047:      if (choice2 > 2 || choice2 < 0)
        -: 1048:	    {
    #####: 1049:	      return -1;				
        -: 1050:	    }
        -: 1051:
    #####: 1052:      if (choice1 == handPos)
        -: 1053:	    {
    #####: 1054:	      return -1;
        -: 1055:	    }
        -: 1056:
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:    	{
    #####: 1059:    	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1060:    	  {
    #####: 1061:    	    j++;
        -: 1062:    	  }
        -: 1063:    	}
    #####: 1064:      if (j < choice2)
        -: 1065:    	{
    #####: 1066:    	  return -1;				
        -: 1067:    	}
        -: 1068:
        -: 1069:      if (DEBUG) 
        -: 1070:	      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1071:
        -: 1072:      //increase supply count for choosen card by amount being discarded
    #####: 1073:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1074:			
        -: 1075:      //each other player gains a copy of revealed card
    #####: 1076:      for (i = 0; i < state->numPlayers; i++)
        -: 1077:    	{
    #####: 1078:    	  if (i != currentPlayer)
        -: 1079:    	    {
    #####: 1080:    	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1081:    	    }
        -: 1082:    	}
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1086:
        -: 1087:      //trash copies of cards returned to supply
    #####: 1088:      for (j = 0; j < choice2; j++)
        -: 1089:    	{
    #####: 1090:    	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:    	  {
    #####: 1092:    	    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1093:      		{
    #####: 1094:      		  discardCard(i, currentPlayer, state, 1);
    #####: 1095:      		  break;
        -: 1096:      		}
        -: 1097:    	  }
        -: 1098:    	}			
        -: 1099:
    #####: 1100:      return 0;
        -: 1101:		
        -: 1102:    case cutpurse:
    #####: 1103:      updateCoins(currentPlayer, state, 2);
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:    	{
    #####: 1106:    	  if (i != currentPlayer)
        -: 1107:    	  {
    #####: 1108:    	    for (j = 0; j < state->handCount[i]; j++)
        -: 1109:    		  {
    #####: 1110:    		    if (state->hand[i][j] == copper)
        -: 1111:    		    {
    #####: 1112:    		      discardCard(j, i, state, 0);
    #####: 1113:    		      break;
        -: 1114:    		    }
    #####: 1115:    		    if (j == state->handCount[i])
        -: 1116:    		    {
    #####: 1117:    		      for (k = 0; k < state->handCount[i]; k++)
        -: 1118:      			  {
        -: 1119:      			    if (DEBUG)
        -: 1120:      			      printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1121:      			  }	
    #####: 1122:    		      break;
        -: 1123:    		    }		
        -: 1124:    		  }
        -: 1125:    		}	
        -: 1126:    	}				
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:
        -: 1133:		
        -: 1134:    case embargo: 
        -: 1135:      //+2 Coins
    #####: 1136:      state->coins = state->coins + 2;
        -: 1137:			
        -: 1138:      //see if selected pile is in play
    #####: 1139:      if ( state->supplyCount[choice1] == -1 )
        -: 1140:    	{
    #####: 1141:    	  return -1;
        -: 1142:    	}
        -: 1143:			
        -: 1144:      //add embargo token to selected supply pile
    #####: 1145:      state->embargoTokens[choice1]++;
        -: 1146:			
        -: 1147:      //trash card
    #####: 1148:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1149:      return 0;
        -: 1150:		
        -: 1151:    case outpost:
        -: 1152:      //set outpost flag
    #####: 1153:      state->outpostPlayed++;
        -: 1154:			
        -: 1155:      //discard card
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1157:      return 0;
        -: 1158:		
        -: 1159:    case salvager:
        -: 1160:      //+1 buy
    #####: 1161:      state->numBuys++;
        -: 1162:			
    #####: 1163:      if (choice1)
        -: 1164:    	{
        -: 1165:    	  //gain coins equal to trashed card
    #####: 1166:    	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1167:    	  //trash card
    #####: 1168:    	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1169:    	}
        -: 1170:			
        -: 1171:      //discard card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case sea_hag:
    #####: 1176:      for (i = 0; i < state->numPlayers; i++)
        -: 1177:      {
    #####: 1178:      	if (i != currentPlayer)
        -: 1179:        {
    #####: 1180:      	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1181:          state->deckCount[i]--;
    #####: 1182:      	  state->discardCount[i]++;
    #####: 1183:      	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1184:      	}
        -: 1185:      }
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case treasure_map:
        -: 1189:      //search hand for another treasure_map
    #####: 1190:      index = -1;
    #####: 1191:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1192:    	{
    #####: 1193:    	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1194:    	    {
    #####: 1195:    	      index = i;
    #####: 1196:    	      break;
        -: 1197:    	    }
        -: 1198:    	}
    #####: 1199:      if (index > -1)
        -: 1200:    	{
        -: 1201:    	  //trash both treasure cards
    #####: 1202:    	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1203:    	  discardCard(index, currentPlayer, state, 1);
        -: 1204:
        -: 1205:    	  //gain 4 Gold cards
    #####: 1206:    	  for (i = 0; i < 4; i++)
        -: 1207:    	  {
    #####: 1208:    	    gainCard(gold, state, 1, currentPlayer);
        -: 1209:    	  }
        -: 1210:    				
        -: 1211:    	  //return success
    #####: 1212:    	  return 1;
        -: 1213:    	}
        -: 1214:			
        -: 1215:      //no second treasure_map found in hand
    #####: 1216:      return -1;
        -: 1217:    }
        -: 1218:	
    #####: 1219:  return -1;
        -: 1220:}
        -: 1221:
       16: 1222:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1223:{
        -: 1224:  //if card is not trashed, added to Played pile 
       16: 1225:  if (trashFlag < 1)
        -: 1226:  {
        -: 1227:    //add card to played pile
       15: 1228:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1229:    state->playedCardCount++;
        -: 1230:  }
        -: 1231:	
        -: 1232:  //set played card to -1
       16: 1233:  state->hand[currentPlayer][handPos] = -1;
        -: 1234:	
        -: 1235:  //remove card from player's hand
       16: 1236:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1237:  {
        -: 1238:    //reduce number of cards in hand
        2: 1239:    state->handCount[currentPlayer]--;
        -: 1240:  }
       14: 1241:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1242:  {
        -: 1243:    //reduce number of cards in hand
    #####: 1244:    state->handCount[currentPlayer]--;
        -: 1245:  }
        -: 1246:  else 	
        -: 1247:  {
        -: 1248:    //replace discarded card with last card in hand
       14: 1249:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1250:    //set last card to -1
       14: 1251:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1252:    //reduce number of cards in hand
       14: 1253:    state->handCount[currentPlayer]--;
        -: 1254:  }
        -: 1255:	
       16: 1256:  return 0;
        -: 1257:}
        -: 1258:
    #####: 1259:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1260:{
        -: 1261:  //Note: supplyPos is enum of choosen card
        -: 1262:	
        -: 1263:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1264:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1265:  {
    #####: 1266:    return -1;
        -: 1267:  }
        -: 1268:	
        -: 1269:  //added card for [whoseTurn] current player:
        -: 1270:  // toFlag = 0 : add to discard
        -: 1271:  // toFlag = 1 : add to deck
        -: 1272:  // toFlag = 2 : add to hand
        -: 1273:
    #####: 1274:  if (toFlag == 1)
        -: 1275:  {
    #####: 1276:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1277:    state->deckCount[player]++;
        -: 1278:  }
    #####: 1279:  else if (toFlag == 2)
        -: 1280:  {
    #####: 1281:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1282:    state->handCount[player]++;
        -: 1283:  }
        -: 1284:  else
        -: 1285:  {
    #####: 1286:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1287:    state->discardCount[player]++;
        -: 1288:  }
        -: 1289:	
        -: 1290:  //decrease number in supply pile
    #####: 1291:  state->supplyCount[supplyPos]--;
        -: 1292:	 
    #####: 1293:  return 0;
        -: 1294:}
        -: 1295:
       29: 1296:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1297:{
        -: 1298:  int i;
        -: 1299:	
        -: 1300:  //reset coin count
       29: 1301:  state->coins = 0;
        -: 1302:
        -: 1303:  //add coins for each Treasure card in player's hand
      174: 1304:  for (i = 0; i < state->handCount[player]; i++)
        -: 1305:  {
      145: 1306:    if (state->hand[player][i] == copper)
        -: 1307:	  {
      109: 1308:	    state->coins += 1;
        -: 1309:	  }
       36: 1310:    else if (state->hand[player][i] == silver)
        -: 1311:  	{
        2: 1312:  	  state->coins += 2;
        -: 1313:  	}
       34: 1314:    else if (state->hand[player][i] == gold)
        -: 1315:  	{
        1: 1316:  	  state->coins += 3;
        -: 1317:  	}	
        -: 1318:  }	
        -: 1319:
        -: 1320:  //add bonus
       29: 1321:  state->coins += bonus;
        -: 1322:
       29: 1323:  return 0;
        -: 1324:}
        -: 1325:
        -: 1326://Bug Introduced
       10: 1327:int playAdventurer(struct gameState *state)
        -: 1328:{ 
       10: 1329:  int currentPlayer = whoseTurn(state);
        -: 1330:  int temphand[MAX_HAND];// moved above the if statement
       10: 1331:  int drawntreasure=0;
        -: 1332:  int cardDrawn;
       10: 1333:  int z = 0;
        -: 1334:  
       70: 1335:  while(drawntreasure<2)
        -: 1336:  {
       50: 1337:    if (state->deckCount[currentPlayer] <1)//if the deck is empty we need to shuffle discard and add to deck
        -: 1338:    {
        5: 1339:    shuffle(currentPlayer, state);
        -: 1340:    }
       50: 1341:    drawCard(currentPlayer, state);
       50: 1342:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1343:    //if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) *ORIGINAL CODE*
       50: 1344:    if (cardDrawn == copper || cardDrawn == gold) //*BUG INTRODUCED* - Omit check for silver
       20: 1345:      drawntreasure++;
        -: 1346:    else
        -: 1347:    {
       30: 1348:      temphand[z]=cardDrawn;
       30: 1349:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       30: 1350:      z++;
        -: 1351:    }
        -: 1352:  }
        -: 1353:  
       50: 1354:  while(z-1>=0)
        -: 1355:  {
       30: 1356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       30: 1357:    z=z-1;
        -: 1358:  }
       10: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362://Bug Introduced
        4: 1363:int playSmithy(struct gameState *state, int handPos)
        -: 1364:{
        -: 1365:  int i;
        4: 1366:  int currentPlayer = whoseTurn(state);
        -: 1367:  
        -: 1368:  //+3 Cards
        -: 1369:  //for (i = 0; i < 3; i++) *ORIGINAL CODE*
       20: 1370:  for (i = 0; i <= 3; i++) //*BUG INTRODUCED* - wrong logical operator -> Off-By-One error 
        -: 1371:  {
       16: 1372:    drawCard(currentPlayer, state);
        -: 1373:  }
        -: 1374:      
        -: 1375:  //discard card from hand
        4: 1376:  discardCard(handPos, currentPlayer, state, 0);
        4: 1377:  return 0;
        -: 1378:}
        -: 1379:
        2: 1380:int playVillage(struct gameState *state, int handPos)
        -: 1381:{
        2: 1382:  int currentPlayer = whoseTurn(state);
        -: 1383: 
        -: 1384:  //+1 Card
        2: 1385:  drawCard(currentPlayer, state);
        -: 1386:      
        -: 1387:  //+2 Actions
        2: 1388:  state->numActions = state->numActions + 2;
        -: 1389:      
        -: 1390:  //discard played card from hand
        2: 1391:  discardCard(handPos, currentPlayer, state, 0);
        2: 1392:  return 0;
        -: 1393:}
        -: 1394:
        -: 1395://Bug Introduced
    #####: 1396:int playGreat_Hall(struct gameState *state, int handPos)
        -: 1397:{
    #####: 1398:  int currentPlayer = whoseTurn(state);
        -: 1399:
        -: 1400:  //+1 Card
    #####: 1401:  drawCard(currentPlayer, state);
        -: 1402:
        -: 1403:  //+1 Actions
        -: 1404:  //state->numActions++; *ORIGINAL CODE*
    #####: 1405:  state->numBuys++; //*BUG INTRODUCED* - increment wrong variable
        -: 1406:      
        -: 1407:  //discard card from hand
    #####: 1408:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1409:  return 0;
        -: 1410:}
        -: 1411:
        -: 1412://Bug Introduced
        6: 1413:int playCouncil_Room(struct gameState *state, int handPos)
        -: 1414:{
        -: 1415:  int i;
        6: 1416:  int currentPlayer = whoseTurn(state);
        -: 1417:
        -: 1418:  //+4 Cards
       30: 1419:  for (i = 0; i < 4; i++)
        -: 1420:  {
       24: 1421:    drawCard(currentPlayer, state);
        -: 1422:  }
        -: 1423:      
        -: 1424:  //+1 Buy
        6: 1425:  state->numBuys++;
        -: 1426:      
        -: 1427:  //Each other player draws a card
       24: 1428:  for (i = 0; i < state->numPlayers; i++)
        -: 1429:  {
        -: 1430:    //if ( i != currentPlayer ) *ORIGINAL CODE*
       18: 1431:    if ( i == currentPlayer ) //*BUG INTRODUCED* - Wrong logical operator
        -: 1432:    {
        6: 1433:      drawCard(i, state);
        -: 1434:    }
        -: 1435:  }
        -: 1436:      
        -: 1437:  //put played card in played card pile
        6: 1438:  discardCard(handPos, currentPlayer, state, 0);
        -: 1439:      
        6: 1440:  return 0;
        -: 1441:}
        -: 1442:
        -: 1443://end of dominion.c
        -: 1444:
