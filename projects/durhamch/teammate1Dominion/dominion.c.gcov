        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 6446215 returned 100% blocks executed 100%
  6446215:    8:int compare(const void* a, const void* b) {
  6446215:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
   882736:   10:    return 1;
  5563479:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
  1645641:   12:    return -1;
  3917838:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 206246 returned 100% blocks executed 100%
   206246:   16:struct gameState* newGame() {
   206246:   17:  struct gameState* g = malloc(sizeof(struct gameState));
   206246:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 103923 returned 100% blocks executed 95%
   103923:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   103923:   44:  SelectStream(1);
call    0 returned 100%
   103923:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
   103923:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   103923:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  1143153:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
 11431530:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
 10392300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   103923:   73:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:    {
    34407:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    69516:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
    34507:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    35009:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   103923:   87:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:    {
    34407:   89:      state->supplyCount[estate] = 8;
    34407:   90:      state->supplyCount[duchy] = 8;
    34407:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    69516:   95:      state->supplyCount[estate] = 12;
    69516:   96:      state->supplyCount[duchy] = 12;
    69516:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   103923:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   103923:  102:  state->supplyCount[silver] = 40;
   103923:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  2182383:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
 17147295:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
 16108065:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  1143153:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
   103923:  115:		  if (numPlayers == 2){ 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    34407:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    69516:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   935307:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  1039230:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 15068835:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   416294:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
   312371:  140:      state->deckCount[i] = 0;
  1249484:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   937113:  143:	  state->deck[i][j] = estate;
   937113:  144:	  state->deckCount[i]++;
        -:  145:	}
  2498968:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
  2186597:  148:	  state->deck[i][j] = copper;
  2186597:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   416294:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
   312371:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   416294:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   312371:  166:      state->handCount[i] = 0;
   312371:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  2909844:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
  2805921:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   103923:  182:  state->outpostPlayed = 0;
   103923:  183:  state->phase = 0;
   103923:  184:  state->numActions = 1;
   103923:  185:  state->numBuys = 1;
   103923:  186:  state->playedCardCount = 0;
   103923:  187:  state->whoseTurn = 0;
   103923:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   623538:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   519615:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
   103923:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
   103923:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 314197 returned 100% blocks executed 100%
   314197:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   314197:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   314197:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      339:  210:    return -1;
   313858:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  4005356:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  3377640:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  3377640:  216:    newDeck[newDeckPos] = state->deck[player][card];
  3377640:  217:    newDeckPos++;
 32926584:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
 29548944:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  3377640:  221:    state->deckCount[player]--;
        -:  222:  }
  3691498:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  3377640:  224:    state->deck[player][i] = newDeck[i];
  3377640:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   313858:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 164254 returned 100% blocks executed 100%
   164254:  320:int supplyCount(int card, struct gameState *state) {
   164254:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 7635 returned 100% blocks executed 100%
     7635:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     7635:  326:  int count = 0;
        -:  327:
   742386:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  329:    {
   734751:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  331:    }
        -:  332:
    48721:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  334:    {
    41086:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  336:    }
        -:  337:
   982613:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  339:    {
   974978:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  341:    }
        -:  342:
     7635:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 101915 returned 100% blocks executed 100%
   101915:  346:int whoseTurn(struct gameState *state) {
   101915:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10387 returned 100% blocks executed 82%
    10387:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    10387:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    10387:  401:  j = 0;
   270062:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
   259675:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  405:	{
    10387:  406:	  j++;
        -:  407:	}
        -:  408:    }
    10387:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    10387:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 1100 returned 100% blocks executed 100%
     1100:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     1100:  420:  int score = 0;
        -:  421:  //score from hand
     7068:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  423:    {
     5968:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
     5968:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     5968:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     5968:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     5968:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
     5968:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   102148:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  434:    {
   101048:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   102148:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  445:    {
   101048:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
   101048:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   101048:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
   101048:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
        -:  452:    }
        -:  453:
     1100:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 100 returned 100% blocks executed 100%
      100:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      500:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
      400:  467:      if (i >= state->numPlayers)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  468:	{
      100:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
      300:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100%
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
      100:  478:  j = 0;
      500:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  480:    {
      400:  481:      if (players[i] > players[j])
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -:  482:	{
       93:  483:	  j = i;
        -:  484:	}
        -:  485:    }
      100:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
      100:  489:  currentPlayer = whoseTurn(state);
call    0 returned 100%
      500:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  491:    {
      400:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
        -:  493:	{
       71:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
      100:  499:  j = 0;
      500:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  501:    {
      400:  502:      if ( players[i] > players[j] )
branch  0 taken 24% (fallthrough)
branch  1 taken 77%
        -:  503:	{
       94:  504:	  j = i;
        -:  505:	}
        -:  506:    }
      100:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      500:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  511:    {
      400:  512:      if ( players[i] == highScore )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  513:	{
      100:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
      300:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
      100:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 521071 returned 100% blocks executed 100%
   521071:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   521071:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1179:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
      711:  534:      state->deck[player][i] = state->discard[player][i];
      711:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      468:  538:    state->deckCount[player] = state->discardCount[player];
      468:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      468:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
      468:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      468:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      468:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
      468:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      468:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      468:  559:    if (deckCounter == 0)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
      325:  560:      return -1;
        -:  561:
      143:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      143:  563:    state->deckCount[player]--;
      143:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   520603:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
   520603:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   520603:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   520603:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   520603:  576:    state->deckCount[player]--;
   520603:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   520746:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 2002 returned 100% blocks executed 100%
     2002:  583:int getCost(int cardNumber)
        -:  584:{
     2002:  585:  switch( cardNumber ) 
branch  0 taken 2%
branch  1 taken 3%
branch  2 taken 2%
branch  3 taken 3%
branch  4 taken 2%
branch  5 taken 2%
branch  6 taken 2%
branch  7 taken 2%
branch  8 taken 3%
branch  9 taken 1%
branch 10 taken 3%
branch 11 taken 2%
branch 12 taken 2%
branch 13 taken 2%
branch 14 taken 2%
branch 15 taken 2%
branch 16 taken 3%
branch 17 taken 2%
branch 18 taken 2%
branch 19 taken 2%
branch 20 taken 2%
branch 21 taken 2%
branch 22 taken 3%
branch 23 taken 2%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 36%
        -:  586:    {
        -:  587:    case curse:
       36:  588:      return 0;
        -:  589:    case estate:
       66:  590:      return 2;
        -:  591:    case duchy:
       36:  592:      return 5;
        -:  593:    case province:
       56:  594:      return 8;
        -:  595:    case copper:
       48:  596:      return 0;
        -:  597:    case silver:
       38:  598:      return 3;
        -:  599:    case gold:
       46:  600:      return 6;
        -:  601:    case adventurer:
       40:  602:      return 6;
        -:  603:    case council_room:
       58:  604:      return 5;
        -:  605:    case feast:
       22:  606:      return 4;
        -:  607:    case gardens:
       66:  608:      return 4;
        -:  609:    case mine:
       44:  610:      return 5;
        -:  611:    case remodel:
       50:  612:      return 4;
        -:  613:    case smithy:
       42:  614:      return 4;
        -:  615:    case village:
       34:  616:      return 3;
        -:  617:    case baron:
       44:  618:      return 4;
        -:  619:    case great_hall:
       62:  620:      return 3;
        -:  621:    case minion:
       48:  622:      return 5;
        -:  623:    case steward:
       46:  624:      return 3;
        -:  625:    case tribute:
       50:  626:      return 5;
        -:  627:    case ambassador:
       34:  628:      return 3;
        -:  629:    case cutpurse:
       34:  630:      return 4;
        -:  631:    case embargo: 
       66:  632:      return 2;
        -:  633:    case outpost:
       50:  634:      return 5;
        -:  635:    case salvager:
       52:  636:      return 4;
        -:  637:    case sea_hag:
       60:  638:      return 4;
        -:  639:    case treasure_map:
       56:  640:      return 4;
        -:  641:    }
        -:  642:	
      718:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 101815 returned 100% blocks executed 32%
   101815:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   101815:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   101815:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   101815:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   101815:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
   101815:  660:  int z = 0;// this is the counter for the temp hand
   101815:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        7:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:   //play adventurer card
   101815:  666:   if(card == adventurer)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  667:	   adventurerCard(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
call    0 never executed
        -:  668:
   101815:  669:   if(card == smithy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  670:	   smithyCard(currentPlayer, state, handPos, i);
call    0 never executed
        -:  671:
   101815:  672:   if(card == council_room)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  673:	   councilRoomCard(currentPlayer, state, handPos, i);
call    0 never executed
        -:  674:
   101815:  675:   if(card == feast)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  676:	   feastCard(state, currentPlayer, temphand, choice1, i, x);
call    0 never executed
        -:  677:
   101815:  678:   if(card == mine)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  679:	   mineCard(state, currentPlayer, choice1, choice2, curse, handPos, j, i);
call    0 never executed
        -:  680:
        -:  681:  //uses switch to select card and perform actions
   101815:  682:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 98%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 2%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
        -:  683:    {
        -:  684:    
        -:  685:    case gardens:
    #####:  686:      return -1;
        -:  687:			
        -:  688:   
        -:  689:			
        -:  690:    case remodel:
    #####:  691:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  692:
    #####:  693:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  694:	{
    #####:  695:	  return -1;
        -:  696:	}
        -:  697:
    #####:  698:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  699:
        -:  700:      //discard card from hand
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  702:
        -:  703:      //discard trashed card
    #####:  704:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  705:	{
    #####:  706:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  707:	    {
    #####:  708:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  709:	      break;
        -:  710:	    }
        -:  711:	}
        -:  712:
        -:  713:
    #####:  714:      return 0;
        -:  715:		
        -:  716:  
        -:  717:		
        -:  718:    case village:
        -:  719:      //+1 Card
    #####:  720:      drawCard(currentPlayer, state);
call    0 never executed
        -:  721:			
        -:  722:      //+2 Actions
    #####:  723:      state->numActions = state->numActions + 2;
        -:  724:			
        -:  725:      //discard played card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  727:      return 0;
        -:  728:		
        -:  729:    case baron:
   100007:  730:      state->numBuys++;//Increase buys by 1!
   100007:  731:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    49830:  732:	int p = 0;//Iterator for hand!
    49830:  733:	int card_not_discarded = 1;//Flag for discard set!
   288769:  734:	while(card_not_discarded){
branch  0 taken 79%
branch  1 taken 21%
   189109:  735:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
    38477:  736:	    state->coins += 4;//Add 4 coins to the amount of coins
    38477:  737:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    38477:  738:	    state->discardCount[currentPlayer]++;
   115225:  739:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
    76748:  740:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  741:	    }
    38477:  742:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    38477:  743:	    state->handCount[currentPlayer]--;
    38477:  744:	    card_not_discarded = 0;//Exit the loop
        -:  745:	  }
   150632:  746:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
    11353:  747:	    if(DEBUG) {
        -:  748:	      printf("No estate cards in your hand, invalid choice\n");
        -:  749:	      printf("Must gain an estate if there are any\n");
        -:  750:	    }
    11353:  751:	    if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
     9474:  752:	      gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
     9474:  753:	      state->supplyCount[estate]--;//Decrement estates
     9474:  754:	      if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
     1883:  755:		isGameOver(state);
call    0 returned 100%
        -:  756:	      }
        -:  757:	    }
    11353:  758:	    card_not_discarded = 0;//Exit the loop
        -:  759:	  }
        -:  760:			    
        -:  761:	  else{
   139279:  762:	    p++;//Next card
        -:  763:	  }
        -:  764:	}
        -:  765:      }
        -:  766:			    
        -:  767:      else{
    50177:  768:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
    41888:  769:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
    41888:  770:	  state->supplyCount[estate]--;//Decrement Estates
    41888:  771:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
     8504:  772:	    isGameOver(state);
call    0 returned 100%
        -:  773:	  }
        -:  774:	}
        -:  775:      }
        -:  776:	    
        -:  777:      
   100007:  778:      return 0;
        -:  779:		
        -:  780:    case great_hall:
        -:  781:      //+1 Card
    #####:  782:      drawCard(currentPlayer, state);
call    0 never executed
        -:  783:			
        -:  784:      //+1 Actions
    #####:  785:      state->numActions++;
        -:  786:			
        -:  787:      //discard card from hand
    #####:  788:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  789:      return 0;
        -:  790:		
        -:  791:    case minion:
        -:  792:      //+1 action
    #####:  793:      state->numActions++;
        -:  794:			
        -:  795:      //discard card from hand
    #####:  796:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  797:			
    #####:  798:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  state->coins = state->coins + 2;
        -:  801:	}
        -:  802:			
    #####:  803:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  804:	{
        -:  805:	  //discard hand
    #####:  806:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  807:	    {
    #####:  808:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  809:	    }
        -:  810:				
        -:  811:	  //draw 4
    #####:  812:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  813:	    {
    #####:  814:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  815:	    }
        -:  816:				
        -:  817:	  //other players discard hand and redraw if hand size > 4
    #####:  818:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  819:	    {
    #####:  820:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  821:		{
    #####:  822:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  823:		    {
        -:  824:		      //discard hand
    #####:  825:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  826:			{
    #####:  827:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  828:			}
        -:  829:							
        -:  830:		      //draw 4
    #####:  831:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  832:			{
    #####:  833:			  drawCard(i, state);
call    0 never executed
        -:  834:			}
        -:  835:		    }
        -:  836:		}
        -:  837:	    }
        -:  838:				
        -:  839:	}
    #####:  840:      return 0;
        -:  841:		
        -:  842:    case steward:
    #####:  843:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  844:	{
        -:  845:	  //+2 cards
    #####:  846:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  847:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  848:	}
    #####:  849:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  850:	{
        -:  851:	  //+2 coins
    #####:  852:	  state->coins = state->coins + 2;
        -:  853:	}
        -:  854:      else
        -:  855:	{
        -:  856:	  //trash 2 cards in hand
    #####:  857:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  858:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  859:	}
        -:  860:			
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  863:      return 0;
        -:  864:		
        -:  865:    case tribute:
     1808:  866:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       53:  867:	if (state->deckCount[nextPlayer] > 0){
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
       26:  868:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       26:  869:	  state->deckCount[nextPlayer]--;
        -:  870:	}
       27:  871:	else if (state->discardCount[nextPlayer] > 0){
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       26:  872:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       26:  873:	  state->discardCount[nextPlayer]--;
        -:  874:	}
        -:  875:	else{
        -:  876:	  //No Card to Reveal
        1:  877:	  if (DEBUG){
        -:  878:	    printf("No cards to reveal\n");
        -:  879:	  }
        -:  880:	}
        -:  881:      }
        -:  882:	    
        -:  883:      else{
     1755:  884:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
     2106:  885:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1755:  886:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     1755:  887:	    state->deckCount[nextPlayer]++;
     1755:  888:	    state->discard[nextPlayer][i] = -1;
     1755:  889:	    state->discardCount[nextPlayer]--;
        -:  890:	  }
        -:  891:			    
      351:  892:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 returned 100%
        -:  893:	} 
     1755:  894:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1755:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1755:  896:	state->deckCount[nextPlayer]--;
     1755:  897:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1755:  898:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1755:  899:	state->deckCount[nextPlayer]--;
        -:  900:      }    
        -:  901:		       
     1808:  902:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       92:  903:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       92:  904:	state->playedCardCount++;
       92:  905:	tributeRevealedCards[1] = -1;
        -:  906:      }
        -:  907:
     7232:  908:      for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     5911:  909:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
      487:  910:	  state->coins += 2;
        -:  911:	}
        -:  912:		    
     5636:  913:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 taken 97% (fallthrough)
branch  7 taken 3%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
      699:  914:	  drawCard(currentPlayer, state);
call    0 returned 100%
      699:  915:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  916:	}
        -:  917:	else{//Action Card
     4238:  918:	  state->numActions = state->numActions + 2;
        -:  919:	}
        -:  920:      }
        -:  921:	    
     1808:  922:      return 0;
        -:  923:		
        -:  924:    case ambassador:
    #####:  925:      j = 0;		//used to check if player has enough cards to discard
        -:  926:
    #####:  927:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  928:	{
    #####:  929:	  return -1;				
        -:  930:	}
        -:  931:
    #####:  932:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  940:	    {
    #####:  941:	      j++;
        -:  942:	    }
        -:  943:	}
    #####:  944:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  return -1;				
        -:  947:	}
        -:  948:
    #####:  949:      if (DEBUG) 
        -:  950:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  951:
        -:  952:      //increase supply count for choosen card by amount being discarded
    #####:  953:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  954:			
        -:  955:      //each other player gains a copy of revealed card
    #####:  956:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  959:	    {
    #####:  960:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  961:	    }
        -:  962:	}
        -:  963:
        -:  964:      //discard played card from hand
    #####:  965:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  966:
        -:  967:      //trash copies of cards returned to supply
    #####:  968:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  969:	{
    #####:  970:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  971:	    {
    #####:  972:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  973:		{
    #####:  974:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  975:		  break;
        -:  976:		}
        -:  977:	    }
        -:  978:	}			
        -:  979:
    #####:  980:      return 0;
        -:  981:		
        -:  982:    case cutpurse:
        -:  983:
    #####:  984:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  985:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  990:		{
    #####:  991:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  992:		    {
    #####:  993:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  994:		      break;
        -:  995:		    }
    #####:  996:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  997:		    {
    #####:  998:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  999:			{
    #####: 1000:			  if (DEBUG)
        -: 1001:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1002:			}	
    #####: 1003:		      break;
        -: 1004:		    }		
        -: 1005:		}
        -: 1006:					
        -: 1007:	    }
        -: 1008:				
        -: 1009:	}				
        -: 1010:
        -: 1011:      //discard played card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1013:
    #####: 1014:      return 0;
        -: 1015:
        -: 1016:		
        -: 1017:    case embargo: 
        -: 1018:      //+2 Coins
    #####: 1019:      state->coins = state->coins + 2;
        -: 1020:			
        -: 1021:      //see if selected pile is in play
    #####: 1022:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  return -1;
        -: 1025:	}
        -: 1026:			
        -: 1027:      //add embargo token to selected supply pile
    #####: 1028:      state->embargoTokens[choice1]++;
        -: 1029:			
        -: 1030:      //trash card
    #####: 1031:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case outpost:
        -: 1035:      //set outpost flag
    #####: 1036:      state->outpostPlayed++;
        -: 1037:			
        -: 1038:      //discard card
    #####: 1039:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case salvager:
        -: 1043:      //+1 buy
    #####: 1044:      state->numBuys++;
        -: 1045:			
    #####: 1046:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
        -: 1048:	  //gain coins equal to trashed card
    #####: 1049:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1050:	  //trash card
    #####: 1051:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1052:	}
        -: 1053:			
        -: 1054:      //discard card
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case sea_hag:
    #####: 1059:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1060:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1061:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1062:	  state->discardCount[i]++;
    #####: 1063:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1064:	}
        -: 1065:      }
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case treasure_map:
        -: 1069:      //search hand for another treasure_map
    #####: 1070:      index = -1;
    #####: 1071:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
    #####: 1073:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	    {
    #####: 1075:	      index = i;
    #####: 1076:	      break;
        -: 1077:	    }
        -: 1078:	}
    #####: 1079:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1080:	{
        -: 1081:	  //trash both treasure cards
    #####: 1082:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1083:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1084:
        -: 1085:	  //gain 4 Gold cards
    #####: 1086:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1087:	    {
    #####: 1088:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1089:	    }
        -: 1090:				
        -: 1091:	  //return success
    #####: 1092:	  return 1;
        -: 1093:	}
        -: 1094:			
        -: 1095:      //no second treasure_map found in hand
    #####: 1096:      return -1;
        -: 1097:    }
        -: 1098:	
    #####: 1099:  return -1;
        -: 1100:}
        -: 1101:
function discardCard called 4 returned 100% blocks executed 75%
        4: 1102:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1103:{
        -: 1104:	
        -: 1105:  //if card is not trashed, added to Played pile 
        4: 1106:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1107:    {
        -: 1108:      //add card to played pile
        4: 1109:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1110:      state->playedCardCount++;
        -: 1111:    }
        -: 1112:	
        -: 1113:  //set played card to -1
        4: 1114:  state->hand[currentPlayer][handPos] = -1;
        -: 1115:	
        -: 1116:  //remove card from player's hand
        4: 1117:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1118:    {
        -: 1119:      //reduce number of cards in hand
    #####: 1120:      state->handCount[currentPlayer]--;
        -: 1121:    }
        4: 1122:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1123:    {
        -: 1124:      //reduce number of cards in hand
    #####: 1125:      state->handCount[currentPlayer]--;
        -: 1126:    }
        -: 1127:  else 	
        -: 1128:    {
        -: 1129:      //replace discarded card with last card in hand
        4: 1130:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1131:      //set last card to -1
        4: 1132:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1133:      //reduce number of cards in hand
        4: 1134:      state->handCount[currentPlayer]--;
        -: 1135:    }
        -: 1136:	
        4: 1137:  return 0;
        -: 1138:}
        -: 1139:
function gainCard called 51362 returned 100% blocks executed 70%
    51362: 1140:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1141:{
        -: 1142:  //Note: supplyPos is enum of choosen card
        -: 1143:	
        -: 1144:  //check if supply pile is empty (0) or card is not used in game (-1)
    51362: 1145:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1146:    {
    #####: 1147:      return -1;
        -: 1148:    }
        -: 1149:	
        -: 1150:  //added card for [whoseTurn] current player:
        -: 1151:  // toFlag = 0 : add to discard
        -: 1152:  // toFlag = 1 : add to deck
        -: 1153:  // toFlag = 2 : add to hand
        -: 1154:
    51362: 1155:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1156:    {
    #####: 1157:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1158:      state->deckCount[player]++;
        -: 1159:    }
    51362: 1160:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1161:    {
    #####: 1162:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1163:      state->handCount[player]++;
        -: 1164:    }
        -: 1165:  else
        -: 1166:    {
    51362: 1167:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    51362: 1168:      state->discardCount[player]++;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //decrease number in supply pile
    51362: 1172:  state->supplyCount[supplyPos]--;
        -: 1173:	 
    51362: 1174:  return 0;
        -: 1175:}
        -: 1176:
function updateCoins called 104923 returned 100% blocks executed 100%
   104923: 1177:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1178:{
        -: 1179:  int i;
        -: 1180:	
        -: 1181:  //reset coin count
   104923: 1182:  state->coins = 0;
        -: 1183:
        -: 1184:  //add coins for each Treasure card in player's hand
   867432: 1185:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -: 1186:    {
   762509: 1187:      if (state->hand[player][i] == copper)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -: 1188:	{
   424650: 1189:	  state->coins += 1;
        -: 1190:	}
   337859: 1191:      else if (state->hand[player][i] == silver)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1192:	{
     9107: 1193:	  state->coins += 2;
        -: 1194:	}
   328752: 1195:      else if (state->hand[player][i] == gold)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1196:	{
     9068: 1197:	  state->coins += 3;
        -: 1198:	}	
        -: 1199:    }	
        -: 1200:
        -: 1201:  //add bonus
   104923: 1202:  state->coins += bonus;
        -: 1203:
   104923: 1204:  return 0;
        -: 1205:}
        -: 1206:
function adventurerCard called 4 returned 100% blocks executed 100%
        4: 1207:int adventurerCard(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z){
        -: 1208:
        -: 1209:
       54: 1210:	while(drawntreasure<3){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       46: 1211:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        7: 1212:		  shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1213:		}
        -: 1214:
       46: 1215:		drawCard(currentPlayer, state);
call    0 returned 100%
       46: 1216:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       58: 1217:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 86% (fallthrough)
branch  3 taken 14%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
       12: 1218:		  drawntreasure++;
        -: 1219:		else{
       34: 1220:		  temphand[z]=cardDrawn;
       34: 1221:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       34: 1222:		  z++;
        -: 1223:		}
        -: 1224:   }
       42: 1225:		 while(z-1>=0){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -: 1226:     
        -: 1227:  
       34: 1228:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       34: 1229:		z=z-1;
        -: 1230:		 }
        4: 1231:		 return 0;
        -: 1232:}
        -: 1233:
function smithyCard called 4 returned 100% blocks executed 100%
        4: 1234:int smithyCard(int currentPlayer, struct gameState *state, int handPos, int i){
        -: 1235:	//+3 Cards
       16: 1236:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1237:	{
       12: 1238:		 drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1239:	}
        -: 1240:			
        -: 1241:	//discard card from hand
        4: 1242:	discardCard(handPos--, currentPlayer, state, 0);
call    0 returned 100%
        4: 1243:	return 0;
        -: 1244:}
        -: 1245:
function councilRoomCard called 0 returned 0% blocks executed 0%
    #####: 1246:int councilRoomCard(int currentPlayer, struct gameState *state, int handPos, int i){
        -: 1247:		//+4 Cards
    #####: 1248:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1249:		{
    #####: 1250:		  drawCard(currentPlayer, state);
call    0 never executed
        -: 1251:		}
        -: 1252:			
        -: 1253:		 //+1 Buy
    #####: 1254:		 state->numBuys++;
        -: 1255:			
        -: 1256:		 //Each other player draws a card
    #####: 1257:		 for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1258:		{
    #####: 1259:		  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1260:		    {
    #####: 1261:			 drawCard(i, state);
call    0 never executed
        -: 1262:		    }
        -: 1263:		}
        -: 1264:			
        -: 1265:		 //put played card in played card pile
    #####: 1266:		 discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1267:			
    #####: 1268:		 return 0;
        -: 1269:}
        -: 1270:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1271:int feastCard(struct gameState *state, int currentPlayer, int temphand[], int choice1, int i, int x){
        -: 1272:	//gain card with cost up to 5
        -: 1273:      //Backup hand
    #####: 1274:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1275:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1276:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1277:      }
        -: 1278:      //Backup hand
        -: 1279:
        -: 1280:      //Update Coins for Buy
    #####: 1281:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1282:      x = 1;//Condition to loop on
    #####: 1283:      while( x <= 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1284:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1285:	  if (DEBUG)
        -: 1286:	    printf("None of that card left, sorry!\n");
        -: 1287:
    #####: 1288:	  if (DEBUG){
        -: 1289:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1290:	  }
        -: 1291:	}
    #####: 1292:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1293:	  printf("That card is too expensive!\n");
call    0 never executed
        -: 1294:
    #####: 1295:	  if (DEBUG){
        -: 1296:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1297:	  }
        -: 1298:	}
        -: 1299:	else{
        -: 1300:
    #####: 1301:	  if (DEBUG){
        -: 1302:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1303:	  }
        -: 1304:
    #####: 1305:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1306:	  x = 0;//No more buying cards
        -: 1307:
    #####: 1308:	  if (DEBUG){
        -: 1309:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1310:	  }
        -: 1311:
        -: 1312:	}
        -: 1313:      }     
        -: 1314:
        -: 1315:      //Reset Hand
    #####: 1316:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1317:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1318:	temphand[i] = -1;
        -: 1319:      }
        -: 1320:      //Reset Hand
        -: 1321:      			
    #####: 1322:      return 0;
        -: 1323:}
        -: 1324:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1325:int mineCard(struct gameState *state, int currentPlayer, int choice1, int choice2, int curse, int handPos, int j, int i){
    #####: 1326: j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1327:
    #####: 1328:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1329:	{
    #####: 1330:	  return -1;
        -: 1331:	}
        -: 1332:		
    #####: 1333:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1334:	{
    #####: 1335:	  return -1;
        -: 1336:	}
        -: 1337:
    #####: 1338:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1339:	{
    #####: 1340:	  return -1;
        -: 1341:	}
        -: 1342:
    #####: 1343:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1344:
        -: 1345:      //discard card from hand
    #####: 1346:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1347:
        -: 1348:      //discard trashed card
    #####: 1349:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1350:	{
    #####: 1351:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1352:	    {
    #####: 1353:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1354:	      break;
        -: 1355:	    }
        -: 1356:	}
        -: 1357:			
    #####: 1358:      return 0;
        -: 1359:}
        -: 1360://end of dominion.c
        -: 1361:
