Megan Fanning
Jennifer Mendoza
Susan Eldridge
*  Explain testIsValid Function of UrlValidator test code.
The testIsValid() is first called within the main function. Then, testIsValid() passes in 2 parameters to testIsValid(Object[] testObjects, long options). The first line creates the URLValidator that will be used for testing. Options is passed in as a parameter that holds the set of current validation options. Two assert statements are included to ensure that a known valid website, www.google.com, is passed through the isValid function and returns true. 
Next, the URL is built in the for loop. Each part of the URL, scheme, authority, path, port, and query are built here using the result pair object located near the bottom of the file. This object contains a boolean value which indicates if that part of the URL is true or false. The "expected" variable is first set to true and switches to false once it encounters a false boolean in the object. The different parts of the url are converted into a string with toString(), built into Java. Next, the url string is passed to the isValid() function found in UrlValidator.java file which checks the url for valid ASCII characters, correct url format, and validates each part of the URL. The boolean value returned is assigned to the variable result. The next if statement prints out the URL that was tested to the console if result (the boolean value returned when isValid is called on the URL) returns true. The assertequals ensures that the expected boolean value and the result boolean value are equal. The print status can be changed to true if the person debugging would like to see if there is a bug in the testing program. X would print if the expected variable (initially set to true, but should change to false if any part is false)` does not match the result. The entire URL is printed if printIndex is also set to true. Once this function ends, we are back in testIsValid() which calls setUp() to reset testPartsIndex[].
* How many total number of urls are testing by testIsValid
The Program is testing combinations of schemes, authorities, ports, paths, options and queries.
There are 9 possible choices for scheme, 19 choices for authority, 7 choices for port, 10 path choices,15 options and 3 queries (28350 total URLs to be tested). Of those there are 4 schemes, 7 authorities, 5 ports, 6 paths 9 option and 3 queries which are marked as true indicating that each of these is valid parts of the URL.
* Explain how the tester is building all the urls. Give an example of valid url being tested and an invalid url being tested by testIsValid() method.  
The tester builds up urls with 4 parts: scheme, authority, path and query <scheme>://<authority><path>? <query>.  There is a for loop which iterates over the array of testParts, appending each aspect (scheme, authority, etc) to create a string which contains the URL to test. Additionally as each aspect of the URL is appended on the boolean value part of the ResultsPair is checked to confirm if the URL is valid or not.
Then the combined parts are passed to setup,testIsValid. then testIsValidScheme
valid url: http://www.google.com/
invalid url: http:256.256.256.256:-1/..//../file 
*  Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. 
We actually felt that the card tests were a good reflection of a “real world” test case because it has both practical and business specification. The Dominion project was less complex than a real world project which might have hundreds of use cases and possible test cases. The Apache commons validator has to be able to test a much more extensive set of possible URLs whereas the input for  a single function in Dominion can be more easily randomized.