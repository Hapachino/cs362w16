File 'dominion.c'
No executable lines
Removing 'dominion.c.gcov'

File 'dominion.c'
Lines executed:1.43% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //--------initialize supply-----------//
        -:   70:  //set number of Curse cards
    #####:   71:  if (numPlayers == 2)
        -:   72:    {
    #####:   73:      state->supplyCount[curse] = 10;
        -:   74:    }
    #####:   75:  else if (numPlayers == 3)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 20;
        -:   78:    }
        -:   79:  else
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 30;
        -:   82:    }
        -:   83:
        -:   84:  //set number of Victory cards
    #####:   85:  if (numPlayers == 2)
        -:   86:    {
    #####:   87:      state->supplyCount[estate] = 8;
    #####:   88:      state->supplyCount[duchy] = 8;
    #####:   89:      state->supplyCount[province] = 8;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[estate] = 12;
    #####:   94:      state->supplyCount[duchy] = 12;
    #####:   95:      state->supplyCount[province] = 12;
        -:   96:    }
        -:   97:
        -:   98:  //set number of Treasure cards
    #####:   99:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  100:  state->supplyCount[silver] = 40;
    #####:  101:  state->supplyCount[gold] = 30;
        -:  102:
        -:  103:  //set number of Kingdom cards
    #####:  104:  for (i = adventurer; i <= treasure_map; i++)   //loop all cards
        -:  105:    {
    #####:  106:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  107:	{
    #####:  108:	  if (kingdomCards[j] == i)
        -:  109:	    {
        -:  110:	      //check if card is a 'Victory' Kingdom card
    #####:  111:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  112:		{
    #####:  113:		  if (numPlayers == 2){ 
    #####:  114:		    state->supplyCount[i] = 8; 
        -:  115:		  }
    #####:  116:		  else{ state->supplyCount[i] = 12; }
        -:  117:		}
        -:  118:	      else
        -:  119:		{
    #####:  120:		  state->supplyCount[i] = 10;
        -:  121:		}
    #####:  122:	      break;
        -:  123:	    }
        -:  124:	  else    //card is not in the set choosen for the game
        -:  125:	    {
    #####:  126:	      state->supplyCount[i] = -1;
        -:  127:	    }
        -:  128:	}
        -:  129:
        -:  130:    }
        -:  131:  //-------supply intilization complete------------//
        -:  132:
        -:  133:  //set player decks
    #####:  134:  for (i = 0; i < numPlayers; i++)
        -:  135:    {
    #####:  136:      state->deckCount[i] = 0;
    #####:  137:      for (j = 0; j < 3; j++)
        -:  138:	{
    #####:  139:	  state->deck[i][j] = estate;
    #####:  140:	  state->deckCount[i]++;
        -:  141:	}
    #####:  142:      for (j = 3; j < 10; j++)
        -:  143:	{
    #####:  144:	  state->deck[i][j] = copper;
    #####:  145:	  state->deckCount[i]++;		
        -:  146:	}
        -:  147:    }
        -:  148:
        -:  149:  //shuffle player decks
    #####:  150:  for (i = 0; i < numPlayers; i++)
        -:  151:    {
    #####:  152:      if ( shuffle(i, state) < 0 )
        -:  153:	{
    #####:  154:	  return -1;
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //draw player hands
    #####:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {  
        -:  161:      //initialize hand size to zero
    #####:  162:      state->handCount[i] = 0;
    #####:  163:      state->discardCount[i] = 0;
        -:  164:      //draw 5 cards
        -:  165:      // for (j = 0; j < 5; j++)
        -:  166:      //	{
        -:  167:      //	  drawCard(i, state);
        -:  168:      //	}
        -:  169:    }
        -:  170:  
        -:  171:  //set embargo tokens to 0 for all supply piles
    #####:  172:  for (i = 0; i <= treasure_map; i++)
        -:  173:    {
    #####:  174:      state->embargoTokens[i] = 0;
        -:  175:    }
        -:  176:
        -:  177:  //initialize first player's turn
    #####:  178:  state->outpostPlayed = 0;
    #####:  179:  state->phase = 0;
    #####:  180:  state->numActions = 1;
    #####:  181:  state->numBuys = 1;
    #####:  182:  state->playedCardCount = 0;
    #####:  183:  state->whoseTurn = 0;
    #####:  184:  state->handCount[state->whoseTurn] = 0;
        -:  185:  //int it; move to top
        -:  186:
        -:  187:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  188:  for (it = 0; it < 5; it++){
    #####:  189:    drawCard(state->whoseTurn, state);
        -:  190:  }
        -:  191:
    #####:  192:  updateCoins(state->whoseTurn, state, 0);
        -:  193:
    #####:  194:  return 0;
        -:  195:}
        -:  196:
        -:  197:/***----shuffle cards ---***/
    #####:  198:int shuffle(int player, struct gameState *state) {
        -:  199: 
        -:  200:
        -:  201:  int newDeck[MAX_DECK];
    #####:  202:  int newDeckPos = 0;
        -:  203:  int card;
        -:  204:  int i;
        -:  205:
    #####:  206:  if (state->deckCount[player] < 1)
    #####:  207:    return -1;
    #####:  208:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  209:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  210:
    #####:  211:  while (state->deckCount[player] > 0) {
    #####:  212:    card = floor(Random() * state->deckCount[player]);
    #####:  213:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  214:    newDeckPos++;
    #####:  215:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  216:      state->deck[player][i] = state->deck[player][i+1];
        -:  217:    }
    #####:  218:    state->deckCount[player]--;
        -:  219:  }
    #####:  220:  for (i = 0; i < newDeckPos; i++) {
    #####:  221:    state->deck[player][i] = newDeck[i];
    #####:  222:    state->deckCount[player]++;
        -:  223:  }
        -:  224:
    #####:  225:  return 0;
        -:  226:}
        -:  227:
        -:  228://***---- Play Card ----***//
    #####:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  230:{	
        -:  231:  int card;
    #####:  232:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:
        -:  234:  //check if it is the right phase
    #####:  235:  if (state->phase != 0)
        -:  236:    {
    #####:  237:      return -1;
        -:  238:    }
        -:  239:	
        -:  240:  //check if player has enough actions
    #####:  241:  if ( state->numActions < 1 )
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //get card played
    #####:  247:  card = handCard(handPos, state);
        -:  248:	
        -:  249:  //check if selected card is an action
    #####:  250:  if ( card < adventurer || card > treasure_map )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //play card
    #####:  256:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //reduce number of actions
    #####:  262:  state->numActions--;
        -:  263:
        -:  264:  //update coins (Treasure cards may be added with card draws)
    #####:  265:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  266:	
    #####:  267:  return 0;
        -:  268:}
        -:  269:
        -:  270:/***---- Buy Card ----***/
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
    #####:  278:  who = state->whoseTurn;
        -:  279:
    #####:  280:  if (state->numBuys < 1){
        -:  281:    if (DEBUG)
        -:  282:      printf("You do not have any buys left\n");
    #####:  283:    return -1;
    #####:  284:  } else if (supplyCount(supplyPos, state) <1){
        -:  285:    if (DEBUG)
        -:  286:      printf("There are not any of that type of card left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (state->coins < getCost(supplyPos)){
        -:  289:    if (DEBUG) 
        -:  290:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  291:    return -1;
        -:  292:  } else {
    #####:  293:    state->phase=1;
        -:  294:    //state->supplyCount[supplyPos]--;
    #####:  295:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  296:  
    #####:  297:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  298:    state->numBuys--;
        -:  299:    if (DEBUG)
        -:  300:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  301:  }
        -:  302:
        -:  303:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  304:  //state->discardCount[who]++;
        -:  305:    
    #####:  306:  return 0;
        -:  307:}
        -:  308:
    #####:  309:int numHandCards(struct gameState *state) {
    #####:  310:  return state->handCount[ whoseTurn(state) ];
        -:  311:}
        -:  312:
    #####:  313:int handCard(int handPos, struct gameState *state) {
    #####:  314:  int currentPlayer = whoseTurn(state);
    #####:  315:  return state->hand[currentPlayer][handPos];
        -:  316:}
        -:  317:
        4:  318:int supplyCount(int card, struct gameState *state) {
        4:  319:  return state->supplyCount[card];
        -:  320:}
        -:  321:
        -:  322:/***--- full deck count ---***/
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
    #####:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349://***--- End Turn ---***//
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:/***---- is Game Over ----***/
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
        -:  402:  //TODO removed magic number  25=10 kingdom cards + 3 coin types+ 2 providence 
    #####:  403:  for (i = 0; i < 25; i++){
    #####:  404:      if (state->supplyCount[i] == 0){
    #####:  405:	    j++;
        -:  406:	  }
        -:  407:  }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
        -:  416:/***---- score for ----***/
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:/***--- get winners  ---***/
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479: for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:/***---- draw card ----***/
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583:/***---- get cost ----***/
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646://****--- Card Functions ---****//
        -:  647://------------Adventurer-----------------//
        -:  648://draw cards until two treasure cards are revealed (a silver, copper or gold)
        -:  649:// discard non treasure cards drawn
    #####:  650:void adventurerCard(int currentPlayer, struct gameState *state){
        -:  651:    int cardDrawn;
    #####:  652:    int drawntreasure=0;
    #####:  653:    int extraCardsCount=0;
        -:  654:    int temphand[MAX_HAND];
        -:  655:
    #####:  656:    while(drawntreasure<2){
        -:  657:        //if the deck is empty we need to shuffle discard and add to deck
    #####:  658:        if (state->deckCount[currentPlayer] <1){
    #####:  659:	        shuffle(currentPlayer, state);
        -:  660:	    }
    #####:  661:	    drawCard(currentPlayer, state);
    #####:  662:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
        -:  663:        //top card of hand is most recently drawn card.
        -:  664:
    #####:  665:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  666:	        drawntreasure++;
        -:  667:	    else{
    #####:  668:	        temphand[extraCardsCount]=cardDrawn;
    #####:  669:	        state->handCount[currentPlayer]--; //this should just remove the top card (most recently drawn).
    #####:  670:	        extraCardsCount++;
        -:  671:	    }
        -:  672:    }
    #####:  673:    while(extraCardsCount-1>=0){
    #####:  674:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[extraCardsCount-1];
        -:  675:         // discard all cards in play that have been drawn
    #####:  676:	    extraCardsCount=extraCardsCount-1;
        -:  677:      }
    #####:  678:}
        -:  679://-----------------Feast Card--------------------------//
        -:  680://allows player to gain a card with a cost of 5 or less
    #####:  681:void feastCard(int currentPlayer,struct gameState *state,int choice1){
    #####:  682:    int x=1;//condition to loop on to check if buy has occured
        -:  683:    int i;//counting variable for backuphand loop
        -:  684:    int temphand[MAX_HAND];//back up of plays current hand
        -:  685:
        -:  686:    //Backup hand
    #####:  687:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  688:	    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  689:	    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  690:    }
        -:  691:    //Backup hand
        -:  692:
        -:  693:    //Update Coins for Buy
    #####:  694:    updateCoins(currentPlayer, state, 5);
        -:  695:    
    #####:  696:    while( x == 1) {//Buy one card
    #####:  697:	    if (supplyCount(choice1, state) <= 0){
        -:  698:	        if (DEBUG)
        -:  699:	            printf("None of that card left, sorry!\n");
        -:  700:
        -:  701:	        if (DEBUG){
        -:  702:	            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:	        }
        -:  704:	    }
    #####:  705:	    else if (state->coins < getCost(choice1)){
    #####:  706:	        printf("That card is too expensive!\n");
        -:  707:
        -:  708:	        if (DEBUG){
        -:  709:	            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:	        }
        -:  711:	    }
        -:  712:	    else{
        -:  713:            if (DEBUG){
        -:  714:	            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:	        }
        -:  716:
    #####:  717:	        gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  718:
        -:  719:	        if (DEBUG){
        -:  720:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	        }
        -:  722:
        -:  723:	    }
        -:  724:    }     
        -:  725:
        -:  726:    //Reset Hand
    #####:  727:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  728:	    state->hand[currentPlayer][i] = temphand[i];
    #####:  729:	    temphand[i] = -1;
        -:  730:     }
        -:  731:     //Reset Hand		
    #####:  732:}
        -:  733:/*---------------------Smithy------------------------------*/
        -:  734://gives player +3 cards from their deck
    #####:  735:void smithyCard(int currentPlayer,struct gameState *state,int handPos){
        -:  736:    int i;
    #####:  737:    for (i = 0; i < 3; i++){
    #####:  738:	    drawCard(currentPlayer, state);
    #####:  739:        discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:	}
        -:  742:    //discard smithy card from hand
    #####:  743:    discardCard(handPos, currentPlayer, state, 0);
        -:  744:		
    #####:  745:}		
        -:  746:/*------------------------Village-------------------------------*/
        -:  747://plus 1 card plus 2 actions
    #####:  748:void villageCard(int currentPlayer,struct gameState *state,int handPos){
        -:  749:    //+1 Card
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:			
        -:  752:    //+2 Actions
    #####:  753:    state->numActions = state->numBuys + 2;
        -:  754:			
        -:  755:    //discard played card from hand
    #####:  756:    discardCard(handPos, currentPlayer, state, 0);
    #####:  757:}
        -:  758:/*-----------------------Baron----------------------------------*
        -:  759:* +1 Buy, You may discard an Estate card. 
        -:  760:* If you do, +4 coins. Otherwise, gain an Estate card.
        -:  761:*/
        2:  762:void baronCard(int currentPlayer,struct gameState *state,int choice1){
        2:  763:    state->numBuys++;//Increase buys by 1!
        -:  764:     
        2:  765:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  766:	    int p = 0;//Iterator for hand!
    #####:  767:	    int card_not_discarded = 1;//Flag for discard set!
        -:  768:
    #####:  769:        while(card_not_discarded){
    #####:  770:	        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  771:	            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  772:	            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  773:	            state->discardCount[currentPlayer]++;
        -:  774:	    
    #####:  775:                for (;p < state->handCount[currentPlayer]; p++){
    #####:  776:	                state->hand[currentPlayer][p] = state->hand[currentPlayer][p];
        -:  777:	            }
    #####:  778:	            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  779:	            state->handCount[currentPlayer]--;
    #####:  780:	            card_not_discarded = 0;//Exit the loop
        -:  781:	        }
    #####:  782:	        else if (p > state->handCount[currentPlayer]){//if handCount is greater than 1 but no estate in hand
        -:  783:	            if(DEBUG) {
        -:  784:	                printf("No estate cards in your hand, invalid choice\n");
        -:  785:	                printf("Must gain an estate if there are any\n");
        -:  786:	            }
    #####:  787:	            if (supplyCount(estate, state) > 0){
    #####:  788:	                gainCard(estate, state, 0, currentPlayer);
    #####:  789:	                state->supplyCount[estate]--;//Decrement estates	      
        -:  790:	            }
    #####:  791:	            card_not_discarded = 0;//Exit the loop
        -:  792:	        }		    
        -:  793:	        else{
    #####:  794:	            p++;//Next card
        -:  795:	        }
        -:  796:	    }
        -:  797:    }		    
        -:  798:    else{//if player opts to gain a estate card
        2:  799:	    if (supplyCount(estate, state) > 0){
    #####:  800:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  801:	        state->supplyCount[estate]--;//Decrement Estates
        -:  802:	        
        -:  803:	    }
        -:  804:    }
        2:  805:    if (supplyCount(estate, state) == 0){
    #####:  806:        isGameOver(state);
        -:  807:    }
        2:  808:}	    
        -:  809:
        -:  810:
        -:  811://****-*--------- Card Effect ----------*-****//
    #####:  812:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  813:{
        -:  814:  int i;
        -:  815:  int j;
        -:  816:  int k;
        -:  817:  int index;
    #####:  818:  int currentPlayer = whoseTurn(state);
    #####:  819:  int nextPlayer = currentPlayer + 1;
        -:  820:
    #####:  821:  int tributeRevealedCards[2] = {-1, -1};
        -:  822:  //int temphand[MAX_HAND];// moved above the if statement
    #####:  823:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  824:    nextPlayer = 0;
        -:  825:  }
        -:  826:  
        -:  827:	
        -:  828:  //uses switch to select card and perform actions
    #####:  829:  switch( card ) 
        -:  830:    {
        -:  831:    case adventurer:
    #####:  832:        adventurerCard(currentPlayer,state);
    #####:  833:	    break;
        -:  834:		
        -:  835:    case council_room:
        -:  836:      //+4 Cards
    #####:  837:      for (i = 0; i < 4; i++)
        -:  838:	{
    #####:  839:	  drawCard(currentPlayer, state);
        -:  840:	}
        -:  841:			
        -:  842:      //+1 Buy
    #####:  843:      state->numBuys++;
        -:  844:			
        -:  845:      //Each other player draws a card
    #####:  846:      for (i = 0; i < state->numPlayers; i++)
        -:  847:	{
    #####:  848:	  if ( i != currentPlayer )
        -:  849:	    {
    #####:  850:	      drawCard(i, state);
        -:  851:	    }
        -:  852:	}
        -:  853:			
        -:  854:      //put played card in played card pile
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:			
    #####:  857:      return 0;
        -:  858:			
        -:  859:    case feast:
        -:  860:        //gain card with cost up to 5
    #####:  861:        feastCard(currentPlayer,state,choice1);
    #####:  862:        break;
        -:  863:
        -:  864:    case gardens:
    #####:  865:      return -1;
        -:  866:			
        -:  867:    case mine:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:		
    #####:  875:      if (choice2 > treasure_map || choice2 < curse)
        -:  876:	{
    #####:  877:	  return -1;
        -:  878:	}
        -:  879:
    #####:  880:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  881:	{
    #####:  882:	  return -1;
        -:  883:	}
        -:  884:
    #####:  885:      gainCard(choice2, state, 2, currentPlayer);
        -:  886:
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
        -:  889:
        -:  890:      //discard trashed card
    #####:  891:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  892:	{
    #####:  893:	  if (state->hand[currentPlayer][i] == j)
        -:  894:	    {
    #####:  895:	      discardCard(i, currentPlayer, state, 0);			
    #####:  896:	      break;
        -:  897:	    }
        -:  898:	}
        -:  899:			
    #####:  900:      return 0;
        -:  901:			
        -:  902:    case remodel:
    #####:  903:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:
    #####:  905:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  906:	{
    #####:  907:	  return -1;
        -:  908:	}
        -:  909:
    #####:  910:      gainCard(choice2, state, 0, currentPlayer);
        -:  911:
        -:  912:      //discard card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
        -:  914:
        -:  915:      //discard trashed card
    #####:  916:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  917:	{
    #####:  918:	  if (state->hand[currentPlayer][i] == j)
        -:  919:	    {
    #####:  920:	      discardCard(i, currentPlayer, state, 0);			
    #####:  921:	      break;
        -:  922:	    }
        -:  923:	}
    #####:  924:      return 0;
        -:  925:		
        -:  926:    case smithy:
    #####:  927:        smithyCard(currentPlayer,state,handPos);
    #####:  928:	    break;
        -:  929:    	
        -:  930:    case village:
    #####:  931:        villageCard(currentPlayer,state,handPos);
    #####:  932:		break;
        -:  933:
        -:  934:    case baron:
    #####:  935:        baronCard(currentPlayer,state,choice1);	
    #####:  936:        break;
        -:  937:	
        -:  938:    case great_hall:
        -:  939:      //+1 Card
    #####:  940:      drawCard(currentPlayer, state);
        -:  941:      			
        -:  942:      //+1 Actions
    #####:  943:      state->numActions++;
        -:  944:			
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case minion:
        -:  950:      //+1 action
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
        -:  955:			
    #####:  956:      if (choice1)		//+2 coins
        -:  957:	{
    #####:  958:	  state->coins = state->coins + 2;
        -:  959:	}
        -:  960:			
    #####:  961:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  962:	{
        -:  963:	  //discard hand
    #####:  964:	  while(numHandCards(state) > 0)
        -:  965:	    {
    #####:  966:	      discardCard(handPos, currentPlayer, state, 0);
        -:  967:	    }
        -:  968:				
        -:  969:	  //draw 4
    #####:  970:	  for (i = 0; i < 4; i++)
        -:  971:	    {
    #####:  972:	      drawCard(currentPlayer, state);
        -:  973:	    }
        -:  974:				
        -:  975:	  //other players discard hand and redraw if hand size > 4
    #####:  976:	  for (i = 0; i < state->numPlayers; i++)
        -:  977:	    {
    #####:  978:	      if (i != currentPlayer)
        -:  979:		{
    #####:  980:		  if ( state->handCount[i] > 4 )
        -:  981:		    {
        -:  982:		      //discard hand
    #####:  983:		      while( state->handCount[i] > 0 )
        -:  984:			{
    #####:  985:			  discardCard(handPos, i, state, 0);
        -:  986:			}
        -:  987:							
        -:  988:		      //draw 4
    #####:  989:		      for (j = 0; j < 4; j++)
        -:  990:			{
    #####:  991:			  drawCard(i, state);
        -:  992:			}
        -:  993:		    }
        -:  994:		}
        -:  995:	    }
        -:  996:				
        -:  997:	}
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case steward:
    #####: 1001:      if (choice1 == 1)
        -: 1002:	{
        -: 1003:	  //+2 cards
    #####: 1004:	  drawCard(currentPlayer, state);
    #####: 1005:	  drawCard(currentPlayer, state);
        -: 1006:	}
    #####: 1007:      else if (choice1 == 2)
        -: 1008:	{
        -: 1009:	  //+2 coins
    #####: 1010:	  state->coins = state->coins + 2;
        -: 1011:	}
        -: 1012:      else
        -: 1013:	{
        -: 1014:	  //trash 2 cards in hand
    #####: 1015:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1016:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1017:	}
        -: 1018:			
        -: 1019:      //discard card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case tribute:
    #####: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1025:	if (state->deckCount[nextPlayer] > 0){
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
        -: 1028:	}
    #####: 1029:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1031:	  state->discardCount[nextPlayer]--;
        -: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
        -: 1039:      }
        -: 1040:	    
        -: 1041:      else{
    #####: 1042:	if (state->deckCount[nextPlayer] == 0){
    #####: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:	    state->deckCount[nextPlayer]++;
    #####: 1046:	    state->discard[nextPlayer][i] = -1;
    #####: 1047:	    state->discardCount[nextPlayer]--;
        -: 1048:	  }
        -: 1049:			    
    #####: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1051:	} 
    #####: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
    #####: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
        -: 1058:      }    
        -: 1059:		       
    #####: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1062:	state->playedCardCount++;
    #####: 1063:	tributeRevealedCards[1] = -1;
        -: 1064:      }
        -: 1065:
    #####: 1066:      for (i = 0; i <= 2; i ++){
    #####: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1068:	  state->coins += 2;
        -: 1069:	}
        -: 1070:		    
    #####: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	  drawCard(currentPlayer, state);
        -: 1074:	}
        -: 1075:	else{//Action Card
    #####: 1076:	  state->numActions = state->numActions + 2;
        -: 1077:	}
        -: 1078:      }
        -: 1079:	    
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case ambassador:
    #####: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
    #####: 1085:      if (choice2 > 2 || choice2 < 0)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
    #####: 1090:      if (choice1 == handPos)
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	{
    #####: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1098:	    {
    #####: 1099:	      j++;
        -: 1100:	    }
        -: 1101:	}
    #####: 1102:      if (j < choice2)
        -: 1103:	{
    #####: 1104:	  return -1;				
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG) 
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
    #####: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:			
        -: 1113:      //each other player gains a copy of revealed card
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
        -: 1117:	    {
    #####: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1119:	    }
        -: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
    #####: 1126:      for (j = 0; j < choice2; j++)
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
    #####: 1133:		  break;
        -: 1134:		}
        -: 1135:	    }
        -: 1136:	}			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:		
        -: 1140:    case cutpurse:
        -: 1141:
    #####: 1142:      updateCoins(currentPlayer, state, 2);
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
        -: 1146:	    {
    #####: 1147:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
    #####: 1152:		      break;
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1160:			}	
    #####: 1161:		      break;
        -: 1162:		    }		
        -: 1163:		}
        -: 1164:					
        -: 1165:	    }
        -: 1166:				
        -: 1167:	}				
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:		
        -: 1175:    case embargo: 
        -: 1176:      //+2 Coins
    #####: 1177:      state->coins = state->coins + 2;
        -: 1178:			
        -: 1179:      //see if selected pile is in play
    #####: 1180:      if ( state->supplyCount[choice1] == -1 )
        -: 1181:	{
    #####: 1182:	  return -1;
        -: 1183:	}
        -: 1184:			
        -: 1185:      //add embargo token to selected supply pile
    #####: 1186:      state->embargoTokens[choice1]++;
        -: 1187:			
        -: 1188:      //trash card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case outpost:
        -: 1193:      //set outpost flag
    #####: 1194:      state->outpostPlayed++;
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case salvager:
        -: 1201:      //+1 buy
    #####: 1202:      state->numBuys++;
        -: 1203:			
    #####: 1204:      if (choice1)
        -: 1205:	{
        -: 1206:	  //gain coins equal to trashed card
    #####: 1207:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1208:	  //trash card
    #####: 1209:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1210:	}
        -: 1211:			
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case sea_hag:
    #####: 1217:      for (i = 0; i < state->numPlayers; i++){
    #####: 1218:	if (i != currentPlayer){
    #####: 1219:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1220:	  state->discardCount[i]++;
    #####: 1221:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1222:	}
        -: 1223:      }
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case treasure_map:
        -: 1227:      //search hand for another treasure_map
    #####: 1228:      index = -1;
    #####: 1229:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:	{
    #####: 1231:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:	    {
    #####: 1233:	      index = i;
    #####: 1234:	      break;
        -: 1235:	    }
        -: 1236:	}
    #####: 1237:      if (index > -1)
        -: 1238:	{
        -: 1239:	  //trash both treasure cards
    #####: 1240:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:	  discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:	  //gain 4 Gold cards
    #####: 1244:	  for (i = 0; i < 4; i++)
        -: 1245:	    {
    #####: 1246:	      gainCard(gold, state, 1, currentPlayer);
        -: 1247:	    }
        -: 1248:				
        -: 1249:	  //return success
    #####: 1250:	  return 1;
        -: 1251:	}
        -: 1252:			
        -: 1253:      //no second treasure_map found in hand
    #####: 1254:      return -1;
        -: 1255:    }
        -: 1256:	
    #####: 1257:  return -1;
        -: 1258:}
        -: 1259:
        -: 1260://****-*----------Discard Card -----------------*-****//
    #####: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
    #####: 1265:  if (trashFlag < 1)
        -: 1266:    {
        -: 1267:      //add card to played pile
    #####: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1269:      state->playedCardCount++;
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
    #####: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
    #####: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
    #####: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
    #####: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
    #####: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
    #####: 1296:  return 0;
        -: 1297:}
        -: 1298:
    #####: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1304:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
    #####: 1314:  if (toFlag == 1)
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
    #####: 1319:  else if (toFlag == 2)
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
    #####: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
    #####: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
    #####: 1333:  return 0;
        -: 1334:}
        -: 1335:
    #####: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
    #####: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
    #####: 1344:  for (i = 0; i < state->handCount[player]; i++)
        -: 1345:    {
    #####: 1346:      if (state->hand[player][i] == copper)
        -: 1347:	{
    #####: 1348:	  state->coins += 1;
        -: 1349:	}
    #####: 1350:      else if (state->hand[player][i] == silver)
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
        -: 1353:	}
    #####: 1354:      else if (state->hand[player][i] == gold)
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
    #####: 1361:  state->coins += bonus;
        -: 1362:
    #####: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
