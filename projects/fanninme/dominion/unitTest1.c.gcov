        -:    0:Source:unitTest1.c
        -:    0:Graph:unitTest1.gcno
        -:    0:Data:unitTest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:#define DEBUG 0
        -:   13:#define NOISY_TEST 1
        -:   14:
        -:   15://code leveraged betterCard function heavily.
        -:   16://Unit test for playCard function
        -:   17://Preconditions:
        -:   18://function accepts int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:   19://game state :
        -:   20:
        -:   21:
        -:   22://oracle makes sure returns valid 
        3:   23:int unitTest(struct gameState *post){
        3:   24:    srand(time(NULL));
        -:   25:
        -:   26:    //define variables
        -:   27:    int success;
        -:   28:    struct gameState pre;
        3:   29:    memcpy(&pre,post,sizeof(struct gameState));
        -:   30:    //create an array to hold four integer inputs
        -:   31:    int input[4];
        -:   32:    //randomly generate 4 ints
       15:   33:    for(int i=0; i<4; i++){
       12:   34:        input[i]= rand();
        -:   35:    }
        -:   36:
        -:   37:    //call function
        3:   38:    success=playCard(input[0],input[1],input[2],input[3], post);
        -:   39:    //memcmp game state size
        3:   40:    assert (memcmp(&pre,post, sizeof(struct gameState))==0);
        3:   41:    if (success == -1){
        3:   42:        printf ("Error in playCard function bad exit status.\n");
        3:   43:        exit(1);
        -:   44:    }
        -:   45:
        -:   46:    //specific function check 
        -:   47:    //confirm that actions is one less
    #####:   48:    if (pre.numActions != post->numActions+1){
    #####:   49:        printf("Error action count was not decrimented");
    #####:   50:        exit(2);
        -:   51:    }
    #####:   52:    return 0;
        -:   53:}
        -:   54:
        -:   55:
        3:   56:int main () {
        -:   57:  //define variables  
        -:   58:  int i, n, r, p, deckCount, discardCount, handCount;
        -:   59:  //define a array of cards
        3:   60:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   61:	       remodel, smithy, village, baron, great_hall};
        -:   62:  //define a gamestate
        -:   63:  struct gameState G;
        -:   64:
        3:   65:  printf ("Testing playCard.\n");
        -:   66:
        3:   67:  printf ("RANDOM TESTS.\n");
        -:   68:  //create random seed
        3:   69:  SelectStream(2);
        3:   70:  PutSeed(3);
        -:   71:  //for 2000 test cases
        3:   72:  for (n = 0; n < 2000; n++) {
    78903:   73:    for (i = 0; i < sizeof(struct gameState); i++) {
        -:   74:      //fill gamestate with random bits between 0-256 using ofset
    78900:   75:      ((char*)&G)[i] = floor(Random() * 256);
        -:   76:    }
        3:   77:    p = floor(Random() * 2);
        3:   78:    G.deckCount[p] = floor(Random() * MAX_DECK);
        3:   79:    G.discardCount[p] = floor(Random() * MAX_DECK);
        3:   80:    G.handCount[p] = floor(Random() * MAX_HAND);
        -:   81:    //call function with test input
        3:   82:    unitTest(&G);
        -:   83:  }
    #####:   84:  printf ("ALL Random TESTS OK\n");
        -:   85:
        -:   86:  //fixed tests
    #####:   87:  printf ("SIMPLE FIXED TESTS.\n");
    #####:   88:  for (p = 0; p < 2; p++) {
    #####:   89:    for (deckCount = 0; deckCount < 5; deckCount++) {
    #####:   90:      for (discardCount = 0; discardCount < 5; discardCount++) {
    #####:   91:	    for (handCount = 0; handCount < 5; handCount++) {
    #####:   92:	        memset(&G, 23, sizeof(struct gameState)); 
    #####:   93:	        r = initializeGame(2, k, 1, &G);
    #####:   94:	        G.deckCount[p] = deckCount;
    #####:   95:	        memset(G.deck[p], 0, sizeof(int) * deckCount);
    #####:   96:	        G.discardCount[p] = discardCount;
    #####:   97:	        memset(G.discard[p], 0, sizeof(int) * discardCount);
    #####:   98:	        G.handCount[p] = handCount;
    #####:   99:	        memset(G.hand[p], 0, sizeof(int) * handCount);
        -:  100:	        //run unit test.
    #####:  101:            unitTest(&G);
        -:  102:	        }
        -:  103:        }
        -:  104:    }
        -:  105:  }
    #####:  106:  printf ("ALL TESTS OK\n");
        -:  107:
    #####:  108:  return 0;
        -:  109:}
