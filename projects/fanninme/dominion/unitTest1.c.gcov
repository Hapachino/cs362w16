        -:    0:Source:unitTest1.c
        -:    0:Graph:unitTest1.gcno
        -:    0:Data:unitTest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#include <time.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
        -:   13:#define DEBUG 0
        -:   14:#define NOISY_TEST 0
        -:   15:// set NOISY_TEST to 0 to remove printfs from output
        -:   16:
        -:   17:/*code leveraged betterCard function and testUpdateCoins functions heavily.
        -:   18:Unit test for playCard function
        -:   19:Preconditions:
        -:   20:function accepts int handPos, int choice1, int choice2, int choice3, struct gameState *state) */
        -:   21:
        -:   22://oracle makes sure returns valid 
function unitTest called 2000 returned 100% blocks executed 75%
     2000:   23:int unitTest(struct gameState *post){
     2000:   24:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   25:
        -:   26:    //define variables
        -:   27:    int success;
        -:   28:    struct gameState pre;
     2000:   29:    memcpy(&pre,post,sizeof(struct gameState));
        -:   30:
        -:   31:    //create an array to hold four integer inputs
        -:   32:    int input[4];
        -:   33:    //randomly generate 4 ints
    10000:   34:    for(int i=0; i<4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     8000:   35:        input[i]= rand();
call    0 returned 100%
        -:   36:    }
        -:   37:
        -:   38:    //call function
     2000:   39:    success=playCard(input[0],input[1],input[2],input[3], post);
call    0 returned 100%
        -:   40:
        -:   41:    //memcmp game state size
     2000:   42:    assert (memcmp(&pre,post, sizeof(struct gameState))==0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   43:
        -:   44:    //assert (success==0);
     2000:   45:    if (success == -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   46:        #if (NOISY_TEST == 1)
        -:   47:        printf ("Error in playCard function bad exit status.\n");
        -:   48:        #endif
     2000:   49:        return 1;
        -:   50:    }
        -:   51:
        -:   52:    //specific function check 
        -:   53:    //confirm that actions is one less
    #####:   54:    if (pre.numActions != post->numActions+1){
branch  0 never executed
branch  1 never executed
        -:   55:        #if (NOISY_TEST == 1)
        -:   56:        printf("Error action count was not decrimented");
        -:   57:        #endif    
    #####:   58:        return 2;
        -:   59:    }
    #####:   60:    return 0;
        -:   61:}
        -:   62:
        -:   63:
function main called 1 returned 100% blocks executed 93%
        1:   64:int main () {
        -:   65:  //define variables  
        -:   66:  int i, n, p;
        -:   67:  int error, errorA, errorB;
        1:   68:  errorB=0;
        1:   69:  errorA=0; 
        -:   70:  //define a gamestate
        -:   71:  struct gameState G;
        -:   72:
        1:   73:  printf ("Testing playCard.\n");
call    0 returned 100%
        -:   74:
        1:   75:  printf ("RANDOM TESTS.\n");
call    0 returned 100%
        -:   76:  //create random seed
        1:   77:  SelectStream(2);
call    0 returned 100%
        1:   78:  PutSeed(3);
call    0 returned 100%
        -:   79:  //for 2000 test cases
     2001:   80:  for (n = 0; n < 2000; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 52602000:   81:    for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   82:      //fill gamestate with random bits between 0-256 using ofset
 52600000:   83:      ((char*)&G)[i] = floor(Random() * 256);
call    0 returned 100%
        -:   84:    }
     2000:   85:    p = floor(Random() * 2);
call    0 returned 100%
     2000:   86:    G.deckCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   87:    G.discardCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   88:    G.handCount[p] = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:   89:
        -:   90:    //call function with test input
     2000:   91:    error=unitTest(&G);
call    0 returned 100%
        -:   92:
     2000:   93:    if (error > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2000:   94:        if(error == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2000:   95:            errorA++;
    #####:   96:        }else if(error > 1){
branch  0 never executed
branch  1 never executed
    #####:   97:            errorB++;
        -:   98:        }
        -:   99:    }
        -:  100:  }
        1:  101:  printf ("ALL Random TESTS Complete\n");
call    0 returned 100%
        1:  102:  printf ("Errors type 1: %d ",errorA);
call    0 returned 100%
        1:  103:  printf ("Error in playCard function bad exit status.\n");
call    0 returned 100%
        1:  104:  printf ("Errors type 2: %d ",errorB);
call    0 returned 100%
        1:  105:  printf("Error action count was not decrimented \n");
call    0 returned 100%
        -:  106:
        1:  107:  return 0;
        -:  108:}
