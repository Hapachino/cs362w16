        -:    0:Source:unitTest2.c
        -:    0:Graph:unitTest2.gcno
        -:    0:Data:unitTest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:#define DEBUG 0
        -:   13:#define NOISY_TEST 0
        -:   14:
        -:   15://Unit test for isgameOver function
        -:   16://Preconditions:
        -:   17://function accepts struct gameState *state 
        -:   18:
        -:   19://oracle makes sure returns valid 
function unitTest called 2000 returned 100% blocks executed 83%
     2000:   20:int unitTest(struct gameState *post){
     2000:   21:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   22:
        -:   23:    //define variables
        -:   24:    int success;
        -:   25:    struct gameState pre;
     2000:   26:    memcpy(&pre,post,sizeof(struct gameState));
        -:   27:
        -:   28:    //call function
     2000:   29:    success=isGameOver(post);
call    0 returned 100%
        -:   30:
        -:   31:    //memcmp game state size
     2000:   32:    if (memcmp(&pre,post, sizeof(struct gameState))!=0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   33:        #if (NOISY_TEST == 1)
        -:   34:        printf ("Error in size of gamestate.\n");
        -:   35:        #endif
    #####:   36:        return 1;
        -:   37:        
        -:   38:    }
        -:   39:
        -:   40:    //assert (success==0);
     2000:   41:    if (success == -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   42:        #if (NOISY_TEST == 1)
        -:   43:        printf ("Error in playCard function bad exit status.\n");
        -:   44:        #endif
    #####:   45:        return 2;
        -:   46:    }
        -:   47:
        -:   48:    //if stack of Province cards is empty, the game ends
     2000:   49:    if (post->supplyCount[province] < 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   50:        #if (NOISY_TEST == 1)
        -:   51:        printf ("supply count is negative.\n");
        -:   52:        #endif
      991:   53:        return 3;
        -:   54:    }
        -:   55:
     1009:   56:    return 0;
        -:   57:}
        -:   58:
function main called 1 returned 100% blocks executed 94%
        1:   59:int main () {
        -:   60:  //define variables  
        -:   61:  int error, errorA, errorB,errorC;
        1:   62:  errorB=0;
        1:   63:  errorA=0; 
        1:   64:  errorC=0;
        -:   65:  int i, n, r, p, deckCount, discardCount, handCount;
        -:   66:  //define a array of cards
        1:   67:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   68:	       remodel, smithy, village, baron, great_hall};
        -:   69:  //define a gamestate
        -:   70:  struct gameState G;
        -:   71:
        1:   72:  printf ("Testing game is over function.\n");
call    0 returned 100%
        -:   73:
        1:   74:  printf ("RANDOM TESTS.\n");
call    0 returned 100%
        -:   75:  //create random seed
        1:   76:  SelectStream(2);
call    0 returned 100%
        1:   77:  PutSeed(3);
call    0 returned 100%
        -:   78:  //for 2000 test cases
     2001:   79:  for (n = 0; n < 2000; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 52602000:   80:    for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   81:      //fill gamestate with random bits between 0-256 using ofset
 52600000:   82:      ((char*)&G)[i] = floor(Random() * 256);
call    0 returned 100%
        -:   83:    }
     2000:   84:    p = floor(Random() * 2);
call    0 returned 100%
     2000:   85:    G.deckCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   86:    G.discardCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   87:    G.handCount[p] = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:   88:
        -:   89:    //call function with test input
     2000:   90:    error=unitTest(&G);
call    0 returned 100%
        -:   91:
     2000:   92:    if (error > 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      991:   93:        if(error == 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   94:            errorA++;
      991:   95:        }else if(error == 2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   96:            errorB++;
        -:   97:        }else{
      991:   98:            errorC++;
        -:   99:        }
        -:  100:    }
        -:  101:  }
        1:  102:  printf ("ALL Random TESTS Complete\n");
call    0 returned 100%
        1:  103:  printf ("Errors type 1: %d ",errorA);
call    0 returned 100%
        1:  104:  printf ("Error memory size wrong.\n");
call    0 returned 100%
        1:  105:  printf ("Errors type 2: %d ",errorB);
call    0 returned 100%
        1:  106:  printf("Error bad return value from function \n");
call    0 returned 100%
        1:  107:  printf ("Errors type 3: %d ",errorC);
call    0 returned 100%
        1:  108:  printf("Error negative supply count \n");
call    0 returned 100%
        -:  109:
        1:  110:  return 0;
        -:  111:}
