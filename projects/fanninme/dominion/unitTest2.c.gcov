        -:    0:Source:unitTest2.c
        -:    0:Graph:unitTest2.gcno
        -:    0:Data:unitTest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:#define DEBUG 0
        -:   13:#define NOISY_TEST 1
        -:   14:
        -:   15://Unit test for isgameOver function
        -:   16://Preconditions:
        -:   17://function accepts struct gameState *state 
        -:   18:
        -:   19://oracle makes sure returns valid 
        6:   20:int unitTest(struct gameState *post){
        6:   21:    srand(time(NULL));
        -:   22:
        -:   23:    //define variables
        -:   24:    int success;
        -:   25:    struct gameState pre;
        6:   26:    memcpy(&pre,post,sizeof(struct gameState));
        -:   27:
        -:   28:    //call function
        6:   29:    success=isGameOver(post);
        -:   30:    //memcmp game state size
        6:   31:    if (memcmp(&pre,post, sizeof(struct gameState))!=0){
    #####:   32:        printf ("Error in size of gamestate.\n");
    #####:   33:        exit(1);
        -:   34:    }
        6:   35:    if (success == -1){
    #####:   36:        printf ("Error in game is over function returned not sucessful.\n");
    #####:   37:        exit(1);
        -:   38:    }
        -:   39:
        -:   40:    //if stack of Province cards is empty, the game ends
        6:   41:    if (post->supplyCount[province] > 0){
        2:   42:        printf ("Error in game is over function.\n");
        2:   43:        exit(1);
        -:   44:    }
        -:   45:
        4:   46:    return 0;
        -:   47:}
        -:   48:
        2:   49:int main () {
        -:   50:  //define variables  
        -:   51:  int i, n, r, p, deckCount, discardCount, handCount;
        -:   52:  //define a array of cards
        2:   53:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   54:	       remodel, smithy, village, baron, great_hall};
        -:   55:  //define a gamestate
        -:   56:  struct gameState G;
        -:   57:
        2:   58:  printf ("Testing game is over function.\n");
        -:   59:
        2:   60:  printf ("RANDOM TESTS.\n");
        -:   61:  //create random seed
        2:   62:  SelectStream(2);
        2:   63:  PutSeed(3);
        -:   64:  //for 2000 test cases
        6:   65:  for (n = 0; n < 2000; n++) {
   157806:   66:    for (i = 0; i < sizeof(struct gameState); i++) {
        -:   67:      //fill gamestate with random bits between 0-256 using ofset
   157800:   68:      ((char*)&G)[i] = floor(Random() * 256);
        -:   69:    }
        6:   70:    p = floor(Random() * 2);
        6:   71:    G.deckCount[p] = floor(Random() * MAX_DECK);
        6:   72:    G.discardCount[p] = floor(Random() * MAX_DECK);
        6:   73:    G.handCount[p] = floor(Random() * MAX_HAND);
        -:   74:    //call function with test input
        6:   75:    unitTest(&G);
        -:   76:
        -:   77:  }
    #####:   78:  printf ("ALL TESTS OK\n");
        -:   79:
        -:   80:  //fixed tests
    #####:   81:  printf ("SIMPLE FIXED TESTS.\n");
    #####:   82:  for (p = 0; p < 2; p++) {
    #####:   83:    for (deckCount = 0; deckCount < 5; deckCount++) {
    #####:   84:      for (discardCount = 0; discardCount < 5; discardCount++) {
    #####:   85:	for (handCount = 0; handCount < 5; handCount++) {
    #####:   86:	  memset(&G, 23, sizeof(struct gameState)); 
    #####:   87:	  r = initializeGame(2, k, 1, &G);
    #####:   88:	  G.deckCount[p] = deckCount;
    #####:   89:	  memset(G.deck[p], 0, sizeof(int) * deckCount);
    #####:   90:	  G.discardCount[p] = discardCount;
    #####:   91:	  memset(G.discard[p], 0, sizeof(int) * discardCount);
    #####:   92:	  G.handCount[p] = handCount;
    #####:   93:	  memset(G.hand[p], 0, sizeof(int) * handCount);
        -:   94:	  //run unit test.
    #####:   95:      unitTest(&G);
        -:   96:
        -:   97:	}
        -:   98:      }
        -:   99:    }
        -:  100:  }
        -:  101:
    #####:  102:  return 0;
        -:  103:}
