        -:    0:Source:unitTest4.c
        -:    0:Graph:unitTest4.gcno
        -:    0:Data:unitTest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:#define DEBUG 0
        -:   13:#define NOISY_TEST 1
        -:   14:
        -:   15://Unit test for full Deck Count function
        -:   16://Preconditions:
        -:   17://function accepts  int player, int card, struct gameState *state,
        -:   18://oracle makes sure returns valid 
     2000:   19:int unitTest(int player, struct gameState *post){
     2000:   20:    srand(time(NULL));
        -:   21:
        -:   22:    //define variables
        -:   23:    int success;
        -:   24:    int card;
        -:   25:    struct gameState pre;
     2000:   26:    memcpy(&pre,post,sizeof(struct gameState));
        -:   27:    //randomly card int within size limits
     2000:   28:    card= rand()%10;
        -:   29:    
        -:   30:    //call function
     2000:   31:    success=fullDeckCount(player,card, post);
        -:   32:
     2000:   33:    if (success > MAX_DECK){
        -:   34:        #if (NOISY_TEST == 1)
    #####:   35:        printf ("Error in end turn function.\n");
        -:   36:        #endif
    #####:   37:        return 1;
        -:   38:    }
        -:   39:
     2000:   40:    if (success == -1){
        -:   41:       #if (NOISY_TEST == 1) 
    #####:   42:       printf ("Error in full deck function.\n");
        -:   43:        #endif
    #####:   44:        return 2;
        -:   45:    }
        -:   46:    //memcmp game state size
     2000:   47:    if (memcmp(&pre,post, sizeof(struct gameState))!=0);{
        -:   48:        #if (NOISY_TEST == 1)
     2000:   49:        printf ("Memory size different.\n");
        -:   50:        #endif
     2000:   51:        return 3;
        -:   52:    }
        -:   53:    return 0;
        -:   54:}
        -:   55:
        -:   56:
        1:   57:int main () {
        -:   58:  //define variables  
        -:   59:  int i, n, r, p, error,errorA,errorB,errorC;
        1:   60:  errorA=0;
        1:   61:  errorB=0;
        1:   62:  errorC=0;
        -:   63:  //define a gamestate
        -:   64:  struct gameState G;
        -:   65:
        1:   66:  printf ("Testing full deck count.\n");
        -:   67:
        1:   68:  printf ("RANDOM TESTS.\n");
        -:   69:  //create random seed
        1:   70:  SelectStream(2);
        1:   71:  PutSeed(3);
        -:   72:  //for 2000 test cases
     2001:   73:  for (n = 0; n < 2000; n++) {
 52602000:   74:    for (i = 0; i < sizeof(struct gameState); i++) {
        -:   75:      //fill gamestate with random bits between 0-256 using ofset
 52600000:   76:      ((char*)&G)[i] = floor(Random() * 256);
        -:   77:    }
     2000:   78:    p = floor(Random() * 2);
     2000:   79:    G.deckCount[p] = floor(Random() * MAX_DECK);
     2000:   80:    G.discardCount[p] = floor(Random() * MAX_DECK);
     2000:   81:    G.handCount[p] = floor(Random() * MAX_HAND);
        -:   82:    //call function with test input
     2000:   83:    error=unitTest(p,&G);
        -:   84:
     2000:   85:    if (error > 0){
     2000:   86:        if(error == 1){
    #####:   87:            errorA++;
     2000:   88:        }else if(error == 2){
    #####:   89:            errorB++;
     2000:   90:        }else if(error == 3){
     2000:   91:            errorC++;
        -:   92:        }
        -:   93:    }
        -:   94:
        -:   95:  }
        -:   96:
        1:   97:  printf ("ALL TESTS OK\n");
        1:   98:  printf ("ALL Random TESTS Complete\n");
        1:   99:  printf ("Errors type 1: %d ",errorA);
        1:  100:  printf ("Error in end turn function.\n");
        1:  101:  printf ("Errors type 2: %d ",errorB);
        1:  102:  printf ("Error in full deck function.\n");
        1:  103:  printf ("Errors type 3: %d ",errorC);
        1:  104:  printf ("Memory size different.\n");
        -:  105:
        1:  106:  return 0;
        -:  107:}
