        -:    0:Source:unitTest4.c
        -:    0:Graph:unitTest4.gcno
        -:    0:Data:unitTest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:#define DEBUG 0
        -:   13:#define NOISY_TEST 1
        -:   14:
        -:   15://Unit test for full Deck Count function
        -:   16://Preconditions:
        -:   17://function accepts  int player, int card, struct gameState *state,
        -:   18://oracle makes sure returns valid 
        1:   19:int unitTest(int player, struct gameState *post){
        1:   20:    srand(time(NULL));
        -:   21:
        -:   22:    //define variables
        -:   23:    int success;
        -:   24:    int card;
        -:   25:    struct gameState pre;
        1:   26:    memcpy(&pre,post,sizeof(struct gameState));
        -:   27:    //randomly card int within size limits
        1:   28:    card= rand()%10;
        -:   29:    
        -:   30:    //call function
        1:   31:    success=fullDeckCount(player,card, post);
        -:   32:
        1:   33:    if (success > MAX_DECK){
    #####:   34:        printf ("Error in end turn function.\n");
    #####:   35:        exit(2);
        -:   36:    }
        -:   37:
        1:   38:    if (success == -1){
    #####:   39:        printf ("Error in full deck function.\n");
    #####:   40:        exit(1);
        -:   41:    }
        -:   42:    //memcmp game state size
        1:   43:    if (memcmp(&pre,post, sizeof(struct gameState))!=0);{
        1:   44:        printf ("Memory size different.\n");
        1:   45:        exit(3);
        -:   46:    }
        -:   47:    return 0;
        -:   48:}
        -:   49:
        -:   50:
        -:   51:int main () {
        -:   52:  //define variables  
        1:   53:  int i, n, r, p, deckCount, discardCount, handCount;
        -:   54:  //define a array of cards
        -:   55:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:	       remodel, smithy, village, baron, great_hall};
        1:   57:  //define a gamestate
        -:   58:  struct gameState G;
        -:   59:
        -:   60:  printf ("Testing full deck count.\n");
        -:   61:
        1:   62:  printf ("RANDOM TESTS.\n");
        -:   63:  //create random seed
        1:   64:  SelectStream(2);
        -:   65:  PutSeed(3);
        1:   66:  //for 2000 test cases
        1:   67:  for (n = 0; n < 2000; n++) {
        -:   68:    for (i = 0; i < sizeof(struct gameState); i++) {
        1:   69:      //fill gamestate with random bits between 0-256 using ofset
    26301:   70:      ((char*)&G)[i] = floor(Random() * 256);
        -:   71:    }
    26300:   72:    p = floor(Random() * 2);
        -:   73:    G.deckCount[p] = floor(Random() * MAX_DECK);
        1:   74:    G.discardCount[p] = floor(Random() * MAX_DECK);
        1:   75:    G.handCount[p] = floor(Random() * MAX_HAND);
        1:   76:    //call function with test input
        1:   77:    unitTest(p, &G);
        -:   78:
        1:   79:  }
        -:   80:
        -:   81:  printf ("ALL TESTS OK\n");
        -:   82:
    #####:   83:  exit(0);
        -:   84:  //fixed tests
    #####:   85:  printf ("SIMPLE FIXED TESTS.\n");
        -:   86:  for (p = 0; p < 2; p++) {
        -:   87:    for (deckCount = 0; deckCount < 5; deckCount++) {
        -:   88:      for (discardCount = 0; discardCount < 5; discardCount++) {
        -:   89:	for (handCount = 0; handCount < 5; handCount++) {
        -:   90:	  memset(&G, 23, sizeof(struct gameState)); 
        -:   91:	  r = initializeGame(2, k, 1, &G);
        -:   92:	  G.deckCount[p] = deckCount;
        -:   93:	  memset(G.deck[p], 0, sizeof(int) * deckCount);
        -:   94:	  G.discardCount[p] = discardCount;
        -:   95:	  memset(G.discard[p], 0, sizeof(int) * discardCount);
        -:   96:	  G.handCount[p] = handCount;
        -:   97:	  memset(G.hand[p], 0, sizeof(int) * handCount);
        -:   98:	  //run unit test.
        -:   99:      unitTest(p, &G);
        -:  100:
        -:  101:	}
        -:  102:      }
        -:  103:    }
        -:  104:  }
        -:  105:
        -:  106:  return 0;
        -:  107:}
