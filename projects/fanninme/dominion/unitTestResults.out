File 'dominion.c'
Lines executed:0.71% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //--------initialize supply-----------//
        -:   70:  //set number of Curse cards
    #####:   71:  if (numPlayers == 2)
        -:   72:    {
    #####:   73:      state->supplyCount[curse] = 10;
        -:   74:    }
    #####:   75:  else if (numPlayers == 3)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 20;
        -:   78:    }
        -:   79:  else
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 30;
        -:   82:    }
        -:   83:
        -:   84:  //set number of Victory cards
    #####:   85:  if (numPlayers == 2)
        -:   86:    {
    #####:   87:      state->supplyCount[estate] = 8;
    #####:   88:      state->supplyCount[duchy] = 8;
    #####:   89:      state->supplyCount[province] = 8;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[estate] = 12;
    #####:   94:      state->supplyCount[duchy] = 12;
    #####:   95:      state->supplyCount[province] = 12;
        -:   96:    }
        -:   97:
        -:   98:  //set number of Treasure cards
    #####:   99:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  100:  state->supplyCount[silver] = 40;
    #####:  101:  state->supplyCount[gold] = 30;
        -:  102:
        -:  103:  //set number of Kingdom cards
    #####:  104:  for (i = adventurer; i <= treasure_map; i++)   //loop all cards
        -:  105:    {
    #####:  106:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  107:	{
    #####:  108:	  if (kingdomCards[j] == i)
        -:  109:	    {
        -:  110:	      //check if card is a 'Victory' Kingdom card
    #####:  111:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  112:		{
    #####:  113:		  if (numPlayers == 2){ 
    #####:  114:		    state->supplyCount[i] = 8; 
        -:  115:		  }
    #####:  116:		  else{ state->supplyCount[i] = 12; }
        -:  117:		}
        -:  118:	      else
        -:  119:		{
    #####:  120:		  state->supplyCount[i] = 10;
        -:  121:		}
    #####:  122:	      break;
        -:  123:	    }
        -:  124:	  else    //card is not in the set choosen for the game
        -:  125:	    {
    #####:  126:	      state->supplyCount[i] = -1;
        -:  127:	    }
        -:  128:	}
        -:  129:
        -:  130:    }
        -:  131:  //-------supply intilization complete------------//
        -:  132:
        -:  133:  //set player decks
    #####:  134:  for (i = 0; i < numPlayers; i++)
        -:  135:    {
    #####:  136:      state->deckCount[i] = 0;
    #####:  137:      for (j = 0; j < 3; j++)
        -:  138:	{
    #####:  139:	  state->deck[i][j] = estate;
    #####:  140:	  state->deckCount[i]++;
        -:  141:	}
    #####:  142:      for (j = 3; j < 10; j++)
        -:  143:	{
    #####:  144:	  state->deck[i][j] = copper;
    #####:  145:	  state->deckCount[i]++;		
        -:  146:	}
        -:  147:    }
        -:  148:
        -:  149:  //shuffle player decks
    #####:  150:  for (i = 0; i < numPlayers; i++)
        -:  151:    {
    #####:  152:      if ( shuffle(i, state) < 0 )
        -:  153:	{
    #####:  154:	  return -1;
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //draw player hands
    #####:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {  
        -:  161:      //initialize hand size to zero
    #####:  162:      state->handCount[i] = 0;
    #####:  163:      state->discardCount[i] = 0;
        -:  164:      //draw 5 cards
        -:  165:      // for (j = 0; j < 5; j++)
        -:  166:      //	{
        -:  167:      //	  drawCard(i, state);
        -:  168:      //	}
        -:  169:    }
        -:  170:  
        -:  171:  //set embargo tokens to 0 for all supply piles
    #####:  172:  for (i = 0; i <= treasure_map; i++)
        -:  173:    {
    #####:  174:      state->embargoTokens[i] = 0;
        -:  175:    }
        -:  176:
        -:  177:  //initialize first player's turn
    #####:  178:  state->outpostPlayed = 0;
    #####:  179:  state->phase = 0;
    #####:  180:  state->numActions = 1;
    #####:  181:  state->numBuys = 1;
    #####:  182:  state->playedCardCount = 0;
    #####:  183:  state->whoseTurn = 0;
    #####:  184:  state->handCount[state->whoseTurn] = 0;
        -:  185:  //int it; move to top
        -:  186:
        -:  187:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  188:  for (it = 0; it < 5; it++){
    #####:  189:    drawCard(state->whoseTurn, state);
        -:  190:  }
        -:  191:
    #####:  192:  updateCoins(state->whoseTurn, state, 0);
        -:  193:
    #####:  194:  return 0;
        -:  195:}
        -:  196:
        -:  197:/***----shuffle cards ---***/
    #####:  198:int shuffle(int player, struct gameState *state) {
        -:  199: 
        -:  200:
        -:  201:  int newDeck[MAX_DECK];
    #####:  202:  int newDeckPos = 0;
        -:  203:  int card;
        -:  204:  int i;
        -:  205:
    #####:  206:  if (state->deckCount[player] < 1)
    #####:  207:    return -1;
    #####:  208:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  209:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  210:
    #####:  211:  while (state->deckCount[player] > 0) {
    #####:  212:    card = floor(Random() * state->deckCount[player]);
    #####:  213:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  214:    newDeckPos++;
    #####:  215:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  216:      state->deck[player][i] = state->deck[player][i+1];
        -:  217:    }
    #####:  218:    state->deckCount[player]--;
        -:  219:  }
    #####:  220:  for (i = 0; i < newDeckPos; i++) {
    #####:  221:    state->deck[player][i] = newDeck[i];
    #####:  222:    state->deckCount[player]++;
        -:  223:  }
        -:  224:
    #####:  225:  return 0;
        -:  226:}
        -:  227:
        -:  228://***---- Play Card ----***//
     2000:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  230:{	
        -:  231:  int card;
     2000:  232:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:
        -:  234:  //check if it is the right phase
     2000:  235:  if (state->phase != 0)
        -:  236:    {
     2000:  237:      return -1;
        -:  238:    }
        -:  239:	
        -:  240:  //check if player has enough actions
    #####:  241:  if ( state->numActions < 1 )
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //get card played
    #####:  247:  card = handCard(handPos, state);
        -:  248:	
        -:  249:  //check if selected card is an action
    #####:  250:  if ( card < adventurer || card > treasure_map )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //play card
    #####:  256:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //reduce number of actions
    #####:  262:  state->numActions--;
        -:  263:
        -:  264:  //update coins (Treasure cards may be added with card draws)
    #####:  265:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  266:	
    #####:  267:  return 0;
        -:  268:}
        -:  269:
        -:  270:/***---- Buy Card ----***/
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
    #####:  278:  who = state->whoseTurn;
        -:  279:
    #####:  280:  if (state->numBuys < 1){
        -:  281:    if (DEBUG)
        -:  282:      printf("You do not have any buys left\n");
    #####:  283:    return -1;
    #####:  284:  } else if (supplyCount(supplyPos, state) <1){
        -:  285:    if (DEBUG)
        -:  286:      printf("There are not any of that type of card left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (state->coins < getCost(supplyPos)){
        -:  289:    if (DEBUG) 
        -:  290:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  291:    return -1;
        -:  292:  } else {
    #####:  293:    state->phase=1;
        -:  294:    //state->supplyCount[supplyPos]--;
    #####:  295:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  296:  
    #####:  297:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  298:    state->numBuys--;
        -:  299:    if (DEBUG)
        -:  300:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  301:  }
        -:  302:
        -:  303:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  304:  //state->discardCount[who]++;
        -:  305:    
    #####:  306:  return 0;
        -:  307:}
        -:  308:
    #####:  309:int numHandCards(struct gameState *state) {
    #####:  310:  return state->handCount[ whoseTurn(state) ];
        -:  311:}
        -:  312:
    #####:  313:int handCard(int handPos, struct gameState *state) {
    #####:  314:  int currentPlayer = whoseTurn(state);
    #####:  315:  return state->hand[currentPlayer][handPos];
        -:  316:}
        -:  317:
    #####:  318:int supplyCount(int card, struct gameState *state) {
    #####:  319:  return state->supplyCount[card];
        -:  320:}
        -:  321:
        -:  322:/***--- full deck count ---***/
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
    #####:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349://***--- End Turn ---***//
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:/***---- is Game Over ----***/
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
        -:  402:  //TODO removed magic number  25=10 kingdom cards + 3 coin types+ 2 providence 
    #####:  403:  for (i = 0; i < 25; i++){
    #####:  404:      if (state->supplyCount[i] == 0){
    #####:  405:	    j++;
        -:  406:	  }
        -:  407:  }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
        -:  416:/***---- score for ----***/
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:/***--- get winners  ---***/
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479: for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:/***---- draw card ----***/
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583:/***---- get cost ----***/
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646://****--- Card Functions ---****//
        -:  647://------------Adventurer-----------------//
        -:  648://draw cards until two treasure cards are revealed (a silver, copper or gold)
        -:  649:// discard non treasure cards drawn
    #####:  650:void adventurerCard(int currentPlayer, struct gameState *state){
        -:  651:    int cardDrawn;
    #####:  652:    int drawntreasure=0;
    #####:  653:    int extraCardsCount=0;
        -:  654:    int temphand[MAX_HAND];
        -:  655:
    #####:  656:    while(drawntreasure<2){
        -:  657:        //if the deck is empty we need to shuffle discard and add to deck
    #####:  658:        if (state->deckCount[currentPlayer] <1){
    #####:  659:	        shuffle(currentPlayer, state);
        -:  660:	    }
    #####:  661:	    drawCard(currentPlayer, state);
    #####:  662:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
        -:  663:        //top card of hand is most recently drawn card.
        -:  664:
    #####:  665:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  666:	        drawntreasure++;
        -:  667:	    else{
    #####:  668:	        temphand[extraCardsCount]=cardDrawn;
    #####:  669:	        state->handCount[currentPlayer]--; //this should just remove the top card (most recently drawn).
    #####:  670:	        extraCardsCount++;
        -:  671:	    }
        -:  672:    }
    #####:  673:    while(extraCardsCount-1>=0){
    #####:  674:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[extraCardsCount-1];
        -:  675:         // discard all cards in play that have been drawn
    #####:  676:	    extraCardsCount=extraCardsCount-1;
        -:  677:      }
    #####:  678:}
        -:  679://-----------------Feast Card--------------------------//
        -:  680://allows player to gain a card with a cost of 5 or less
    #####:  681:void feastCard(int currentPlayer,struct gameState *state,int choice1){
    #####:  682:    int x=1;//condition to loop on to check if buy has occured
        -:  683:    int i;//counting variable for backuphand loop
        -:  684:    int temphand[MAX_HAND];//back up of plays current hand
        -:  685:
        -:  686:    //Backup hand
    #####:  687:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  688:	    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  689:	    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  690:    }
        -:  691:    //Backup hand
        -:  692:
        -:  693:    //Update Coins for Buy
    #####:  694:    updateCoins(currentPlayer, state, 5);
        -:  695:    
    #####:  696:    while( x == 1) {//Buy one card
    #####:  697:	    if (supplyCount(choice1, state) <= 0){
        -:  698:	        if (DEBUG)
        -:  699:	            printf("None of that card left, sorry!\n");
        -:  700:
        -:  701:	        if (DEBUG){
        -:  702:	            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:	        }
        -:  704:	    }
    #####:  705:	    else if (state->coins < getCost(choice1)){
    #####:  706:	        printf("That card is too expensive!\n");
        -:  707:
        -:  708:	        if (DEBUG){
        -:  709:	            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:	        }
        -:  711:	    }
        -:  712:	    else{
        -:  713:            if (DEBUG){
        -:  714:	            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:	        }
        -:  716:
    #####:  717:	        gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  718:
        -:  719:	        if (DEBUG){
        -:  720:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	        }
        -:  722:
        -:  723:	    }
        -:  724:    }     
        -:  725:
        -:  726:    //Reset Hand
    #####:  727:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  728:	    state->hand[currentPlayer][i] = temphand[i];
    #####:  729:	    temphand[i] = -1;
        -:  730:     }
        -:  731:     //Reset Hand		
    #####:  732:}
        -:  733:/*---------------------Smithy------------------------------*/
        -:  734://gives player +3 cards from their deck
    #####:  735:void smithyCard(int currentPlayer,struct gameState *state,int handPos){
        -:  736:    int i;
    #####:  737:    for (i = 0; i < 3; i++){
    #####:  738:	    drawCard(currentPlayer, state);
    #####:  739:        discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:	}
        -:  742:    //discard smithy card from hand
    #####:  743:    discardCard(handPos, currentPlayer, state, 0);
        -:  744:		
    #####:  745:}		
        -:  746:/*------------------------Village-------------------------------*/
        -:  747://plus 1 card plus 2 actions
    #####:  748:void villageCard(int currentPlayer,struct gameState *state,int handPos){
        -:  749:    //+1 Card
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:			
        -:  752:    //+2 Actions
    #####:  753:    state->numActions = state->numBuys + 2;
        -:  754:			
        -:  755:    //discard played card from hand
    #####:  756:    discardCard(handPos, currentPlayer, state, 0);
    #####:  757:}
        -:  758:/*-----------------------Baron----------------------------------*/
    #####:  759:void baronCard(int currentPlayer,struct gameState *state,int choice1){
    #####:  760:    state->numBuys++;//Increase buys by 1!
        -:  761:     
    #####:  762:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  763:	    int p = 0;//Iterator for hand!
    #####:  764:	    int card_not_discarded = 1;//Flag for discard set!
        -:  765:
    #####:  766:        while(card_not_discarded){
    #####:  767:	        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  768:	            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  769:	            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  770:	            state->discardCount[currentPlayer]++;
        -:  771:	    
    #####:  772:                for (;p < state->handCount[currentPlayer]; p++){
    #####:  773:	                state->hand[currentPlayer][p] = state->hand[currentPlayer][p];
        -:  774:	            }
    #####:  775:	            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  776:	            state->handCount[currentPlayer]--;
    #####:  777:	            card_not_discarded = 0;//Exit the loop
        -:  778:	        }
    #####:  779:	        else if (p > state->handCount[currentPlayer]){//if handCount is greater than 1 but no estate in hand
        -:  780:	            if(DEBUG) {
        -:  781:	                printf("No estate cards in your hand, invalid choice\n");
        -:  782:	                printf("Must gain an estate if there are any\n");
        -:  783:	            }
    #####:  784:	            if (supplyCount(estate, state) > 0){
    #####:  785:	                gainCard(estate, state, 0, currentPlayer);
    #####:  786:	                state->supplyCount[estate]--;//Decrement estates	      
        -:  787:	            }
    #####:  788:	            card_not_discarded = 0;//Exit the loop
        -:  789:	        }		    
        -:  790:	        else{
    #####:  791:	            p++;//Next card
        -:  792:	        }
        -:  793:	    }
        -:  794:    }		    
        -:  795:    else{//if player opts to gain a estate card
    #####:  796:	    if (supplyCount(estate, state) > 0){
    #####:  797:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  798:	        state->supplyCount[estate]--;//Decrement Estates
        -:  799:	        
        -:  800:	    }
        -:  801:    }
    #####:  802:    if (supplyCount(estate, state) == 0){
    #####:  803:        isGameOver(state);
        -:  804:    }
    #####:  805:}	    
        -:  806:
        -:  807:
        -:  808://****-*--------- Card Effect ----------*-****//
    #####:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int index;
    #####:  815:  int currentPlayer = whoseTurn(state);
    #####:  816:  int nextPlayer = currentPlayer + 1;
        -:  817:
    #####:  818:  int tributeRevealedCards[2] = {-1, -1};
        -:  819:  //int temphand[MAX_HAND];// moved above the if statement
    #####:  820:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  821:    nextPlayer = 0;
        -:  822:  }
        -:  823:  
        -:  824:	
        -:  825:  //uses switch to select card and perform actions
    #####:  826:  switch( card ) 
        -:  827:    {
        -:  828:    case adventurer:
    #####:  829:        adventurerCard(currentPlayer,state);
    #####:  830:	    break;
        -:  831:		
        -:  832:    case council_room:
        -:  833:      //+4 Cards
    #####:  834:      for (i = 0; i < 4; i++)
        -:  835:	{
    #####:  836:	  drawCard(currentPlayer, state);
        -:  837:	}
        -:  838:			
        -:  839:      //+1 Buy
    #####:  840:      state->numBuys++;
        -:  841:			
        -:  842:      //Each other player draws a card
    #####:  843:      for (i = 0; i < state->numPlayers; i++)
        -:  844:	{
    #####:  845:	  if ( i != currentPlayer )
        -:  846:	    {
    #####:  847:	      drawCard(i, state);
        -:  848:	    }
        -:  849:	}
        -:  850:			
        -:  851:      //put played card in played card pile
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:			
    #####:  854:      return 0;
        -:  855:			
        -:  856:    case feast:
        -:  857:        //gain card with cost up to 5
    #####:  858:        feastCard(currentPlayer,state,choice1);
    #####:  859:        break;
        -:  860:
        -:  861:    case gardens:
    #####:  862:      return -1;
        -:  863:			
        -:  864:    case mine:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:		
    #####:  872:      if (choice2 > treasure_map || choice2 < curse)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
    #####:  882:      gainCard(choice2, state, 2, currentPlayer);
        -:  883:
        -:  884:      //discard card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
        -:  886:
        -:  887:      //discard trashed card
    #####:  888:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  889:	{
    #####:  890:	  if (state->hand[currentPlayer][i] == j)
        -:  891:	    {
    #####:  892:	      discardCard(i, currentPlayer, state, 0);			
    #####:  893:	      break;
        -:  894:	    }
        -:  895:	}
        -:  896:			
    #####:  897:      return 0;
        -:  898:			
        -:  899:    case remodel:
    #####:  900:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  901:
    #####:  902:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  903:	{
    #####:  904:	  return -1;
        -:  905:	}
        -:  906:
    #####:  907:      gainCard(choice2, state, 0, currentPlayer);
        -:  908:
        -:  909:      //discard card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
        -:  911:
        -:  912:      //discard trashed card
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  914:	{
    #####:  915:	  if (state->hand[currentPlayer][i] == j)
        -:  916:	    {
    #####:  917:	      discardCard(i, currentPlayer, state, 0);			
    #####:  918:	      break;
        -:  919:	    }
        -:  920:	}
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case smithy:
    #####:  924:        smithyCard(currentPlayer,state,handPos);
    #####:  925:	    break;
        -:  926:    	
        -:  927:    case village:
    #####:  928:        villageCard(currentPlayer,state,handPos);
    #####:  929:		break;
        -:  930:
        -:  931:    case baron:
    #####:  932:        baronCard(currentPlayer,state,choice1);	
    #####:  933:        break;
        -:  934:	
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
        -:  938:      			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
        -:  987:			{
    #####:  988:			  drawCard(i, state);
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	  drawCard(currentPlayer, state);
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
    #####: 1215:	if (i != currentPlayer){
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
        -: 1257://****-*----------Discard Card -----------------*-****//
    #####: 1258:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1259:{
        -: 1260:	
        -: 1261:  //if card is not trashed, added to Played pile 
    #####: 1262:  if (trashFlag < 1)
        -: 1263:    {
        -: 1264:      //add card to played pile
    #####: 1265:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1266:      state->playedCardCount++;
        -: 1267:    }
        -: 1268:	
        -: 1269:  //set played card to -1
    #####: 1270:  state->hand[currentPlayer][handPos] = -1;
        -: 1271:	
        -: 1272:  //remove card from player's hand
    #####: 1273:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
    #####: 1278:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        -: 1283:  else 	
        -: 1284:    {
        -: 1285:      //replace discarded card with last card in hand
    #####: 1286:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1287:      //set last card to -1
    #####: 1288:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:	
    #####: 1293:  return 0;
        -: 1294:}
        -: 1295:
    #####: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1297:{
        -: 1298:  //Note: supplyPos is enum of choosen card
        -: 1299:	
        -: 1300:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1301:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1302:    {
    #####: 1303:      return -1;
        -: 1304:    }
        -: 1305:	
        -: 1306:  //added card for [whoseTurn] current player:
        -: 1307:  // toFlag = 0 : add to discard
        -: 1308:  // toFlag = 1 : add to deck
        -: 1309:  // toFlag = 2 : add to hand
        -: 1310:
    #####: 1311:  if (toFlag == 1)
        -: 1312:    {
    #####: 1313:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1314:      state->deckCount[player]++;
        -: 1315:    }
    #####: 1316:  else if (toFlag == 2)
        -: 1317:    {
    #####: 1318:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1319:      state->handCount[player]++;
        -: 1320:    }
        -: 1321:  else
        -: 1322:    {
    #####: 1323:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1324:      state->discardCount[player]++;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //decrease number in supply pile
    #####: 1328:  state->supplyCount[supplyPos]--;
        -: 1329:	 
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
    #####: 1333:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1334:{
        -: 1335:  int i;
        -: 1336:	
        -: 1337:  //reset coin count
    #####: 1338:  state->coins = 0;
        -: 1339:
        -: 1340:  //add coins for each Treasure card in player's hand
    #####: 1341:  for (i = 0; i < state->handCount[player]; i++)
        -: 1342:    {
    #####: 1343:      if (state->hand[player][i] == copper)
        -: 1344:	{
    #####: 1345:	  state->coins += 1;
        -: 1346:	}
    #####: 1347:      else if (state->hand[player][i] == silver)
        -: 1348:	{
    #####: 1349:	  state->coins += 2;
        -: 1350:	}
    #####: 1351:      else if (state->hand[player][i] == gold)
        -: 1352:	{
    #####: 1353:	  state->coins += 3;
        -: 1354:	}	
        -: 1355:    }	
        -: 1356:
        -: 1357:  //add bonus
    #####: 1358:  state->coins += bonus;
        -: 1359:
    #####: 1360:  return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
File 'dominion.c'
Lines executed:1.96% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //--------initialize supply-----------//
        -:   70:  //set number of Curse cards
    #####:   71:  if (numPlayers == 2)
        -:   72:    {
    #####:   73:      state->supplyCount[curse] = 10;
        -:   74:    }
    #####:   75:  else if (numPlayers == 3)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 20;
        -:   78:    }
        -:   79:  else
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 30;
        -:   82:    }
        -:   83:
        -:   84:  //set number of Victory cards
    #####:   85:  if (numPlayers == 2)
        -:   86:    {
    #####:   87:      state->supplyCount[estate] = 8;
    #####:   88:      state->supplyCount[duchy] = 8;
    #####:   89:      state->supplyCount[province] = 8;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[estate] = 12;
    #####:   94:      state->supplyCount[duchy] = 12;
    #####:   95:      state->supplyCount[province] = 12;
        -:   96:    }
        -:   97:
        -:   98:  //set number of Treasure cards
    #####:   99:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  100:  state->supplyCount[silver] = 40;
    #####:  101:  state->supplyCount[gold] = 30;
        -:  102:
        -:  103:  //set number of Kingdom cards
    #####:  104:  for (i = adventurer; i <= treasure_map; i++)   //loop all cards
        -:  105:    {
    #####:  106:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  107:	{
    #####:  108:	  if (kingdomCards[j] == i)
        -:  109:	    {
        -:  110:	      //check if card is a 'Victory' Kingdom card
    #####:  111:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  112:		{
    #####:  113:		  if (numPlayers == 2){ 
    #####:  114:		    state->supplyCount[i] = 8; 
        -:  115:		  }
    #####:  116:		  else{ state->supplyCount[i] = 12; }
        -:  117:		}
        -:  118:	      else
        -:  119:		{
    #####:  120:		  state->supplyCount[i] = 10;
        -:  121:		}
    #####:  122:	      break;
        -:  123:	    }
        -:  124:	  else    //card is not in the set choosen for the game
        -:  125:	    {
    #####:  126:	      state->supplyCount[i] = -1;
        -:  127:	    }
        -:  128:	}
        -:  129:
        -:  130:    }
        -:  131:  //-------supply intilization complete------------//
        -:  132:
        -:  133:  //set player decks
    #####:  134:  for (i = 0; i < numPlayers; i++)
        -:  135:    {
    #####:  136:      state->deckCount[i] = 0;
    #####:  137:      for (j = 0; j < 3; j++)
        -:  138:	{
    #####:  139:	  state->deck[i][j] = estate;
    #####:  140:	  state->deckCount[i]++;
        -:  141:	}
    #####:  142:      for (j = 3; j < 10; j++)
        -:  143:	{
    #####:  144:	  state->deck[i][j] = copper;
    #####:  145:	  state->deckCount[i]++;		
        -:  146:	}
        -:  147:    }
        -:  148:
        -:  149:  //shuffle player decks
    #####:  150:  for (i = 0; i < numPlayers; i++)
        -:  151:    {
    #####:  152:      if ( shuffle(i, state) < 0 )
        -:  153:	{
    #####:  154:	  return -1;
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //draw player hands
    #####:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {  
        -:  161:      //initialize hand size to zero
    #####:  162:      state->handCount[i] = 0;
    #####:  163:      state->discardCount[i] = 0;
        -:  164:      //draw 5 cards
        -:  165:      // for (j = 0; j < 5; j++)
        -:  166:      //	{
        -:  167:      //	  drawCard(i, state);
        -:  168:      //	}
        -:  169:    }
        -:  170:  
        -:  171:  //set embargo tokens to 0 for all supply piles
    #####:  172:  for (i = 0; i <= treasure_map; i++)
        -:  173:    {
    #####:  174:      state->embargoTokens[i] = 0;
        -:  175:    }
        -:  176:
        -:  177:  //initialize first player's turn
    #####:  178:  state->outpostPlayed = 0;
    #####:  179:  state->phase = 0;
    #####:  180:  state->numActions = 1;
    #####:  181:  state->numBuys = 1;
    #####:  182:  state->playedCardCount = 0;
    #####:  183:  state->whoseTurn = 0;
    #####:  184:  state->handCount[state->whoseTurn] = 0;
        -:  185:  //int it; move to top
        -:  186:
        -:  187:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  188:  for (it = 0; it < 5; it++){
    #####:  189:    drawCard(state->whoseTurn, state);
        -:  190:  }
        -:  191:
    #####:  192:  updateCoins(state->whoseTurn, state, 0);
        -:  193:
    #####:  194:  return 0;
        -:  195:}
        -:  196:
        -:  197:/***----shuffle cards ---***/
    #####:  198:int shuffle(int player, struct gameState *state) {
        -:  199: 
        -:  200:
        -:  201:  int newDeck[MAX_DECK];
    #####:  202:  int newDeckPos = 0;
        -:  203:  int card;
        -:  204:  int i;
        -:  205:
    #####:  206:  if (state->deckCount[player] < 1)
    #####:  207:    return -1;
    #####:  208:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  209:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  210:
    #####:  211:  while (state->deckCount[player] > 0) {
    #####:  212:    card = floor(Random() * state->deckCount[player]);
    #####:  213:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  214:    newDeckPos++;
    #####:  215:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  216:      state->deck[player][i] = state->deck[player][i+1];
        -:  217:    }
    #####:  218:    state->deckCount[player]--;
        -:  219:  }
    #####:  220:  for (i = 0; i < newDeckPos; i++) {
    #####:  221:    state->deck[player][i] = newDeck[i];
    #####:  222:    state->deckCount[player]++;
        -:  223:  }
        -:  224:
    #####:  225:  return 0;
        -:  226:}
        -:  227:
        -:  228://***---- Play Card ----***//
     2000:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  230:{	
        -:  231:  int card;
     2000:  232:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:
        -:  234:  //check if it is the right phase
     2000:  235:  if (state->phase != 0)
        -:  236:    {
     2000:  237:      return -1;
        -:  238:    }
        -:  239:	
        -:  240:  //check if player has enough actions
    #####:  241:  if ( state->numActions < 1 )
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //get card played
    #####:  247:  card = handCard(handPos, state);
        -:  248:	
        -:  249:  //check if selected card is an action
    #####:  250:  if ( card < adventurer || card > treasure_map )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //play card
    #####:  256:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //reduce number of actions
    #####:  262:  state->numActions--;
        -:  263:
        -:  264:  //update coins (Treasure cards may be added with card draws)
    #####:  265:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  266:	
    #####:  267:  return 0;
        -:  268:}
        -:  269:
        -:  270:/***---- Buy Card ----***/
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
    #####:  278:  who = state->whoseTurn;
        -:  279:
    #####:  280:  if (state->numBuys < 1){
        -:  281:    if (DEBUG)
        -:  282:      printf("You do not have any buys left\n");
    #####:  283:    return -1;
    #####:  284:  } else if (supplyCount(supplyPos, state) <1){
        -:  285:    if (DEBUG)
        -:  286:      printf("There are not any of that type of card left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (state->coins < getCost(supplyPos)){
        -:  289:    if (DEBUG) 
        -:  290:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  291:    return -1;
        -:  292:  } else {
    #####:  293:    state->phase=1;
        -:  294:    //state->supplyCount[supplyPos]--;
    #####:  295:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  296:  
    #####:  297:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  298:    state->numBuys--;
        -:  299:    if (DEBUG)
        -:  300:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  301:  }
        -:  302:
        -:  303:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  304:  //state->discardCount[who]++;
        -:  305:    
    #####:  306:  return 0;
        -:  307:}
        -:  308:
    #####:  309:int numHandCards(struct gameState *state) {
    #####:  310:  return state->handCount[ whoseTurn(state) ];
        -:  311:}
        -:  312:
    #####:  313:int handCard(int handPos, struct gameState *state) {
    #####:  314:  int currentPlayer = whoseTurn(state);
    #####:  315:  return state->hand[currentPlayer][handPos];
        -:  316:}
        -:  317:
    #####:  318:int supplyCount(int card, struct gameState *state) {
    #####:  319:  return state->supplyCount[card];
        -:  320:}
        -:  321:
        -:  322:/***--- full deck count ---***/
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
    #####:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349://***--- End Turn ---***//
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:/***---- is Game Over ----***/
     2000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     2000:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     2000:  401:  j = 0;
        -:  402:  //TODO removed magic number  25=10 kingdom cards + 3 coin types+ 2 providence 
    52000:  403:  for (i = 0; i < 25; i++){
    50000:  404:      if (state->supplyCount[i] == 0){
    #####:  405:	    j++;
        -:  406:	  }
        -:  407:  }
     2000:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
     2000:  413:  return 0;
        -:  414:}
        -:  415:
        -:  416:/***---- score for ----***/
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:/***--- get winners  ---***/
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479: for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:/***---- draw card ----***/
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583:/***---- get cost ----***/
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646://****--- Card Functions ---****//
        -:  647://------------Adventurer-----------------//
        -:  648://draw cards until two treasure cards are revealed (a silver, copper or gold)
        -:  649:// discard non treasure cards drawn
    #####:  650:void adventurerCard(int currentPlayer, struct gameState *state){
        -:  651:    int cardDrawn;
    #####:  652:    int drawntreasure=0;
    #####:  653:    int extraCardsCount=0;
        -:  654:    int temphand[MAX_HAND];
        -:  655:
    #####:  656:    while(drawntreasure<2){
        -:  657:        //if the deck is empty we need to shuffle discard and add to deck
    #####:  658:        if (state->deckCount[currentPlayer] <1){
    #####:  659:	        shuffle(currentPlayer, state);
        -:  660:	    }
    #####:  661:	    drawCard(currentPlayer, state);
    #####:  662:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
        -:  663:        //top card of hand is most recently drawn card.
        -:  664:
    #####:  665:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  666:	        drawntreasure++;
        -:  667:	    else{
    #####:  668:	        temphand[extraCardsCount]=cardDrawn;
    #####:  669:	        state->handCount[currentPlayer]--; //this should just remove the top card (most recently drawn).
    #####:  670:	        extraCardsCount++;
        -:  671:	    }
        -:  672:    }
    #####:  673:    while(extraCardsCount-1>=0){
    #####:  674:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[extraCardsCount-1];
        -:  675:         // discard all cards in play that have been drawn
    #####:  676:	    extraCardsCount=extraCardsCount-1;
        -:  677:      }
    #####:  678:}
        -:  679://-----------------Feast Card--------------------------//
        -:  680://allows player to gain a card with a cost of 5 or less
    #####:  681:void feastCard(int currentPlayer,struct gameState *state,int choice1){
    #####:  682:    int x=1;//condition to loop on to check if buy has occured
        -:  683:    int i;//counting variable for backuphand loop
        -:  684:    int temphand[MAX_HAND];//back up of plays current hand
        -:  685:
        -:  686:    //Backup hand
    #####:  687:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  688:	    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  689:	    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  690:    }
        -:  691:    //Backup hand
        -:  692:
        -:  693:    //Update Coins for Buy
    #####:  694:    updateCoins(currentPlayer, state, 5);
        -:  695:    
    #####:  696:    while( x == 1) {//Buy one card
    #####:  697:	    if (supplyCount(choice1, state) <= 0){
        -:  698:	        if (DEBUG)
        -:  699:	            printf("None of that card left, sorry!\n");
        -:  700:
        -:  701:	        if (DEBUG){
        -:  702:	            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:	        }
        -:  704:	    }
    #####:  705:	    else if (state->coins < getCost(choice1)){
    #####:  706:	        printf("That card is too expensive!\n");
        -:  707:
        -:  708:	        if (DEBUG){
        -:  709:	            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:	        }
        -:  711:	    }
        -:  712:	    else{
        -:  713:            if (DEBUG){
        -:  714:	            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:	        }
        -:  716:
    #####:  717:	        gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  718:
        -:  719:	        if (DEBUG){
        -:  720:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	        }
        -:  722:
        -:  723:	    }
        -:  724:    }     
        -:  725:
        -:  726:    //Reset Hand
    #####:  727:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  728:	    state->hand[currentPlayer][i] = temphand[i];
    #####:  729:	    temphand[i] = -1;
        -:  730:     }
        -:  731:     //Reset Hand		
    #####:  732:}
        -:  733:/*---------------------Smithy------------------------------*/
        -:  734://gives player +3 cards from their deck
    #####:  735:void smithyCard(int currentPlayer,struct gameState *state,int handPos){
        -:  736:    int i;
    #####:  737:    for (i = 0; i < 3; i++){
    #####:  738:	    drawCard(currentPlayer, state);
    #####:  739:        discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:	}
        -:  742:    //discard smithy card from hand
    #####:  743:    discardCard(handPos, currentPlayer, state, 0);
        -:  744:		
    #####:  745:}		
        -:  746:/*------------------------Village-------------------------------*/
        -:  747://plus 1 card plus 2 actions
    #####:  748:void villageCard(int currentPlayer,struct gameState *state,int handPos){
        -:  749:    //+1 Card
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:			
        -:  752:    //+2 Actions
    #####:  753:    state->numActions = state->numBuys + 2;
        -:  754:			
        -:  755:    //discard played card from hand
    #####:  756:    discardCard(handPos, currentPlayer, state, 0);
    #####:  757:}
        -:  758:/*-----------------------Baron----------------------------------*/
    #####:  759:void baronCard(int currentPlayer,struct gameState *state,int choice1){
    #####:  760:    state->numBuys++;//Increase buys by 1!
        -:  761:     
    #####:  762:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  763:	    int p = 0;//Iterator for hand!
    #####:  764:	    int card_not_discarded = 1;//Flag for discard set!
        -:  765:
    #####:  766:        while(card_not_discarded){
    #####:  767:	        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  768:	            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  769:	            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  770:	            state->discardCount[currentPlayer]++;
        -:  771:	    
    #####:  772:                for (;p < state->handCount[currentPlayer]; p++){
    #####:  773:	                state->hand[currentPlayer][p] = state->hand[currentPlayer][p];
        -:  774:	            }
    #####:  775:	            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  776:	            state->handCount[currentPlayer]--;
    #####:  777:	            card_not_discarded = 0;//Exit the loop
        -:  778:	        }
    #####:  779:	        else if (p > state->handCount[currentPlayer]){//if handCount is greater than 1 but no estate in hand
        -:  780:	            if(DEBUG) {
        -:  781:	                printf("No estate cards in your hand, invalid choice\n");
        -:  782:	                printf("Must gain an estate if there are any\n");
        -:  783:	            }
    #####:  784:	            if (supplyCount(estate, state) > 0){
    #####:  785:	                gainCard(estate, state, 0, currentPlayer);
    #####:  786:	                state->supplyCount[estate]--;//Decrement estates	      
        -:  787:	            }
    #####:  788:	            card_not_discarded = 0;//Exit the loop
        -:  789:	        }		    
        -:  790:	        else{
    #####:  791:	            p++;//Next card
        -:  792:	        }
        -:  793:	    }
        -:  794:    }		    
        -:  795:    else{//if player opts to gain a estate card
    #####:  796:	    if (supplyCount(estate, state) > 0){
    #####:  797:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  798:	        state->supplyCount[estate]--;//Decrement Estates
        -:  799:	        
        -:  800:	    }
        -:  801:    }
    #####:  802:    if (supplyCount(estate, state) == 0){
    #####:  803:        isGameOver(state);
        -:  804:    }
    #####:  805:}	    
        -:  806:
        -:  807:
        -:  808://****-*--------- Card Effect ----------*-****//
    #####:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int index;
    #####:  815:  int currentPlayer = whoseTurn(state);
    #####:  816:  int nextPlayer = currentPlayer + 1;
        -:  817:
    #####:  818:  int tributeRevealedCards[2] = {-1, -1};
        -:  819:  //int temphand[MAX_HAND];// moved above the if statement
    #####:  820:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  821:    nextPlayer = 0;
        -:  822:  }
        -:  823:  
        -:  824:	
        -:  825:  //uses switch to select card and perform actions
    #####:  826:  switch( card ) 
        -:  827:    {
        -:  828:    case adventurer:
    #####:  829:        adventurerCard(currentPlayer,state);
    #####:  830:	    break;
        -:  831:		
        -:  832:    case council_room:
        -:  833:      //+4 Cards
    #####:  834:      for (i = 0; i < 4; i++)
        -:  835:	{
    #####:  836:	  drawCard(currentPlayer, state);
        -:  837:	}
        -:  838:			
        -:  839:      //+1 Buy
    #####:  840:      state->numBuys++;
        -:  841:			
        -:  842:      //Each other player draws a card
    #####:  843:      for (i = 0; i < state->numPlayers; i++)
        -:  844:	{
    #####:  845:	  if ( i != currentPlayer )
        -:  846:	    {
    #####:  847:	      drawCard(i, state);
        -:  848:	    }
        -:  849:	}
        -:  850:			
        -:  851:      //put played card in played card pile
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:			
    #####:  854:      return 0;
        -:  855:			
        -:  856:    case feast:
        -:  857:        //gain card with cost up to 5
    #####:  858:        feastCard(currentPlayer,state,choice1);
    #####:  859:        break;
        -:  860:
        -:  861:    case gardens:
    #####:  862:      return -1;
        -:  863:			
        -:  864:    case mine:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:		
    #####:  872:      if (choice2 > treasure_map || choice2 < curse)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
    #####:  882:      gainCard(choice2, state, 2, currentPlayer);
        -:  883:
        -:  884:      //discard card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
        -:  886:
        -:  887:      //discard trashed card
    #####:  888:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  889:	{
    #####:  890:	  if (state->hand[currentPlayer][i] == j)
        -:  891:	    {
    #####:  892:	      discardCard(i, currentPlayer, state, 0);			
    #####:  893:	      break;
        -:  894:	    }
        -:  895:	}
        -:  896:			
    #####:  897:      return 0;
        -:  898:			
        -:  899:    case remodel:
    #####:  900:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  901:
    #####:  902:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  903:	{
    #####:  904:	  return -1;
        -:  905:	}
        -:  906:
    #####:  907:      gainCard(choice2, state, 0, currentPlayer);
        -:  908:
        -:  909:      //discard card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
        -:  911:
        -:  912:      //discard trashed card
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  914:	{
    #####:  915:	  if (state->hand[currentPlayer][i] == j)
        -:  916:	    {
    #####:  917:	      discardCard(i, currentPlayer, state, 0);			
    #####:  918:	      break;
        -:  919:	    }
        -:  920:	}
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case smithy:
    #####:  924:        smithyCard(currentPlayer,state,handPos);
    #####:  925:	    break;
        -:  926:    	
        -:  927:    case village:
    #####:  928:        villageCard(currentPlayer,state,handPos);
    #####:  929:		break;
        -:  930:
        -:  931:    case baron:
    #####:  932:        baronCard(currentPlayer,state,choice1);	
    #####:  933:        break;
        -:  934:	
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
        -:  938:      			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
        -:  987:			{
    #####:  988:			  drawCard(i, state);
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	  drawCard(currentPlayer, state);
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
    #####: 1215:	if (i != currentPlayer){
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
        -: 1257://****-*----------Discard Card -----------------*-****//
    #####: 1258:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1259:{
        -: 1260:	
        -: 1261:  //if card is not trashed, added to Played pile 
    #####: 1262:  if (trashFlag < 1)
        -: 1263:    {
        -: 1264:      //add card to played pile
    #####: 1265:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1266:      state->playedCardCount++;
        -: 1267:    }
        -: 1268:	
        -: 1269:  //set played card to -1
    #####: 1270:  state->hand[currentPlayer][handPos] = -1;
        -: 1271:	
        -: 1272:  //remove card from player's hand
    #####: 1273:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
    #####: 1278:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        -: 1283:  else 	
        -: 1284:    {
        -: 1285:      //replace discarded card with last card in hand
    #####: 1286:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1287:      //set last card to -1
    #####: 1288:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:	
    #####: 1293:  return 0;
        -: 1294:}
        -: 1295:
    #####: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1297:{
        -: 1298:  //Note: supplyPos is enum of choosen card
        -: 1299:	
        -: 1300:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1301:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1302:    {
    #####: 1303:      return -1;
        -: 1304:    }
        -: 1305:	
        -: 1306:  //added card for [whoseTurn] current player:
        -: 1307:  // toFlag = 0 : add to discard
        -: 1308:  // toFlag = 1 : add to deck
        -: 1309:  // toFlag = 2 : add to hand
        -: 1310:
    #####: 1311:  if (toFlag == 1)
        -: 1312:    {
    #####: 1313:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1314:      state->deckCount[player]++;
        -: 1315:    }
    #####: 1316:  else if (toFlag == 2)
        -: 1317:    {
    #####: 1318:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1319:      state->handCount[player]++;
        -: 1320:    }
        -: 1321:  else
        -: 1322:    {
    #####: 1323:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1324:      state->discardCount[player]++;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //decrease number in supply pile
    #####: 1328:  state->supplyCount[supplyPos]--;
        -: 1329:	 
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
    #####: 1333:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1334:{
        -: 1335:  int i;
        -: 1336:	
        -: 1337:  //reset coin count
    #####: 1338:  state->coins = 0;
        -: 1339:
        -: 1340:  //add coins for each Treasure card in player's hand
    #####: 1341:  for (i = 0; i < state->handCount[player]; i++)
        -: 1342:    {
    #####: 1343:      if (state->hand[player][i] == copper)
        -: 1344:	{
    #####: 1345:	  state->coins += 1;
        -: 1346:	}
    #####: 1347:      else if (state->hand[player][i] == silver)
        -: 1348:	{
    #####: 1349:	  state->coins += 2;
        -: 1350:	}
    #####: 1351:      else if (state->hand[player][i] == gold)
        -: 1352:	{
    #####: 1353:	  state->coins += 3;
        -: 1354:	}	
        -: 1355:    }	
        -: 1356:
        -: 1357:  //add bonus
    #####: 1358:  state->coins += bonus;
        -: 1359:
    #####: 1360:  return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
File 'dominion.c'
Lines executed:3.57% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //--------initialize supply-----------//
        -:   70:  //set number of Curse cards
    #####:   71:  if (numPlayers == 2)
        -:   72:    {
    #####:   73:      state->supplyCount[curse] = 10;
        -:   74:    }
    #####:   75:  else if (numPlayers == 3)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 20;
        -:   78:    }
        -:   79:  else
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 30;
        -:   82:    }
        -:   83:
        -:   84:  //set number of Victory cards
    #####:   85:  if (numPlayers == 2)
        -:   86:    {
    #####:   87:      state->supplyCount[estate] = 8;
    #####:   88:      state->supplyCount[duchy] = 8;
    #####:   89:      state->supplyCount[province] = 8;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[estate] = 12;
    #####:   94:      state->supplyCount[duchy] = 12;
    #####:   95:      state->supplyCount[province] = 12;
        -:   96:    }
        -:   97:
        -:   98:  //set number of Treasure cards
    #####:   99:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  100:  state->supplyCount[silver] = 40;
    #####:  101:  state->supplyCount[gold] = 30;
        -:  102:
        -:  103:  //set number of Kingdom cards
    #####:  104:  for (i = adventurer; i <= treasure_map; i++)   //loop all cards
        -:  105:    {
    #####:  106:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  107:	{
    #####:  108:	  if (kingdomCards[j] == i)
        -:  109:	    {
        -:  110:	      //check if card is a 'Victory' Kingdom card
    #####:  111:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  112:		{
    #####:  113:		  if (numPlayers == 2){ 
    #####:  114:		    state->supplyCount[i] = 8; 
        -:  115:		  }
    #####:  116:		  else{ state->supplyCount[i] = 12; }
        -:  117:		}
        -:  118:	      else
        -:  119:		{
    #####:  120:		  state->supplyCount[i] = 10;
        -:  121:		}
    #####:  122:	      break;
        -:  123:	    }
        -:  124:	  else    //card is not in the set choosen for the game
        -:  125:	    {
    #####:  126:	      state->supplyCount[i] = -1;
        -:  127:	    }
        -:  128:	}
        -:  129:
        -:  130:    }
        -:  131:  //-------supply intilization complete------------//
        -:  132:
        -:  133:  //set player decks
    #####:  134:  for (i = 0; i < numPlayers; i++)
        -:  135:    {
    #####:  136:      state->deckCount[i] = 0;
    #####:  137:      for (j = 0; j < 3; j++)
        -:  138:	{
    #####:  139:	  state->deck[i][j] = estate;
    #####:  140:	  state->deckCount[i]++;
        -:  141:	}
    #####:  142:      for (j = 3; j < 10; j++)
        -:  143:	{
    #####:  144:	  state->deck[i][j] = copper;
    #####:  145:	  state->deckCount[i]++;		
        -:  146:	}
        -:  147:    }
        -:  148:
        -:  149:  //shuffle player decks
    #####:  150:  for (i = 0; i < numPlayers; i++)
        -:  151:    {
    #####:  152:      if ( shuffle(i, state) < 0 )
        -:  153:	{
    #####:  154:	  return -1;
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //draw player hands
    #####:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {  
        -:  161:      //initialize hand size to zero
    #####:  162:      state->handCount[i] = 0;
    #####:  163:      state->discardCount[i] = 0;
        -:  164:      //draw 5 cards
        -:  165:      // for (j = 0; j < 5; j++)
        -:  166:      //	{
        -:  167:      //	  drawCard(i, state);
        -:  168:      //	}
        -:  169:    }
        -:  170:  
        -:  171:  //set embargo tokens to 0 for all supply piles
    #####:  172:  for (i = 0; i <= treasure_map; i++)
        -:  173:    {
    #####:  174:      state->embargoTokens[i] = 0;
        -:  175:    }
        -:  176:
        -:  177:  //initialize first player's turn
    #####:  178:  state->outpostPlayed = 0;
    #####:  179:  state->phase = 0;
    #####:  180:  state->numActions = 1;
    #####:  181:  state->numBuys = 1;
    #####:  182:  state->playedCardCount = 0;
    #####:  183:  state->whoseTurn = 0;
    #####:  184:  state->handCount[state->whoseTurn] = 0;
        -:  185:  //int it; move to top
        -:  186:
        -:  187:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  188:  for (it = 0; it < 5; it++){
    #####:  189:    drawCard(state->whoseTurn, state);
        -:  190:  }
        -:  191:
    #####:  192:  updateCoins(state->whoseTurn, state, 0);
        -:  193:
    #####:  194:  return 0;
        -:  195:}
        -:  196:
        -:  197:/***----shuffle cards ---***/
    #####:  198:int shuffle(int player, struct gameState *state) {
        -:  199: 
        -:  200:
        -:  201:  int newDeck[MAX_DECK];
    #####:  202:  int newDeckPos = 0;
        -:  203:  int card;
        -:  204:  int i;
        -:  205:
    #####:  206:  if (state->deckCount[player] < 1)
    #####:  207:    return -1;
    #####:  208:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  209:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  210:
    #####:  211:  while (state->deckCount[player] > 0) {
    #####:  212:    card = floor(Random() * state->deckCount[player]);
    #####:  213:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  214:    newDeckPos++;
    #####:  215:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  216:      state->deck[player][i] = state->deck[player][i+1];
        -:  217:    }
    #####:  218:    state->deckCount[player]--;
        -:  219:  }
    #####:  220:  for (i = 0; i < newDeckPos; i++) {
    #####:  221:    state->deck[player][i] = newDeck[i];
    #####:  222:    state->deckCount[player]++;
        -:  223:  }
        -:  224:
    #####:  225:  return 0;
        -:  226:}
        -:  227:
        -:  228://***---- Play Card ----***//
     2000:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  230:{	
        -:  231:  int card;
     2000:  232:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:
        -:  234:  //check if it is the right phase
     2000:  235:  if (state->phase != 0)
        -:  236:    {
     2000:  237:      return -1;
        -:  238:    }
        -:  239:	
        -:  240:  //check if player has enough actions
    #####:  241:  if ( state->numActions < 1 )
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //get card played
    #####:  247:  card = handCard(handPos, state);
        -:  248:	
        -:  249:  //check if selected card is an action
    #####:  250:  if ( card < adventurer || card > treasure_map )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //play card
    #####:  256:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //reduce number of actions
    #####:  262:  state->numActions--;
        -:  263:
        -:  264:  //update coins (Treasure cards may be added with card draws)
    #####:  265:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  266:	
    #####:  267:  return 0;
        -:  268:}
        -:  269:
        -:  270:/***---- Buy Card ----***/
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
    #####:  278:  who = state->whoseTurn;
        -:  279:
    #####:  280:  if (state->numBuys < 1){
        -:  281:    if (DEBUG)
        -:  282:      printf("You do not have any buys left\n");
    #####:  283:    return -1;
    #####:  284:  } else if (supplyCount(supplyPos, state) <1){
        -:  285:    if (DEBUG)
        -:  286:      printf("There are not any of that type of card left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (state->coins < getCost(supplyPos)){
        -:  289:    if (DEBUG) 
        -:  290:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  291:    return -1;
        -:  292:  } else {
    #####:  293:    state->phase=1;
        -:  294:    //state->supplyCount[supplyPos]--;
    #####:  295:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  296:  
    #####:  297:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  298:    state->numBuys--;
        -:  299:    if (DEBUG)
        -:  300:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  301:  }
        -:  302:
        -:  303:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  304:  //state->discardCount[who]++;
        -:  305:    
    #####:  306:  return 0;
        -:  307:}
        -:  308:
    #####:  309:int numHandCards(struct gameState *state) {
    #####:  310:  return state->handCount[ whoseTurn(state) ];
        -:  311:}
        -:  312:
    #####:  313:int handCard(int handPos, struct gameState *state) {
    #####:  314:  int currentPlayer = whoseTurn(state);
    #####:  315:  return state->hand[currentPlayer][handPos];
        -:  316:}
        -:  317:
    #####:  318:int supplyCount(int card, struct gameState *state) {
    #####:  319:  return state->supplyCount[card];
        -:  320:}
        -:  321:
        -:  322:/***--- full deck count ---***/
     2000:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
     2000:  325:  int count = 0;
        -:  326:
   498219:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
   496219:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
   504102:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
   502102:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
   491322:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
   489322:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
     2000:  342:  return count;
        -:  343:}
        -:  344:
    #####:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349://***--- End Turn ---***//
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:/***---- is Game Over ----***/
     2000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     2000:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     2000:  401:  j = 0;
        -:  402:  //TODO removed magic number  25=10 kingdom cards + 3 coin types+ 2 providence 
    52000:  403:  for (i = 0; i < 25; i++){
    50000:  404:      if (state->supplyCount[i] == 0){
    #####:  405:	    j++;
        -:  406:	  }
        -:  407:  }
     2000:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
     2000:  413:  return 0;
        -:  414:}
        -:  415:
        -:  416:/***---- score for ----***/
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:/***--- get winners  ---***/
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479: for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:/***---- draw card ----***/
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583:/***---- get cost ----***/
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646://****--- Card Functions ---****//
        -:  647://------------Adventurer-----------------//
        -:  648://draw cards until two treasure cards are revealed (a silver, copper or gold)
        -:  649:// discard non treasure cards drawn
    #####:  650:void adventurerCard(int currentPlayer, struct gameState *state){
        -:  651:    int cardDrawn;
    #####:  652:    int drawntreasure=0;
    #####:  653:    int extraCardsCount=0;
        -:  654:    int temphand[MAX_HAND];
        -:  655:
    #####:  656:    while(drawntreasure<2){
        -:  657:        //if the deck is empty we need to shuffle discard and add to deck
    #####:  658:        if (state->deckCount[currentPlayer] <1){
    #####:  659:	        shuffle(currentPlayer, state);
        -:  660:	    }
    #####:  661:	    drawCard(currentPlayer, state);
    #####:  662:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
        -:  663:        //top card of hand is most recently drawn card.
        -:  664:
    #####:  665:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  666:	        drawntreasure++;
        -:  667:	    else{
    #####:  668:	        temphand[extraCardsCount]=cardDrawn;
    #####:  669:	        state->handCount[currentPlayer]--; //this should just remove the top card (most recently drawn).
    #####:  670:	        extraCardsCount++;
        -:  671:	    }
        -:  672:    }
    #####:  673:    while(extraCardsCount-1>=0){
    #####:  674:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[extraCardsCount-1];
        -:  675:         // discard all cards in play that have been drawn
    #####:  676:	    extraCardsCount=extraCardsCount-1;
        -:  677:      }
    #####:  678:}
        -:  679://-----------------Feast Card--------------------------//
        -:  680://allows player to gain a card with a cost of 5 or less
    #####:  681:void feastCard(int currentPlayer,struct gameState *state,int choice1){
    #####:  682:    int x=1;//condition to loop on to check if buy has occured
        -:  683:    int i;//counting variable for backuphand loop
        -:  684:    int temphand[MAX_HAND];//back up of plays current hand
        -:  685:
        -:  686:    //Backup hand
    #####:  687:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  688:	    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  689:	    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  690:    }
        -:  691:    //Backup hand
        -:  692:
        -:  693:    //Update Coins for Buy
    #####:  694:    updateCoins(currentPlayer, state, 5);
        -:  695:    
    #####:  696:    while( x == 1) {//Buy one card
    #####:  697:	    if (supplyCount(choice1, state) <= 0){
        -:  698:	        if (DEBUG)
        -:  699:	            printf("None of that card left, sorry!\n");
        -:  700:
        -:  701:	        if (DEBUG){
        -:  702:	            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:	        }
        -:  704:	    }
    #####:  705:	    else if (state->coins < getCost(choice1)){
    #####:  706:	        printf("That card is too expensive!\n");
        -:  707:
        -:  708:	        if (DEBUG){
        -:  709:	            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:	        }
        -:  711:	    }
        -:  712:	    else{
        -:  713:            if (DEBUG){
        -:  714:	            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:	        }
        -:  716:
    #####:  717:	        gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  718:
        -:  719:	        if (DEBUG){
        -:  720:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	        }
        -:  722:
        -:  723:	    }
        -:  724:    }     
        -:  725:
        -:  726:    //Reset Hand
    #####:  727:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  728:	    state->hand[currentPlayer][i] = temphand[i];
    #####:  729:	    temphand[i] = -1;
        -:  730:     }
        -:  731:     //Reset Hand		
    #####:  732:}
        -:  733:/*---------------------Smithy------------------------------*/
        -:  734://gives player +3 cards from their deck
    #####:  735:void smithyCard(int currentPlayer,struct gameState *state,int handPos){
        -:  736:    int i;
    #####:  737:    for (i = 0; i < 3; i++){
    #####:  738:	    drawCard(currentPlayer, state);
    #####:  739:        discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:	}
        -:  742:    //discard smithy card from hand
    #####:  743:    discardCard(handPos, currentPlayer, state, 0);
        -:  744:		
    #####:  745:}		
        -:  746:/*------------------------Village-------------------------------*/
        -:  747://plus 1 card plus 2 actions
    #####:  748:void villageCard(int currentPlayer,struct gameState *state,int handPos){
        -:  749:    //+1 Card
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:			
        -:  752:    //+2 Actions
    #####:  753:    state->numActions = state->numBuys + 2;
        -:  754:			
        -:  755:    //discard played card from hand
    #####:  756:    discardCard(handPos, currentPlayer, state, 0);
    #####:  757:}
        -:  758:/*-----------------------Baron----------------------------------*/
    #####:  759:void baronCard(int currentPlayer,struct gameState *state,int choice1){
    #####:  760:    state->numBuys++;//Increase buys by 1!
        -:  761:     
    #####:  762:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  763:	    int p = 0;//Iterator for hand!
    #####:  764:	    int card_not_discarded = 1;//Flag for discard set!
        -:  765:
    #####:  766:        while(card_not_discarded){
    #####:  767:	        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  768:	            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  769:	            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  770:	            state->discardCount[currentPlayer]++;
        -:  771:	    
    #####:  772:                for (;p < state->handCount[currentPlayer]; p++){
    #####:  773:	                state->hand[currentPlayer][p] = state->hand[currentPlayer][p];
        -:  774:	            }
    #####:  775:	            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  776:	            state->handCount[currentPlayer]--;
    #####:  777:	            card_not_discarded = 0;//Exit the loop
        -:  778:	        }
    #####:  779:	        else if (p > state->handCount[currentPlayer]){//if handCount is greater than 1 but no estate in hand
        -:  780:	            if(DEBUG) {
        -:  781:	                printf("No estate cards in your hand, invalid choice\n");
        -:  782:	                printf("Must gain an estate if there are any\n");
        -:  783:	            }
    #####:  784:	            if (supplyCount(estate, state) > 0){
    #####:  785:	                gainCard(estate, state, 0, currentPlayer);
    #####:  786:	                state->supplyCount[estate]--;//Decrement estates	      
        -:  787:	            }
    #####:  788:	            card_not_discarded = 0;//Exit the loop
        -:  789:	        }		    
        -:  790:	        else{
    #####:  791:	            p++;//Next card
        -:  792:	        }
        -:  793:	    }
        -:  794:    }		    
        -:  795:    else{//if player opts to gain a estate card
    #####:  796:	    if (supplyCount(estate, state) > 0){
    #####:  797:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  798:	        state->supplyCount[estate]--;//Decrement Estates
        -:  799:	        
        -:  800:	    }
        -:  801:    }
    #####:  802:    if (supplyCount(estate, state) == 0){
    #####:  803:        isGameOver(state);
        -:  804:    }
    #####:  805:}	    
        -:  806:
        -:  807:
        -:  808://****-*--------- Card Effect ----------*-****//
    #####:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int index;
    #####:  815:  int currentPlayer = whoseTurn(state);
    #####:  816:  int nextPlayer = currentPlayer + 1;
        -:  817:
    #####:  818:  int tributeRevealedCards[2] = {-1, -1};
        -:  819:  //int temphand[MAX_HAND];// moved above the if statement
    #####:  820:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  821:    nextPlayer = 0;
        -:  822:  }
        -:  823:  
        -:  824:	
        -:  825:  //uses switch to select card and perform actions
    #####:  826:  switch( card ) 
        -:  827:    {
        -:  828:    case adventurer:
    #####:  829:        adventurerCard(currentPlayer,state);
    #####:  830:	    break;
        -:  831:		
        -:  832:    case council_room:
        -:  833:      //+4 Cards
    #####:  834:      for (i = 0; i < 4; i++)
        -:  835:	{
    #####:  836:	  drawCard(currentPlayer, state);
        -:  837:	}
        -:  838:			
        -:  839:      //+1 Buy
    #####:  840:      state->numBuys++;
        -:  841:			
        -:  842:      //Each other player draws a card
    #####:  843:      for (i = 0; i < state->numPlayers; i++)
        -:  844:	{
    #####:  845:	  if ( i != currentPlayer )
        -:  846:	    {
    #####:  847:	      drawCard(i, state);
        -:  848:	    }
        -:  849:	}
        -:  850:			
        -:  851:      //put played card in played card pile
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:			
    #####:  854:      return 0;
        -:  855:			
        -:  856:    case feast:
        -:  857:        //gain card with cost up to 5
    #####:  858:        feastCard(currentPlayer,state,choice1);
    #####:  859:        break;
        -:  860:
        -:  861:    case gardens:
    #####:  862:      return -1;
        -:  863:			
        -:  864:    case mine:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:		
    #####:  872:      if (choice2 > treasure_map || choice2 < curse)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
    #####:  882:      gainCard(choice2, state, 2, currentPlayer);
        -:  883:
        -:  884:      //discard card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
        -:  886:
        -:  887:      //discard trashed card
    #####:  888:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  889:	{
    #####:  890:	  if (state->hand[currentPlayer][i] == j)
        -:  891:	    {
    #####:  892:	      discardCard(i, currentPlayer, state, 0);			
    #####:  893:	      break;
        -:  894:	    }
        -:  895:	}
        -:  896:			
    #####:  897:      return 0;
        -:  898:			
        -:  899:    case remodel:
    #####:  900:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  901:
    #####:  902:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  903:	{
    #####:  904:	  return -1;
        -:  905:	}
        -:  906:
    #####:  907:      gainCard(choice2, state, 0, currentPlayer);
        -:  908:
        -:  909:      //discard card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
        -:  911:
        -:  912:      //discard trashed card
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  914:	{
    #####:  915:	  if (state->hand[currentPlayer][i] == j)
        -:  916:	    {
    #####:  917:	      discardCard(i, currentPlayer, state, 0);			
    #####:  918:	      break;
        -:  919:	    }
        -:  920:	}
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case smithy:
    #####:  924:        smithyCard(currentPlayer,state,handPos);
    #####:  925:	    break;
        -:  926:    	
        -:  927:    case village:
    #####:  928:        villageCard(currentPlayer,state,handPos);
    #####:  929:		break;
        -:  930:
        -:  931:    case baron:
    #####:  932:        baronCard(currentPlayer,state,choice1);	
    #####:  933:        break;
        -:  934:	
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
        -:  938:      			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
        -:  987:			{
    #####:  988:			  drawCard(i, state);
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	  drawCard(currentPlayer, state);
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
    #####: 1215:	if (i != currentPlayer){
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
        -: 1257://****-*----------Discard Card -----------------*-****//
    #####: 1258:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1259:{
        -: 1260:	
        -: 1261:  //if card is not trashed, added to Played pile 
    #####: 1262:  if (trashFlag < 1)
        -: 1263:    {
        -: 1264:      //add card to played pile
    #####: 1265:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1266:      state->playedCardCount++;
        -: 1267:    }
        -: 1268:	
        -: 1269:  //set played card to -1
    #####: 1270:  state->hand[currentPlayer][handPos] = -1;
        -: 1271:	
        -: 1272:  //remove card from player's hand
    #####: 1273:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
    #####: 1278:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        -: 1283:  else 	
        -: 1284:    {
        -: 1285:      //replace discarded card with last card in hand
    #####: 1286:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1287:      //set last card to -1
    #####: 1288:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:	
    #####: 1293:  return 0;
        -: 1294:}
        -: 1295:
    #####: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1297:{
        -: 1298:  //Note: supplyPos is enum of choosen card
        -: 1299:	
        -: 1300:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1301:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1302:    {
    #####: 1303:      return -1;
        -: 1304:    }
        -: 1305:	
        -: 1306:  //added card for [whoseTurn] current player:
        -: 1307:  // toFlag = 0 : add to discard
        -: 1308:  // toFlag = 1 : add to deck
        -: 1309:  // toFlag = 2 : add to hand
        -: 1310:
    #####: 1311:  if (toFlag == 1)
        -: 1312:    {
    #####: 1313:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1314:      state->deckCount[player]++;
        -: 1315:    }
    #####: 1316:  else if (toFlag == 2)
        -: 1317:    {
    #####: 1318:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1319:      state->handCount[player]++;
        -: 1320:    }
        -: 1321:  else
        -: 1322:    {
    #####: 1323:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1324:      state->discardCount[player]++;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //decrease number in supply pile
    #####: 1328:  state->supplyCount[supplyPos]--;
        -: 1329:	 
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
    #####: 1333:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1334:{
        -: 1335:  int i;
        -: 1336:	
        -: 1337:  //reset coin count
    #####: 1338:  state->coins = 0;
        -: 1339:
        -: 1340:  //add coins for each Treasure card in player's hand
    #####: 1341:  for (i = 0; i < state->handCount[player]; i++)
        -: 1342:    {
    #####: 1343:      if (state->hand[player][i] == copper)
        -: 1344:	{
    #####: 1345:	  state->coins += 1;
        -: 1346:	}
    #####: 1347:      else if (state->hand[player][i] == silver)
        -: 1348:	{
    #####: 1349:	  state->coins += 2;
        -: 1350:	}
    #####: 1351:      else if (state->hand[player][i] == gold)
        -: 1352:	{
    #####: 1353:	  state->coins += 3;
        -: 1354:	}	
        -: 1355:    }	
        -: 1356:
        -: 1357:  //add bonus
    #####: 1358:  state->coins += bonus;
        -: 1359:
    #####: 1360:  return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
