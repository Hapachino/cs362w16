Testing drawCard.
RANDOM TESTS.
ALL TESTS OK
File 'dominion.c'
Lines executed:7.04% of 639
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
        -:   10:int compare(const void* a, const void* b) {
     6849:   11:  if (*(int*)a > *(int*)b)
     3485:   12:    return 1;
     3364:   13:  if (*(int*)a < *(int*)b)
     3364:   14:    return -1;
    #####:   15:  return 0;
     6849:   16:}
        -:   17:
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
    #####:   46:  SelectStream(1);
    #####:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
    #####:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
    #####:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    #####:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
    #####:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
    #####:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
    #####:   67:        }
    #####:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
    #####:   75:  if (numPlayers == 2)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 10;
    #####:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
    #####:   89:  if (numPlayers == 2)
        -:   90:    {
    #####:   91:      state->supplyCount[estate] = 8;
    #####:   92:      state->supplyCount[duchy] = 8;
    #####:   93:      state->supplyCount[province] = 8;
    #####:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
    #####:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  104:  state->supplyCount[silver] = 40;
    #####:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    #####:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
    #####:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
    #####:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    #####:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
    #####:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    #####:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    #####:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
    #####:  132:	}
        -:  133:
    #####:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
    #####:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
    #####:  142:      state->deckCount[i] = 0;
    #####:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    #####:  145:	  state->deck[i][j] = estate;
    #####:  146:	  state->deckCount[i]++;
    #####:  147:	}
    #####:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    #####:  150:	  state->deck[i][j] = copper;
    #####:  151:	  state->deckCount[i]++;		
    #####:  152:	}
    #####:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
    #####:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
    #####:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
    #####:  162:    }
        -:  163:
        -:  164:  //draw player hands
    #####:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
    #####:  168:      state->handCount[i] = 0;
    #####:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
    #####:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
    #####:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
    #####:  180:      state->embargoTokens[i] = 0;
    #####:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
    #####:  184:  state->outpostPlayed = 0;
    #####:  185:  state->phase = 0;
    #####:  186:  state->numActions = 1;
    #####:  187:  state->numBuys = 1;
    #####:  188:  state->playedCardCount = 0;
    #####:  189:  state->whoseTurn = 0;
    #####:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  194:  for (it = 0; it < 5; it++){
    #####:  195:    drawCard(state->whoseTurn, state);
    #####:  196:  }
        -:  197:
    #####:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
    #####:  200:  return 0;
    #####:  201:}
        -:  202:
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     1622:  216:  while (state->deckCount[player] > 0) {
      809:  217:    card = floor(Random() * state->deckCount[player]);
      809:  218:    newDeck[newDeckPos] = state->deck[player][card];
      809:  219:    newDeckPos++;
   163444:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
    80913:  221:      state->deck[player][i] = state->deck[player][i+1];
    80913:  222:    }
      809:  223:    state->deckCount[player]--;
        -:  224:  }
     1622:  225:  for (i = 0; i < newDeckPos; i++) {
      809:  226:    state->deck[player][i] = newDeck[i];
      809:  227:    state->deckCount[player]++;
      809:  228:  }
        -:  229:
        2:  230:  return 0;
        2:  231:}
        -:  232:
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
     2000:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
     1622:  535:    for (i = 0; i < state->discardCount[player];i++){
      809:  536:      state->deck[player][i] = state->discard[player][i];
      809:  537:      state->discard[player][i] = -1;
      809:  538:    }
        -:  539:
        2:  540:    state->deckCount[player] = state->discardCount[player];
        2:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        2:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        2:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        2:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        2:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        2:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
        2:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  565:    state->deckCount[player]--;
        2:  566:    state->handCount[player]++;//Increment hand count
        2:  567:  }
        -:  568:
        -:  569:  else{
     1998:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
     1998:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1998:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1998:  578:    state->deckCount[player]--;
     1998:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
     2000:  582:  return 0;
     2000:  583:}
        -:  584:
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      while(drawntreasure<2){
    #####:  673:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  674:	  shuffle(currentPlayer, state);
    #####:  675:	}
    #####:  676:	drawCard(currentPlayer, state);
    #####:  677:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  678:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  679:	  drawntreasure++;
        -:  680:	else{
    #####:  681:	  temphand[z]=cardDrawn;
    #####:  682:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  683:	  z++;
        -:  684:	}
        -:  685:      }
    #####:  686:      while(z-1>=0){
    #####:  687:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  688:	z=z-1;
        -:  689:      }
    #####:  690:      return 0;
        -:  691:			
        -:  692:    case council_room:
        -:  693:      //+4 Cards
    #####:  694:      for (i = 0; i < 4; i++)
        -:  695:	{
    #####:  696:	  drawCard(currentPlayer, state);
    #####:  697:	}
        -:  698:			
        -:  699:      //+1 Buy
    #####:  700:      state->numBuys++;
        -:  701:			
        -:  702:      //Each other player draws a card
    #####:  703:      for (i = 0; i < state->numPlayers; i++)
        -:  704:	{
    #####:  705:	  if ( i != currentPlayer )
        -:  706:	    {
    #####:  707:	      drawCard(i, state);
    #####:  708:	    }
    #####:  709:	}
        -:  710:			
        -:  711:      //put played card in played card pile
    #####:  712:      discardCard(handPos, currentPlayer, state, 0);
        -:  713:			
    #####:  714:      return 0;
        -:  715:			
        -:  716:    case feast:
        -:  717:      //gain card with cost up to 5
        -:  718:      //Backup hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  720:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  722:      }
        -:  723:      //Backup hand
        -:  724:
        -:  725:      //Update Coins for Buy
    #####:  726:      updateCoins(currentPlayer, state, 5);
    #####:  727:      x = 1;//Condition to loop on
    #####:  728:      while( x == 1) {//Buy one card
    #####:  729:	if (supplyCount(choice1, state) <= 0){
        -:  730:	  if (DEBUG)
        -:  731:	    printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:	  }
    #####:  736:	}
    #####:  737:	else if (state->coins < getCost(choice1)){
    #####:  738:	  printf("That card is too expensive!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:	  }
    #####:  743:	}
        -:  744:	else{
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:	  }
        -:  749:
    #####:  750:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  751:	  x = 0;//No more buying cards
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
        -:  757:	}
        -:  758:      }     
        -:  759:
        -:  760:      //Reset Hand
    #####:  761:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  762:	state->hand[currentPlayer][i] = temphand[i];
    #####:  763:	temphand[i] = -1;
    #####:  764:      }
        -:  765:      //Reset Hand
        -:  766:      			
    #####:  767:      return 0;
        -:  768:			
        -:  769:    case gardens:
    #####:  770:      return -1;
        -:  771:			
        -:  772:    case mine:
    #####:  773:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:
    #####:  775:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:		
    #####:  780:      if (choice2 > treasure_map || choice2 < curse)
        -:  781:	{
    #####:  782:	  return -1;
        -:  783:	}
        -:  784:
    #####:  785:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  786:	{
    #####:  787:	  return -1;
        -:  788:	}
        -:  789:
    #####:  790:      gainCard(choice2, state, 2, currentPlayer);
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
        -:  794:
        -:  795:      //discard trashed card
    #####:  796:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  797:	{
    #####:  798:	  if (state->hand[currentPlayer][i] == j)
        -:  799:	    {
    #####:  800:	      discardCard(i, currentPlayer, state, 0);			
    #####:  801:	      break;
        -:  802:	    }
    #####:  803:	}
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case remodel:
    #####:  808:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  809:
    #####:  810:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  811:	{
    #####:  812:	  return -1;
        -:  813:	}
        -:  814:
    #####:  815:      gainCard(choice2, state, 0, currentPlayer);
        -:  816:
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
        -:  819:
        -:  820:      //discard trashed card
    #####:  821:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  822:	{
    #####:  823:	  if (state->hand[currentPlayer][i] == j)
        -:  824:	    {
    #####:  825:	      discardCard(i, currentPlayer, state, 0);			
    #####:  826:	      break;
        -:  827:	    }
    #####:  828:	}
        -:  829:
        -:  830:
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case smithy:
        -:  834:      //+3 Cards
    #####:  835:      for (i = 0; i < 3; i++)
        -:  836:	{
    #####:  837:	  drawCard(currentPlayer, state);
    #####:  838:	}
        -:  839:			
        -:  840:      //discard card from hand
    #####:  841:      discardCard(handPos, currentPlayer, state, 0);
    #####:  842:      return 0;
        -:  843:		
        -:  844:    case village:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
        -:  847:			
        -:  848:      //+2 Actions
    #####:  849:      state->numActions = state->numActions + 2;
        -:  850:			
        -:  851:      //discard played card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
    #####:  853:      return 0;
        -:  854:		
        -:  855:    case baron:
    #####:  856:      state->numBuys++;//Increase buys by 1!
    #####:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
    #####:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
        -:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
    #####:  881:		isGameOver(state);
    #####:  882:	      }
    #####:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
    #####:  885:	  }
        -:  886:			    
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
    #####:  891:      }
        -:  892:			    
        -:  893:      else{
    #####:  894:	if (supplyCount(estate, state) > 0){
    #####:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  896:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  897:	  if (supplyCount(estate, state) == 0){
    #####:  898:	    isGameOver(state);
    #####:  899:	  }
    #####:  900:	}
        -:  901:      }
        -:  902:	    
        -:  903:      
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case great_hall:
        -:  907:      //+1 Card
    #####:  908:      drawCard(currentPlayer, state);
        -:  909:			
        -:  910:      //+1 Actions
    #####:  911:      state->numActions++;
        -:  912:			
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case minion:
        -:  918:      //+1 action
    #####:  919:      state->numActions++;
        -:  920:			
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:			
    #####:  924:      if (choice1)		//+2 coins
        -:  925:	{
    #####:  926:	  state->coins = state->coins + 2;
    #####:  927:	}
        -:  928:			
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
        -:  935:	    }
        -:  936:				
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
    #####:  941:	    }
        -:  942:				
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
        -:  954:			}
        -:  955:							
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
        -:  958:			{
    #####:  959:			  drawCard(i, state);
    #####:  960:			}
    #####:  961:		    }
    #####:  962:		}
    #####:  963:	    }
        -:  964:				
    #####:  965:	}
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
        -:  970:	{
        -:  971:	  //+2 cards
    #####:  972:	  drawCard(currentPlayer, state);
    #####:  973:	  drawCard(currentPlayer, state);
    #####:  974:	}
    #####:  975:      else if (choice1 == 2)
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
    #####:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
        -:  985:	}
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case tribute:
    #####:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  993:	if (state->deckCount[nextPlayer] > 0){
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
    #####:  996:	}
    #####:  997:	else if (state->discardCount[nextPlayer] > 0){
    #####:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  999:	  state->discardCount[nextPlayer]--;
    #####: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
        -: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
    #####: 1007:      }
        -: 1008:	    
        -: 1009:      else{
    #####: 1010:	if (state->deckCount[nextPlayer] == 0){
    #####: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1013:	    state->deckCount[nextPlayer]++;
    #####: 1014:	    state->discard[nextPlayer][i] = -1;
    #####: 1015:	    state->discardCount[nextPlayer]--;
    #####: 1016:	  }
        -: 1017:			    
    #####: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1019:	} 
    #####: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1022:	state->deckCount[nextPlayer]--;
    #####: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }    
        -: 1027:		       
    #####: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1030:	state->playedCardCount++;
    #####: 1031:	tributeRevealedCards[1] = -1;
    #####: 1032:      }
        -: 1033:
    #####: 1034:      for (i = 0; i <= 2; i ++){
    #####: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1036:	  state->coins += 2;
    #####: 1037:	}
        -: 1038:		    
    #####: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1040:	  drawCard(currentPlayer, state);
    #####: 1041:	  drawCard(currentPlayer, state);
    #####: 1042:	}
        -: 1043:	else{//Action Card
    #####: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
    #####: 1046:      }
        -: 1047:	    
    #####: 1048:      return 0;
        -: 1049:		
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1066:	    {
    #####: 1067:	      j++;
    #####: 1068:	    }
    #####: 1069:	}
    #####: 1070:      if (j < choice2)
        -: 1071:	{
    #####: 1072:	  return -1;				
        -: 1073:	}
        -: 1074:
        -: 1075:      if (DEBUG) 
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:			
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1087:	    }
    #####: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
    #####: 1101:		  break;
        -: 1102:		}
    #####: 1103:	    }
    #####: 1104:	}			
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case cutpurse:
        -: 1109:
    #####: 1110:      updateCoins(currentPlayer, state, 2);
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1116:		{
    #####: 1117:		  if (state->hand[i][j] == copper)
        -: 1118:		    {
    #####: 1119:		      discardCard(j, i, state, 0);
    #####: 1120:		      break;
        -: 1121:		    }
    #####: 1122:		  if (j == state->handCount[i])
        -: 1123:		    {
    #####: 1124:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1125:			{
        -: 1126:			  if (DEBUG)
        -: 1127:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1128:			}	
    #####: 1129:		      break;
        -: 1130:		    }		
    #####: 1131:		}
        -: 1132:					
    #####: 1133:	    }
        -: 1134:				
    #####: 1135:	}				
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1139:
    #####: 1140:      return 0;
        -: 1141:
        -: 1142:		
        -: 1143:    case embargo: 
        -: 1144:      //+2 Coins
    #####: 1145:      state->coins = state->coins + 2;
        -: 1146:			
        -: 1147:      //see if selected pile is in play
    #####: 1148:      if ( state->supplyCount[choice1] == -1 )
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:			
        -: 1153:      //add embargo token to selected supply pile
    #####: 1154:      state->embargoTokens[choice1]++;
        -: 1155:			
        -: 1156:      //trash card
    #####: 1157:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1158:      return 0;
        -: 1159:		
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
    #####: 1162:      state->outpostPlayed++;
        -: 1163:			
        -: 1164:      //discard card
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
    #####: 1170:      state->numBuys++;
        -: 1171:			
    #####: 1172:      if (choice1)
        -: 1173:	{
        -: 1174:	  //gain coins equal to trashed card
    #####: 1175:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:	  //trash card
    #####: 1177:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1178:	}
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case sea_hag:
    #####: 1185:      for (i = 0; i < state->numPlayers; i++){
    #####: 1186:	if (i != currentPlayer){
    #####: 1187:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1188:	  state->discardCount[i]++;
    #####: 1189:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1190:	}
    #####: 1191:      }
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case treasure_map:
        -: 1195:      //search hand for another treasure_map
    #####: 1196:      index = -1;
    #####: 1197:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1198:	{
    #####: 1199:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1200:	    {
    #####: 1201:	      index = i;
    #####: 1202:	      break;
        -: 1203:	    }
    #####: 1204:	}
    #####: 1205:      if (index > -1)
        -: 1206:	{
        -: 1207:	  //trash both treasure cards
    #####: 1208:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:	  discardCard(index, currentPlayer, state, 1);
        -: 1210:
        -: 1211:	  //gain 4 Gold cards
    #####: 1212:	  for (i = 0; i < 4; i++)
        -: 1213:	    {
    #####: 1214:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1215:	    }
        -: 1216:				
        -: 1217:	  //return success
    #####: 1218:	  return 1;
        -: 1219:	}
        -: 1220:			
        -: 1221:      //no second treasure_map found in hand
    #####: 1222:      return -1;
        -: 1223:    }
        -: 1224:	
    #####: 1225:  return -1;
    #####: 1226:}
        -: 1227:
        -: 1228:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1229:{
        -: 1230:	
        -: 1231:  //if card is not trashed, added to Played pile 
    #####: 1232:  if (trashFlag < 1)
        -: 1233:    {
        -: 1234:      //add card to played pile
    #####: 1235:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1236:      state->playedCardCount++;
    #####: 1237:    }
        -: 1238:	
        -: 1239:  //set played card to -1
    #####: 1240:  state->hand[currentPlayer][handPos] = -1;
        -: 1241:	
        -: 1242:  //remove card from player's hand
    #####: 1243:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1244:    {
        -: 1245:      //reduce number of cards in hand
    #####: 1246:      state->handCount[currentPlayer]--;
    #####: 1247:    }
    #####: 1248:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1249:    {
        -: 1250:      //reduce number of cards in hand
    #####: 1251:      state->handCount[currentPlayer]--;
    #####: 1252:    }
        -: 1253:  else 	
        -: 1254:    {
        -: 1255:      //replace discarded card with last card in hand
    #####: 1256:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1257:      //set last card to -1
    #####: 1258:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1259:      //reduce number of cards in hand
    #####: 1260:      state->handCount[currentPlayer]--;
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return 0;
        -: 1264:}
        -: 1265:
        -: 1266:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1267:{
        -: 1268:  //Note: supplyPos is enum of choosen card
        -: 1269:	
        -: 1270:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1271:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1272:    {
    #####: 1273:      return -1;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //added card for [whoseTurn] current player:
        -: 1277:  // toFlag = 0 : add to discard
        -: 1278:  // toFlag = 1 : add to deck
        -: 1279:  // toFlag = 2 : add to hand
        -: 1280:
    #####: 1281:  if (toFlag == 1)
        -: 1282:    {
    #####: 1283:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1284:      state->deckCount[player]++;
    #####: 1285:    }
    #####: 1286:  else if (toFlag == 2)
        -: 1287:    {
    #####: 1288:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1289:      state->handCount[player]++;
    #####: 1290:    }
        -: 1291:  else
        -: 1292:    {
    #####: 1293:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1294:      state->discardCount[player]++;
        -: 1295:    }
        -: 1296:	
        -: 1297:  //decrease number in supply pile
    #####: 1298:  state->supplyCount[supplyPos]--;
        -: 1299:	 
    #####: 1300:  return 0;
    #####: 1301:}
        -: 1302:
        -: 1303:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1304:{
        -: 1305:  int i;
        -: 1306:	
        -: 1307:  //reset coin count
    #####: 1308:  state->coins = 0;
        -: 1309:
        -: 1310:  //add coins for each Treasure card in player's hand
    #####: 1311:  for (i = 0; i < state->handCount[player]; i++)
        -: 1312:    {
    #####: 1313:      if (state->hand[player][i] == copper)
        -: 1314:	{
    #####: 1315:	  state->coins += 1;
    #####: 1316:	}
    #####: 1317:      else if (state->hand[player][i] == silver)
        -: 1318:	{
    #####: 1319:	  state->coins += 2;
    #####: 1320:	}
    #####: 1321:      else if (state->hand[player][i] == gold)
        -: 1322:	{
    #####: 1323:	  state->coins += 3;
    #####: 1324:	}	
    #####: 1325:    }	
        -: 1326:
        -: 1327:  //add bonus
    #####: 1328:  state->coins += bonus;
        -: 1329:
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
        -: 1333:
        -: 1334://end of dominion.c
        -: 1335:
File 'dominion.c'
Lines executed:23.83% of 642
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
   123200:   10:  if (*(int*)a > *(int*)b)
    47928:   11:    return 1;
    75272:   12:  if (*(int*)a < *(int*)b)
    47104:   13:    return -1;
    28168:   14:  return 0;
   123200:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
    #####:   45:  SelectStream(1);
    #####:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
    #####:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
    #####:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
    #####:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
    #####:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
    #####:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
    #####:   66:        }
    #####:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
    #####:   74:  if (numPlayers == 2)
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 10;
    #####:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
    #####:   88:  if (numPlayers == 2)
        -:   89:    {
    #####:   90:      state->supplyCount[estate] = 8;
    #####:   91:      state->supplyCount[duchy] = 8;
    #####:   92:      state->supplyCount[province] = 8;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
    #####:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  103:  state->supplyCount[silver] = 40;
    #####:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
    #####:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
    #####:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
    #####:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
    #####:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
    #####:  116:		  if (numPlayers == 2){ 
    #####:  117:		    state->supplyCount[i] = 8; 
    #####:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
    #####:  120:		}
        -:  121:	      else
        -:  122:		{
    #####:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
    #####:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
    #####:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
    #####:  131:	}
        -:  132:
    #####:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
    #####:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
    #####:  141:      state->deckCount[i] = 0;
    #####:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
    #####:  144:	  state->deck[i][j] = estate;
    #####:  145:	  state->deckCount[i]++;
    #####:  146:	}
    #####:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
    #####:  149:	  state->deck[i][j] = copper;
    #####:  150:	  state->deckCount[i]++;		
    #####:  151:	}
    #####:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
    #####:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
    #####:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
    #####:  161:    }
        -:  162:
        -:  163:  //draw player hands
    #####:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
    #####:  167:      state->handCount[i] = 0;
    #####:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
    #####:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
    #####:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
    #####:  179:      state->embargoTokens[i] = 0;
    #####:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
    #####:  183:  state->outpostPlayed = 0;
    #####:  184:  state->phase = 0;
    #####:  185:  state->numActions = 1;
    #####:  186:  state->numBuys = 1;
    #####:  187:  state->playedCardCount = 0;
    #####:  188:  state->whoseTurn = 0;
    #####:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  193:  for (it = 0; it < 5; it++){
    #####:  194:    drawCard(state->whoseTurn, state);
    #####:  195:  }
        -:  196:
    #####:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
    #####:  199:  return 0;
    #####:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
      131:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
      131:  210:  if (state->deckCount[player] < 1)
       14:  211:    return -1;
      117:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    54526:  215:  while (state->deckCount[player] > 0) {
    27146:  216:    card = floor(Random() * state->deckCount[player]);
    27146:  217:    newDeck[newDeckPos] = state->deck[player][card];
    27146:  218:    newDeckPos++;
  4411312:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
  2178510:  220:      state->deck[player][i] = state->deck[player][i+1];
  2178510:  221:    }
    27146:  222:    state->deckCount[player]--;
        -:  223:  }
    54526:  224:  for (i = 0; i < newDeckPos; i++) {
    27146:  225:    state->deck[player][i] = newDeck[i];
    27146:  226:    state->deckCount[player]++;
    27146:  227:  }
        -:  228:
      117:  229:  return 0;
      131:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
    #####:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
    #####:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
      100:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
      100:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        5:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       95:  402:  j = 0;
     4940:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
     2375:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
      121:  407:	  j++;
      121:  408:	}
     2375:  409:    }
       95:  410:  if ( j >= 3)
        -:  411:    {
       14:  412:      return 1;
        -:  413:    }
        -:  414:
       81:  415:  return 0;
      100:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
     3238:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
     7478:  534:    for (i = 0; i < state->discardCount[player];i++){
     3722:  535:      state->deck[player][i] = state->discard[player][i];
     3722:  536:      state->discard[player][i] = -1;
     3722:  537:    }
        -:  538:
       17:  539:    state->deckCount[player] = state->discardCount[player];
       17:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       17:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       17:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       17:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       17:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       17:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       17:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       17:  564:    state->deckCount[player]--;
       17:  565:    state->handCount[player]++;//Increment hand count
       17:  566:  }
        -:  567:
        -:  568:  else{
     3221:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
     3221:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3221:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3221:  577:    state->deckCount[player]--;
     3221:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
     3238:  581:  return 0;
     3238:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
   100000:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
     3841:  591:      return 2;
        -:  592:    case duchy:
     3897:  593:      return 5;
        -:  594:    case province:
     3985:  595:      return 8;
        -:  596:    case copper:
     3677:  597:      return 0;
        -:  598:    case silver:
     3800:  599:      return 3;
        -:  600:    case gold:
     3767:  601:      return 6;
        -:  602:    case adventurer:
     3859:  603:      return 6;
        -:  604:    case council_room:
     3886:  605:      return 5;
        -:  606:    case feast:
     3961:  607:      return 4;
        -:  608:    case gardens:
     3737:  609:      return 4;
        -:  610:    case mine:
     3621:  611:      return 5;
        -:  612:    case remodel:
     3869:  613:      return 4;
        -:  614:    case smithy:
     3808:  615:      return 4;
        -:  616:    case village:
     3811:  617:      return 3;
        -:  618:    case baron:
     3830:  619:      return 4;
        -:  620:    case great_hall:
     3849:  621:      return 3;
        -:  622:    case minion:
     4123:  623:      return 5;
        -:  624:    case steward:
     3929:  625:      return 3;
        -:  626:    case tribute:
     3869:  627:      return 5;
        -:  628:    case ambassador:
     3787:  629:      return 3;
        -:  630:    case cutpurse:
     3820:  631:      return 4;
        -:  632:    case embargo: 
     3927:  633:      return 2;
        -:  634:    case outpost:
     3995:  635:      return 5;
        -:  636:    case salvager:
     3699:  637:      return 4;
        -:  638:    case sea_hag:
     4029:  639:      return 4;
        -:  640:    case treasure_map:
     3624:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
   100000:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int index;
      100:  653:  int currentPlayer = whoseTurn(state);
      100:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      100:  656:  int tributeRevealedCards[2] = {-1, -1};
      100:  657:  if (nextPlayer > (state->numPlayers - 1)){
       43:  658:    nextPlayer = 0;
       43:  659:  }
        -:  660:  
        -:  661:	
        -:  662:  //uses switch to select card and perform actions
      100:  663:  switch( card ) 
        -:  664:    {
        -:  665:    case adventurer:
    #####:  666:      playAdventurer(state, currentPlayer);
        -:  667:    case council_room:
    #####:  668:      playCouncilRoom(state, currentPlayer, handPos);
        -:  669:    case feast:
    #####:  670:      playFeast(state, currentPlayer, choice1);
        -:  671:    case gardens:
    #####:  672:      return -1;
        -:  673:			
        -:  674:    case mine:
    #####:  675:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  676:
    #####:  677:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  678:	{
    #####:  679:	  return -1;
        -:  680:	}
        -:  681:		
    #####:  682:      if (choice2 > treasure_map || choice2 < curse)
        -:  683:	{
    #####:  684:	  return -1;
        -:  685:	}
        -:  686:
    #####:  687:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:
    #####:  692:      gainCard(choice2, state, 2, currentPlayer);
        -:  693:
        -:  694:      //discard card from hand
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
        -:  696:
        -:  697:      //discard trashed card
    #####:  698:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  699:	{
    #####:  700:	  if (state->hand[currentPlayer][i] == j)
        -:  701:	    {
    #####:  702:	      discardCard(i, currentPlayer, state, 0);			
    #####:  703:	      break;
        -:  704:	    }
    #####:  705:	}
        -:  706:			
    #####:  707:      return 0;
        -:  708:			
        -:  709:    case remodel:
    #####:  710:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  711:
    #####:  712:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  713:	{
    #####:  714:	  return -1;
        -:  715:	}
        -:  716:
    #####:  717:      gainCard(choice2, state, 0, currentPlayer);
        -:  718:
        -:  719:      //discard card from hand
    #####:  720:      discardCard(handPos, currentPlayer, state, 0);
        -:  721:
        -:  722:      //discard trashed card
    #####:  723:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  724:	{
    #####:  725:	  if (state->hand[currentPlayer][i] == j)
        -:  726:	    {
    #####:  727:	      discardCard(i, currentPlayer, state, 0);			
    #####:  728:	      break;
        -:  729:	    }
    #####:  730:	}
        -:  731:
        -:  732:
    #####:  733:      return 0;
        -:  734:		
        -:  735:    case smithy:
    #####:  736:      playSmithy(state, currentPlayer, handPos);
        -:  737:
        -:  738:    case village:
    #####:  739:      playVillage(state, currentPlayer, handPos);
        -:  740:    case baron:
    #####:  741:      state->numBuys++;//Increase buys by 1!
    #####:  742:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  743:	int p = 0;//Iterator for hand!
    #####:  744:	int card_not_discarded = 1;//Flag for discard set!
    #####:  745:	while(card_not_discarded){
    #####:  746:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  747:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  748:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  749:	    state->discardCount[currentPlayer]++;
    #####:  750:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  751:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  752:	    }
    #####:  753:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  754:	    state->handCount[currentPlayer]--;
    #####:  755:	    card_not_discarded = 0;//Exit the loop
    #####:  756:	  }
    #####:  757:	  else if (p > state->handCount[currentPlayer]){
        -:  758:	    if(DEBUG) {
        -:  759:	      printf("No estate cards in your hand, invalid choice\n");
        -:  760:	      printf("Must gain an estate if there are any\n");
        -:  761:	    }
    #####:  762:	    if (supplyCount(estate, state) > 0){
    #####:  763:	      gainCard(estate, state, 0, currentPlayer);
    #####:  764:	      state->supplyCount[estate]--;//Decrement estates
    #####:  765:	      if (supplyCount(estate, state) == 0){
    #####:  766:		isGameOver(state);
    #####:  767:	      }
    #####:  768:	    }
    #####:  769:	    card_not_discarded = 0;//Exit the loop
    #####:  770:	  }
        -:  771:			    
        -:  772:	  else{
    #####:  773:	    p++;//Next card
        -:  774:	  }
        -:  775:	}
    #####:  776:      }
        -:  777:			    
        -:  778:      else{
    #####:  779:	if (supplyCount(estate, state) > 0){
    #####:  780:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  781:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  782:	  if (supplyCount(estate, state) == 0){
    #####:  783:	    isGameOver(state);
    #####:  784:	  }
    #####:  785:	}
        -:  786:      }
        -:  787:	    
        -:  788:      
    #####:  789:      return 0;
        -:  790:		
        -:  791:    case great_hall:
        -:  792:      //+1 Card
      100:  793:      drawCard(currentPlayer, state);
        -:  794:			
        -:  795:      //+1 Actions
      100:  796:      state->numActions++;
        -:  797:			
        -:  798:      //discard card from hand
      100:  799:      discardCard(handPos, currentPlayer, state, 0);
      100:  800:      return 0;
        -:  801:		
        -:  802:    case minion:
        -:  803:      //+1 action
    #####:  804:      state->numActions++;
        -:  805:			
        -:  806:      //discard card from hand
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:			
    #####:  809:      if (choice1)		//+2 coins
        -:  810:	{
    #####:  811:	  state->coins = state->coins + 2;
    #####:  812:	}
        -:  813:			
    #####:  814:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  815:	{
        -:  816:	  //discard hand
    #####:  817:	  while(numHandCards(state) > 0)
        -:  818:	    {
    #####:  819:	      discardCard(handPos, currentPlayer, state, 0);
        -:  820:	    }
        -:  821:				
        -:  822:	  //draw 4
    #####:  823:	  for (i = 0; i < 4; i++)
        -:  824:	    {
    #####:  825:	      drawCard(currentPlayer, state);
    #####:  826:	    }
        -:  827:				
        -:  828:	  //other players discard hand and redraw if hand size > 4
    #####:  829:	  for (i = 0; i < state->numPlayers; i++)
        -:  830:	    {
    #####:  831:	      if (i != currentPlayer)
        -:  832:		{
    #####:  833:		  if ( state->handCount[i] > 4 )
        -:  834:		    {
        -:  835:		      //discard hand
    #####:  836:		      while( state->handCount[i] > 0 )
        -:  837:			{
    #####:  838:			  discardCard(handPos, i, state, 0);
        -:  839:			}
        -:  840:							
        -:  841:		      //draw 4
    #####:  842:		      for (j = 0; j < 4; j++)
        -:  843:			{
    #####:  844:			  drawCard(i, state);
    #####:  845:			}
    #####:  846:		    }
    #####:  847:		}
    #####:  848:	    }
        -:  849:				
    #####:  850:	}
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case steward:
    #####:  854:      if (choice1 == 1)
        -:  855:	{
        -:  856:	  //+2 cards
    #####:  857:	  drawCard(currentPlayer, state);
    #####:  858:	  drawCard(currentPlayer, state);
    #####:  859:	}
    #####:  860:      else if (choice1 == 2)
        -:  861:	{
        -:  862:	  //+2 coins
    #####:  863:	  state->coins = state->coins + 2;
    #####:  864:	}
        -:  865:      else
        -:  866:	{
        -:  867:	  //trash 2 cards in hand
    #####:  868:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  869:	  discardCard(choice3, currentPlayer, state, 1);
        -:  870:	}
        -:  871:			
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
    #####:  874:      return 0;
        -:  875:		
        -:  876:    case tribute:
    #####:  877:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  878:	if (state->deckCount[nextPlayer] > 0){
    #####:  879:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  880:	  state->deckCount[nextPlayer]--;
    #####:  881:	}
    #####:  882:	else if (state->discardCount[nextPlayer] > 0){
    #####:  883:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  884:	  state->discardCount[nextPlayer]--;
    #####:  885:	}
        -:  886:	else{
        -:  887:	  //No Card to Reveal
        -:  888:	  if (DEBUG){
        -:  889:	    printf("No cards to reveal\n");
        -:  890:	  }
        -:  891:	}
    #####:  892:      }
        -:  893:	    
        -:  894:      else{
    #####:  895:	if (state->deckCount[nextPlayer] == 0){
    #####:  896:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  897:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  898:	    state->deckCount[nextPlayer]++;
    #####:  899:	    state->discard[nextPlayer][i] = -1;
    #####:  900:	    state->discardCount[nextPlayer]--;
    #####:  901:	  }
        -:  902:			    
    #####:  903:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  904:	} 
    #####:  905:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  907:	state->deckCount[nextPlayer]--;
    #####:  908:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  909:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  910:	state->deckCount[nextPlayer]--;
        -:  911:      }    
        -:  912:		       
    #####:  913:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  914:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  915:	state->playedCardCount++;
    #####:  916:	tributeRevealedCards[1] = -1;
    #####:  917:      }
        -:  918:
    #####:  919:      for (i = 0; i <= 2; i ++){
    #####:  920:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  921:	  state->coins += 2;
    #####:  922:	}
        -:  923:		    
    #####:  924:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  925:	  drawCard(currentPlayer, state);
    #####:  926:	  drawCard(currentPlayer, state);
    #####:  927:	}
        -:  928:	else{//Action Card
    #####:  929:	  state->numActions = state->numActions + 2;
        -:  930:	}
    #####:  931:      }
        -:  932:	    
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case ambassador:
    #####:  936:      j = 0;		//used to check if player has enough cards to discard
        -:  937:
    #####:  938:      if (choice2 > 2 || choice2 < 0)
        -:  939:	{
    #####:  940:	  return -1;				
        -:  941:	}
        -:  942:
    #####:  943:      if (choice1 == handPos)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  949:	{
    #####:  950:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  951:	    {
    #####:  952:	      j++;
    #####:  953:	    }
    #####:  954:	}
    #####:  955:      if (j < choice2)
        -:  956:	{
    #####:  957:	  return -1;				
        -:  958:	}
        -:  959:
        -:  960:      if (DEBUG) 
        -:  961:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  962:
        -:  963:      //increase supply count for choosen card by amount being discarded
    #####:  964:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  965:			
        -:  966:      //each other player gains a copy of revealed card
    #####:  967:      for (i = 0; i < state->numPlayers; i++)
        -:  968:	{
    #####:  969:	  if (i != currentPlayer)
        -:  970:	    {
    #####:  971:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  972:	    }
    #####:  973:	}
        -:  974:
        -:  975:      //discard played card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);			
        -:  977:
        -:  978:      //trash copies of cards returned to supply
    #####:  979:      for (j = 0; j < choice2; j++)
        -:  980:	{
    #####:  981:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	    {
    #####:  983:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  984:		{
    #####:  985:		  discardCard(i, currentPlayer, state, 1);
    #####:  986:		  break;
        -:  987:		}
    #####:  988:	    }
    #####:  989:	}			
        -:  990:
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case cutpurse:
        -:  994:
    #####:  995:      updateCoins(currentPlayer, state, 2);
    #####:  996:      for (i = 0; i < state->numPlayers; i++)
        -:  997:	{
    #####:  998:	  if (i != currentPlayer)
        -:  999:	    {
    #####: 1000:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1001:		{
    #####: 1002:		  if (state->hand[i][j] == copper)
        -: 1003:		    {
    #####: 1004:		      discardCard(j, i, state, 0);
    #####: 1005:		      break;
        -: 1006:		    }
    #####: 1007:		  if (j == state->handCount[i])
        -: 1008:		    {
    #####: 1009:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1010:			{
        -: 1011:			  if (DEBUG)
        -: 1012:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1013:			}	
    #####: 1014:		      break;
        -: 1015:		    }		
    #####: 1016:		}
        -: 1017:					
    #####: 1018:	    }
        -: 1019:				
    #####: 1020:	}				
        -: 1021:
        -: 1022:      //discard played card from hand
    #####: 1023:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1024:
    #####: 1025:      return 0;
        -: 1026:
        -: 1027:		
        -: 1028:    case embargo: 
        -: 1029:      //+2 Coins
    #####: 1030:      state->coins = state->coins + 2;
        -: 1031:			
        -: 1032:      //see if selected pile is in play
    #####: 1033:      if ( state->supplyCount[choice1] == -1 )
        -: 1034:	{
    #####: 1035:	  return -1;
        -: 1036:	}
        -: 1037:			
        -: 1038:      //add embargo token to selected supply pile
    #####: 1039:      state->embargoTokens[choice1]++;
        -: 1040:			
        -: 1041:      //trash card
    #####: 1042:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case outpost:
        -: 1046:      //set outpost flag
    #####: 1047:      state->outpostPlayed++;
        -: 1048:			
        -: 1049:      //discard card
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case salvager:
        -: 1054:      //+1 buy
    #####: 1055:      state->numBuys++;
        -: 1056:			
    #####: 1057:      if (choice1)
        -: 1058:	{
        -: 1059:	  //gain coins equal to trashed card
    #####: 1060:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1061:	  //trash card
    #####: 1062:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1063:	}
        -: 1064:			
        -: 1065:      //discard card
    #####: 1066:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1067:      return 0;
        -: 1068:		
        -: 1069:    case sea_hag:
    #####: 1070:      for (i = 0; i < state->numPlayers; i++){
    #####: 1071:	if (i != currentPlayer){
    #####: 1072:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1073:	  state->discardCount[i]++;
    #####: 1074:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1075:	}
    #####: 1076:      }
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case treasure_map:
        -: 1080:      //search hand for another treasure_map
    #####: 1081:      index = -1;
    #####: 1082:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1083:	{
    #####: 1084:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1085:	    {
    #####: 1086:	      index = i;
    #####: 1087:	      break;
        -: 1088:	    }
    #####: 1089:	}
    #####: 1090:      if (index > -1)
        -: 1091:	{
        -: 1092:	  //trash both treasure cards
    #####: 1093:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1094:	  discardCard(index, currentPlayer, state, 1);
        -: 1095:
        -: 1096:	  //gain 4 Gold cards
    #####: 1097:	  for (i = 0; i < 4; i++)
        -: 1098:	    {
    #####: 1099:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1100:	    }
        -: 1101:				
        -: 1102:	  //return success
    #####: 1103:	  return 1;
        -: 1104:	}
        -: 1105:			
        -: 1106:      //no second treasure_map found in hand
    #####: 1107:      return -1;
        -: 1108:    }
        -: 1109:	
    #####: 1110:  return -1;
      100: 1111:}
        -: 1112:
        -: 1113:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1114:{
        -: 1115:	
        -: 1116:  //if card is not trashed, added to Played pile 
      300: 1117:  if (trashFlag < 1)
        -: 1118:    {
        -: 1119:      //add card to played pile
      100: 1120:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      100: 1121:      state->playedCardCount++;
      100: 1122:    }
        -: 1123:	
        -: 1124:  //set played card to -1
      300: 1125:  state->hand[currentPlayer][handPos] = -1;
        -: 1126:	
        -: 1127:  //remove card from player's hand
      300: 1128:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1129:    {
        -: 1130:      //reduce number of cards in hand
       19: 1131:      state->handCount[currentPlayer]--;
       19: 1132:    }
      281: 1133:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1134:    {
        -: 1135:      //reduce number of cards in hand
    #####: 1136:      state->handCount[currentPlayer]--;
    #####: 1137:    }
        -: 1138:  else 	
        -: 1139:    {
        -: 1140:      //replace discarded card with last card in hand
      281: 1141:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1142:      //set last card to -1
      281: 1143:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1144:      //reduce number of cards in hand
      281: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
        -: 1147:	
      300: 1148:  return 0;
        -: 1149:}
        -: 1150:
        -: 1151:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1152:{
        -: 1153:  //Note: supplyPos is enum of choosen card
        -: 1154:	
        -: 1155:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1156:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1157:    {
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:	
        -: 1161:  //added card for [whoseTurn] current player:
        -: 1162:  // toFlag = 0 : add to discard
        -: 1163:  // toFlag = 1 : add to deck
        -: 1164:  // toFlag = 2 : add to hand
        -: 1165:
    #####: 1166:  if (toFlag == 1)
        -: 1167:    {
    #####: 1168:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1169:      state->deckCount[player]++;
    #####: 1170:    }
    #####: 1171:  else if (toFlag == 2)
        -: 1172:    {
    #####: 1173:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1174:      state->handCount[player]++;
    #####: 1175:    }
        -: 1176:  else
        -: 1177:    {
    #####: 1178:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1179:      state->discardCount[player]++;
        -: 1180:    }
        -: 1181:	
        -: 1182:  //decrease number in supply pile
    #####: 1183:  state->supplyCount[supplyPos]--;
        -: 1184:	 
    #####: 1185:  return 0;
    #####: 1186:}
        -: 1187:
        -: 1188:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1189:{
        -: 1190:  int i;
        -: 1191:	
        -: 1192:  //reset coin count
      100: 1193:  state->coins = 0;
        -: 1194:
        -: 1195:  //add coins for each Treasure card in player's hand
    50438: 1196:  for (i = 0; i < state->handCount[player]; i++)
        -: 1197:    {
    25119: 1198:      if (state->hand[player][i] == copper)
        -: 1199:	{
      961: 1200:	  state->coins += 1;
      961: 1201:	}
    24158: 1202:      else if (state->hand[player][i] == silver)
        -: 1203:	{
     1001: 1204:	  state->coins += 2;
     1001: 1205:	}
    23157: 1206:      else if (state->hand[player][i] == gold)
        -: 1207:	{
      931: 1208:	  state->coins += 3;
      931: 1209:	}	
    25119: 1210:    }	
        -: 1211:
        -: 1212:  //add bonus
      100: 1213:  state->coins += bonus;
        -: 1214:
      100: 1215:  return 0;
        -: 1216:}
        -: 1217:
        -: 1218:
        -: 1219:int playAdventurer (struct gameState *state, int currentPlayer ){
        -: 1220:
        -: 1221:  int temphand[MAX_HAND];// moved above the if statement
      100: 1222:  int drawntreasure=0;
        -: 1223:  int cardDrawn;
      100: 1224:  int z = 0;// this is the counter for the temp hand
        -: 1225:
        -: 1226:
     5676: 1227:  while(drawntreasure <= 2){
     2738: 1228:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       14: 1229:      shuffle(currentPlayer, state);
       14: 1230:    }
     2738: 1231:    drawCard(currentPlayer, state);
     2738: 1232:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     7936: 1233:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      300: 1234:      drawntreasure++;
        -: 1235:    else{
     2438: 1236:      temphand[z]=cardDrawn;
     2438: 1237:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2438: 1238:      z++;
        -: 1239:    }
        -: 1240:  }
     5076: 1241:  while(z-1>=0){
     2438: 1242:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2438: 1243:    z=z-1;
        -: 1244:  }
      100: 1245:  return 0;
        -: 1246:
        -: 1247:}
        -: 1248:
        -: 1249:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1250:  int i;
        -: 1251:  //+3 Cards
      800: 1252:  for (i = 0; i < 3; i++){
      300: 1253:    drawCard(currentPlayer, state);
      300: 1254:  }
        -: 1255:			
        -: 1256:  //discard card from hand
      100: 1257:  discardCard(handPos, currentPlayer, state, 1);
      100: 1258:  return 0;
        -: 1259:}
        -: 1260:
        -: 1261:
        -: 1262:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos){
        -: 1263:  int i;
        -: 1264:  //+4 Cards
    #####: 1265:  for (i = 0; i < 4; i++){
    #####: 1266:    drawCard(currentPlayer, state);
    #####: 1267:  }
        -: 1268:			
        -: 1269:  //+1 Buy
    #####: 1270:  state->numBuys++;
        -: 1271:			
        -: 1272:  //Each other player draws a card
    #####: 1273:  for (i = 0; i < state->numPlayers; i++){
    #####: 1274:    drawCard(i, state);
    #####: 1275:  }
        -: 1276:			
        -: 1277:  //put played card in played card pile
    #####: 1278:  discardCard(handPos, currentPlayer, state, 0);
        -: 1279:			
    #####: 1280:  return 0;
        -: 1281:}
        -: 1282:
        -: 1283:int playVillage(struct gameState *state, int currentPlayer, int handPos){
        -: 1284:  //+1 Card
      100: 1285:  drawCard(currentPlayer, state);
        -: 1286:			
        -: 1287:  //+2 Actions
      100: 1288:  state->numActions = state->numActions + 2;
        -: 1289:			
        -: 1290:  //discard played card from hand
      100: 1291:  discardCard(handPos, currentPlayer, state, 1);
      100: 1292:  return 0;
        -: 1293:
        -: 1294:}
        -: 1295:
        -: 1296:int playFeast(struct gameState *state, int currentPlayer, int choice1){
        -: 1297:
        -: 1298:  int temphand[MAX_HAND];// moved above the if statement
        -: 1299:  int i, x;
        -: 1300:
        -: 1301:  //gain card with cost up to 5
        -: 1302:  //Backup hand
    #####: 1303:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1304:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1305:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1306:  }
        -: 1307:  //Backup hand
        -: 1308:
        -: 1309:  //Update Coins for Buy
    #####: 1310:  updateCoins(currentPlayer, state, 5);
    #####: 1311:  x = 1;//Condition to loop on
    #####: 1312:  while( x == 1) {//Buy one card
    #####: 1313:    if (supplyCount(choice1, state) <= 0){
        -: 1314:      if (DEBUG)
        -: 1315:	printf("None of that card left, sorry!\n");
        -: 1316:
        -: 1317:      if (DEBUG){
        -: 1318:	printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1319:      }
    #####: 1320:    }
    #####: 1321:    else if (state->coins < getCost(choice1)){
    #####: 1322:      printf("That card is too expensive!\n");
        -: 1323:
        -: 1324:      if (DEBUG){
        -: 1325:	printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1326:      }
    #####: 1327:    }
        -: 1328:    else{
        -: 1329:
        -: 1330:      if (DEBUG){
        -: 1331:	printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1332:      }
        -: 1333:
    #####: 1334:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1335:      x = 0;//No more buying cards
        -: 1336:
        -: 1337:      if (DEBUG){
        -: 1338:	printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1339:      }
        -: 1340:
        -: 1341:    }
        -: 1342:  }     
        -: 1343:
        -: 1344:  //Reset Hand
    #####: 1345:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1346:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1347:    temphand[i] = -1;
    #####: 1348:  }
        -: 1349:  //Reset Hand
        -: 1350:      			
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353://end of dominion.c
        -: 1354:
