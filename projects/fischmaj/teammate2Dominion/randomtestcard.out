
 Running tests of smithy():

Testing playSmithy() complete.
10000 of 10000 test cases failed. (100.000000%)

Test criteria 1 failed 0 times out of 10000 tests (0.000000%).
Test criteria 2 failed 10000 times out of 10000 tests (100.000000%).
Test criteria 3 failed 10000 times out of 10000 tests (100.000000%).
Test criteria 4 failed 10000 times out of 10000 tests (100.000000%).
Test criteria 5 failed 10000 times out of 10000 tests (100.000000%).
Test criteria 6 failed 10000 times out of 10000 tests (100.000000%).
Test criteria 7 failed 0 times out of 10000 tests (0.000000%).
File 'dominion.c'
Lines executed:30.90% of 670
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:20
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurerCard(struct gameState *state, int handPos);
        -:    9:
        -:   10:int smithyCard(struct gameState *state, int handPos);
        -:   11:int feastCard(int choice1, struct gameState *state, int handPos);
        -:   12:int ambassadorCard(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   13:int cutpurseCard(struct gameState *state, int handPos);
        -:   14:int compare(const void* a, const void* b) {
  6392152:   15:  if (*(int*)a > *(int*)b)
    82794:   16:    return 1;
  6309358:   17:  if (*(int*)a < *(int*)b)
  2288054:   18:    return -1;
  4021304:   19:  return 0;
  6392152:   20:}
        -:   21:
        -:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
        -:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
        -:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
   220700:   50:  SelectStream(1);
   220700:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
   441400:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
   220700:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
  4855400:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
 48554000:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
 41933000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
 22070000:   71:        }
  2207000:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
   220700:   79:  if (numPlayers == 2)
        -:   80:    {
   220700:   81:      state->supplyCount[curse] = 10;
   220700:   82:    }
    #####:   83:  else if (numPlayers == 3)
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
    #####:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
   220700:   93:  if (numPlayers == 2)
        -:   94:    {
   220700:   95:      state->supplyCount[estate] = 8;
   220700:   96:      state->supplyCount[duchy] = 8;
   220700:   97:      state->supplyCount[province] = 8;
   220700:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
   220700:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   220700:  108:  state->supplyCount[silver] = 40;
   220700:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
  9269400:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
 72831000:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
 34208500:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
  4414000:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
   220700:  121:		  if (numPlayers == 2){ 
   220700:  122:		    state->supplyCount[i] = 8; 
   220700:  123:		  }
    #####:  124:		  else{ state->supplyCount[i] = 12; }
   220700:  125:		}
        -:  126:	      else
        -:  127:		{
  1986300:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
  2207000:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
 32001500:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
 32001500:  136:	}
        -:  137:
  4414000:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
  1324200:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
   441400:  146:      state->deckCount[i] = 0;
  3531200:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
  1324200:  149:	  state->deck[i][j] = estate;
  1324200:  150:	  state->deckCount[i]++;
  1324200:  151:	}
  7062400:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
  3089800:  154:	  state->deck[i][j] = copper;
  3089800:  155:	  state->deckCount[i]++;		
  3089800:  156:	}
   441400:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
  1324200:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
   441400:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
   441400:  166:    }
        -:  167:
        -:  168:  //draw player hands
  1324200:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
   441400:  172:      state->handCount[i] = 0;
   441400:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
   441400:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
 12359200:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
  5958900:  184:      state->embargoTokens[i] = 0;
  5958900:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
   220700:  188:  state->outpostPlayed = 0;
   220700:  189:  state->phase = 0;
   220700:  190:  state->numActions = 1;
   220700:  191:  state->numBuys = 1;
   220700:  192:  state->playedCardCount = 0;
   220700:  193:  state->whoseTurn = 0;
   220700:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
  2648400:  198:  for (it = 0; it < 5; it++){
  1103500:  199:    drawCard(state->whoseTurn, state);
  1103500:  200:  }
        -:  201:
   220700:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
   220700:  204:  return 0;
   220700:  205:}
        -:  206:
        -:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
   441600:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
   441600:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
   441600:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
  9804896:  220:  while (state->deckCount[player] > 0) {
  4460848:  221:    card = floor(Random() * state->deckCount[player]);
  4460848:  222:    newDeck[newDeckPos] = state->deck[player][card];
  4460848:  223:    newDeckPos++;
 43510352:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
 17294328:  225:      state->deck[player][i] = state->deck[player][i+1];
 17294328:  226:    }
  4460848:  227:    state->deckCount[player]--;
        -:  228:  }
  9804896:  229:  for (i = 0; i < newDeckPos; i++) {
  4460848:  230:    state->deck[player][i] = newDeck[i];
  4460848:  231:    state->deckCount[player]++;
  4460848:  232:  }
        -:  233:
   441600:  234:  return 0;
   441600:  235:}
        -:  236:
        -:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
    #####:  276:}
        -:  277:
        -:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
    #####:  315:}
        -:  316:
        -:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
        -:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
        -:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
        -:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
        -:  352:int whoseTurn(struct gameState *state) {
   220700:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
        -:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
        -:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
      300:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
       15:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
      285:  407:  j = 0;
    14820:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
     7125:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
      363:  412:	  j++;
      363:  413:	}
     7125:  414:    }
      285:  415:  if ( j >= 3)
        -:  416:    {
       42:  417:      return 1;
        -:  418:    }
        -:  419:
      243:  420:  return 0;
      300:  421:}
        -:  422:
        -:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
        -:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
    #####:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
    #####:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
    #####:  490:	}
    #####:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
    #####:  501:	}
    #####:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
    #####:  511:	}
    #####:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
    #####:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
    #####:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
        -:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
  9592700:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
    #####:  539:    for (i = 0; i < state->discardCount[player];i++){
    #####:  540:      state->deck[player][i] = state->discard[player][i];
    #####:  541:      state->discard[player][i] = -1;
    #####:  542:    }
        -:  543:
    #####:  544:    state->deckCount[player] = state->discardCount[player];
    #####:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
    #####:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
    #####:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
    #####:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
    #####:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
    #####:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:    state->deckCount[player]--;
    #####:  570:    state->handCount[player]++;//Increment hand count
    #####:  571:  }
        -:  572:
        -:  573:  else{
  9592700:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
  9592700:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
  9592700:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  9592700:  582:    state->deckCount[player]--;
  9592700:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
  9592700:  586:  return 0;
  9592700:  587:}
        -:  588:
        -:  589:int getCost(int cardNumber)
        -:  590:{
   200000:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
     7682:  596:      return 2;
        -:  597:    case duchy:
     7794:  598:      return 5;
        -:  599:    case province:
     7970:  600:      return 8;
        -:  601:    case copper:
     7354:  602:      return 0;
        -:  603:    case silver:
     7600:  604:      return 3;
        -:  605:    case gold:
     7534:  606:      return 6;
        -:  607:    case adventurer:
     7718:  608:      return 6;
        -:  609:    case council_room:
     7772:  610:      return 5;
        -:  611:    case feast:
     7922:  612:      return 4;
        -:  613:    case gardens:
     7474:  614:      return 4;
        -:  615:    case mine:
     7242:  616:      return 5;
        -:  617:    case remodel:
     7738:  618:      return 4;
        -:  619:    case smithy:
     7616:  620:      return 4;
        -:  621:    case village:
     7622:  622:      return 3;
        -:  623:    case baron:
     7660:  624:      return 4;
        -:  625:    case great_hall:
     7698:  626:      return 3;
        -:  627:    case minion:
     8246:  628:      return 5;
        -:  629:    case steward:
     7858:  630:      return 3;
        -:  631:    case tribute:
     7738:  632:      return 5;
        -:  633:    case ambassador:
     7574:  634:      return 3;
        -:  635:    case cutpurse:
     7640:  636:      return 4;
        -:  637:    case embargo: 
     7854:  638:      return 2;
        -:  639:    case outpost:
     7990:  640:      return 5;
        -:  641:    case salvager:
     7398:  642:      return 4;
        -:  643:    case sea_hag:
     8058:  644:      return 4;
        -:  645:    case treasure_map:
     7248:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
   200000:  650:}
        -:  651:
        -:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
      400:  659:  int currentPlayer = whoseTurn(state);
      400:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
      400:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
      400:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
      400:  666:  int z = 0;// this is the counter for the temp hand
      400:  667:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  668:    nextPlayer = 0;
    #####:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
      400:  673:  switch( card ) 
        -:  674:    {
        -:  675:	case adventurer:
    #####:  676:		return adventurerCard(state, handPos);
        -:  677:    /*case adventurer:
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      }
        -:  696:      return 0;
        -:  697:	*/		
        -:  698:    case council_room:
        -:  699:      //+4 Cards
    #####:  700:      for (i = 0; i < 4; i++)
        -:  701:	{
    #####:  702:	  drawCard(currentPlayer, state);
    #####:  703:	}
        -:  704:			
        -:  705:      //+1 Buy
    #####:  706:      state->numBuys++;
        -:  707:			
        -:  708:      //Each other player draws a card
    #####:  709:      for (i = 0; i < state->numPlayers; i++)
        -:  710:	{
    #####:  711:	  if ( i != currentPlayer )
        -:  712:	    {
    #####:  713:	      drawCard(i, state);
    #####:  714:	    }
    #####:  715:	}
        -:  716:			
        -:  717:      //put played card in played card pile
    #####:  718:      discardCard(handPos, currentPlayer, state, 0);
        -:  719:			
    #####:  720:      return 0;
        -:  721:	
        -:  722:	case feast:
    #####:  723:	  return feastCard(choice1, state, handPos);
        -:  724:    /*case feast:
        -:  725:      //gain card with cost up to 5
        -:  726:      //Backup hand
        -:  727:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  728:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  729:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  730:      }
        -:  731:      //Backup hand
        -:  732:
        -:  733:      //Update Coins for Buy
        -:  734:      updateCoins(currentPlayer, state, 5);
        -:  735:      x = 1;//Condition to loop on
        -:  736:      while( x == 1) {//Buy one card
        -:  737:	if (supplyCount(choice1, state) <= 0){
        -:  738:	  if (DEBUG)
        -:  739:	    printf("None of that card left, sorry!\n");
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  743:	  }
        -:  744:	}
        -:  745:	else if (state->coins < getCost(choice1)){
        -:  746:	  printf("That card is too expensive!\n");
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  750:	  }
        -:  751:	}
        -:  752:	else{
        -:  753:
        -:  754:	  if (DEBUG){
        -:  755:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  756:	  }
        -:  757:
        -:  758:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  759:	  x = 0;//No more buying cards
        -:  760:
        -:  761:	  if (DEBUG){
        -:  762:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  763:	  }
        -:  764:
        -:  765:	}
        -:  766:      }     
        -:  767:
        -:  768:      //Reset Hand
        -:  769:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  770:	state->hand[currentPlayer][i] = temphand[i];
        -:  771:	temphand[i] = -1;
        -:  772:      }
        -:  773:      //Reset Hand
        -:  774:      			
        -:  775:      return 0;
        -:  776:	*/		
        -:  777:    case gardens:
    #####:  778:      return -1;
        -:  779:			
        -:  780:    case mine:
    #####:  781:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  782:
    #####:  783:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:		
    #####:  788:      if (choice2 > treasure_map || choice2 < curse)
        -:  789:	{
    #####:  790:	  return -1;
        -:  791:	}
        -:  792:
    #####:  793:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  794:	{
    #####:  795:	  return -1;
        -:  796:	}
        -:  797:
    #####:  798:      gainCard(choice2, state, 2, currentPlayer);
        -:  799:
        -:  800:      //discard card from hand
    #####:  801:      discardCard(handPos, currentPlayer, state, 0);
        -:  802:
        -:  803:      //discard trashed card
    #####:  804:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  805:	{
    #####:  806:	  if (state->hand[currentPlayer][i] == j)
        -:  807:	    {
    #####:  808:	      discardCard(i, currentPlayer, state, 0);			
    #####:  809:	      break;
        -:  810:	    }
    #####:  811:	}
        -:  812:			
    #####:  813:      return 0;
        -:  814:			
        -:  815:    case remodel:
    #####:  816:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  817:
    #####:  818:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:
    #####:  823:      gainCard(choice2, state, 0, currentPlayer);
        -:  824:
        -:  825:      //discard card from hand
    #####:  826:      discardCard(handPos, currentPlayer, state, 0);
        -:  827:
        -:  828:      //discard trashed card
    #####:  829:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  830:	{
    #####:  831:	  if (state->hand[currentPlayer][i] == j)
        -:  832:	    {
    #####:  833:	      discardCard(i, currentPlayer, state, 0);			
    #####:  834:	      break;
        -:  835:	    }
    #####:  836:	}
        -:  837:
        -:  838:
    #####:  839:      return 0;
        -:  840:	
        -:  841:	case smithy:
    #####:  842:	  return smithyCard(state, handPos);
        -:  843:    /*case smithy:
        -:  844:      //+3 Cards
        -:  845:      for (i = 0; i < 3; i++)
        -:  846:	{
        -:  847:	  drawCard(currentPlayer, state);
        -:  848:	}
        -:  849:			
        -:  850:      //discard card from hand
        -:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:      return 0;
        -:  853:	*/	
        -:  854:    case village:
        -:  855:      //+1 Card
      200:  856:      drawCard(currentPlayer, state);
        -:  857:			
        -:  858:      //+2 Actions
      200:  859:      state->numActions = state->numActions + 2;
        -:  860:			
        -:  861:      //discard played card from hand
      200:  862:      discardCard(handPos, currentPlayer, state, 0);
      200:  863:      return 0;
        -:  864:		
        -:  865:    case baron:
    #####:  866:      state->numBuys++;//Increase buys by 1!
    #####:  867:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  868:	int p = 0;//Iterator for hand!
    #####:  869:	int card_not_discarded = 1;//Flag for discard set!
    #####:  870:	while(card_not_discarded){
    #####:  871:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  872:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  873:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  874:	    state->discardCount[currentPlayer]++;
    #####:  875:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  876:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  877:	    }
    #####:  878:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  879:	    state->handCount[currentPlayer]--;
    #####:  880:	    card_not_discarded = 0;//Exit the loop
    #####:  881:	  }
    #####:  882:	  else if (p > state->handCount[currentPlayer]){
        -:  883:	    if(DEBUG) {
        -:  884:	      printf("No estate cards in your hand, invalid choice\n");
        -:  885:	      printf("Must gain an estate if there are any\n");
        -:  886:	    }
    #####:  887:	    if (supplyCount(estate, state) > 0){
    #####:  888:	      gainCard(estate, state, 0, currentPlayer);
    #####:  889:	      state->supplyCount[estate]--;//Decrement estates
    #####:  890:	      if (supplyCount(estate, state) == 0){
    #####:  891:		isGameOver(state);
    #####:  892:	      }
    #####:  893:	    }
    #####:  894:	    card_not_discarded = 0;//Exit the loop
    #####:  895:	  }
        -:  896:			    
        -:  897:	  else{
    #####:  898:	    p++;//Next card
        -:  899:	  }
        -:  900:	}
    #####:  901:      }
        -:  902:			    
        -:  903:      else{
    #####:  904:	if (supplyCount(estate, state) > 0){
    #####:  905:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  906:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  907:	  if (supplyCount(estate, state) == 0){
    #####:  908:	    isGameOver(state);
    #####:  909:	  }
    #####:  910:	}
        -:  911:      }
        -:  912:	    
        -:  913:      
    #####:  914:      return 0;
        -:  915:		
        -:  916:    case great_hall:
        -:  917:      //+1 Card
      200:  918:      drawCard(currentPlayer, state);
        -:  919:			
        -:  920:      //+1 Actions
      200:  921:      state->numActions++;
        -:  922:			
        -:  923:      //discard card from hand
      200:  924:      discardCard(handPos, currentPlayer, state, 0);
      200:  925:      return 0;
        -:  926:		
        -:  927:    case minion:
        -:  928:      //+1 action
    #####:  929:      state->numActions++;
        -:  930:			
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
        -:  933:			
    #####:  934:      if (choice1)		//+2 coins
        -:  935:	{
    #####:  936:	  state->coins = state->coins + 2;
    #####:  937:	}
        -:  938:			
    #####:  939:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  940:	{
        -:  941:	  //discard hand
    #####:  942:	  while(numHandCards(state) > 0)
        -:  943:	    {
    #####:  944:	      discardCard(handPos, currentPlayer, state, 0);
        -:  945:	    }
        -:  946:				
        -:  947:	  //draw 4
    #####:  948:	  for (i = 0; i < 4; i++)
        -:  949:	    {
    #####:  950:	      drawCard(currentPlayer, state);
    #####:  951:	    }
        -:  952:				
        -:  953:	  //other players discard hand and redraw if hand size > 4
    #####:  954:	  for (i = 0; i < state->numPlayers; i++)
        -:  955:	    {
    #####:  956:	      if (i != currentPlayer)
        -:  957:		{
    #####:  958:		  if ( state->handCount[i] > 4 )
        -:  959:		    {
        -:  960:		      //discard hand
    #####:  961:		      while( state->handCount[i] > 0 )
        -:  962:			{
    #####:  963:			  discardCard(handPos, i, state, 0);
        -:  964:			}
        -:  965:							
        -:  966:		      //draw 4
    #####:  967:		      for (j = 0; j < 4; j++)
        -:  968:			{
    #####:  969:			  drawCard(i, state);
    #####:  970:			}
    #####:  971:		    }
    #####:  972:		}
    #####:  973:	    }
        -:  974:				
    #####:  975:	}
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case steward:
    #####:  979:      if (choice1 == 1)
        -:  980:	{
        -:  981:	  //+2 cards
    #####:  982:	  drawCard(currentPlayer, state);
    #####:  983:	  drawCard(currentPlayer, state);
    #####:  984:	}
    #####:  985:      else if (choice1 == 2)
        -:  986:	{
        -:  987:	  //+2 coins
    #####:  988:	  state->coins = state->coins + 2;
    #####:  989:	}
        -:  990:      else
        -:  991:	{
        -:  992:	  //trash 2 cards in hand
    #####:  993:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  994:	  discardCard(choice3, currentPlayer, state, 1);
        -:  995:	}
        -:  996:			
        -:  997:      //discard card from hand
    #####:  998:      discardCard(handPos, currentPlayer, state, 0);
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case tribute:
    #####: 1002:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1003:	if (state->deckCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1005:	  state->deckCount[nextPlayer]--;
    #####: 1006:	}
    #####: 1007:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1008:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1009:	  state->discardCount[nextPlayer]--;
    #####: 1010:	}
        -: 1011:	else{
        -: 1012:	  //No Card to Reveal
        -: 1013:	  if (DEBUG){
        -: 1014:	    printf("No cards to reveal\n");
        -: 1015:	  }
        -: 1016:	}
    #####: 1017:      }
        -: 1018:	    
        -: 1019:      else{
    #####: 1020:	if (state->deckCount[nextPlayer] == 0){
    #####: 1021:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1022:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1023:	    state->deckCount[nextPlayer]++;
    #####: 1024:	    state->discard[nextPlayer][i] = -1;
    #####: 1025:	    state->discardCount[nextPlayer]--;
    #####: 1026:	  }
        -: 1027:			    
    #####: 1028:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1029:	} 
    #####: 1030:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1031:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1032:	state->deckCount[nextPlayer]--;
    #####: 1033:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
        -: 1036:      }    
        -: 1037:		       
    #####: 1038:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1039:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1040:	state->playedCardCount++;
    #####: 1041:	tributeRevealedCards[1] = -1;
    #####: 1042:      }
        -: 1043:
    #####: 1044:      for (i = 0; i <= 2; i ++){
    #####: 1045:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1046:	  state->coins += 2;
    #####: 1047:	}
        -: 1048:		    
    #####: 1049:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1050:	  drawCard(currentPlayer, state);
    #####: 1051:	  drawCard(currentPlayer, state);
    #####: 1052:	}
        -: 1053:	else{//Action Card
    #####: 1054:	  state->numActions = state->numActions + 2;
        -: 1055:	}
    #####: 1056:      }
        -: 1057:	    
    #####: 1058:      return 0;
        -: 1059:	
        -: 1060:	case ambassador:
    #####: 1061:	  return ambassadorCard(choice1, choice2, choice3, state, handPos, bonus);
        -: 1062:    /*case ambassador:
        -: 1063:      j = 0;		//used to check if player has enough cards to discard
        -: 1064:
        -: 1065:      if (choice2 > 2 || choice2 < 0)
        -: 1066:	{
        -: 1067:	  return -1;				
        -: 1068:	}
        -: 1069:
        -: 1070:      if (choice1 == handPos)
        -: 1071:	{
        -: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
        -: 1075:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1076:	{
        -: 1077:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1078:	    {
        -: 1079:	      j++;
        -: 1080:	    }
        -: 1081:	}
        -: 1082:      if (j < choice2)
        -: 1083:	{
        -: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
        -: 1087:      if (DEBUG) 
        -: 1088:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1089:
        -: 1090:      //increase supply count for choosen card by amount being discarded
        -: 1091:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1092:			
        -: 1093:      //each other player gains a copy of revealed card
        -: 1094:      for (i = 0; i < state->numPlayers; i++)
        -: 1095:	{
        -: 1096:	  if (i != currentPlayer)
        -: 1097:	    {
        -: 1098:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1099:	    }
        -: 1100:	}
        -: 1101:
        -: 1102:      //discard played card from hand
        -: 1103:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1104:
        -: 1105:      //trash copies of cards returned to supply
        -: 1106:      for (j = 0; j < choice2; j++)
        -: 1107:	{
        -: 1108:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1109:	    {
        -: 1110:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1111:		{
        -: 1112:		  discardCard(i, currentPlayer, state, 1);
        -: 1113:		  break;
        -: 1114:		}
        -: 1115:	    }
        -: 1116:	}			
        -: 1117:
        -: 1118:      return 0;
        -: 1119:	*/	
        -: 1120:    case cutpurse:
    #####: 1121:	  return cutpurseCard(state, handPos);
        -: 1122:	
        -: 1123:	/*case cutpurse:
        -: 1124:
        -: 1125:      updateCoins(currentPlayer, state, 2);
        -: 1126:      for (i = 0; i < state->numPlayers; i++)
        -: 1127:	{
        -: 1128:	  if (i != currentPlayer)
        -: 1129:	    {
        -: 1130:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1131:		{
        -: 1132:		  if (state->hand[i][j] == copper)
        -: 1133:		    {
        -: 1134:		      discardCard(j, i, state, 0);
        -: 1135:		      break;
        -: 1136:		    }
        -: 1137:		  if (j == state->handCount[i])
        -: 1138:		    {
        -: 1139:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1140:			{
        -: 1141:			  if (DEBUG)
        -: 1142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:			}	
        -: 1144:		      break;
        -: 1145:		    }		
        -: 1146:		}
        -: 1147:					
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}				
        -: 1151:
        -: 1152:      //discard played card from hand
        -: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
        -: 1155:      return 0;
        -: 1156:
        -: 1157:	*/	
        -: 1158:    case embargo: 
        -: 1159:      //+2 Coins
    #####: 1160:      state->coins = state->coins + 2;
        -: 1161:			
        -: 1162:      //see if selected pile is in play
    #####: 1163:      if ( state->supplyCount[choice1] == -1 )
        -: 1164:	{
    #####: 1165:	  return -1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //add embargo token to selected supply pile
    #####: 1169:      state->embargoTokens[choice1]++;
        -: 1170:			
        -: 1171:      //trash card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case outpost:
        -: 1176:      //set outpost flag
    #####: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case salvager:
        -: 1184:      //+1 buy
    #####: 1185:      state->numBuys++;
        -: 1186:			
    #####: 1187:      if (choice1)
        -: 1188:	{
        -: 1189:	  //gain coins equal to trashed card
    #####: 1190:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:	  //trash card
    #####: 1192:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1193:	}
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case sea_hag:
    #####: 1200:      for (i = 0; i < state->numPlayers; i++){
    #####: 1201:	if (i != currentPlayer){
    #####: 1202:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1203:	  state->discardCount[i]++;
    #####: 1204:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1205:	}
    #####: 1206:      }
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case treasure_map:
        -: 1210:      //search hand for another treasure_map
    #####: 1211:      index = -1;
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1215:	    {
    #####: 1216:	      index = i;
    #####: 1217:	      break;
        -: 1218:	    }
    #####: 1219:	}
    #####: 1220:      if (index > -1)
        -: 1221:	{
        -: 1222:	  //trash both treasure cards
    #####: 1223:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1224:	  discardCard(index, currentPlayer, state, 1);
        -: 1225:
        -: 1226:	  //gain 4 Gold cards
    #####: 1227:	  for (i = 0; i < 4; i++)
        -: 1228:	    {
    #####: 1229:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1230:	    }
        -: 1231:				
        -: 1232:	  //return success
    #####: 1233:	  return 1;
        -: 1234:	}
        -: 1235:			
        -: 1236:      //no second treasure_map found in hand
    #####: 1237:      return -1;
        -: 1238:    }
        -: 1239:	               
    #####: 1240:  return -1;
      400: 1241:}
        -: 1242:
        -: 1243:int adventurerCard(struct gameState *state, int handPos)
        -: 1244:{
   200200: 1245:  int currentPlayer = whoseTurn(state);
   200200: 1246:  int nextPlayer = currentPlayer + 1;
        -: 1247:
        -: 1248:  int temphand[MAX_HAND];// moved above the if statement
   200200: 1249:  int drawntreasure=0;
        -: 1250:  int cardDrawn, i;
   200200: 1251:  int z = 0;// this is the counter for the temp hand
   200200: 1252:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1253:    nextPlayer = 0;
    #####: 1254:  }
        -: 1255:	
 17217200: 1256:    while(drawntreasure<4){
  8408400: 1257:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1258:    for(i = 0; i < state->discardCount[currentPlayer]; i++){
    #####: 1259:        state->deck[currentPlayer][i] = state->discard[currentPlayer][i];//Move to deck
    #####: 1260:        state->deckCount[currentPlayer]++;
    #####: 1261:        state->discard[currentPlayer][i] = -1;
    #####: 1262:        state->discardCount[currentPlayer]--;
    #####: 1263:      }
    #####: 1264:	  shuffle(currentPlayer, state);
    #####: 1265:	}
  8408400: 1266:	drawCard(currentPlayer, state);
  8408400: 1267:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] -1];//top card of hand is most recently drawn card.
 24824800: 1268:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
   800800: 1269:	  drawntreasure++;
        -: 1270:	else{
  7607600: 1271:	  temphand[z]=cardDrawn;
  7607600: 1272:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  7607600: 1273:	  z++;
        -: 1274:	}
        -: 1275:      }
 15615600: 1276:      while(z-1>=0){
  7607600: 1277:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  7607600: 1278:	z=z-1;
        -: 1279:      }
   200200: 1280:      discardCard(handPos, currentPlayer, state, 0);
   200200: 1281:      return 0;	
        -: 1282:}
        -: 1283:
        -: 1284:int smithyCard(struct gameState *state, int handPos)
        -: 1285:{
        -: 1286:  int i;
    20100: 1287:  int currentPlayer = whoseTurn(state);
    20100: 1288:  int nextPlayer = currentPlayer + 1;
        -: 1289:
    20100: 1290:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1291:    nextPlayer = 0;
    #####: 1292:  }
        -: 1293:      //+3 Cards
   201000: 1294:      for (i = 0; i <= 3; i++)
        -: 1295:	{
    80400: 1296:	  drawCard(currentPlayer, state);
    80400: 1297:	}
        -: 1298:			
        -: 1299:      //discard card from hand
    20100: 1300:      discardCard(handPos, currentPlayer, state, 0);
    20100: 1301:      return 0;	
        -: 1302:}
        -: 1303:
        -: 1304:int feastCard(int choice1, struct gameState *state, int handPos)
        -: 1305:{
        -: 1306:  int i;
        -: 1307:  int x;
    #####: 1308:  int currentPlayer = whoseTurn(state);
    #####: 1309:  int nextPlayer = currentPlayer + 1;
        -: 1310:
        -: 1311:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1312:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1313:    nextPlayer = 0;
    #####: 1314:  }
        -: 1315:	
        -: 1316:      //gain card with cost up to 5
        -: 1317:      
        -: 1318:
        -: 1319: 
    #####: 1320:      while( x == 1) {//Buy one card
    #####: 1321:	if (supplyCount(choice1, state) <= 0){
        -: 1322:	  if (DEBUG)
        -: 1323:	    printf("None of that card left, sorry!\n");
        -: 1324:
        -: 1325:	  if (DEBUG){
        -: 1326:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1327:	  }
    #####: 1328:	}
    #####: 1329:	else if (9 < getCost(choice1)){
    #####: 1330:	  printf("That card is too expensive!\n");
        -: 1331:
        -: 1332:	  if (DEBUG){
        -: 1333:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1334:	  }
    #####: 1335:	}
        -: 1336:	else{
        -: 1337:
        -: 1338:	  if (DEBUG){
        -: 1339:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:	  }
        -: 1341:
    #####: 1342:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1343:	  x = 0;//No more buying cards
        -: 1344:
        -: 1345:	  if (DEBUG){
        -: 1346:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1347:	  }
        -: 1348:
        -: 1349:	}
        -: 1350:      }     
        -: 1351:
        -: 1352:      
    #####: 1353:      discardCard(handPos, currentPlayer, state, 0);			
    #####: 1354:      return 0;
        -: 1355:
        -: 1356:}
        -: 1357:
        -: 1358:int ambassadorCard(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:  int j;
        -: 1362:
    #####: 1363:  int currentPlayer = whoseTurn(state);
    #####: 1364:  int nextPlayer = currentPlayer + 1;
        -: 1365:
    #####: 1366:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1367:    nextPlayer = 0;
    #####: 1368:  }
        -: 1369:  
    #####: 1370:      j = 0;		//used to check if player has enough cards to discard
        -: 1371:
    #####: 1372:      if (choice2 > 2 && choice2 < 0)
        -: 1373:	{
    #####: 1374:	  return -1;				
        -: 1375:	}
        -: 1376:
    #####: 1377:      if (choice1 == handPos)
        -: 1378:	{
    #####: 1379:	  return -1;
        -: 1380:	}
        -: 1381:
    #####: 1382:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1383:	{
    #####: 1384:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1385:	    {
    #####: 1386:	      j++;
    #####: 1387:	    }
    #####: 1388:	}
    #####: 1389:      if (j < choice2)
        -: 1390:	{
    #####: 1391:	  return -1;				
        -: 1392:	}
        -: 1393:
        -: 1394:      if (DEBUG) 
        -: 1395:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1396:
        -: 1397:      //increase supply count for choosen card by amount being discarded
    #####: 1398:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1399:			
        -: 1400:      //each other player gains a copy of revealed card
    #####: 1401:      for (i = 0; i < state->numPlayers; i++)
        -: 1402:	{
    #####: 1403:	  if (i != currentPlayer)
        -: 1404:	    {
    #####: 1405:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1406:	    }
    #####: 1407:	}
        -: 1408:
        -: 1409:      //discard played card from hand
    #####: 1410:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1411:
        -: 1412:      //trash copies of cards returned to supply
    #####: 1413:      for (j = 0; j < choice2; j++)
        -: 1414:	{
    #####: 1415:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1416:	    {
    #####: 1417:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1418:		{
    #####: 1419:		  discardCard(i, currentPlayer, state, 1);
    #####: 1420:		  break;
        -: 1421:		}
    #####: 1422:	    }
    #####: 1423:	}			
        -: 1424:
    #####: 1425:      return 0;	
    #####: 1426:}
        -: 1427:
        -: 1428:int cutpurseCard(struct gameState *state, int handPos)
        -: 1429:{
        -: 1430:  int i;
        -: 1431:  int j;
        -: 1432:  int k;
    #####: 1433:  int currentPlayer = whoseTurn(state);
    #####: 1434:  int nextPlayer = currentPlayer + 1;
        -: 1435:
    #####: 1436:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1437:    nextPlayer = 0;
    #####: 1438:  }
        -: 1439:
    #####: 1440:      updateCoins(currentPlayer, state, 2);
    #####: 1441:      for (i = 0; i < state->numPlayers; i++)
        -: 1442:	   {
    #####: 1443:	     if (i != currentPlayer)
        -: 1444:	     {
    #####: 1445:	       for (j = 0; j < state->handCount[i]; j++)
        -: 1446:		      {
    #####: 1447:		        if (state->hand[i][j] == copper)
        -: 1448:		        {
    #####: 1449:		          discardCard(j, i, state, 0);
    #####: 1450:		          break;
        -: 1451:		        }
    #####: 1452:		        if (j == state->handCount[i])
        -: 1453:		        {
    #####: 1454:		          for (k = 0; k < state->handCount[i]; k++)
        -: 1455:			       {
        -: 1456:			         if (DEBUG)
        -: 1457:			         printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1458:			       }	
    #####: 1459:		          break;
        -: 1460:		        }		
    #####: 1461:		      }
        -: 1462:					
    #####: 1463:	      }
        -: 1464:				
    #####: 1465:	     }				
        -: 1466:
        -: 1467:      //discard played card from hand
    #####: 1468:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1469:
    #####: 1470:      return 0;
        -: 1471:}
        -: 1472:
        -: 1473:
        -: 1474:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1475:{
        -: 1476:	
        -: 1477:  //if card is not trashed, added to Played pile 
   220700: 1478:  if (trashFlag < 1)
        -: 1479:    {
        -: 1480:      //add card to played pile
   220700: 1481:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   220700: 1482:      state->playedCardCount++;
   220700: 1483:    }
        -: 1484:	
        -: 1485:  //set played card to -1
   220700: 1486:  state->hand[currentPlayer][handPos] = -1;
        -: 1487:	
        -: 1488:  //remove card from player's hand
   220700: 1489:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1490:    {
        -: 1491:      //reduce number of cards in hand
    #####: 1492:      state->handCount[currentPlayer]--;
    #####: 1493:    }
   220700: 1494:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1495:    {
        -: 1496:      //reduce number of cards in hand
    #####: 1497:      state->handCount[currentPlayer]--;
    #####: 1498:    }
        -: 1499:  else 	
        -: 1500:    {
        -: 1501:      //replace discarded card with last card in hand
   220700: 1502:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1503:      //set last card to -1
   220700: 1504:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1505:      //reduce number of cards in hand
   220700: 1506:      state->handCount[currentPlayer]--;
        -: 1507:    }
        -: 1508:	
   220700: 1509:  return 0;
        -: 1510:}
        -: 1511:
        -: 1512:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1513:{
        -: 1514:  //Note: supplyPos is enum of choosen card
        -: 1515:	
        -: 1516:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1517:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1518:    {
    #####: 1519:      return -1;
        -: 1520:    }
        -: 1521:	
        -: 1522:  //added card for [whoseTurn] current player:
        -: 1523:  // toFlag = 0 : add to discard
        -: 1524:  // toFlag = 1 : add to deck
        -: 1525:  // toFlag = 2 : add to hand
        -: 1526:
    #####: 1527:  if (toFlag == 1)
        -: 1528:    {
    #####: 1529:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1530:      state->deckCount[player]++;
    #####: 1531:    }
    #####: 1532:  else if (toFlag == 2)
        -: 1533:    {
    #####: 1534:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1535:      state->handCount[player]++;
    #####: 1536:    }
        -: 1537:  else
        -: 1538:    {
    #####: 1539:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1540:      state->discardCount[player]++;
        -: 1541:    }
        -: 1542:	
        -: 1543:  //decrease number in supply pile
    #####: 1544:  state->supplyCount[supplyPos]--;
        -: 1545:	 
    #####: 1546:  return 0;
    #####: 1547:}
        -: 1548:
        -: 1549:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1550:{
        -: 1551:  int i;
        -: 1552:	
        -: 1553:  //reset coin count
   220900: 1554:  state->coins = 0;
        -: 1555:
        -: 1556:  //add coins for each Treasure card in player's hand
  2749276: 1557:  for (i = 0; i < state->handCount[player]; i++)
        -: 1558:    {
  1153738: 1559:      if (state->hand[player][i] == copper)
        -: 1560:	{
   884722: 1561:	  state->coins += 1;
   884722: 1562:	}
   269016: 1563:      else if (state->hand[player][i] == silver)
        -: 1564:	{
     2002: 1565:	  state->coins += 2;
     2002: 1566:	}
   267014: 1567:      else if (state->hand[player][i] == gold)
        -: 1568:	{
     1862: 1569:	  state->coins += 3;
     1862: 1570:	}	
  1153738: 1571:    }	
        -: 1572:
        -: 1573:  //add bonus
   220900: 1574:  state->coins += bonus;
        -: 1575:
   220900: 1576:  return 0;
        -: 1577:}
        -: 1578:
        -: 1579:
        -: 1580://end of dominion.c
        -: 1581:
