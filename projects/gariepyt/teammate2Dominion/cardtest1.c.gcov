        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:**Card test 1: Adventurer
        -:    3:**Written by: Tom Gariepy
        -:    4:**CS 325 Winter 2016
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:/*void playAdventurerCard(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int * temphand, int z)*/
        -:   15:
        1:   16:int main(int argc, char const *argv[]) {
        -:   17:    int i;
        1:   18:    int seed = 1000;
        1:   19:    int numPlayer = 2;
        -:   20:    int p, r, handCount;
        -:   21:    int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   22:               , remodel, smithy, village, baron, great_hall};
        -:   23:    struct gameState G;
        1:   24:    int maxHandCount = 5;
        -:   25:
        -:   26:    // arrays of all adventurers
        -:   27:    int ads[MAX_HAND];
      501:   28:    for (i = 0; i < MAX_HAND; i++)
        -:   29:    {
      500:   30:        ads[i] = adventurer;
        -:   31:    }
        -:   32:
        1:   33:    printf ("TESTING adventurer card:\n");
        3:   34:    for (p = 0; p < numPlayer; p++) {
       12:   35:    	for (handCount = 1; handCount <= maxHandCount; handCount++) {
       10:   36:    		printf("Test player %d playing adventurer card, hand size: %d\n", p, handCount);
        -:   37:    		
       10:   38:    		memset(&G, 23, sizeof(struct gameState));   // clear the game state
       10:   39:            r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
       10:   40:            G.whoseTurn = p;
       10:   41:            G.handCount[p] = handCount;
       10:   42:            memcpy(G.hand[p], ads, sizeof(int) * handCount);
        -:   43:
       10:   44:            r = playCard(0, 0, 0, 0, &G);
        -:   45:
       10:   46:            printf("G.handCount = %d, %d <= expected <= %d\n", G.handCount[p], handCount - 1, handCount + 1);
        -:   47:
       10:   48:            if (G.handCount[p] >= handCount - 1 && G.handCount <= handCount + 1) {
    #####:   49:            	printf("The adventure card worked correctly\n");
        -:   50:            }
        -:   51:            else {
       10:   52:            	printf("The adventure card did not work correctly\n");
        -:   53:            }
        -:   54:    	}
        -:   55:    }
        -:   56:
        -:   57:
        1:   58:	return 0;
        -:   59:}