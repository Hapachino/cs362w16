***************************************************************************
* TESTING FUNCTION: buyCard
* CONDITION: Successful use of function.
***************************************************************************

  EXECUTING: buyCard(smithy, &state)

  TEST: Player's discard count is incremented by one...
	PASS!

  TEST: Newly purchased card is in player's discard deck and the rest is unchanged...
	PASS!

  TEST: Purchased card is removed from the supply deck...
	PASS!

  TEST: Player's deck should be unchanged...
	PASS!

  TEST: Player's hand should be unchanged...
	PASS!

  TEST: Other player's discard should be unchanged...
	PASS!

  TEST: Other player's deck should be unchanged...
	PASS!

  TEST: Other player's hand should be unchanged...
	PASS!

  TEST: Purchased card's cost is deducted from player's coins...
	PASS!

  TEST: Number of buys is deecremented by one...
	PASS!

***************************************************************************
* TESTING FUNCTION: buyCard
* CONDITION: Player unable to afford requested card. Coins set to 0 before 
*   executing buyCard function
***************************************************************************

  EXECUTING: buyCard(minion, &state)

  TEST: Game state should not change at all...
	PASS!

***************************************************************************
* TESTING FUNCTION: buyCard
* CONDITION: Supply card unavailable by setting count to 0.
***************************************************************************

  EXECUTING: buyCard(remodel, &state)

  TEST: Game state should not change at all...
	PASS!

***************************************************************************
* TESTING FUNCTION: buyCard
* CONDITION: Player has zero buys remaining.
***************************************************************************

  EXECUTING: buyCard(remodel, &state)

  TEST: Game state should not change at all...
	PASS!

***************************************************************************
* TESTING FUNCTION: numHandCards
* CONDITION: Number of hand cards on game initialization.
***************************************************************************

  EXECUTING: numHandCards(&state)

  TEST: Initial number of hand cards for starting player should be 5...
	PASS!

  TEST: Initial number of hand cards for non-starting player should be 0...
	PASS!

  TEST: hand deck for player has five valid cards chosen for this game...
	PASS!

***************************************************************************
* TESTING FUNCTION: gainCard
* CONDITION: Successful use of function gainCard.
***************************************************************************

  EXECUTING: gainCard(smithy, &state, 1, state.whoseTurn)

  TEST: gainCard with toFlag = 1 increments the player's deck count by 1...
	PASS!

  TEST: gainCard with toFlag = 1 adds the card to the top of the player's deck...
	PASS!

  TEST: supply count for smithy decremented by 1, all other positions remain the same...
	PASS!

  EXECUTING: gainCard(smithy, &state, 2, state.whoseTurn)

  TEST: gainCard with toFlag = 3 increments the player's hand count by 1...
	PASS!

  TEST: gainCard with toFlag = 3 adds the card to the top of the player's hand...
	PASS!

  EXECUTING: gainCard(smithy, &state, 3, state.whoseTurn)

  TEST: gainCard with toFlag = 3 increments the player's discard count by 1...
	PASS!

  TEST: gainCard with toFlag = 3 adds the card to the top of the player's discard...
	PASS!

  TEST: All changes are for current player, player 2's discard should be unchanged...
	PASS!

  TEST: All changes are for current player, player 2's hand should be unchanged...
	PASS!

  TEST: All changes are for current player, player 2's deck should be unchanged...
	PASS!

  TEST: gainCard with supply count for card set to zero should not change state at all...
	PASS!

***************************************************************************
* TESTING FUNCTION: updateCoins
* CONDITION: Successful use of function updateCoins.
***************************************************************************

  EXECUTING: updateCoins(state.whoseTurn, &state, 0)

  TEST: Placed five copper cards in player hand, should be 5...
	PASS!

  TEST: Placed six silver cards in player hand, set handCount to 6, should be 12...
	PASS!

  TEST: 1 Copper, 2 Silver, 2 Gold, set handCount to 5, should be 11...
	PASS!

  TEST: Setting hand count to 4, should only read value of top 4 cards = 8...
	PASS!

  TEST: Including bonus of 5, should result in 8 + 5 = 13...
	PASS!

  TEST: updateCoins only accesses cards, card piles should be unchanged...
	PASS!

***************************************************************************
* TESTING FUNCTION: effectSmithy
***************************************************************************
  NOTE: Smithy card placed in position 0 before each test...

  EXECUTING: effectSmithy(&state, &infos)

  TEST: 3 valid cards added to current player hand...
	PASS!

  TEST: Current player hand count changed: 3 draws - 1 discard = +2...
	PASS!

  TEST: The smithy card is properly removed from the player hand...
	PASS!

  TEST: 3 cards	came from player's deck...
	PASS!

  TEST: Player 2's decks were not modified...
	PASS!

  TEST: Game kingdom decks were not modified...
	PASS!

***************************************************************************
* TESTING FUNCTION: effectAdventure
***************************************************************************

  EXECUTING: effectAdventure(&state, &infos)

  TEST: Non-treasure cards are successfully added to the discard pile

	FAIL!

  TEST: Two additional treasure cards are added to the player's hand

	PASS!

  TEST: Other Player's cards are not modified

	PASS!

  TEST: Game state supply count is not modified

	PASS!

***************************************************************************
* TESTING FUNCTION: effectVillage
***************************************************************************

  EXECUTING: effectVillage(&state, &infos)

5
  TEST: One card is drawn and added to the player's hand...

	PASS!

  TEST: Two actions are added to the game state

	PASS!

  TEST: Adventurer card is removed from player's hand and discarded

1	FAIL!

File 'dominion.c'
Lines executed:29.59% of 605
Branches executed:30.22% of 417
Taken at least once:19.90% of 417
Calls executed:18.75% of 96
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 210 returned 100% blocks executed 83%
      210:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       56:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
        -:   24:  
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:
function initializeGame called 7 returned 100% blocks executed 88%
        7:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) 
        -:   40:{
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;      
        -:   44:  //set up random number generator
        7:   45:  SelectStream(1);
call    0 returned 100%
        7:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
        7:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        7:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       77:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
      770:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
      700:   62:   if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:     {
    #####:   64:       return -1;
        -:   65:     }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        7:   88:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
        7:   90:      state->supplyCount[estate] = 8;
        7:   91:      state->supplyCount[duchy] = 8;
        7:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        7:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  103:  state->supplyCount[silver] = 40;
        7:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      147:  107:  for (i = adventurer; i <= treasure_map; i++)         //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:  {
     1162:  109:    for (j = 0; j < 10; j++)               //loop chosen cards
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  110:    {
     1085:  111:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:      {
        -:  113:        //check if card is a 'Victory' Kingdom card
       70:  114:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  115:        {
        7:  116:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  117:          { 
        7:  118:            state->supplyCount[i] = 8; 
        -:  119:          }
        -:  120:          else
        -:  121:          {
    #####:  122:            state->supplyCount[i] = 12;
        -:  123:          }
        -:  124:        }
        -:  125:        else
        -:  126:        {
       56:  127:          state->supplyCount[i] = 10;
        -:  128:        }
       63:  129:        break;
        -:  130:      }
        -:  131:      else    //card is not in the set choosen for the game
        -:  132:      {
     1022:  133:        state->supplyCount[i] = -1;
        -:  134:      }
        -:  135:    }
        -:  136:  }
        -:  137:
        -:  138:  ////////////////////////
        -:  139:  //supply intilization complete
        -:  140:
        -:  141:  //set player decks
       21:  142:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  143:  {
       14:  144:    state->deckCount[i] = 0;
       56:  145:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  146:   {
       42:  147:     state->deck[i][j] = estate;
       42:  148:     state->deckCount[i]++;
        -:  149:   }
      112:  150:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  151:   {
       98:  152:     state->deck[i][j] = copper;
       98:  153:     state->deckCount[i]++;    
        -:  154:   }
        -:  155:  }
        -:  156:  //shuffle player decks
       21:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  158:    {
       14:  159:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  160: {
    #####:  161:   return -1;
        -:  162: }
        -:  163:    }
        -:  164:
        -:  165:  //draw player hands
       21:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  167:    {  
        -:  168:      //initialize hand size to zero
       14:  169:      state->handCount[i] = 0;
       14:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      // {
        -:  174:      //   drawCard(i, state);
        -:  175:      // }
        -:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
      196:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  180:    {
      189:  181:      state->embargoTokens[i] = 0;
        -:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        7:  185:  state->outpostPlayed = 0;
        7:  186:  state->phase = 0;
        7:  187:  state->numActions = 1;
        7:  188:  state->numBuys = 1;
        7:  189:  state->playedCardCount = 0;
        7:  190:  state->whoseTurn = 0;
        7:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       42:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  196:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  197:  }
        7:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
        7:  200:  return 0;
        -:  201:}
        -:  202:
        -:  203:
function shuffle called 14 returned 100% blocks executed 93%
       14:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:  int newDeck[MAX_DECK];
       14:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       14:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:    return -1;
       14:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      168:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      140:  218:    newDeck[newDeckPos] = state->deck[player][card];
      140:  219:    newDeckPos++;
      490:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      350:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      140:  223:    state->deckCount[player]--;
        -:  224:  }
      154:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  226:    state->deck[player][i] = newDeck[i];
      140:  227:    state->deckCount[player]++;
        -:  228:  }
       14:  229:  return 0;
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
call    0 never executed
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
function buyCard called 4 returned 100% blocks executed 100%
        4:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        4:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
        4:  281:  who = state->whoseTurn;
        -:  282:
        4:  283:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
        1:  286:    return -1;
        3:  287:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        1:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
        1:  290:    return -1;
        2:  291:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  294:    return -1;
        -:  295:  } else {
        1:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
        1:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  299:  
        1:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  301:    state->numBuys--;
        1:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
        1:  309:  return 0;
        -:  310:}
        -:  311:
function numHandCards called 1 returned 100% blocks executed 100%
        1:  312:int numHandCards(struct gameState *state) {
        1:  313:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  321:int supplyCount(int card, struct gameState *state) {
        8:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  347:int whoseTurn(struct gameState *state) {
        1:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
function drawCard called 42 returned 100% blocks executed 36%
       42:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	
        -:  528:  int count;
        -:  529:  int deckCounter;
       42:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    #####:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    #####:  539:    state->deckCount[player] = state->discardCount[player];
    #####:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    #####:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  544:   
    #####:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    #####:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    #####:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
    #####:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    #####:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
       42:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
       42:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
       42:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
       42:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       42:  577:    state->deckCount[player]--;
       42:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
       42:  581:  return 0;
        -:  582:}
        -:  583:
function getCost called 3 returned 100% blocks executed 13%
        3:  584:int getCost(int cardNumber)
        -:  585:{
        3:  586:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 67%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 33%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
        2:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:
    #####:  650:  struct infosStruct *infos = malloc(sizeof(struct infosStruct));
        -:  651:  int i;
        -:  652:  int j;
        -:  653:  int k;
        -:  654:  int x;
        -:  655:  int index;
    #####:  656:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  657:  int nextPlayer = currentPlayer + 1;
        -:  658:
    #####:  659:  int tributeRevealedCards[2] = {-1, -1};
        -:  660:  int temphand[MAX_HAND];// moved above the if statement
    #####:  661:  int drawntreasure=0;
        -:  662:  int cardDrawn;
    #####:  663:  int z = 0;// this is the counter for the temp hand
    #####:  664:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  665:    nextPlayer = 0;
    #####:  666:    infos->nextPlayer = nextPlayer;
        -:  667:  }
        -:  668:  
    #####:  669:  infos->z = 0;
    #####:  670:  infos->currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  671:  infos->tributeRevealedCards[0] = -1;
    #####:  672:  infos->tributeRevealedCards[1] = -1;
    #####:  673:  infos->drawntreasure = 0;
    #####:  674:  infos->handPos = handPos;
    #####:  675:  infos->choice1 = choice1;
    #####:  676:  infos->choice2 = choice2;
    #####:  677:  infos->choice3 = choice3;
        -:  678:  //uses switch to select card and perform actions
    #####:  679:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  680:    {
        -:  681:    case adventurer:
    #####:  682:      return effectAdventure(state, infos);
call    0 never executed
        -:  683:
        -:  684:    case council_room:
    #####:  685:      return effectCouncil(state, infos);
call    0 never executed
        -:  686:
        -:  687:
        -:  688:    case feast:
        -:  689:      //gain card with cost up to 5
        -:  690:      //Backup hand
    #####:  691:      for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  692:      {
    #####:  693:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  694:      	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  695:      }
        -:  696:      //Backup hand
        -:  697:
        -:  698:      //Update Coins for Buy
    #####:  699:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  700:      x = 1;//Condition to loop on
    #####:  701:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  702:	   if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  703:    	  if (DEBUG)
        -:  704:    	    printf("None of that card left, sorry!\n");
        -:  705:
    #####:  706:    	  if (DEBUG){
        -:  707:    	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  708:    	  }
        -:  709:    	}
    #####:  710:    	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  711:    	  printf("That card is too expensive!\n");
call    0 never executed
        -:  712:
    #####:  713:    	  if (DEBUG){
        -:  714:    	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  715:    	  }
        -:  716:    	}
        -:  717:  	else{
        -:  718:
    #####:  719:  	  if (DEBUG){
        -:  720:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:  	  }
        -:  722:
    #####:  723:  	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  724:  	  x = 0;//No more buying cards
        -:  725:
    #####:  726:  	  if (DEBUG){
        -:  727:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:  	  }
        -:  729:
        -:  730:  	}
        -:  731:      }     
        -:  732:
        -:  733:      //Reset Hand
    #####:  734:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  735:	state->hand[currentPlayer][i] = temphand[i];
    #####:  736:	temphand[i] = -1;
        -:  737:      }
        -:  738:      //Reset Hand
        -:  739:      			
    #####:  740:      return 0;
        -:  741:			
        -:  742:    case gardens:
    #####:  743:      return -1;
        -:  744:			
        -:  745:    case mine:
    #####:  746:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  747:
    #####:  748:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  749:	{
    #####:  750:	  return -1;
        -:  751:	}
        -:  752:		
    #####:  753:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  754:	{
    #####:  755:	  return -1;
        -:  756:	}
        -:  757:
    #####:  758:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  759:	{
    #####:  760:	  return -1;
        -:  761:	}
        -:  762:
    #####:  763:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  764:
        -:  765:      //discard card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  767:
        -:  768:      //discard trashed card
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  774:	      break;
        -:  775:	    }
        -:  776:	}
        -:  777:			
    #####:  778:      return 0;
        -:  779:			
        -:  780:    case remodel:
    #####:  781:      return effectRemodel(state, infos);
call    0 never executed
        -:  782:		
        -:  783:    case smithy:
    #####:  784:      return effectSmithy(state, infos);
call    0 never executed
        -:  785:
        -:  786:		case village:
    #####:  787:      return effectVillage(state, infos);
call    0 never executed
        -:  788:
        -:  789:    case baron:
    #####:  790:      state->numBuys++;//Increase buys by 1!
    #####:  791:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  792:	int p = 0;//Iterator for hand!
    #####:  793:	int card_not_discarded = 1;//Flag for discard set!
    #####:  794:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  795:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  796:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  797:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  798:	    state->discardCount[currentPlayer]++;
    #####:  799:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  800:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  801:	    }
    #####:  802:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  803:	    state->handCount[currentPlayer]--;
    #####:  804:	    card_not_discarded = 0;//Exit the loop
        -:  805:	  }
    #####:  806:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  807:	    if(DEBUG) {
        -:  808:	      printf("No estate cards in your hand, invalid choice\n");
        -:  809:	      printf("Must gain an estate if there are any\n");
        -:  810:	    }
    #####:  811:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  812:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  813:	      state->supplyCount[estate]--;//Decrement estates
    #####:  814:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:		isGameOver(state);
call    0 never executed
        -:  816:	      }
        -:  817:	    }
    #####:  818:	    card_not_discarded = 0;//Exit the loop
        -:  819:	  }
        -:  820:			    
        -:  821:	  else{
    #####:  822:	    p++;//Next card
        -:  823:	  }
        -:  824:	}
        -:  825:      }
        -:  826:			    
        -:  827:      else{
    #####:  828:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  830:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  831:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  832:	    isGameOver(state);
call    0 never executed
        -:  833:	  }
        -:  834:	}
        -:  835:      }
        -:  836:	    
        -:  837:      
    #####:  838:      return 0;
        -:  839:		
        -:  840:    case great_hall:
        -:  841:      //+1 Card
    #####:  842:      drawCard(currentPlayer, state);
call    0 never executed
        -:  843:			
        -:  844:      //+1 Actions
    #####:  845:      state->numActions++;
        -:  846:			
        -:  847:      //discard card from hand
    #####:  848:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case minion:
        -:  852:      //+1 action
    #####:  853:      state->numActions++;
        -:  854:			
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  857:			
    #####:  858:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  859:	{
    #####:  860:	  state->coins = state->coins + 2;
        -:  861:	}
        -:  862:			
    #####:  863:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  864:	{
        -:  865:	  //discard hand
    #####:  866:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  867:	    {
    #####:  868:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:	    }
        -:  870:				
        -:  871:	  //draw 4
    #####:  872:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  873:	    {
    #####:  874:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  875:	    }
        -:  876:				
        -:  877:	  //other players discard hand and redraw if hand size > 4
    #####:  878:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  881:		{
    #####:  882:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  883:		    {
        -:  884:		      //discard hand
    #####:  885:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  886:			{
    #####:  887:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  888:			}
        -:  889:							
        -:  890:		      //draw 4
    #####:  891:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  892:			{
    #####:  893:			  drawCard(i, state);
call    0 never executed
        -:  894:			}
        -:  895:		    }
        -:  896:		}
        -:  897:	    }
        -:  898:				
        -:  899:	}
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case steward:
    #####:  903:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  904:    	{
        -:  905:    	  //+2 cards
    #####:  906:    	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  907:    	  drawCard(currentPlayer, state);
call    0 never executed
        -:  908:    	}
    #####:  909:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  910:    	{
        -:  911:    	  //+2 coins
    #####:  912:    	  state->coins = state->coins + 2;
        -:  913:    	}
        -:  914:      else
        -:  915:    	{
        -:  916:    	  //trash 2 cards in hand
    #####:  917:    	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  918:    	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  919:    	}
        -:  920:			
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  923:      return 0;
        -:  924:		
        -:  925:    case tribute:
    #####:  926:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -:  927:      {
    #####:  928:      	if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:      	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:      	  state->deckCount[nextPlayer]--;
        -:  932:      	}
    #####:  933:      	else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -:  934:        {
    #####:  935:      	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  936:      	  state->discardCount[nextPlayer]--;
        -:  937:        }
        -:  938:      	else
        -:  939:        {
        -:  940:      	  //No Card to Reveal
    #####:  941:      	  if (DEBUG)
        -:  942:          {
        -:  943:      	    printf("No cards to reveal\n");
        -:  944:      	  }
        -:  945:      	}
        -:  946:      }
        -:  947:      else
        -:  948:      {
    #####:  949:      	if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -:  950:        {
    #####:  951:      	  for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  952:          {
    #####:  953:      	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  954:      	    state->deckCount[nextPlayer]++;
    #####:  955:      	    state->discard[nextPlayer][i] = -1;
    #####:  956:      	    state->discardCount[nextPlayer]--;
        -:  957:      	  }
    #####:  958:        shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  959:        }
    #####:  960:      	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  962:      	state->deckCount[nextPlayer]--;
    #####:  963:      	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:      	state->deckCount[nextPlayer]--;
        -:  966:      }    
        -:  967:		       
    #####:  968:      if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -:  969:      {//If we have a duplicate card, just drop one 
    #####:  970:      	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  971:      	state->playedCardCount++;
    #####:  972:      	tributeRevealedCards[1] = -1;
        -:  973:      }
        -:  974:
    #####:  975:      for (i = 0; i <= 2; i ++)
branch  0 never executed
branch  1 never executed
        -:  976:      {
    #####:  977:      	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  978:        {//Treasure cards
    #####:  979:      	  state->coins += 2;
        -:  980:        }
        -:  981:		    
    #####:  982:      	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  983:          {//Victory Card Found
    #####:  984:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:            drawCard(currentPlayer, state);
call    0 never executed
        -:  986:          }
        -:  987:      	else
        -:  988:        {//Action Card
    #####:  989:      	  state->numActions = state->numActions + 2;
        -:  990:      	}
        -:  991:      }
    #####:  992:    return 0;
        -:  993:		
        -:  994:    case ambassador:
    #####:  995:      j = 0;		//used to check if player has enough cards to discard
        -:  996:
    #####:  997:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:	{
    #####:  999:	  return -1;				
        -: 1000:	}
        -: 1001:
    #####: 1002:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
    #####: 1007:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1010:	    {
    #####: 1011:	      j++;
        -: 1012:	    }
        -: 1013:	}
    #####: 1014:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;				
        -: 1017:	}
        -: 1018:
    #####: 1019:      if (DEBUG) 
        -: 1020:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1021:
        -: 1022:      //increase supply count for choosen card by amount being discarded
    #####: 1023:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1024:			
        -: 1025:      //each other player gains a copy of revealed card
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:      //discard played card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1036:
        -: 1037:      //trash copies of cards returned to supply
    #####: 1038:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1043:		{
    #####: 1044:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:		  break;
        -: 1046:		}
        -: 1047:	    }
        -: 1048:	}			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case cutpurse:
        -: 1053:
    #####: 1054:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1055:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
    #####: 1057:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
    #####: 1063:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1064:		      break;
        -: 1065:		    }
    #####: 1066:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
    #####: 1070:			  if (DEBUG)
        -: 1071:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1072:			}	
    #####: 1073:		      break;
        -: 1074:		    }		
        -: 1075:		}
        -: 1076:					
        -: 1077:	    }
        -: 1078:				
        -: 1079:	}				
        -: 1080:
        -: 1081:      //discard played card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:		
        -: 1087:    case embargo: 
        -: 1088:      //+2 Coins
    #####: 1089:      state->coins = state->coins + 2;
        -: 1090:			
        -: 1091:      //see if selected pile is in play
    #####: 1092:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:			
        -: 1097:      //add embargo token to selected supply pile
    #####: 1098:      state->embargoTokens[choice1]++;
        -: 1099:			
        -: 1100:      //trash card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case outpost:
        -: 1105:      //set outpost flag
    #####: 1106:      state->outpostPlayed++;
        -: 1107:			
        -: 1108:      //discard card
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case salvager:
        -: 1113:      //+1 buy
    #####: 1114:      state->numBuys++;
        -: 1115:			
    #####: 1116:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //gain coins equal to trashed card
    #####: 1119:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1120:	  //trash card
    #####: 1121:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1122:	}
        -: 1123:			
        -: 1124:      //discard card
    #####: 1125:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1126:      return 0;
        -: 1127:		
        -: 1128:    case sea_hag:
    #####: 1129:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1130:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1131:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1132:	  state->discardCount[i]++;
    #####: 1133:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1134:	}
        -: 1135:      }
    #####: 1136:      return 0;
        -: 1137:		
        -: 1138:    case treasure_map:
        -: 1139:      //search hand for another treasure_map
    #####: 1140:      index = -1;
    #####: 1141:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1144:	    {
    #####: 1145:	      index = i;
    #####: 1146:	      break;
        -: 1147:	    }
        -: 1148:	}
    #####: 1149:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1150:	{
        -: 1151:	  //trash both treasure cards
    #####: 1152:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1153:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1154:
        -: 1155:	  //gain 4 Gold cards
    #####: 1156:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1159:	    }
        -: 1160:				
        -: 1161:	  //return success
    #####: 1162:	  return 1;
        -: 1163:	}
        -: 1164:			
        -: 1165:      //no second treasure_map found in hand
    #####: 1166:      return -1;
        -: 1167:    }
        -: 1168:	
    #####: 1169:  return -1;
        -: 1170:}
        -: 1171:
function discardCard called 2 returned 100% blocks executed 75%
        2: 1172:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1173:{
        -: 1174:  //if card is not trashed, added to Played pile 
        2: 1175:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1176:  {
        -: 1177:    //add card to played pile
        2: 1178:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1179:    state->playedCardCount++;
        -: 1180:  }
        -: 1181:	
        -: 1182:  //set played card to -1
        2: 1183:  state->hand[currentPlayer][handPos] = -1;
        -: 1184:	
        -: 1185:  //remove card from player's hand
        2: 1186:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1187:  {
        -: 1188:    //reduce number of cards in hand
    #####: 1189:    state->handCount[currentPlayer]--;
        -: 1190:  }
        2: 1191:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1192:  {
        -: 1193:    //reduce number of cards in hand
    #####: 1194:    state->handCount[currentPlayer]--;
        -: 1195:  }
        -: 1196:  else 	
        -: 1197:    //replace discarded card with last card in hand
        2: 1198:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1199:    //set last card to -1
        2: 1200:	state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1201:	// reduce number of cards in hand
        2: 1202:	state->handCount[currentPlayer]--;
        -: 1203:
        2: 1204:  return 0;
        -: 1205:}
        -: 1206:
function gainCard called 5 returned 100% blocks executed 100%
        5: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:	
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1212:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        -: 1213:    {
        1: 1214:      return -1;
        -: 1215:    }
        -: 1216:	
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
        4: 1222:  if (toFlag == 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1223:    {
        1: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1225:      state->deckCount[player]++;
        -: 1226:    }
        3: 1227:  else if (toFlag == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1228:    {
        1: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1230:      state->handCount[player]++;
        -: 1231:    }
        -: 1232:  else
        -: 1233:    {
        2: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //decrease number in supply pile
        4: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:	 
        4: 1241:  return 0;
        -: 1242:}
        -: 1243:
function updateCoins called 12 returned 100% blocks executed 100%
       12: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:	
        -: 1248:  //reset coin count
       12: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
       71: 1252:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1253:    {
       59: 1254:      if (state->hand[player][i] == copper)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1255:	{
       36: 1256:	  state->coins += 1;
        -: 1257:	}
       23: 1258:      else if (state->hand[player][i] == silver)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -: 1259:	{
       12: 1260:	  state->coins += 2;
        -: 1261:	}
       11: 1262:      else if (state->hand[player][i] == gold)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 1263:	{
        4: 1264:	  state->coins += 3;
        -: 1265:	}	
        -: 1266:    }	
        -: 1267:
        -: 1268:  //add bonus
       12: 1269:  state->coins += bonus;
        -: 1270:
       12: 1271:  return 0;
        -: 1272:}
        -: 1273:
function effectAdventure called 1 returned 100% blocks executed 93%
        1: 1274:int effectAdventure(struct gameState *state, struct infosStruct *infos) 
        -: 1275:{
        1: 1276:  int drawntreasure2 = infos->drawntreasure;
        1: 1277:  int currentPlayer = infos->currentPlayer;
        1: 1278:  int cardDrawn = infos->cardDrawn;
        1: 1279:  int *temphand = (infos->temphand);
        1: 1280:  int z = infos->z;
        1: 1281:  int handPos = infos->handPos;
        1: 1282:  int i = infos->i;
        -: 1283:
        5: 1284:  while(drawntreasure2<2) 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1285:  {
        3: 1286:    if (state->deckCount[currentPlayer] <1) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1288:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1289:    }
        -: 1290:    // int handCount = state->handCount[currentPlayer];
        -: 1291:    // int deckCount = state->deckCount[currentPlayer];
        -: 1292:    // int discardCount = state->discardCount[currentPlayer];
        -: 1293:    // printf("discard count %d\n", discardCount);
        -: 1294:
        3: 1295:    drawCard(currentPlayer, state);// draw card doesn't update handCount?
call    0 returned 100%
        -: 1296:
        3: 1297:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1298:    
        5: 1299:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1300:    {
        2: 1301:      drawntreasure2++;
        -: 1302:    }
        -: 1303:    else
        -: 1304:    {
        1: 1305:      temphand[z]=cardDrawn;
        1: 1306:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1307:      z++;
        -: 1308:    }
        -: 1309:  }
        3: 1310:  while(z-1>=0)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -: 1311:  {
        1: 1312:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1: 1313:    z=z-1;
        -: 1314:  }
        1: 1315:  return 0;  
        -: 1316:}
        -: 1317:
function effectCouncil called 0 returned 0% blocks executed 0%
    #####: 1318:int effectCouncil(struct gameState *state, struct infosStruct *infos)
        -: 1319:{
        -: 1320:  //+4 Cards
    #####: 1321:  int currentPlayer = infos->currentPlayer;
    #####: 1322:  int handPos = infos->handPos;
    #####: 1323:  int i = infos->i;
    #####: 1324:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1325:  {
    #####: 1326:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1327:  }
        -: 1328:      
        -: 1329:  //+1 Buy
    #####: 1330:  state->numBuys++;
        -: 1331:  
        -: 1332:  //Each other player draws a card
    #####: 1333:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1334:  {
    #####: 1335:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1336:      {
    #####: 1337:        drawCard(i, state);
call    0 never executed
        -: 1338:      }
        -: 1339:  }
        -: 1340:  
        -: 1341:  //put played card in played card pile
    #####: 1342:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1343:
    #####: 1344:  return 0;
        -: 1345:}
        -: 1346://end of dominion.c
        -: 1347:
function effectRemodel called 0 returned 0% blocks executed 0%
    #####: 1348:int effectRemodel(struct gameState *state, struct infosStruct *infos) 
        -: 1349:{
    #####: 1350:  int currentPlayer = infos->currentPlayer;
    #####: 1351:  int choice1 = infos->choice1;
    #####: 1352:  int choice2 = infos->choice2;
    #####: 1353:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####: 1354:  int i = infos->i;
    #####: 1355:  int handPos = infos->handPos;
    #####: 1356:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1357:  {
    #####: 1358:    return -1;
        -: 1359:  }
        -: 1360:
    #####: 1361:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1362:
        -: 1363:  //discard card from hand
    #####: 1364:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1365:
        -: 1366:  //discard trashed card
    #####: 1367:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1368:  {
    #####: 1369:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1370:    {
    #####: 1371:      discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####: 1372:      break;
        -: 1373:    }
        -: 1374:  }
    #####: 1375:  return 0;
        -: 1376:}
        -: 1377:
function effectSmithy called 1 returned 100% blocks executed 100%
        1: 1378:int effectSmithy(struct gameState *state, struct infosStruct *infos) 
        -: 1379:{
        -: 1380:  int i;
        1: 1381:  int currentPlayer= infos->currentPlayer;
        1: 1382:  int handPos = infos->handPos;
        -: 1383:
        -: 1384:  //+3 Cards
        4: 1385:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1386:  {
        3: 1387:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1388:  }
        -: 1389:
        -: 1390:  //discard card from hand
        -: 1391:
        1: 1392:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1393:  return 0;
        -: 1394:}
        -: 1395:
function effectVillage called 1 returned 100% blocks executed 100%
        1: 1396:int effectVillage(struct gameState *state, struct infosStruct *infos)
        -: 1397:{
        -: 1398:
        1: 1399:  int currentPlayer= infos->currentPlayer;
        -: 1400:
        1: 1401:  int handPos = infos->handPos;
        -: 1402:  //+1 Card
        1: 1403:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1404:
        -: 1405:  //+2 Actions
        1: 1406:  state->numActions = state->numActions + 2;
        -: 1407:
        -: 1408:  //discard played card from hand
        1: 1409:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1410:
        1: 1411:  return 0;
        -: 1412:}
