Group Members: Brandon Gipson, Stephen Heng, and Joshua Homann


Explain testIsValid Function of UrlValidator test code. 
It uses the various object pieces to create urls inside a loop. It then passes the created urls to the isValid function and compares its results to the test oracle. Next it repeats these two steps until there are no further combinations of url parts to pair.


Total number of urls being tested: Somewhere in the realm of 35,910 if we don’t count the 
testUrlPathOptions. At least these are the parts created
by the test, however, you can add whatever you want
to the part objects if you want to test more.
How those urls are built: scheme+authority+port+path+query. In the test function it loops   
                                            through an object that contains other objects that form the pieces
                                            of the url. It appends each piece to the testBuffer and expected
        from what I can tell. The buffer is then stringified before being passed
        to the urVal.isValid function.
Example of valid url: http://www.google.com
Example of invalid url: ://aaa:-1/..




Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. 
I feel like it is definitely more complex overall but it is the same concepts we have learned so far. The added complexity just comes from it having "more moving parts" if you will. The concepts of creating an oracle and then comparing its results the the function being tested is the same as what we have done so far.