        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for village()
        -:    3: *
        -:    4: * cardtest3
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "village"
        -:   17:
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        -:   21:   
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:  
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player1 = 0;
        1:   27:    int player2 = 1;
        -:   28:	struct gameState G, testG;
        -:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state and player cards
        1:   33:	initializeGame(numPlayers, k, seed, &G);
        -:   34:
        1:   35:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   36:
        -:   37:	
        1:   38:	printf("TEST 1: choice1 = 0 = +1 card & +2 actions.\n");
        -:   39:
        -:   40:	// copy the game state
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:	
        1:   43:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   44:	newCards = 1;
        -:   45:	
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   49:	printf("Player 1 actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
        -:   50:	//for player 2
        1:   51:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   52:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   53:
        -:   54:	//Player 1 hand count
        1:   55:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   56:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   57:	}
        -:   58:	else{
    #####:   59:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   60:	}
        -:   61:	//Player 1 deck count
        1:   62:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   63:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   64:	}
        -:   65:	else{
    #####:   66:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   67:	}
        -:   68:	//Player 1 Number of actions
        1:   69:	if(testG.numActions== G.numActions + 1){
    #####:   70:		printf("\n >>>>>> Success: Number of Actions of current player is correct!!!");
        -:   71:	}
        -:   72:	else{
        1:   73:		printf("\n >>>>>> Fail: Number of Actions of current player is incorrect!!!");
        -:   74:	}
        -:   75:
        -:   76:	//Player 2 handcount
        1:   77:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   78:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   79:	}
        -:   80:	else{
    #####:   81:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   82:	}
        -:   83:	//Player 2 deck Count
        1:   84:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   85:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   89:	}
        -:   90:	
        -:   91:
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
