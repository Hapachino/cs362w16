File 'dominion.c'
Lines executed:29.03% of 565
dominion.c:creating 'dominion.c.gcov'

File 'unittest1.c'
Lines executed:74.38% of 121
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for initializeGame()
        -:    3: *
        -:    4: * unittest1: unittest1.c dominion.o rngs.o
        -:    5: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int i;
        -:   21:  
        1:   22:    int seed = 1000;
        -:   23:    int totalPlayers;
        -:   24:    int result;
        1:   25:    int testNum = 3;
        -:   26:
        1:   27:    printf("\n--------Testing for game initilization function----------");
        -:   28:
        1:   29:   	printf("\n--------Testing #1 for only one player----------");
        -:   30:
        1:   31:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:   	totalPlayers = 1;
        -:   34:
        1:   35:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   36:
        1:   37:    if(result == -1){
        1:   38:    	printf("\n>>>>Success: one player is not enough to play the game!!!");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>Fail: one player alone cant play the game!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for only five players----------");
        -:   45:
        1:   46:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:   	totalPlayers = 5;
        -:   49:
        1:   50:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   51:
        1:   52:    if(result == -1){
        1:   53:    	printf("\n>>>>Success: five players is too much for the game!!!");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>Fail: five players cant play the game!!!");
        -:   57:    }
        -:   58:
        4:   59:    for(totalPlayers = 2; totalPlayers <=4; totalPlayers++){
        3:   60:    	printf("\n--------Testing #%d for only five players----------", testNum);
        -:   61:
        3:   62:    	testNum++;
        -:   63:
        3:   64:	   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   65:
        3:   66:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   67:
        3:   68:	    if(result == 0){
        3:   69:    	printf("\n>>>>Success: %d players is enough for the game!!!", totalPlayers);
        -:   70:	    }
        -:   71:	    else{
    #####:   72:	    	printf("\n>>>>Fail: %d players are suppose to be able to play the game!!!", totalPlayers);
        -:   73:	    }
        3:   74:	    if(totalPlayers == 2){
        1:   75:	    	if(test.supplyCount[curse] == 10){
        1:   76:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:   77:	    	}
        -:   78:	    	else{
    #####:   79:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:   80:	    	}
        1:   81:	    	if(test.supplyCount[estate] == 8){
        1:   82:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:   83:	    	}
        -:   84:	    	else{
    #####:   85:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:   86:	    	}
        1:   87:	    	if(test.supplyCount[duchy] == 8){
        1:   88:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:   89:	    	}
        -:   90:	    	else{
    #####:   91:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:   92:	    	}
        1:   93:	    	if(test.supplyCount[province] == 8){
        1:   94:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:   95:	    	}
        -:   96:	    	else{
    #####:   97:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:   98:	    	}
        1:   99:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  100:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  101:	    	}
        -:  102:	    	else{
    #####:  103:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  104:	    	}
        1:  105:	    	if(test.supplyCount[silver] == 40){
        1:  106:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  107:	    	}
        -:  108:	    	else{
    #####:  109:	    		printf("\n>>>Fail: supply count for silver is incorrect!!!");
        -:  110:	    	}
        1:  111:	    	if(test.supplyCount[gold] == 30){
        1:  112:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  113:	    	}
        -:  114:	    	else{
    #####:  115:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  116:	    	}
        -:  117:	    }
        3:  118:	    if(totalPlayers == 3){
        1:  119:	    	if(test.supplyCount[curse] == 20){
        1:  120:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  121:	    	}
        -:  122:	    	else{
    #####:  123:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  124:	    	}
        1:  125:	    	if(test.supplyCount[estate] == 12){
        1:  126:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  127:	    	}
        -:  128:	    	else{
    #####:  129:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  130:	    	}
        1:  131:	    	if(test.supplyCount[duchy] == 12){
        1:  132:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  133:	    	}
        -:  134:	    	else{
    #####:  135:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  136:	    	}
        1:  137:	    	if(test.supplyCount[province] == 12){
        1:  138:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  139:	    	}
        -:  140:	    	else{
    #####:  141:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  142:	    	}
        1:  143:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  144:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  145:	    	}
        -:  146:	    	else{
    #####:  147:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  148:	    	}
        1:  149:	    	if(test.supplyCount[silver] == 40){
        1:  150:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  151:	    	}
        -:  152:	    	else{
    #####:  153:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  154:	    	}
        1:  155:	    	if(test.supplyCount[gold] == 30){
        1:  156:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  157:	    	}
        -:  158:	    	else{
    #####:  159:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  160:	    	}
        -:  161:	    }
        3:  162:	    if(totalPlayers == 4){
        1:  163:	    	if(test.supplyCount[curse] == 30){
        1:  164:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  165:	    	}
        -:  166:	    	else{
    #####:  167:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  168:	    	}
        1:  169:	    	if(test.supplyCount[estate] == 12){
        1:  170:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  171:	    	}
        -:  172:	    	else{
    #####:  173:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  174:	    	}
        1:  175:	    	if(test.supplyCount[duchy] == 12){
        1:  176:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  177:	    	}
        -:  178:	    	else{
    #####:  179:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  180:	    	}
        1:  181:	    	if(test.supplyCount[province] == 12){
        1:  182:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  183:	    	}
        -:  184:	    	else{
    #####:  185:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  186:	    	}
        1:  187:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  188:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  189:	    	}
        -:  190:	    	else{
    #####:  191:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  192:	    	}
        1:  193:	    	if(test.supplyCount[silver] == 40){
        1:  194:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  195:	    	}
        -:  196:	    	else{
    #####:  197:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  198:	    	}
        1:  199:	    	if(test.supplyCount[gold] == 30){
        1:  200:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  201:	    	}
        -:  202:	    	else{
    #####:  203:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  204:	    	}
        -:  205:	    }
        -:  206:
        -:  207:    }
        1:  208:    	totalPlayers = 2;
        1:  209:    	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:  210:
        1:  211:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:  212:
        1:  213:	   	printf("\n-------Test if kingdom cards are correct amount-----");
        -:  214:
        1:  215:	   	if(test.supplyCount[adventurer] == 10){
        1:  216:	   		printf("\n>>>>SUCCESS: supply count for adventurer is correct!!!");
        -:  217:	   	}
        -:  218:	   	else{
    #####:  219:	    	printf("\n>>>>Fail: supply count for adventurer is incorrect!!!");
        -:  220:	    	}
        1:  221:	    if(test.supplyCount[gardens] == 8){
        1:  222:	   		printf("\n>>>>SUCCESS: supply count for gardens is correct!!!");
        -:  223:	   	}
        -:  224:	   	else{
    #####:  225:	    	printf("\n>>>>Fail: supply count for gardens is incorrect!!!");
        -:  226:	    	}
        -:  227:
        3:  228:	    for(i =0; i < totalPlayers; i++){
        -:  229:			
        2:  230:			if(i==0){
        1:  231:				if(test.handCount[i] == 5){
        1:  232:					printf("\n>>>>SUCCESS: Player #%d hand count is 5!!!", i+1);
        -:  233:				}
        -:  234:				else{
    #####:  235:					printf("\n>>>>Fail: Player #%d hand count is not 5!!!", i+1);
        -:  236:					}
        -:  237:			}
        -:  238:			else{
        1:  239:				if(test.handCount[i] == 0){
        1:  240:					printf("\n>>>>SUCCESS: Player #%d hand count is empty!!!", i+1);
        -:  241:				}
        -:  242:				else{
    #####:  243:					printf("\n>>>>Fail: Player #%d hand count is not empty!!!", i+1);
        -:  244:					}
        -:  245:			}
        2:  246:		    if(test.discardCount[i] == 0){
        2:  247:		    	printf("\n>>>>SUCCESS: Player #%d discardCount is empty!!!", i+1);
        -:  248:		    }
        -:  249:		    else{
    #####:  250:		    	printf("\n>>>>Fail: Player #%d discardCount is not empty!!!", i+1);
        -:  251:		    	}
        -:  252:
        -:  253:	    }
        -:  254:
        1:  255:	    if(test.numActions == 1){
        1:  256:	   		printf("\n>>>>SUCCESS: Number of actions is correct!!!");
        -:  257:	   	}
        -:  258:	   	else{
    #####:  259:	    	printf("\n>>>>Fail: Number of actions is inrrect!!!");
        -:  260:	    	}
        -:  261:
        1:  262:	    if(test.numBuys == 1){
        1:  263:	   		printf("\n>>>>SUCCESS: Number of buys is correct!!!\n\n");
        -:  264:	   	}
        -:  265:	   	else{
    #####:  266:	    	printf("\n>>>>Fail: Number of buys is inrrect!!!");
        -:  267:	    	}
        -:  268:		/*
        -:  269:		if(test.handCount[0] == 5){
        -:  270:		    	printf("\n>>>>SUCCESS: Player #1 hand count contains 5 cards!!!");
        -:  271:		    }
        -:  272:		else{
        -:  273:		    printf("\n>>>>Fail: Player #1 hand count does contains 5 cards!!!");
        -:  274:		    	}
        -:  275:				
        -:  276:		if(test.handCount[1] == 0){
        -:  277:		    	printf("\n>>>>SUCCESS: Player #2 hand count is empty!!!");
        -:  278:		    }
        -:  279:		else{
        -:  280:		    printf("\n>>>>Fail: Player #2 hand count is not empty to start!!!");
        -:  281:		    	}
        -:  282:		*/
        -:  283:
        -:  284:
        -:  285:
        -:  286:
        1:  287:    return 0;
        -:  288:}File 'unittest2.c'
Lines executed:92.31% of 52
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:
        1:   18:int main() {
        -:   19:    int i;
        1:   20:    int seed = 1000;
        1:   21:    int numPlayer = 2;
        1:   22:    int maxBonus = 10;
        -:   23:    int p, r, handCount;
        -:   24:    int bonus;
        -:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState test;
        1:   28:    int maxHandCount = 5;
        -:   29:    
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
      501:   33:    for (i = 0; i < MAX_HAND; i++)
        -:   34:    {
      500:   35:        coppers[i] = copper;
      500:   36:        silvers[i] = silver;
      500:   37:        golds[i] = gold;
        -:   38:    }
        1:   39:    int v =2;
        1:   40:    int w = 2;
        1:   41:    printf ("-------TESTING updateCoins()--------\n");
        3:   42:    for (p = 0; p < numPlayer; p++)
        -:   43:    {
        -:   44:                
        2:   45:                bonus = rand()% maxBonus;
        2:   46:                handCount = 5;
        2:   47:                printf("Player #%d with %d treasure cards and %d bonus.\n", p, handCount, bonus);
        -:   48:
        2:   49:                memset(&test, 23, sizeof(struct gameState));   
        2:   50:                initializeGame(numPlayer, k, seed, &test); 
        2:   51:                test.handCount[p] = handCount;                 
        2:   52:                memcpy(test.hand[p], coppers, sizeof(int) * handCount); 
        2:   53:                updateCoins(p, &test, bonus);
        -:   54:
        2:   55:                printf("All Copper Coins = %d, expected = %d\n", test.coins, handCount * 1 + bonus);
        -:   56:
        2:   57:                if(test.coins == handCount * 1 + bonus){
        2:   58:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   59:                }
        -:   60:                else{
    #####:   61:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   62:                }
        -:   63:
        2:   64:                memcpy(test.hand[p], silvers, sizeof(int) * handCount); 
        2:   65:                updateCoins(p, &test, bonus);
        -:   66:
        2:   67:                printf("All Silver Coins = %d, expected = %d\n", test.coins, handCount * 2 + bonus);
        -:   68:
        2:   69:                 if(test.coins == handCount * 2 + bonus){
        2:   70:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   71:                }
        -:   72:                else{
    #####:   73:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   74:                }
        -:   75:                
        -:   76:
        2:   77:                memcpy(test.hand[p], golds, sizeof(int) * handCount); 
        2:   78:                updateCoins(p, &test, bonus);
        -:   79:
        2:   80:                printf("All Gold Coins = %d, expected = %d\n", test.coins, handCount * 3 + bonus);
        -:   81:
        2:   82:                 if(test.coins == handCount * 3 + bonus){
        2:   83:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   84:                }
        -:   85:                else{ 
    #####:   86:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   87:                }
        2:   88:                if(p==0){
        1:   89:                printf("----Now Testing 5 Treasured Card, Mixed Coins: %d gold, 1 silver and %d copper\n", v, w);
        1:   90:                bonus = rand()% maxBonus;
        1:   91:                memset(&test, 23, sizeof(struct gameState));   
        1:   92:                initializeGame(numPlayer, k, seed, &test);
        1:   93:                memcpy(test.hand[p], golds, sizeof(int) * v);
        1:   94:                memcpy(test.hand[p] + v, silvers, sizeof(int) * 1);
        1:   95:                memcpy(test.hand[p] + v + 1, coppers, sizeof(int) * w);
        -:   96:
        1:   97:                updateCoins(p, &test, bonus);
        -:   98:
        1:   99:                printf("All Coins = %d, expected = %d\n", test.coins, (v*3)+2+(w*1)+bonus);
        -:  100:
        1:  101:                 if(test.coins == (v*3)+2+(w*1)+bonus){
        1:  102:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:  103:                }
        -:  104:                else{ 
    #####:  105:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:  106:                }
        -:  107:
        -:  108:            }
        -:  109:             
        -:  110:            }
        -:  111:      
        -:  112:
        1:  113:    return 0;
        -:  114:}File 'unittest3.c'
Lines executed:86.96% of 46
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int reset;
        -:   21:  
        1:   22:    int seed = 1000;
        1:   23:    int totalPlayers = 2;
        -:   24:   
        -:   25:
        -:   26:    int result;
        -:   27:
        -:   28:   
        1:   29:    printf("\n--------Testing #1 for isGameOver function for no state change----------");
        -:   30:
        1:   31:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   34:
        1:   35:    result = isGameOver(&test);
        -:   36:
        1:   37:    if(result == 0){
        1:   38:    	printf("\n>>>>>>SUCCESS: No change in game state: game continues");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for isGameOver function for province = 0----------");
        -:   45:
        1:   46:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   49:    test.supplyCount[province] = 0;
        1:   50:    result = isGameOver(&test);
        -:   51:
        1:   52:    if(result == 1){
        1:   53:    	printf("\n>>>>>>SUCCESS: Province is out of supply: game ends");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:   57:    }
        1:   58:    printf("\n--------Testing #3 for isGameOver function for province = 1----------");
        -:   59:
        1:   60:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   61:
        1:   62:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   63:    test.supplyCount[province] = 1;
        -:   64:
        1:   65:    result = isGameOver(&test);
        -:   66:
        1:   67:    if(result == 0){
        1:   68:    	printf("\n>>>>>>SUCCESS: Province has only 1 card left: game continues");
        -:   69:    }
        -:   70:    else{
    #####:   71:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   72:    }
        -:   73:
        1:   74:    printf("\n--------Testing #4 for isGameOver function for province = 1, one supply count is 0----------");
        1:   75:    test.supplyCount[adventurer] = 0;
        1:   76:    result = isGameOver(&test);
        -:   77:
        1:   78:    if(result == 0){
        1:   79:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   80:    }
        -:   81:    else{
    #####:   82:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   83:    }
        1:   84:    printf("\n--------Testing #5 for isGameOver function for province = 1, two supply count is 0----------");
        1:   85:    test.supplyCount[smithy] = 0;
        1:   86:    result = isGameOver(&test);
        -:   87:
        1:   88:    if(result == 0){
        1:   89:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   90:    }
        -:   91:    else{
    #####:   92:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   93:    }
        1:   94:    printf("\n--------Testing #6 for isGameOver function for province = 1, three supply count is 0----------");
        1:   95:    test.supplyCount[feast] = 0;
        1:   96:    result = isGameOver(&test);
        -:   97:
        1:   98:    if(result == 1){
        1:   99:    	printf("\n>>>>>>SUCCESS: Game must end!!!");
        -:  100:    }
        -:  101:    else{
    #####:  102:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:  103:    }
        -:  104:
        -:  105:
        1:  106:	return 0;
        -:  107:    
        -:  108:    
        -:  109:}File 'unittest4.c'
Lines executed:90.00% of 10
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for getCost()
        -:    3: *
        -:    4: * unittest4: unittest4.c dominion.o rngs.o
        -:    5: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:
        -:   16:
        1:   17:int main(){
        -:   18:	
        -:   19:	int i; 
        -:   20:	int value;
        1:   21:	int cardAmount = 27;
        -:   22:	char *availableCards[27]= {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", 
        -:   23:			"feast", "gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward",
        1:   24:			"tribute", "ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   25:
        1:   26:	int cardValue[27] = {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   27:
       28:   28:	for (i = 0; i < cardAmount; i++){
       27:   29:		value = getCost(i);
       27:   30:		if(value == cardValue[i]){
       27:   31:			printf(">>>>>Success:%s is the correct amount of %d\n", availableCards[i], cardValue[i]);
        -:   32:		}
        -:   33:			
        -:   34:		else
    #####:   35:			printf(">>>>>ERROR: %s is the incorrect amount.\n", availableCards[i]);
        -:   36:	}
        -:   37:
        1:   38:	return (0);
        -:   39:	
        -:   40:}File 'cardtest1.c'
Lines executed:85.42% of 48
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for smithy()
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "smithy"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        1:   22:    int xtraCoins = 0;
        1:   23:    int shuffledCards = 0;
        -:   24:
        -:   25:    
        1:   26:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   27:   
        1:   28:    int seed = 1000;
        1:   29:    int numPlayers = 2;
        1:   30:    int player1 = 0;
        1:   31:    int player2 = 1;
        -:   32:	struct gameState G, testG;
        -:   33:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   34:			sea_hag, tribute, smithy, council_room};
        -:   35:
        -:   36:	
        1:   37:	initializeGame(numPlayers, k, seed, &G);
        -:   38:
        1:   39:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   40:
        -:   41:	
        1:   42:	printf("TEST 1: choice1 = 0 = +3 cards\n");
        -:   43:
        -:   44:	// copy the game state to a test case
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:	
        1:   47:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   48:	newCards = 3;
        1:   49:	xtraCoins = 0;
        1:   50:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   51:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards + shuffledCards);
        1:   52:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   53:	printf("Player 1 coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   54:	//for player 2
        1:   55:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   56:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        1:   57:	printf("Player 2 discard count = %d, expected = %d\n", testG.discardCount[player2], G.discardCount[player2]);
        1:   58:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   59:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   60:	}
        -:   61:	else{
    #####:   62:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   63:	}
        1:   64:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   65:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   69:	}
        1:   70:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards + shuffledCards){
        1:   71:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
    #####:   74:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   75:	}
        1:   76:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   77:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   78:	}
        -:   79:	else{
    #####:   80:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   81:	}
        1:   82:	if(testG.discardCount[player1] == G.discardCount[player1] + 1){
    #####:   83:		printf("\n >>>>>> Success: Discard count of player1 is correct!!!");
        -:   84:	}
        -:   85:	else{
        1:   86:		printf("\n >>>>>> Fail: discardCount of player1 is incorrect!!!");
        -:   87:	}
        1:   88:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:   89:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:   90:	}
        -:   91:	else{
    #####:   92:		printf("\n >>>>>> Fail: discardCount of player2 is incorrect!!!");
        -:   93:	}
        1:   94:	if(testG.coins == G.coins + xtraCoins){
        1:   95:		printf("\n >>>>>> Success: Coin count of current player is correct!!!");
        -:   96:	}
        -:   97:	else{
    #####:   98:		printf("\n >>>>>> Fail: Coin count of current player is incorrect!!!");
        -:   99:	}
        -:  100:
        1:  101:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  102:
        -:  103:
        1:  104:	return 0;
        -:  105:}
File 'cardtest2.c'
Lines executed:84.62% of 52
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for adventurer()
        -:    3: *
        -:    4: * cardtest2: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest2 -g cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "adventurer"
        -:   18:
        1:   19:int main() {
        -:   20:   
        -:   21:    int i;
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        1:   25:    int player1 = 0;
        1:   26:    int player2 = 1;
        -:   27:	struct gameState G, testG;
        -:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   29:			sea_hag, tribute, smithy, council_room};
        -:   30:
        -:   31:	
        1:   32:	initializeGame(numPlayers, k, seed, &G);
        -:   33:
        1:   34:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   35:
        -:   36:	
        1:   37:	printf("TEST 1: choice1 = 0 = Reveal 2 treasure cards\n");
        -:   38:
        -:   39:	// copy the game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:	
        1:   42:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   43:
        -:   44:
        1:   45:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + 2 - 1);
        -:   46:
        -:   47:
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - (testG.discardCount[player1] + 2));
        -:   49:	
        1:   50:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   51:	int coinCardsTest = 0;
     8001:   52:	for(i=0; i < sizeof(testG.hand); i++){
     8000:   53:		if(testG.hand[player1][i] == gold || testG.hand[player1][i] == silver || testG.hand[player1][i] == copper){
       38:   54:			coinCardsTest++;
        -:   55:		}
        -:   56:	}
        1:   57:	int coinCardsG = 0;
     8001:   58:	for(i=0; i < sizeof(G.hand); i++){
     8000:   59:		if(G.hand[player1][i] == gold || G.hand[player1][i] == silver || G.hand[player1][i] == copper){
       36:   60:			coinCardsG++;
        -:   61:		}
        -:   62:	}
        -:   63:
        1:   64:	printf("Player 1 hand Treasure count = %d, expected = %d\n", coinCardsTest, coinCardsG + 2);
        -:   65:
        -:   66:
        -:   67:	//for player 2
        1:   68:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   69:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   70:	
        -:   71:
        -:   72:	//HandCount
        1:   73:	if(testG.handCount[player1] == G.handCount[player1] + 2 - 1){
    #####:   74:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   75:	}
        -:   76:	else{
        1:   77:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   78:	}
        -:   79:	//Deck Count, might be plus 2
        1:   80:	if(testG.deckCount[player1] == G.deckCount[player1] - (testG.discardCount[player1] + 1)){
    #####:   81:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   82:	}
        -:   83:	else{
        1:   84:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   85:	}
        -:   86:
        -:   87:	//Discard count
        1:   88:	if(testG.discardCount[player1] >= G.discardCount[player1] + 1){
    #####:   89:		printf("\n >>>>>> Success: Discard count of current player is correct!!!");
        -:   90:	}
        -:   91:	else{
        1:   92:		printf("\n >>>>>> Fail: Discard count of current player is incorrect!!!");
        -:   93:	}
        -:   94:	//Coin Count
        1:   95:	if(testG.coins > G.coins){
    #####:   96:		printf("\n >>>>>> Success: Coin count of player1 is correct!!!");
        -:   97:	}
        -:   98:	else{
        1:   99:		printf("\n >>>>>> Fail: Coin count of player1 is incorrect!!!");
        -:  100:	}
        -:  101:	
        1:  102:	if(coinCardsTest == coinCardsG + 2){
        1:  103:		printf("\n >>>>>> Success: Treasure Handcount of player1 is correct!!!");
        -:  104:	}
        -:  105:	else{
    #####:  106:		printf("\n >>>>>> Fail: Treasure Handcount of player1 is incorrect!!!");
        -:  107:	}
        -:  108:	//Player 2 Hand Count
        1:  109:	if(testG.handCount[player2] == G.handCount[player2]){
        1:  110:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:  111:	}
        -:  112:	else{
    #####:  113:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:  114:	}
        -:  115:	//Player 2 Deck Count
        1:  116:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:  117:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:  118:	}
        -:  119:	else{
    #####:  120:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:  121:	}
        -:  122:	//Discard Count
        1:  123:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:  124:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:  125:	}
        -:  126:	else{
    #####:  127:		printf("\n >>>>>> Fail: Discard count of player2 is incorrect!!!");
        -:  128:	}
        -:  129:	
        -:  130:
        1:  131:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  132:
        -:  133:
        1:  134:	return 0;
        -:  135:}
File 'cardtest3.c'
Lines executed:86.49% of 37
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for village()
        -:    3: *
        -:    4: * cardtest3: cardtest3.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "village"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        -:   22:   
        1:   23:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:  
        1:   25:    int seed = 1000;
        1:   26:    int numPlayers = 2;
        1:   27:    int player1 = 0;
        1:   28:    int player2 = 1;
        -:   29:	struct gameState G, testG;
        -:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   31:			sea_hag, tribute, smithy, council_room};
        -:   32:
        -:   33:	// initialize a game state and player cards
        1:   34:	initializeGame(numPlayers, k, seed, &G);
        -:   35:
        1:   36:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   37:
        -:   38:	
        1:   39:	printf("TEST 1: choice1 = 0 = +1 card & +2 actions.\n");
        -:   40:
        -:   41:	// copy the game state
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:	
        1:   44:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   45:	newCards = 1;
        -:   46:	
        -:   47:
        1:   48:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   49:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   50:	printf("Player 1 actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
        -:   51:	//for player 2
        1:   52:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   53:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   54:
        -:   55:	//Player 1 hand count
        1:   56:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   57:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   58:	}
        -:   59:	else{
    #####:   60:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   61:	}
        -:   62:	//Player 1 deck count
        1:   63:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   64:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   65:	}
        -:   66:	else{
    #####:   67:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   68:	}
        -:   69:	//Player 1 Number of actions
        1:   70:	if(testG.numActions== G.numActions + 1){
    #####:   71:		printf("\n >>>>>> Success: Number of Actions of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
        1:   74:		printf("\n >>>>>> Fail: Number of Actions of current player is incorrect!!!");
        -:   75:	}
        -:   76:
        -:   77:	//Player 2 handcount
        1:   78:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   79:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   80:	}
        -:   81:	else{
    #####:   82:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   83:	}
        -:   84:	//Player 2 deck Count
        1:   85:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   86:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   87:	}
        -:   88:	else{
    #####:   89:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   90:	}
        -:   91:	
        -:   92:
        1:   93:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   94:
        -:   95:
        1:   96:	return 0;
        -:   97:}
File 'cardtest4.c'
Lines executed:86.84% of 38
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for council_room()
        -:    3: *
        -:    4: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "council_room"
        -:   17:
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        -:   21: 
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player1 = 0;
        1:   27:    int player2 = 1;
        -:   28:	struct gameState G, testG;
        -:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state
        1:   33:	initializeGame(numPlayers, k, seed, &G);
        -:   34:
        1:   35:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   36:
        -:   37:
        1:   38:	printf("TEST 1: choice1 = 0 = +4 cards, +1 buys, 1 additional card for every other player.\n");
        -:   39:
        -:   40:	// copy the game state to a test case
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:	
        1:   43:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   44:	newCards = 4;
        1:   45:	int newBuy = 1;
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   49:	printf("Player 1 buys = %d, expected = %d\n", testG.numBuys, G.numBuys + newBuy);
        -:   50:	//for player 2
        1:   51:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2] + 1);
        1:   52:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2] - 1);
        -:   53:
        -:   54:	//Player 1 hand count
        1:   55:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   56:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   57:	}
        -:   58:	else{
    #####:   59:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   60:	}
        -:   61:	//Player 1 deck count
        1:   62:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   63:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   64:	}
        -:   65:	else{
    #####:   66:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   67:	}
        -:   68:	//Player 1 Number of actions
        1:   69:	if(testG.numBuys== G.numBuys + 1){
        1:   70:		printf("\n >>>>>> Success: Number of Buys of current player is correct!!!");
        -:   71:	}
        -:   72:	else{
    #####:   73:		printf("\n >>>>>> Fail: Number of Buys of current player is incorrect!!!");
        -:   74:	}
        -:   75:
        -:   76:	//Player 2 handcount
        1:   77:	if(testG.handCount[player2] == G.handCount[player2] + 1){
        1:   78:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   79:	}
        -:   80:	else{
    #####:   81:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   82:	}
        -:   83:	//Player 2 deck Count
        1:   84:	if(testG.deckCount[player2] == G.deckCount[player2] - 1){
        1:   85:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   89:	}
        -:   90:	
        -:   91:
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
File 'dominion.c'
Lines executed:17.35% of 565
dominion.c:creating 'dominion.c.gcov'

File 'unittest1.c'
Lines executed:74.38% of 121
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for initializeGame()
        -:    3: *
        -:    4: * unittest1: unittest1.c dominion.o rngs.o
        -:    5: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int i;
        -:   21:  
        1:   22:    int seed = 1000;
        -:   23:    int totalPlayers;
        -:   24:    int result;
        1:   25:    int testNum = 3;
        -:   26:
        1:   27:    printf("\n--------Testing for game initilization function----------");
        -:   28:
        1:   29:   	printf("\n--------Testing #1 for only one player----------");
        -:   30:
        1:   31:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:   	totalPlayers = 1;
        -:   34:
        1:   35:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   36:
        1:   37:    if(result == -1){
        1:   38:    	printf("\n>>>>Success: one player is not enough to play the game!!!");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>Fail: one player alone cant play the game!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for only five players----------");
        -:   45:
        1:   46:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:   	totalPlayers = 5;
        -:   49:
        1:   50:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   51:
        1:   52:    if(result == -1){
        1:   53:    	printf("\n>>>>Success: five players is too much for the game!!!");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>Fail: five players cant play the game!!!");
        -:   57:    }
        -:   58:
        4:   59:    for(totalPlayers = 2; totalPlayers <=4; totalPlayers++){
        3:   60:    	printf("\n--------Testing #%d for only five players----------", testNum);
        -:   61:
        3:   62:    	testNum++;
        -:   63:
        3:   64:	   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   65:
        3:   66:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   67:
        3:   68:	    if(result == 0){
        3:   69:    	printf("\n>>>>Success: %d players is enough for the game!!!", totalPlayers);
        -:   70:	    }
        -:   71:	    else{
    #####:   72:	    	printf("\n>>>>Fail: %d players are suppose to be able to play the game!!!", totalPlayers);
        -:   73:	    }
        3:   74:	    if(totalPlayers == 2){
        1:   75:	    	if(test.supplyCount[curse] == 10){
        1:   76:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:   77:	    	}
        -:   78:	    	else{
    #####:   79:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:   80:	    	}
        1:   81:	    	if(test.supplyCount[estate] == 8){
        1:   82:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:   83:	    	}
        -:   84:	    	else{
    #####:   85:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:   86:	    	}
        1:   87:	    	if(test.supplyCount[duchy] == 8){
        1:   88:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:   89:	    	}
        -:   90:	    	else{
    #####:   91:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:   92:	    	}
        1:   93:	    	if(test.supplyCount[province] == 8){
        1:   94:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:   95:	    	}
        -:   96:	    	else{
    #####:   97:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:   98:	    	}
        1:   99:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  100:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  101:	    	}
        -:  102:	    	else{
    #####:  103:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  104:	    	}
        1:  105:	    	if(test.supplyCount[silver] == 40){
        1:  106:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  107:	    	}
        -:  108:	    	else{
    #####:  109:	    		printf("\n>>>Fail: supply count for silver is incorrect!!!");
        -:  110:	    	}
        1:  111:	    	if(test.supplyCount[gold] == 30){
        1:  112:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  113:	    	}
        -:  114:	    	else{
    #####:  115:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  116:	    	}
        -:  117:	    }
        3:  118:	    if(totalPlayers == 3){
        1:  119:	    	if(test.supplyCount[curse] == 20){
        1:  120:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  121:	    	}
        -:  122:	    	else{
    #####:  123:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  124:	    	}
        1:  125:	    	if(test.supplyCount[estate] == 12){
        1:  126:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  127:	    	}
        -:  128:	    	else{
    #####:  129:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  130:	    	}
        1:  131:	    	if(test.supplyCount[duchy] == 12){
        1:  132:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  133:	    	}
        -:  134:	    	else{
    #####:  135:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  136:	    	}
        1:  137:	    	if(test.supplyCount[province] == 12){
        1:  138:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  139:	    	}
        -:  140:	    	else{
    #####:  141:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  142:	    	}
        1:  143:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  144:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  145:	    	}
        -:  146:	    	else{
    #####:  147:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  148:	    	}
        1:  149:	    	if(test.supplyCount[silver] == 40){
        1:  150:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  151:	    	}
        -:  152:	    	else{
    #####:  153:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  154:	    	}
        1:  155:	    	if(test.supplyCount[gold] == 30){
        1:  156:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  157:	    	}
        -:  158:	    	else{
    #####:  159:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  160:	    	}
        -:  161:	    }
        3:  162:	    if(totalPlayers == 4){
        1:  163:	    	if(test.supplyCount[curse] == 30){
        1:  164:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  165:	    	}
        -:  166:	    	else{
    #####:  167:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  168:	    	}
        1:  169:	    	if(test.supplyCount[estate] == 12){
        1:  170:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  171:	    	}
        -:  172:	    	else{
    #####:  173:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  174:	    	}
        1:  175:	    	if(test.supplyCount[duchy] == 12){
        1:  176:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  177:	    	}
        -:  178:	    	else{
    #####:  179:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  180:	    	}
        1:  181:	    	if(test.supplyCount[province] == 12){
        1:  182:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  183:	    	}
        -:  184:	    	else{
    #####:  185:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  186:	    	}
        1:  187:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  188:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  189:	    	}
        -:  190:	    	else{
    #####:  191:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  192:	    	}
        1:  193:	    	if(test.supplyCount[silver] == 40){
        1:  194:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  195:	    	}
        -:  196:	    	else{
    #####:  197:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  198:	    	}
        1:  199:	    	if(test.supplyCount[gold] == 30){
        1:  200:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  201:	    	}
        -:  202:	    	else{
    #####:  203:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  204:	    	}
        -:  205:	    }
        -:  206:
        -:  207:    }
        1:  208:    	totalPlayers = 2;
        1:  209:    	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:  210:
        1:  211:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:  212:
        1:  213:	   	printf("\n-------Test if kingdom cards are correct amount-----");
        -:  214:
        1:  215:	   	if(test.supplyCount[adventurer] == 10){
        1:  216:	   		printf("\n>>>>SUCCESS: supply count for adventurer is correct!!!");
        -:  217:	   	}
        -:  218:	   	else{
    #####:  219:	    	printf("\n>>>>Fail: supply count for adventurer is incorrect!!!");
        -:  220:	    	}
        1:  221:	    if(test.supplyCount[gardens] == 8){
        1:  222:	   		printf("\n>>>>SUCCESS: supply count for gardens is correct!!!");
        -:  223:	   	}
        -:  224:	   	else{
    #####:  225:	    	printf("\n>>>>Fail: supply count for gardens is incorrect!!!");
        -:  226:	    	}
        -:  227:
        3:  228:	    for(i =0; i < totalPlayers; i++){
        -:  229:			
        2:  230:			if(i==0){
        1:  231:				if(test.handCount[i] == 5){
        1:  232:					printf("\n>>>>SUCCESS: Player #%d hand count is 5!!!", i+1);
        -:  233:				}
        -:  234:				else{
    #####:  235:					printf("\n>>>>Fail: Player #%d hand count is not 5!!!", i+1);
        -:  236:					}
        -:  237:			}
        -:  238:			else{
        1:  239:				if(test.handCount[i] == 0){
        1:  240:					printf("\n>>>>SUCCESS: Player #%d hand count is empty!!!", i+1);
        -:  241:				}
        -:  242:				else{
    #####:  243:					printf("\n>>>>Fail: Player #%d hand count is not empty!!!", i+1);
        -:  244:					}
        -:  245:			}
        2:  246:		    if(test.discardCount[i] == 0){
        2:  247:		    	printf("\n>>>>SUCCESS: Player #%d discardCount is empty!!!", i+1);
        -:  248:		    }
        -:  249:		    else{
    #####:  250:		    	printf("\n>>>>Fail: Player #%d discardCount is not empty!!!", i+1);
        -:  251:		    	}
        -:  252:
        -:  253:	    }
        -:  254:
        1:  255:	    if(test.numActions == 1){
        1:  256:	   		printf("\n>>>>SUCCESS: Number of actions is correct!!!");
        -:  257:	   	}
        -:  258:	   	else{
    #####:  259:	    	printf("\n>>>>Fail: Number of actions is inrrect!!!");
        -:  260:	    	}
        -:  261:
        1:  262:	    if(test.numBuys == 1){
        1:  263:	   		printf("\n>>>>SUCCESS: Number of buys is correct!!!\n\n");
        -:  264:	   	}
        -:  265:	   	else{
    #####:  266:	    	printf("\n>>>>Fail: Number of buys is inrrect!!!");
        -:  267:	    	}
        -:  268:		/*
        -:  269:		if(test.handCount[0] == 5){
        -:  270:		    	printf("\n>>>>SUCCESS: Player #1 hand count contains 5 cards!!!");
        -:  271:		    }
        -:  272:		else{
        -:  273:		    printf("\n>>>>Fail: Player #1 hand count does contains 5 cards!!!");
        -:  274:		    	}
        -:  275:				
        -:  276:		if(test.handCount[1] == 0){
        -:  277:		    	printf("\n>>>>SUCCESS: Player #2 hand count is empty!!!");
        -:  278:		    }
        -:  279:		else{
        -:  280:		    printf("\n>>>>Fail: Player #2 hand count is not empty to start!!!");
        -:  281:		    	}
        -:  282:		*/
        -:  283:
        -:  284:
        -:  285:
        -:  286:
        1:  287:    return 0;
        -:  288:}File 'unittest2.c'
Lines executed:92.31% of 52
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:
        1:   18:int main() {
        -:   19:    int i;
        1:   20:    int seed = 1000;
        1:   21:    int numPlayer = 2;
        1:   22:    int maxBonus = 10;
        -:   23:    int p, r, handCount;
        -:   24:    int bonus;
        -:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState test;
        1:   28:    int maxHandCount = 5;
        -:   29:    
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
      501:   33:    for (i = 0; i < MAX_HAND; i++)
        -:   34:    {
      500:   35:        coppers[i] = copper;
      500:   36:        silvers[i] = silver;
      500:   37:        golds[i] = gold;
        -:   38:    }
        1:   39:    int v =2;
        1:   40:    int w = 2;
        1:   41:    printf ("-------TESTING updateCoins()--------\n");
        3:   42:    for (p = 0; p < numPlayer; p++)
        -:   43:    {
        -:   44:                
        2:   45:                bonus = rand()% maxBonus;
        2:   46:                handCount = 5;
        2:   47:                printf("Player #%d with %d treasure cards and %d bonus.\n", p, handCount, bonus);
        -:   48:
        2:   49:                memset(&test, 23, sizeof(struct gameState));   
        2:   50:                initializeGame(numPlayer, k, seed, &test); 
        2:   51:                test.handCount[p] = handCount;                 
        2:   52:                memcpy(test.hand[p], coppers, sizeof(int) * handCount); 
        2:   53:                updateCoins(p, &test, bonus);
        -:   54:
        2:   55:                printf("All Copper Coins = %d, expected = %d\n", test.coins, handCount * 1 + bonus);
        -:   56:
        2:   57:                if(test.coins == handCount * 1 + bonus){
        2:   58:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   59:                }
        -:   60:                else{
    #####:   61:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   62:                }
        -:   63:
        2:   64:                memcpy(test.hand[p], silvers, sizeof(int) * handCount); 
        2:   65:                updateCoins(p, &test, bonus);
        -:   66:
        2:   67:                printf("All Silver Coins = %d, expected = %d\n", test.coins, handCount * 2 + bonus);
        -:   68:
        2:   69:                 if(test.coins == handCount * 2 + bonus){
        2:   70:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   71:                }
        -:   72:                else{
    #####:   73:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   74:                }
        -:   75:                
        -:   76:
        2:   77:                memcpy(test.hand[p], golds, sizeof(int) * handCount); 
        2:   78:                updateCoins(p, &test, bonus);
        -:   79:
        2:   80:                printf("All Gold Coins = %d, expected = %d\n", test.coins, handCount * 3 + bonus);
        -:   81:
        2:   82:                 if(test.coins == handCount * 3 + bonus){
        2:   83:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   84:                }
        -:   85:                else{ 
    #####:   86:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   87:                }
        2:   88:                if(p==0){
        1:   89:                printf("----Now Testing 5 Treasured Card, Mixed Coins: %d gold, 1 silver and %d copper\n", v, w);
        1:   90:                bonus = rand()% maxBonus;
        1:   91:                memset(&test, 23, sizeof(struct gameState));   
        1:   92:                initializeGame(numPlayer, k, seed, &test);
        1:   93:                memcpy(test.hand[p], golds, sizeof(int) * v);
        1:   94:                memcpy(test.hand[p] + v, silvers, sizeof(int) * 1);
        1:   95:                memcpy(test.hand[p] + v + 1, coppers, sizeof(int) * w);
        -:   96:
        1:   97:                updateCoins(p, &test, bonus);
        -:   98:
        1:   99:                printf("All Coins = %d, expected = %d\n", test.coins, (v*3)+2+(w*1)+bonus);
        -:  100:
        1:  101:                 if(test.coins == (v*3)+2+(w*1)+bonus){
        1:  102:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:  103:                }
        -:  104:                else{ 
    #####:  105:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:  106:                }
        -:  107:
        -:  108:            }
        -:  109:             
        -:  110:            }
        -:  111:      
        -:  112:
        1:  113:    return 0;
        -:  114:}File 'unittest3.c'
Lines executed:86.96% of 46
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int reset;
        -:   21:  
        1:   22:    int seed = 1000;
        1:   23:    int totalPlayers = 2;
        -:   24:   
        -:   25:
        -:   26:    int result;
        -:   27:
        -:   28:   
        1:   29:    printf("\n--------Testing #1 for isGameOver function for no state change----------");
        -:   30:
        1:   31:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   34:
        1:   35:    result = isGameOver(&test);
        -:   36:
        1:   37:    if(result == 0){
        1:   38:    	printf("\n>>>>>>SUCCESS: No change in game state: game continues");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for isGameOver function for province = 0----------");
        -:   45:
        1:   46:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   49:    test.supplyCount[province] = 0;
        1:   50:    result = isGameOver(&test);
        -:   51:
        1:   52:    if(result == 1){
        1:   53:    	printf("\n>>>>>>SUCCESS: Province is out of supply: game ends");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:   57:    }
        1:   58:    printf("\n--------Testing #3 for isGameOver function for province = 1----------");
        -:   59:
        1:   60:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   61:
        1:   62:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   63:    test.supplyCount[province] = 1;
        -:   64:
        1:   65:    result = isGameOver(&test);
        -:   66:
        1:   67:    if(result == 0){
        1:   68:    	printf("\n>>>>>>SUCCESS: Province has only 1 card left: game continues");
        -:   69:    }
        -:   70:    else{
    #####:   71:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   72:    }
        -:   73:
        1:   74:    printf("\n--------Testing #4 for isGameOver function for province = 1, one supply count is 0----------");
        1:   75:    test.supplyCount[adventurer] = 0;
        1:   76:    result = isGameOver(&test);
        -:   77:
        1:   78:    if(result == 0){
        1:   79:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   80:    }
        -:   81:    else{
    #####:   82:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   83:    }
        1:   84:    printf("\n--------Testing #5 for isGameOver function for province = 1, two supply count is 0----------");
        1:   85:    test.supplyCount[smithy] = 0;
        1:   86:    result = isGameOver(&test);
        -:   87:
        1:   88:    if(result == 0){
        1:   89:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   90:    }
        -:   91:    else{
    #####:   92:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   93:    }
        1:   94:    printf("\n--------Testing #6 for isGameOver function for province = 1, three supply count is 0----------");
        1:   95:    test.supplyCount[feast] = 0;
        1:   96:    result = isGameOver(&test);
        -:   97:
        1:   98:    if(result == 1){
        1:   99:    	printf("\n>>>>>>SUCCESS: Game must end!!!");
        -:  100:    }
        -:  101:    else{
    #####:  102:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:  103:    }
        -:  104:
        -:  105:
        1:  106:	return 0;
        -:  107:    
        -:  108:    
        -:  109:}File 'unittest4.c'
Lines executed:90.00% of 10
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for getCost()
        -:    3: *
        -:    4: * unittest4: unittest4.c dominion.o rngs.o
        -:    5: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:
        -:   16:
        1:   17:int main(){
        -:   18:	
        -:   19:	int i; 
        -:   20:	int value;
        1:   21:	int cardAmount = 27;
        -:   22:	char *availableCards[27]= {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", 
        -:   23:			"feast", "gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward",
        1:   24:			"tribute", "ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   25:
        1:   26:	int cardValue[27] = {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   27:
       28:   28:	for (i = 0; i < cardAmount; i++){
       27:   29:		value = getCost(i);
       27:   30:		if(value == cardValue[i]){
       27:   31:			printf(">>>>>Success:%s is the correct amount of %d\n", availableCards[i], cardValue[i]);
        -:   32:		}
        -:   33:			
        -:   34:		else
    #####:   35:			printf(">>>>>ERROR: %s is the incorrect amount.\n", availableCards[i]);
        -:   36:	}
        -:   37:
        1:   38:	return (0);
        -:   39:	
        -:   40:}File 'cardtest1.c'
Lines executed:85.42% of 48
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for smithy()
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "smithy"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        1:   22:    int xtraCoins = 0;
        1:   23:    int shuffledCards = 0;
        -:   24:
        -:   25:    
        1:   26:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   27:   
        1:   28:    int seed = 1000;
        1:   29:    int numPlayers = 2;
        1:   30:    int player1 = 0;
        1:   31:    int player2 = 1;
        -:   32:	struct gameState G, testG;
        -:   33:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   34:			sea_hag, tribute, smithy, council_room};
        -:   35:
        -:   36:	
        1:   37:	initializeGame(numPlayers, k, seed, &G);
        -:   38:
        1:   39:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   40:
        -:   41:	
        1:   42:	printf("TEST 1: choice1 = 0 = +3 cards\n");
        -:   43:
        -:   44:	// copy the game state to a test case
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:	
        1:   47:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   48:	newCards = 3;
        1:   49:	xtraCoins = 0;
        1:   50:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   51:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards + shuffledCards);
        1:   52:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   53:	printf("Player 1 coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   54:	//for player 2
        1:   55:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   56:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        1:   57:	printf("Player 2 discard count = %d, expected = %d\n", testG.discardCount[player2], G.discardCount[player2]);
        1:   58:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   59:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   60:	}
        -:   61:	else{
    #####:   62:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   63:	}
        1:   64:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   65:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   69:	}
        1:   70:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards + shuffledCards){
        1:   71:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
    #####:   74:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   75:	}
        1:   76:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   77:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   78:	}
        -:   79:	else{
    #####:   80:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   81:	}
        1:   82:	if(testG.discardCount[player1] == G.discardCount[player1] + 1){
    #####:   83:		printf("\n >>>>>> Success: Discard count of player1 is correct!!!");
        -:   84:	}
        -:   85:	else{
        1:   86:		printf("\n >>>>>> Fail: discardCount of player1 is incorrect!!!");
        -:   87:	}
        1:   88:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:   89:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:   90:	}
        -:   91:	else{
    #####:   92:		printf("\n >>>>>> Fail: discardCount of player2 is incorrect!!!");
        -:   93:	}
        1:   94:	if(testG.coins == G.coins + xtraCoins){
        1:   95:		printf("\n >>>>>> Success: Coin count of current player is correct!!!");
        -:   96:	}
        -:   97:	else{
    #####:   98:		printf("\n >>>>>> Fail: Coin count of current player is incorrect!!!");
        -:   99:	}
        -:  100:
        1:  101:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  102:
        -:  103:
        1:  104:	return 0;
        -:  105:}
File 'cardtest2.c'
Lines executed:84.62% of 52
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for adventurer()
        -:    3: *
        -:    4: * cardtest2: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest2 -g cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "adventurer"
        -:   18:
        1:   19:int main() {
        -:   20:   
        -:   21:    int i;
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        1:   25:    int player1 = 0;
        1:   26:    int player2 = 1;
        -:   27:	struct gameState G, testG;
        -:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   29:			sea_hag, tribute, smithy, council_room};
        -:   30:
        -:   31:	
        1:   32:	initializeGame(numPlayers, k, seed, &G);
        -:   33:
        1:   34:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   35:
        -:   36:	
        1:   37:	printf("TEST 1: choice1 = 0 = Reveal 2 treasure cards\n");
        -:   38:
        -:   39:	// copy the game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:	
        1:   42:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   43:
        -:   44:
        1:   45:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + 2 - 1);
        -:   46:
        -:   47:
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - (testG.discardCount[player1] + 2));
        -:   49:	
        1:   50:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   51:	int coinCardsTest = 0;
     8001:   52:	for(i=0; i < sizeof(testG.hand); i++){
     8000:   53:		if(testG.hand[player1][i] == gold || testG.hand[player1][i] == silver || testG.hand[player1][i] == copper){
       38:   54:			coinCardsTest++;
        -:   55:		}
        -:   56:	}
        1:   57:	int coinCardsG = 0;
     8001:   58:	for(i=0; i < sizeof(G.hand); i++){
     8000:   59:		if(G.hand[player1][i] == gold || G.hand[player1][i] == silver || G.hand[player1][i] == copper){
       36:   60:			coinCardsG++;
        -:   61:		}
        -:   62:	}
        -:   63:
        1:   64:	printf("Player 1 hand Treasure count = %d, expected = %d\n", coinCardsTest, coinCardsG + 2);
        -:   65:
        -:   66:
        -:   67:	//for player 2
        1:   68:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   69:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   70:	
        -:   71:
        -:   72:	//HandCount
        1:   73:	if(testG.handCount[player1] == G.handCount[player1] + 2 - 1){
    #####:   74:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   75:	}
        -:   76:	else{
        1:   77:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   78:	}
        -:   79:	//Deck Count, might be plus 2
        1:   80:	if(testG.deckCount[player1] == G.deckCount[player1] - (testG.discardCount[player1] + 1)){
    #####:   81:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   82:	}
        -:   83:	else{
        1:   84:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   85:	}
        -:   86:
        -:   87:	//Discard count
        1:   88:	if(testG.discardCount[player1] >= G.discardCount[player1] + 1){
    #####:   89:		printf("\n >>>>>> Success: Discard count of current player is correct!!!");
        -:   90:	}
        -:   91:	else{
        1:   92:		printf("\n >>>>>> Fail: Discard count of current player is incorrect!!!");
        -:   93:	}
        -:   94:	//Coin Count
        1:   95:	if(testG.coins > G.coins){
    #####:   96:		printf("\n >>>>>> Success: Coin count of player1 is correct!!!");
        -:   97:	}
        -:   98:	else{
        1:   99:		printf("\n >>>>>> Fail: Coin count of player1 is incorrect!!!");
        -:  100:	}
        -:  101:	
        1:  102:	if(coinCardsTest == coinCardsG + 2){
        1:  103:		printf("\n >>>>>> Success: Treasure Handcount of player1 is correct!!!");
        -:  104:	}
        -:  105:	else{
    #####:  106:		printf("\n >>>>>> Fail: Treasure Handcount of player1 is incorrect!!!");
        -:  107:	}
        -:  108:	//Player 2 Hand Count
        1:  109:	if(testG.handCount[player2] == G.handCount[player2]){
        1:  110:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:  111:	}
        -:  112:	else{
    #####:  113:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:  114:	}
        -:  115:	//Player 2 Deck Count
        1:  116:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:  117:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:  118:	}
        -:  119:	else{
    #####:  120:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:  121:	}
        -:  122:	//Discard Count
        1:  123:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:  124:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:  125:	}
        -:  126:	else{
    #####:  127:		printf("\n >>>>>> Fail: Discard count of player2 is incorrect!!!");
        -:  128:	}
        -:  129:	
        -:  130:
        1:  131:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  132:
        -:  133:
        1:  134:	return 0;
        -:  135:}
File 'cardtest3.c'
Lines executed:86.49% of 37
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for village()
        -:    3: *
        -:    4: * cardtest3: cardtest3.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "village"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        -:   22:   
        1:   23:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:  
        1:   25:    int seed = 1000;
        1:   26:    int numPlayers = 2;
        1:   27:    int player1 = 0;
        1:   28:    int player2 = 1;
        -:   29:	struct gameState G, testG;
        -:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   31:			sea_hag, tribute, smithy, council_room};
        -:   32:
        -:   33:	// initialize a game state and player cards
        1:   34:	initializeGame(numPlayers, k, seed, &G);
        -:   35:
        1:   36:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   37:
        -:   38:	
        1:   39:	printf("TEST 1: choice1 = 0 = +1 card & +2 actions.\n");
        -:   40:
        -:   41:	// copy the game state
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:	
        1:   44:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   45:	newCards = 1;
        -:   46:	
        -:   47:
        1:   48:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   49:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   50:	printf("Player 1 actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
        -:   51:	//for player 2
        1:   52:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   53:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   54:
        -:   55:	//Player 1 hand count
        1:   56:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   57:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   58:	}
        -:   59:	else{
    #####:   60:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   61:	}
        -:   62:	//Player 1 deck count
        1:   63:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   64:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   65:	}
        -:   66:	else{
    #####:   67:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   68:	}
        -:   69:	//Player 1 Number of actions
        1:   70:	if(testG.numActions== G.numActions + 1){
    #####:   71:		printf("\n >>>>>> Success: Number of Actions of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
        1:   74:		printf("\n >>>>>> Fail: Number of Actions of current player is incorrect!!!");
        -:   75:	}
        -:   76:
        -:   77:	//Player 2 handcount
        1:   78:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   79:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   80:	}
        -:   81:	else{
    #####:   82:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   83:	}
        -:   84:	//Player 2 deck Count
        1:   85:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   86:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   87:	}
        -:   88:	else{
    #####:   89:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   90:	}
        -:   91:	
        -:   92:
        1:   93:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   94:
        -:   95:
        1:   96:	return 0;
        -:   97:}
File 'cardtest4.c'
Lines executed:86.84% of 38
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for council_room()
        -:    3: *
        -:    4: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "council_room"
        -:   17:
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        -:   21: 
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player1 = 0;
        1:   27:    int player2 = 1;
        -:   28:	struct gameState G, testG;
        -:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state
        1:   33:	initializeGame(numPlayers, k, seed, &G);
        -:   34:
        1:   35:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   36:
        -:   37:
        1:   38:	printf("TEST 1: choice1 = 0 = +4 cards, +1 buys, 1 additional card for every other player.\n");
        -:   39:
        -:   40:	// copy the game state to a test case
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:	
        1:   43:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   44:	newCards = 4;
        1:   45:	int newBuy = 1;
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   49:	printf("Player 1 buys = %d, expected = %d\n", testG.numBuys, G.numBuys + newBuy);
        -:   50:	//for player 2
        1:   51:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2] + 1);
        1:   52:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2] - 1);
        -:   53:
        -:   54:	//Player 1 hand count
        1:   55:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   56:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   57:	}
        -:   58:	else{
    #####:   59:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   60:	}
        -:   61:	//Player 1 deck count
        1:   62:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   63:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   64:	}
        -:   65:	else{
    #####:   66:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   67:	}
        -:   68:	//Player 1 Number of actions
        1:   69:	if(testG.numBuys== G.numBuys + 1){
        1:   70:		printf("\n >>>>>> Success: Number of Buys of current player is correct!!!");
        -:   71:	}
        -:   72:	else{
    #####:   73:		printf("\n >>>>>> Fail: Number of Buys of current player is incorrect!!!");
        -:   74:	}
        -:   75:
        -:   76:	//Player 2 handcount
        1:   77:	if(testG.handCount[player2] == G.handCount[player2] + 1){
        1:   78:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   79:	}
        -:   80:	else{
    #####:   81:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   82:	}
        -:   83:	//Player 2 deck Count
        1:   84:	if(testG.deckCount[player2] == G.deckCount[player2] - 1){
        1:   85:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   89:	}
        -:   90:	
        -:   91:
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
File 'dominion.c'
Lines executed:32.57% of 565
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
       16:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
       70:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
      310:  215:    card = floor(Random() * state->deckCount[player]);
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  672:	  shuffle(currentPlayer, state);
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
        -:  704:	    {
        1:  705:	      drawCard(i, state);
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
    #####:  727:	if (supplyCount(choice1, state) <= 0){
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
    #####:  736:	  printf("That card is too expensive!\n");
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
    #####:  879:		isGameOver(state);
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
    #####:  896:	    isGameOver(state);
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
        -:  956:			{
    #####:  957:			  drawCard(i, state);
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
    #####:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1038:	  drawCard(currentPlayer, state);
    #####: 1039:	  drawCard(currentPlayer, state);
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
    #####: 1184:	if (i != currentPlayer){
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'dominion.c'
Lines executed:32.57% of 565
Branches executed:35.73% of 417
Taken at least once:28.54% of 417
Calls executed:17.78% of 90
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 465 returned 100% blocks executed 83%
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 97%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 100%
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 31 returned 100% blocks executed 93%
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 81 returned 100% blocks executed 36%
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 12%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
call    0 returned 100%
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  704:	    {
        1:  705:	      drawCard(i, state);
call    0 returned 100%
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  879:		isGameOver(state);
call    0 never executed
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:	    isGameOver(state);
call    0 never executed
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
call    0 never executed
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  956:			{
    #####:  957:			  drawCard(i, state);
call    0 never executed
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  971:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1038:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1184:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
function discardCard called 3 returned 100% blocks executed 75%
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
function updateCoins called 21 returned 100% blocks executed 100%
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'unittest1.c'
Lines executed:74.38% of 121
Branches executed:100.00% of 74
Taken at least once:58.11% of 74
Calls executed:56.34% of 71
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for initializeGame()
        -:    3: *
        -:    4: * unittest1: unittest1.c dominion.o rngs.o
        -:    5: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
function main called 1 returned 100% blocks executed 73%
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int i;
        -:   21:  
        1:   22:    int seed = 1000;
        -:   23:    int totalPlayers;
        -:   24:    int result;
        1:   25:    int testNum = 3;
        -:   26:
        1:   27:    printf("\n--------Testing for game initilization function----------");
call    0 returned 100%
        -:   28:
        1:   29:   	printf("\n--------Testing #1 for only one player----------");
call    0 returned 100%
        -:   30:
        1:   31:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:   	totalPlayers = 1;
        -:   34:
        1:   35:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
call    0 returned 100%
        -:   36:
        1:   37:    if(result == -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   38:    	printf("\n>>>>Success: one player is not enough to play the game!!!");
call    0 returned 100%
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>Fail: one player alone cant play the game!!!");
call    0 never executed
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for only five players----------");
call    0 returned 100%
        -:   45:
        1:   46:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:   	totalPlayers = 5;
        -:   49:
        1:   50:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
call    0 returned 100%
        -:   51:
        1:   52:    if(result == -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   53:    	printf("\n>>>>Success: five players is too much for the game!!!");
call    0 returned 100%
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>Fail: five players cant play the game!!!");
call    0 never executed
        -:   57:    }
        -:   58:
        4:   59:    for(totalPlayers = 2; totalPlayers <=4; totalPlayers++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   60:    	printf("\n--------Testing #%d for only five players----------", testNum);
call    0 returned 100%
        -:   61:
        3:   62:    	testNum++;
        -:   63:
        3:   64:	   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   65:
        3:   66:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
call    0 returned 100%
        -:   67:
        3:   68:	    if(result == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   69:    	printf("\n>>>>Success: %d players is enough for the game!!!", totalPlayers);
call    0 returned 100%
        -:   70:	    }
        -:   71:	    else{
    #####:   72:	    	printf("\n>>>>Fail: %d players are suppose to be able to play the game!!!", totalPlayers);
call    0 never executed
        -:   73:	    }
        3:   74:	    if(totalPlayers == 2){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   75:	    	if(test.supplyCount[curse] == 10){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   76:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
call    0 returned 100%
        -:   77:	    	}
        -:   78:	    	else{
    #####:   79:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
call    0 never executed
        -:   80:	    	}
        1:   81:	    	if(test.supplyCount[estate] == 8){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   82:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
call    0 returned 100%
        -:   83:	    	}
        -:   84:	    	else{
    #####:   85:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
call    0 never executed
        -:   86:	    	}
        1:   87:	    	if(test.supplyCount[duchy] == 8){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   88:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
call    0 returned 100%
        -:   89:	    	}
        -:   90:	    	else{
    #####:   91:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
call    0 never executed
        -:   92:	    	}
        1:   93:	    	if(test.supplyCount[province] == 8){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   94:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
call    0 returned 100%
        -:   95:	    	}
        -:   96:	    	else{
    #####:   97:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
call    0 never executed
        -:   98:	    	}
        1:   99:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  100:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
call    0 returned 100%
        -:  101:	    	}
        -:  102:	    	else{
    #####:  103:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
call    0 never executed
        -:  104:	    	}
        1:  105:	    	if(test.supplyCount[silver] == 40){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  106:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
call    0 returned 100%
        -:  107:	    	}
        -:  108:	    	else{
    #####:  109:	    		printf("\n>>>Fail: supply count for silver is incorrect!!!");
call    0 never executed
        -:  110:	    	}
        1:  111:	    	if(test.supplyCount[gold] == 30){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  112:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
call    0 returned 100%
        -:  113:	    	}
        -:  114:	    	else{
    #####:  115:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
call    0 never executed
        -:  116:	    	}
        -:  117:	    }
        3:  118:	    if(totalPlayers == 3){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  119:	    	if(test.supplyCount[curse] == 20){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  120:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
call    0 returned 100%
        -:  121:	    	}
        -:  122:	    	else{
    #####:  123:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
call    0 never executed
        -:  124:	    	}
        1:  125:	    	if(test.supplyCount[estate] == 12){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  126:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
call    0 returned 100%
        -:  127:	    	}
        -:  128:	    	else{
    #####:  129:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
call    0 never executed
        -:  130:	    	}
        1:  131:	    	if(test.supplyCount[duchy] == 12){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  132:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
call    0 returned 100%
        -:  133:	    	}
        -:  134:	    	else{
    #####:  135:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
call    0 never executed
        -:  136:	    	}
        1:  137:	    	if(test.supplyCount[province] == 12){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  138:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
call    0 returned 100%
        -:  139:	    	}
        -:  140:	    	else{
    #####:  141:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
call    0 never executed
        -:  142:	    	}
        1:  143:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  144:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
call    0 returned 100%
        -:  145:	    	}
        -:  146:	    	else{
    #####:  147:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
call    0 never executed
        -:  148:	    	}
        1:  149:	    	if(test.supplyCount[silver] == 40){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  150:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
call    0 returned 100%
        -:  151:	    	}
        -:  152:	    	else{
    #####:  153:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
call    0 never executed
        -:  154:	    	}
        1:  155:	    	if(test.supplyCount[gold] == 30){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  156:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
call    0 returned 100%
        -:  157:	    	}
        -:  158:	    	else{
    #####:  159:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
call    0 never executed
        -:  160:	    	}
        -:  161:	    }
        3:  162:	    if(totalPlayers == 4){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  163:	    	if(test.supplyCount[curse] == 30){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  164:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
call    0 returned 100%
        -:  165:	    	}
        -:  166:	    	else{
    #####:  167:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
call    0 never executed
        -:  168:	    	}
        1:  169:	    	if(test.supplyCount[estate] == 12){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  170:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
call    0 returned 100%
        -:  171:	    	}
        -:  172:	    	else{
    #####:  173:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
call    0 never executed
        -:  174:	    	}
        1:  175:	    	if(test.supplyCount[duchy] == 12){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  176:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
call    0 returned 100%
        -:  177:	    	}
        -:  178:	    	else{
    #####:  179:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
call    0 never executed
        -:  180:	    	}
        1:  181:	    	if(test.supplyCount[province] == 12){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  182:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
call    0 returned 100%
        -:  183:	    	}
        -:  184:	    	else{
    #####:  185:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
call    0 never executed
        -:  186:	    	}
        1:  187:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  188:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
call    0 returned 100%
        -:  189:	    	}
        -:  190:	    	else{
    #####:  191:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
call    0 never executed
        -:  192:	    	}
        1:  193:	    	if(test.supplyCount[silver] == 40){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  194:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
call    0 returned 100%
        -:  195:	    	}
        -:  196:	    	else{
    #####:  197:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
call    0 never executed
        -:  198:	    	}
        1:  199:	    	if(test.supplyCount[gold] == 30){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  200:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
call    0 returned 100%
        -:  201:	    	}
        -:  202:	    	else{
    #####:  203:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
call    0 never executed
        -:  204:	    	}
        -:  205:	    }
        -:  206:
        -:  207:    }
        1:  208:    	totalPlayers = 2;
        1:  209:    	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:  210:
        1:  211:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
call    0 returned 100%
        -:  212:
        1:  213:	   	printf("\n-------Test if kingdom cards are correct amount-----");
call    0 returned 100%
        -:  214:
        1:  215:	   	if(test.supplyCount[adventurer] == 10){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  216:	   		printf("\n>>>>SUCCESS: supply count for adventurer is correct!!!");
call    0 returned 100%
        -:  217:	   	}
        -:  218:	   	else{
    #####:  219:	    	printf("\n>>>>Fail: supply count for adventurer is incorrect!!!");
call    0 never executed
        -:  220:	    	}
        1:  221:	    if(test.supplyCount[gardens] == 8){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  222:	   		printf("\n>>>>SUCCESS: supply count for gardens is correct!!!");
call    0 returned 100%
        -:  223:	   	}
        -:  224:	   	else{
    #####:  225:	    	printf("\n>>>>Fail: supply count for gardens is incorrect!!!");
call    0 never executed
        -:  226:	    	}
        -:  227:
        3:  228:	    for(i =0; i < totalPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  229:			
        2:  230:			if(i==0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  231:				if(test.handCount[i] == 5){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  232:					printf("\n>>>>SUCCESS: Player #%d hand count is 5!!!", i+1);
call    0 returned 100%
        -:  233:				}
        -:  234:				else{
    #####:  235:					printf("\n>>>>Fail: Player #%d hand count is not 5!!!", i+1);
call    0 never executed
        -:  236:					}
        -:  237:			}
        -:  238:			else{
        1:  239:				if(test.handCount[i] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  240:					printf("\n>>>>SUCCESS: Player #%d hand count is empty!!!", i+1);
call    0 returned 100%
        -:  241:				}
        -:  242:				else{
    #####:  243:					printf("\n>>>>Fail: Player #%d hand count is not empty!!!", i+1);
call    0 never executed
        -:  244:					}
        -:  245:			}
        2:  246:		    if(test.discardCount[i] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  247:		    	printf("\n>>>>SUCCESS: Player #%d discardCount is empty!!!", i+1);
call    0 returned 100%
        -:  248:		    }
        -:  249:		    else{
    #####:  250:		    	printf("\n>>>>Fail: Player #%d discardCount is not empty!!!", i+1);
call    0 never executed
        -:  251:		    	}
        -:  252:
        -:  253:	    }
        -:  254:
        1:  255:	    if(test.numActions == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  256:	   		printf("\n>>>>SUCCESS: Number of actions is correct!!!");
call    0 returned 100%
        -:  257:	   	}
        -:  258:	   	else{
    #####:  259:	    	printf("\n>>>>Fail: Number of actions is inrrect!!!");
call    0 never executed
        -:  260:	    	}
        -:  261:
        1:  262:	    if(test.numBuys == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  263:	   		printf("\n>>>>SUCCESS: Number of buys is correct!!!\n\n");
call    0 returned 100%
        -:  264:	   	}
        -:  265:	   	else{
    #####:  266:	    	printf("\n>>>>Fail: Number of buys is inrrect!!!");
call    0 never executed
        -:  267:	    	}
        -:  268:		/*
        -:  269:		if(test.handCount[0] == 5){
        -:  270:		    	printf("\n>>>>SUCCESS: Player #1 hand count contains 5 cards!!!");
        -:  271:		    }
        -:  272:		else{
        -:  273:		    printf("\n>>>>Fail: Player #1 hand count does contains 5 cards!!!");
        -:  274:		    	}
        -:  275:				
        -:  276:		if(test.handCount[1] == 0){
        -:  277:		    	printf("\n>>>>SUCCESS: Player #2 hand count is empty!!!");
        -:  278:		    }
        -:  279:		else{
        -:  280:		    printf("\n>>>>Fail: Player #2 hand count is not empty to start!!!");
        -:  281:		    	}
        -:  282:		*/
        -:  283:
        -:  284:
        -:  285:
        -:  286:
        1:  287:    return 0;
        -:  288:}File 'unittest2.c'
Lines executed:92.31% of 52
Branches executed:100.00% of 14
Taken at least once:71.43% of 14
Calls executed:82.61% of 23
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:
function main called 1 returned 100% blocks executed 89%
        1:   18:int main() {
        -:   19:    int i;
        1:   20:    int seed = 1000;
        1:   21:    int numPlayer = 2;
        1:   22:    int maxBonus = 10;
        -:   23:    int p, r, handCount;
        -:   24:    int bonus;
        -:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState test;
        1:   28:    int maxHandCount = 5;
        -:   29:    
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
      501:   33:    for (i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   34:    {
      500:   35:        coppers[i] = copper;
      500:   36:        silvers[i] = silver;
      500:   37:        golds[i] = gold;
        -:   38:    }
        1:   39:    int v =2;
        1:   40:    int w = 2;
        1:   41:    printf ("-------TESTING updateCoins()--------\n");
call    0 returned 100%
        3:   42:    for (p = 0; p < numPlayer; p++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   43:    {
        -:   44:                
        2:   45:                bonus = rand()% maxBonus;
call    0 returned 100%
        2:   46:                handCount = 5;
        2:   47:                printf("Player #%d with %d treasure cards and %d bonus.\n", p, handCount, bonus);
call    0 returned 100%
        -:   48:
        2:   49:                memset(&test, 23, sizeof(struct gameState));   
        2:   50:                initializeGame(numPlayer, k, seed, &test); 
call    0 returned 100%
        2:   51:                test.handCount[p] = handCount;                 
        2:   52:                memcpy(test.hand[p], coppers, sizeof(int) * handCount); 
        2:   53:                updateCoins(p, &test, bonus);
call    0 returned 100%
        -:   54:
        2:   55:                printf("All Copper Coins = %d, expected = %d\n", test.coins, handCount * 1 + bonus);
call    0 returned 100%
        -:   56:
        2:   57:                if(test.coins == handCount * 1 + bonus){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   58:                    printf(">>>SUCCESS: Coins are equal!!!\n");
call    0 returned 100%
        -:   59:                }
        -:   60:                else{
    #####:   61:                    printf(">>>FAIL: Coins are not equal!!!\n");
call    0 never executed
        -:   62:                }
        -:   63:
        2:   64:                memcpy(test.hand[p], silvers, sizeof(int) * handCount); 
        2:   65:                updateCoins(p, &test, bonus);
call    0 returned 100%
        -:   66:
        2:   67:                printf("All Silver Coins = %d, expected = %d\n", test.coins, handCount * 2 + bonus);
call    0 returned 100%
        -:   68:
        2:   69:                 if(test.coins == handCount * 2 + bonus){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   70:                    printf(">>>SUCCESS: Coins are equal!!!\n");
call    0 returned 100%
        -:   71:                }
        -:   72:                else{
    #####:   73:                    printf(">>>FAIL: Coins are not equal!!!\n");
call    0 never executed
        -:   74:                }
        -:   75:                
        -:   76:
        2:   77:                memcpy(test.hand[p], golds, sizeof(int) * handCount); 
        2:   78:                updateCoins(p, &test, bonus);
call    0 returned 100%
        -:   79:
        2:   80:                printf("All Gold Coins = %d, expected = %d\n", test.coins, handCount * 3 + bonus);
call    0 returned 100%
        -:   81:
        2:   82:                 if(test.coins == handCount * 3 + bonus){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   83:                    printf(">>>SUCCESS: Coins are equal!!!\n");
call    0 returned 100%
        -:   84:                }
        -:   85:                else{ 
    #####:   86:                    printf(">>>FAIL: Coins are not equal!!!\n");
call    0 never executed
        -:   87:                }
        2:   88:                if(p==0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   89:                printf("----Now Testing 5 Treasured Card, Mixed Coins: %d gold, 1 silver and %d copper\n", v, w);
call    0 returned 100%
        1:   90:                bonus = rand()% maxBonus;
call    0 returned 100%
        1:   91:                memset(&test, 23, sizeof(struct gameState));   
        1:   92:                initializeGame(numPlayer, k, seed, &test);
call    0 returned 100%
        1:   93:                memcpy(test.hand[p], golds, sizeof(int) * v);
        1:   94:                memcpy(test.hand[p] + v, silvers, sizeof(int) * 1);
        1:   95:                memcpy(test.hand[p] + v + 1, coppers, sizeof(int) * w);
        -:   96:
        1:   97:                updateCoins(p, &test, bonus);
call    0 returned 100%
        -:   98:
        1:   99:                printf("All Coins = %d, expected = %d\n", test.coins, (v*3)+2+(w*1)+bonus);
call    0 returned 100%
        -:  100:
        1:  101:                 if(test.coins == (v*3)+2+(w*1)+bonus){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  102:                    printf(">>>SUCCESS: Coins are equal!!!\n");
call    0 returned 100%
        -:  103:                }
        -:  104:                else{ 
    #####:  105:                    printf(">>>FAIL: Coins are not equal!!!\n");
call    0 never executed
        -:  106:                }
        -:  107:
        -:  108:            }
        -:  109:             
        -:  110:            }
        -:  111:      
        -:  112:
        1:  113:    return 0;
        -:  114:}File 'unittest3.c'
Lines executed:86.96% of 46
Branches executed:100.00% of 12
Taken at least once:50.00% of 12
Calls executed:77.78% of 27
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
function main called 1 returned 100% blocks executed 82%
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int reset;
        -:   21:  
        1:   22:    int seed = 1000;
        1:   23:    int totalPlayers = 2;
        -:   24:   
        -:   25:
        -:   26:    int result;
        -:   27:
        -:   28:   
        1:   29:    printf("\n--------Testing #1 for isGameOver function for no state change----------");
call    0 returned 100%
        -:   30:
        1:   31:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
call    0 returned 100%
        -:   34:
        1:   35:    result = isGameOver(&test);
call    0 returned 100%
        -:   36:
        1:   37:    if(result == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   38:    	printf("\n>>>>>>SUCCESS: No change in game state: game continues");
call    0 returned 100%
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
call    0 never executed
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for isGameOver function for province = 0----------");
call    0 returned 100%
        -:   45:
        1:   46:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
call    0 returned 100%
        1:   49:    test.supplyCount[province] = 0;
        1:   50:    result = isGameOver(&test);
call    0 returned 100%
        -:   51:
        1:   52:    if(result == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   53:    	printf("\n>>>>>>SUCCESS: Province is out of supply: game ends");
call    0 returned 100%
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
call    0 never executed
        -:   57:    }
        1:   58:    printf("\n--------Testing #3 for isGameOver function for province = 1----------");
call    0 returned 100%
        -:   59:
        1:   60:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   61:
        1:   62:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
call    0 returned 100%
        1:   63:    test.supplyCount[province] = 1;
        -:   64:
        1:   65:    result = isGameOver(&test);
call    0 returned 100%
        -:   66:
        1:   67:    if(result == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   68:    	printf("\n>>>>>>SUCCESS: Province has only 1 card left: game continues");
call    0 returned 100%
        -:   69:    }
        -:   70:    else{
    #####:   71:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
call    0 never executed
        -:   72:    }
        -:   73:
        1:   74:    printf("\n--------Testing #4 for isGameOver function for province = 1, one supply count is 0----------");
call    0 returned 100%
        1:   75:    test.supplyCount[adventurer] = 0;
        1:   76:    result = isGameOver(&test);
call    0 returned 100%
        -:   77:
        1:   78:    if(result == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   79:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
call    0 returned 100%
        -:   80:    }
        -:   81:    else{
    #####:   82:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
call    0 never executed
        -:   83:    }
        1:   84:    printf("\n--------Testing #5 for isGameOver function for province = 1, two supply count is 0----------");
call    0 returned 100%
        1:   85:    test.supplyCount[smithy] = 0;
        1:   86:    result = isGameOver(&test);
call    0 returned 100%
        -:   87:
        1:   88:    if(result == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   89:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
call    0 returned 100%
        -:   90:    }
        -:   91:    else{
    #####:   92:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
call    0 never executed
        -:   93:    }
        1:   94:    printf("\n--------Testing #6 for isGameOver function for province = 1, three supply count is 0----------");
call    0 returned 100%
        1:   95:    test.supplyCount[feast] = 0;
        1:   96:    result = isGameOver(&test);
call    0 returned 100%
        -:   97:
        1:   98:    if(result == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   99:    	printf("\n>>>>>>SUCCESS: Game must end!!!");
call    0 returned 100%
        -:  100:    }
        -:  101:    else{
    #####:  102:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
call    0 never executed
        -:  103:    }
        -:  104:
        -:  105:
        1:  106:	return 0;
        -:  107:    
        -:  108:    
        -:  109:}File 'unittest4.c'
Lines executed:90.00% of 10
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:66.67% of 3
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for getCost()
        -:    3: *
        -:    4: * unittest4: unittest4.c dominion.o rngs.o
        -:    5: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:
        -:   16:
function main called 1 returned 100% blocks executed 88%
        1:   17:int main(){
        -:   18:	
        -:   19:	int i; 
        -:   20:	int value;
        1:   21:	int cardAmount = 27;
        -:   22:	char *availableCards[27]= {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", 
        -:   23:			"feast", "gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward",
        1:   24:			"tribute", "ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   25:
        1:   26:	int cardValue[27] = {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   27:
       28:   28:	for (i = 0; i < cardAmount; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   29:		value = getCost(i);
call    0 returned 100%
       27:   30:		if(value == cardValue[i]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:   31:			printf(">>>>>Success:%s is the correct amount of %d\n", availableCards[i], cardValue[i]);
call    0 returned 100%
        -:   32:		}
        -:   33:			
        -:   34:		else
    #####:   35:			printf(">>>>>ERROR: %s is the incorrect amount.\n", availableCards[i]);
call    0 never executed
        -:   36:	}
        -:   37:
        1:   38:	return (0);
        -:   39:	
        -:   40:}File 'cardtest1.c'
Lines executed:85.42% of 48
Branches executed:100.00% of 14
Taken at least once:50.00% of 14
Calls executed:73.08% of 26
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for smithy()
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "smithy"
        -:   18:
function main called 1 returned 100% blocks executed 79%
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        1:   22:    int xtraCoins = 0;
        1:   23:    int shuffledCards = 0;
        -:   24:
        -:   25:    
        1:   26:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   27:   
        1:   28:    int seed = 1000;
        1:   29:    int numPlayers = 2;
        1:   30:    int player1 = 0;
        1:   31:    int player2 = 1;
        -:   32:	struct gameState G, testG;
        -:   33:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   34:			sea_hag, tribute, smithy, council_room};
        -:   35:
        -:   36:	
        1:   37:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   38:
        1:   39:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   40:
        -:   41:	
        1:   42:	printf("TEST 1: choice1 = 0 = +3 cards\n");
call    0 returned 100%
        -:   43:
        -:   44:	// copy the game state to a test case
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:	
        1:   47:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        1:   48:	newCards = 3;
        1:   49:	xtraCoins = 0;
        1:   50:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
call    0 returned 100%
        1:   51:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards + shuffledCards);
call    0 returned 100%
        1:   52:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
call    0 returned 100%
        1:   53:	printf("Player 1 coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        -:   54:	//for player 2
        1:   55:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
call    0 returned 100%
        1:   56:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
call    0 returned 100%
        1:   57:	printf("Player 2 discard count = %d, expected = %d\n", testG.discardCount[player2], G.discardCount[player2]);
call    0 returned 100%
        1:   58:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   59:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
call    0 returned 100%
        -:   60:	}
        -:   61:	else{
    #####:   62:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
call    0 never executed
        -:   63:	}
        1:   64:	if(testG.handCount[player2] == G.handCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   65:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
call    0 returned 100%
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
call    0 never executed
        -:   69:	}
        1:   70:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards + shuffledCards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   71:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
call    0 returned 100%
        -:   72:	}
        -:   73:	else{
    #####:   74:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
call    0 never executed
        -:   75:	}
        1:   76:	if(testG.deckCount[player2] == G.deckCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   77:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
call    0 returned 100%
        -:   78:	}
        -:   79:	else{
    #####:   80:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
call    0 never executed
        -:   81:	}
        1:   82:	if(testG.discardCount[player1] == G.discardCount[player1] + 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   83:		printf("\n >>>>>> Success: Discard count of player1 is correct!!!");
call    0 never executed
        -:   84:	}
        -:   85:	else{
        1:   86:		printf("\n >>>>>> Fail: discardCount of player1 is incorrect!!!");
call    0 returned 100%
        -:   87:	}
        1:   88:	if(testG.discardCount[player2] == G.discardCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   89:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
call    0 returned 100%
        -:   90:	}
        -:   91:	else{
    #####:   92:		printf("\n >>>>>> Fail: discardCount of player2 is incorrect!!!");
call    0 never executed
        -:   93:	}
        1:   94:	if(testG.coins == G.coins + xtraCoins){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   95:		printf("\n >>>>>> Success: Coin count of current player is correct!!!");
call    0 returned 100%
        -:   96:	}
        -:   97:	else{
    #####:   98:		printf("\n >>>>>> Fail: Coin count of current player is incorrect!!!");
call    0 never executed
        -:   99:	}
        -:  100:
        1:  101:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  102:
        -:  103:
        1:  104:	return 0;
        -:  105:}
File 'cardtest2.c'
Lines executed:84.62% of 52
Branches executed:100.00% of 32
Taken at least once:75.00% of 32
Calls executed:70.37% of 27
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for adventurer()
        -:    3: *
        -:    4: * cardtest2: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest2 -g cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "adventurer"
        -:   18:
function main called 1 returned 100% blocks executed 84%
        1:   19:int main() {
        -:   20:   
        -:   21:    int i;
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        1:   25:    int player1 = 0;
        1:   26:    int player2 = 1;
        -:   27:	struct gameState G, testG;
        -:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   29:			sea_hag, tribute, smithy, council_room};
        -:   30:
        -:   31:	
        1:   32:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   33:
        1:   34:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   35:
        -:   36:	
        1:   37:	printf("TEST 1: choice1 = 0 = Reveal 2 treasure cards\n");
call    0 returned 100%
        -:   38:
        -:   39:	// copy the game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:	
        1:   42:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   43:
        -:   44:
        1:   45:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + 2 - 1);
call    0 returned 100%
        -:   46:
        -:   47:
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - (testG.discardCount[player1] + 2));
call    0 returned 100%
        -:   49:	
        1:   50:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
call    0 returned 100%
        1:   51:	int coinCardsTest = 0;
     8001:   52:	for(i=0; i < sizeof(testG.hand); i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     8000:   53:		if(testG.hand[player1][i] == gold || testG.hand[player1][i] == silver || testG.hand[player1][i] == copper){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
       38:   54:			coinCardsTest++;
        -:   55:		}
        -:   56:	}
        1:   57:	int coinCardsG = 0;
     8001:   58:	for(i=0; i < sizeof(G.hand); i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     8000:   59:		if(G.hand[player1][i] == gold || G.hand[player1][i] == silver || G.hand[player1][i] == copper){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
       36:   60:			coinCardsG++;
        -:   61:		}
        -:   62:	}
        -:   63:
        1:   64:	printf("Player 1 hand Treasure count = %d, expected = %d\n", coinCardsTest, coinCardsG + 2);
call    0 returned 100%
        -:   65:
        -:   66:
        -:   67:	//for player 2
        1:   68:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
call    0 returned 100%
        1:   69:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
call    0 returned 100%
        -:   70:	
        -:   71:
        -:   72:	//HandCount
        1:   73:	if(testG.handCount[player1] == G.handCount[player1] + 2 - 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
call    0 never executed
        -:   75:	}
        -:   76:	else{
        1:   77:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
call    0 returned 100%
        -:   78:	}
        -:   79:	//Deck Count, might be plus 2
        1:   80:	if(testG.deckCount[player1] == G.deckCount[player1] - (testG.discardCount[player1] + 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   81:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
call    0 never executed
        -:   82:	}
        -:   83:	else{
        1:   84:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
call    0 returned 100%
        -:   85:	}
        -:   86:
        -:   87:	//Discard count
        1:   88:	if(testG.discardCount[player1] >= G.discardCount[player1] + 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   89:		printf("\n >>>>>> Success: Discard count of current player is correct!!!");
call    0 never executed
        -:   90:	}
        -:   91:	else{
        1:   92:		printf("\n >>>>>> Fail: Discard count of current player is incorrect!!!");
call    0 returned 100%
        -:   93:	}
        -:   94:	//Coin Count
        1:   95:	if(testG.coins > G.coins){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   96:		printf("\n >>>>>> Success: Coin count of player1 is correct!!!");
call    0 never executed
        -:   97:	}
        -:   98:	else{
        1:   99:		printf("\n >>>>>> Fail: Coin count of player1 is incorrect!!!");
call    0 returned 100%
        -:  100:	}
        -:  101:	
        1:  102:	if(coinCardsTest == coinCardsG + 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  103:		printf("\n >>>>>> Success: Treasure Handcount of player1 is correct!!!");
call    0 returned 100%
        -:  104:	}
        -:  105:	else{
    #####:  106:		printf("\n >>>>>> Fail: Treasure Handcount of player1 is incorrect!!!");
call    0 never executed
        -:  107:	}
        -:  108:	//Player 2 Hand Count
        1:  109:	if(testG.handCount[player2] == G.handCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  110:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
call    0 returned 100%
        -:  111:	}
        -:  112:	else{
    #####:  113:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
call    0 never executed
        -:  114:	}
        -:  115:	//Player 2 Deck Count
        1:  116:	if(testG.deckCount[player2] == G.deckCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  117:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
call    0 returned 100%
        -:  118:	}
        -:  119:	else{
    #####:  120:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
call    0 never executed
        -:  121:	}
        -:  122:	//Discard Count
        1:  123:	if(testG.discardCount[player2] == G.discardCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  124:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
call    0 returned 100%
        -:  125:	}
        -:  126:	else{
    #####:  127:		printf("\n >>>>>> Fail: Discard count of player2 is incorrect!!!");
call    0 never executed
        -:  128:	}
        -:  129:	
        -:  130:
        1:  131:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  132:
        -:  133:
        1:  134:	return 0;
        -:  135:}
File 'cardtest3.c'
Lines executed:86.49% of 37
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:75.00% of 20
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for village()
        -:    3: *
        -:    4: * cardtest3: cardtest3.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "village"
        -:   18:
function main called 1 returned 100% blocks executed 81%
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        -:   22:   
        1:   23:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:  
        1:   25:    int seed = 1000;
        1:   26:    int numPlayers = 2;
        1:   27:    int player1 = 0;
        1:   28:    int player2 = 1;
        -:   29:	struct gameState G, testG;
        -:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   31:			sea_hag, tribute, smithy, council_room};
        -:   32:
        -:   33:	// initialize a game state and player cards
        1:   34:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   35:
        1:   36:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   37:
        -:   38:	
        1:   39:	printf("TEST 1: choice1 = 0 = +1 card & +2 actions.\n");
call    0 returned 100%
        -:   40:
        -:   41:	// copy the game state
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:	
        1:   44:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        1:   45:	newCards = 1;
        -:   46:	
        -:   47:
        1:   48:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
call    0 returned 100%
        1:   49:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
call    0 returned 100%
        1:   50:	printf("Player 1 actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
call    0 returned 100%
        -:   51:	//for player 2
        1:   52:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
call    0 returned 100%
        1:   53:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
call    0 returned 100%
        -:   54:
        -:   55:	//Player 1 hand count
        1:   56:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   57:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
call    0 returned 100%
        -:   58:	}
        -:   59:	else{
    #####:   60:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
call    0 never executed
        -:   61:	}
        -:   62:	//Player 1 deck count
        1:   63:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   64:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
call    0 returned 100%
        -:   65:	}
        -:   66:	else{
    #####:   67:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
call    0 never executed
        -:   68:	}
        -:   69:	//Player 1 Number of actions
        1:   70:	if(testG.numActions== G.numActions + 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   71:		printf("\n >>>>>> Success: Number of Actions of current player is correct!!!");
call    0 never executed
        -:   72:	}
        -:   73:	else{
        1:   74:		printf("\n >>>>>> Fail: Number of Actions of current player is incorrect!!!");
call    0 returned 100%
        -:   75:	}
        -:   76:
        -:   77:	//Player 2 handcount
        1:   78:	if(testG.handCount[player2] == G.handCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   79:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
call    0 returned 100%
        -:   80:	}
        -:   81:	else{
    #####:   82:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
call    0 never executed
        -:   83:	}
        -:   84:	//Player 2 deck Count
        1:   85:	if(testG.deckCount[player2] == G.deckCount[player2]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   86:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
call    0 returned 100%
        -:   87:	}
        -:   88:	else{
    #####:   89:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
call    0 never executed
        -:   90:	}
        -:   91:	
        -:   92:
        1:   93:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:   94:
        -:   95:
        1:   96:	return 0;
        -:   97:}
File 'cardtest4.c'
Lines executed:86.84% of 38
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:75.00% of 20
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for council_room()
        -:    3: *
        -:    4: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "council_room"
        -:   17:
function main called 1 returned 100% blocks executed 81%
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        -:   21: 
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player1 = 0;
        1:   27:    int player2 = 1;
        -:   28:	struct gameState G, testG;
        -:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state
        1:   33:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   34:
        1:   35:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   36:
        -:   37:
        1:   38:	printf("TEST 1: choice1 = 0 = +4 cards, +1 buys, 1 additional card for every other player.\n");
call    0 returned 100%
        -:   39:
        -:   40:	// copy the game state to a test case
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:	
        1:   43:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        1:   44:	newCards = 4;
        1:   45:	int newBuy = 1;
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
call    0 returned 100%
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
call    0 returned 100%
        1:   49:	printf("Player 1 buys = %d, expected = %d\n", testG.numBuys, G.numBuys + newBuy);
call    0 returned 100%
        -:   50:	//for player 2
        1:   51:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2] + 1);
call    0 returned 100%
        1:   52:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2] - 1);
call    0 returned 100%
        -:   53:
        -:   54:	//Player 1 hand count
        1:   55:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   56:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
call    0 returned 100%
        -:   57:	}
        -:   58:	else{
    #####:   59:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
call    0 never executed
        -:   60:	}
        -:   61:	//Player 1 deck count
        1:   62:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   63:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
call    0 returned 100%
        -:   64:	}
        -:   65:	else{
    #####:   66:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
call    0 never executed
        -:   67:	}
        -:   68:	//Player 1 Number of actions
        1:   69:	if(testG.numBuys== G.numBuys + 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   70:		printf("\n >>>>>> Success: Number of Buys of current player is correct!!!");
call    0 returned 100%
        -:   71:	}
        -:   72:	else{
    #####:   73:		printf("\n >>>>>> Fail: Number of Buys of current player is incorrect!!!");
call    0 never executed
        -:   74:	}
        -:   75:
        -:   76:	//Player 2 handcount
        1:   77:	if(testG.handCount[player2] == G.handCount[player2] + 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   78:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
call    0 returned 100%
        -:   79:	}
        -:   80:	else{
    #####:   81:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
call    0 never executed
        -:   82:	}
        -:   83:	//Player 2 deck Count
        1:   84:	if(testG.deckCount[player2] == G.deckCount[player2] - 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   85:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
call    0 returned 100%
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
call    0 never executed
        -:   89:	}
        -:   90:	
        -:   91:
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
File 'dominion.c'
Lines executed:32.57% of 565
Branches executed:35.73% of 417
Taken at least once:28.54% of 417
Calls executed:17.78% of 90
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 465 returned 100% blocks executed 83%
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 97%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 100%
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 31 returned 100% blocks executed 93%
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 81 returned 100% blocks executed 36%
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 12%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
call    0 returned 100%
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  704:	    {
        1:  705:	      drawCard(i, state);
call    0 returned 100%
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  879:		isGameOver(state);
call    0 never executed
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:	    isGameOver(state);
call    0 never executed
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
call    0 never executed
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  956:			{
    #####:  957:			  drawCard(i, state);
call    0 never executed
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  971:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1038:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1184:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
function discardCard called 3 returned 100% blocks executed 75%
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
function updateCoins called 21 returned 100% blocks executed 100%
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'unittest1.c'
Lines executed:74.38% of 121
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for initializeGame()
        -:    3: *
        -:    4: * unittest1: unittest1.c dominion.o rngs.o
        -:    5: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int i;
        -:   21:  
        1:   22:    int seed = 1000;
        -:   23:    int totalPlayers;
        -:   24:    int result;
        1:   25:    int testNum = 3;
        -:   26:
        1:   27:    printf("\n--------Testing for game initilization function----------");
        -:   28:
        1:   29:   	printf("\n--------Testing #1 for only one player----------");
        -:   30:
        1:   31:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:   	totalPlayers = 1;
        -:   34:
        1:   35:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   36:
        1:   37:    if(result == -1){
        1:   38:    	printf("\n>>>>Success: one player is not enough to play the game!!!");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>Fail: one player alone cant play the game!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for only five players----------");
        -:   45:
        1:   46:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:   	totalPlayers = 5;
        -:   49:
        1:   50:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   51:
        1:   52:    if(result == -1){
        1:   53:    	printf("\n>>>>Success: five players is too much for the game!!!");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>Fail: five players cant play the game!!!");
        -:   57:    }
        -:   58:
        4:   59:    for(totalPlayers = 2; totalPlayers <=4; totalPlayers++){
        3:   60:    	printf("\n--------Testing #%d for only five players----------", testNum);
        -:   61:
        3:   62:    	testNum++;
        -:   63:
        3:   64:	   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   65:
        3:   66:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   67:
        3:   68:	    if(result == 0){
        3:   69:    	printf("\n>>>>Success: %d players is enough for the game!!!", totalPlayers);
        -:   70:	    }
        -:   71:	    else{
    #####:   72:	    	printf("\n>>>>Fail: %d players are suppose to be able to play the game!!!", totalPlayers);
        -:   73:	    }
        3:   74:	    if(totalPlayers == 2){
        1:   75:	    	if(test.supplyCount[curse] == 10){
        1:   76:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:   77:	    	}
        -:   78:	    	else{
    #####:   79:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:   80:	    	}
        1:   81:	    	if(test.supplyCount[estate] == 8){
        1:   82:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:   83:	    	}
        -:   84:	    	else{
    #####:   85:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:   86:	    	}
        1:   87:	    	if(test.supplyCount[duchy] == 8){
        1:   88:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:   89:	    	}
        -:   90:	    	else{
    #####:   91:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:   92:	    	}
        1:   93:	    	if(test.supplyCount[province] == 8){
        1:   94:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:   95:	    	}
        -:   96:	    	else{
    #####:   97:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:   98:	    	}
        1:   99:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  100:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  101:	    	}
        -:  102:	    	else{
    #####:  103:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  104:	    	}
        1:  105:	    	if(test.supplyCount[silver] == 40){
        1:  106:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  107:	    	}
        -:  108:	    	else{
    #####:  109:	    		printf("\n>>>Fail: supply count for silver is incorrect!!!");
        -:  110:	    	}
        1:  111:	    	if(test.supplyCount[gold] == 30){
        1:  112:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  113:	    	}
        -:  114:	    	else{
    #####:  115:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  116:	    	}
        -:  117:	    }
        3:  118:	    if(totalPlayers == 3){
        1:  119:	    	if(test.supplyCount[curse] == 20){
        1:  120:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  121:	    	}
        -:  122:	    	else{
    #####:  123:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  124:	    	}
        1:  125:	    	if(test.supplyCount[estate] == 12){
        1:  126:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  127:	    	}
        -:  128:	    	else{
    #####:  129:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  130:	    	}
        1:  131:	    	if(test.supplyCount[duchy] == 12){
        1:  132:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  133:	    	}
        -:  134:	    	else{
    #####:  135:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  136:	    	}
        1:  137:	    	if(test.supplyCount[province] == 12){
        1:  138:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  139:	    	}
        -:  140:	    	else{
    #####:  141:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  142:	    	}
        1:  143:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  144:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  145:	    	}
        -:  146:	    	else{
    #####:  147:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  148:	    	}
        1:  149:	    	if(test.supplyCount[silver] == 40){
        1:  150:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  151:	    	}
        -:  152:	    	else{
    #####:  153:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  154:	    	}
        1:  155:	    	if(test.supplyCount[gold] == 30){
        1:  156:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  157:	    	}
        -:  158:	    	else{
    #####:  159:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  160:	    	}
        -:  161:	    }
        3:  162:	    if(totalPlayers == 4){
        1:  163:	    	if(test.supplyCount[curse] == 30){
        1:  164:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  165:	    	}
        -:  166:	    	else{
    #####:  167:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  168:	    	}
        1:  169:	    	if(test.supplyCount[estate] == 12){
        1:  170:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  171:	    	}
        -:  172:	    	else{
    #####:  173:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  174:	    	}
        1:  175:	    	if(test.supplyCount[duchy] == 12){
        1:  176:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  177:	    	}
        -:  178:	    	else{
    #####:  179:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  180:	    	}
        1:  181:	    	if(test.supplyCount[province] == 12){
        1:  182:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  183:	    	}
        -:  184:	    	else{
    #####:  185:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  186:	    	}
        1:  187:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  188:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  189:	    	}
        -:  190:	    	else{
    #####:  191:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  192:	    	}
        1:  193:	    	if(test.supplyCount[silver] == 40){
        1:  194:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  195:	    	}
        -:  196:	    	else{
    #####:  197:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  198:	    	}
        1:  199:	    	if(test.supplyCount[gold] == 30){
        1:  200:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  201:	    	}
        -:  202:	    	else{
    #####:  203:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  204:	    	}
        -:  205:	    }
        -:  206:
        -:  207:    }
        1:  208:    	totalPlayers = 2;
        1:  209:    	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:  210:
        1:  211:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:  212:
        1:  213:	   	printf("\n-------Test if kingdom cards are correct amount-----");
        -:  214:
        1:  215:	   	if(test.supplyCount[adventurer] == 10){
        1:  216:	   		printf("\n>>>>SUCCESS: supply count for adventurer is correct!!!");
        -:  217:	   	}
        -:  218:	   	else{
    #####:  219:	    	printf("\n>>>>Fail: supply count for adventurer is incorrect!!!");
        -:  220:	    	}
        1:  221:	    if(test.supplyCount[gardens] == 8){
        1:  222:	   		printf("\n>>>>SUCCESS: supply count for gardens is correct!!!");
        -:  223:	   	}
        -:  224:	   	else{
    #####:  225:	    	printf("\n>>>>Fail: supply count for gardens is incorrect!!!");
        -:  226:	    	}
        -:  227:
        3:  228:	    for(i =0; i < totalPlayers; i++){
        -:  229:			
        2:  230:			if(i==0){
        1:  231:				if(test.handCount[i] == 5){
        1:  232:					printf("\n>>>>SUCCESS: Player #%d hand count is 5!!!", i+1);
        -:  233:				}
        -:  234:				else{
    #####:  235:					printf("\n>>>>Fail: Player #%d hand count is not 5!!!", i+1);
        -:  236:					}
        -:  237:			}
        -:  238:			else{
        1:  239:				if(test.handCount[i] == 0){
        1:  240:					printf("\n>>>>SUCCESS: Player #%d hand count is empty!!!", i+1);
        -:  241:				}
        -:  242:				else{
    #####:  243:					printf("\n>>>>Fail: Player #%d hand count is not empty!!!", i+1);
        -:  244:					}
        -:  245:			}
        2:  246:		    if(test.discardCount[i] == 0){
        2:  247:		    	printf("\n>>>>SUCCESS: Player #%d discardCount is empty!!!", i+1);
        -:  248:		    }
        -:  249:		    else{
    #####:  250:		    	printf("\n>>>>Fail: Player #%d discardCount is not empty!!!", i+1);
        -:  251:		    	}
        -:  252:
        -:  253:	    }
        -:  254:
        1:  255:	    if(test.numActions == 1){
        1:  256:	   		printf("\n>>>>SUCCESS: Number of actions is correct!!!");
        -:  257:	   	}
        -:  258:	   	else{
    #####:  259:	    	printf("\n>>>>Fail: Number of actions is inrrect!!!");
        -:  260:	    	}
        -:  261:
        1:  262:	    if(test.numBuys == 1){
        1:  263:	   		printf("\n>>>>SUCCESS: Number of buys is correct!!!\n\n");
        -:  264:	   	}
        -:  265:	   	else{
    #####:  266:	    	printf("\n>>>>Fail: Number of buys is inrrect!!!");
        -:  267:	    	}
        -:  268:		/*
        -:  269:		if(test.handCount[0] == 5){
        -:  270:		    	printf("\n>>>>SUCCESS: Player #1 hand count contains 5 cards!!!");
        -:  271:		    }
        -:  272:		else{
        -:  273:		    printf("\n>>>>Fail: Player #1 hand count does contains 5 cards!!!");
        -:  274:		    	}
        -:  275:				
        -:  276:		if(test.handCount[1] == 0){
        -:  277:		    	printf("\n>>>>SUCCESS: Player #2 hand count is empty!!!");
        -:  278:		    }
        -:  279:		else{
        -:  280:		    printf("\n>>>>Fail: Player #2 hand count is not empty to start!!!");
        -:  281:		    	}
        -:  282:		*/
        -:  283:
        -:  284:
        -:  285:
        -:  286:
        1:  287:    return 0;
        -:  288:}File 'unittest2.c'
Lines executed:92.31% of 52
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:
        1:   18:int main() {
        -:   19:    int i;
        1:   20:    int seed = 1000;
        1:   21:    int numPlayer = 2;
        1:   22:    int maxBonus = 10;
        -:   23:    int p, r, handCount;
        -:   24:    int bonus;
        -:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState test;
        1:   28:    int maxHandCount = 5;
        -:   29:    
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
      501:   33:    for (i = 0; i < MAX_HAND; i++)
        -:   34:    {
      500:   35:        coppers[i] = copper;
      500:   36:        silvers[i] = silver;
      500:   37:        golds[i] = gold;
        -:   38:    }
        1:   39:    int v =2;
        1:   40:    int w = 2;
        1:   41:    printf ("-------TESTING updateCoins()--------\n");
        3:   42:    for (p = 0; p < numPlayer; p++)
        -:   43:    {
        -:   44:                
        2:   45:                bonus = rand()% maxBonus;
        2:   46:                handCount = 5;
        2:   47:                printf("Player #%d with %d treasure cards and %d bonus.\n", p, handCount, bonus);
        -:   48:
        2:   49:                memset(&test, 23, sizeof(struct gameState));   
        2:   50:                initializeGame(numPlayer, k, seed, &test); 
        2:   51:                test.handCount[p] = handCount;                 
        2:   52:                memcpy(test.hand[p], coppers, sizeof(int) * handCount); 
        2:   53:                updateCoins(p, &test, bonus);
        -:   54:
        2:   55:                printf("All Copper Coins = %d, expected = %d\n", test.coins, handCount * 1 + bonus);
        -:   56:
        2:   57:                if(test.coins == handCount * 1 + bonus){
        2:   58:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   59:                }
        -:   60:                else{
    #####:   61:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   62:                }
        -:   63:
        2:   64:                memcpy(test.hand[p], silvers, sizeof(int) * handCount); 
        2:   65:                updateCoins(p, &test, bonus);
        -:   66:
        2:   67:                printf("All Silver Coins = %d, expected = %d\n", test.coins, handCount * 2 + bonus);
        -:   68:
        2:   69:                 if(test.coins == handCount * 2 + bonus){
        2:   70:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   71:                }
        -:   72:                else{
    #####:   73:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   74:                }
        -:   75:                
        -:   76:
        2:   77:                memcpy(test.hand[p], golds, sizeof(int) * handCount); 
        2:   78:                updateCoins(p, &test, bonus);
        -:   79:
        2:   80:                printf("All Gold Coins = %d, expected = %d\n", test.coins, handCount * 3 + bonus);
        -:   81:
        2:   82:                 if(test.coins == handCount * 3 + bonus){
        2:   83:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   84:                }
        -:   85:                else{ 
    #####:   86:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   87:                }
        2:   88:                if(p==0){
        1:   89:                printf("----Now Testing 5 Treasured Card, Mixed Coins: %d gold, 1 silver and %d copper\n", v, w);
        1:   90:                bonus = rand()% maxBonus;
        1:   91:                memset(&test, 23, sizeof(struct gameState));   
        1:   92:                initializeGame(numPlayer, k, seed, &test);
        1:   93:                memcpy(test.hand[p], golds, sizeof(int) * v);
        1:   94:                memcpy(test.hand[p] + v, silvers, sizeof(int) * 1);
        1:   95:                memcpy(test.hand[p] + v + 1, coppers, sizeof(int) * w);
        -:   96:
        1:   97:                updateCoins(p, &test, bonus);
        -:   98:
        1:   99:                printf("All Coins = %d, expected = %d\n", test.coins, (v*3)+2+(w*1)+bonus);
        -:  100:
        1:  101:                 if(test.coins == (v*3)+2+(w*1)+bonus){
        1:  102:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:  103:                }
        -:  104:                else{ 
    #####:  105:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:  106:                }
        -:  107:
        -:  108:            }
        -:  109:             
        -:  110:            }
        -:  111:      
        -:  112:
        1:  113:    return 0;
        -:  114:}File 'unittest3.c'
Lines executed:86.96% of 46
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int reset;
        -:   21:  
        1:   22:    int seed = 1000;
        1:   23:    int totalPlayers = 2;
        -:   24:   
        -:   25:
        -:   26:    int result;
        -:   27:
        -:   28:   
        1:   29:    printf("\n--------Testing #1 for isGameOver function for no state change----------");
        -:   30:
        1:   31:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   34:
        1:   35:    result = isGameOver(&test);
        -:   36:
        1:   37:    if(result == 0){
        1:   38:    	printf("\n>>>>>>SUCCESS: No change in game state: game continues");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for isGameOver function for province = 0----------");
        -:   45:
        1:   46:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   49:    test.supplyCount[province] = 0;
        1:   50:    result = isGameOver(&test);
        -:   51:
        1:   52:    if(result == 1){
        1:   53:    	printf("\n>>>>>>SUCCESS: Province is out of supply: game ends");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:   57:    }
        1:   58:    printf("\n--------Testing #3 for isGameOver function for province = 1----------");
        -:   59:
        1:   60:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   61:
        1:   62:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   63:    test.supplyCount[province] = 1;
        -:   64:
        1:   65:    result = isGameOver(&test);
        -:   66:
        1:   67:    if(result == 0){
        1:   68:    	printf("\n>>>>>>SUCCESS: Province has only 1 card left: game continues");
        -:   69:    }
        -:   70:    else{
    #####:   71:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   72:    }
        -:   73:
        1:   74:    printf("\n--------Testing #4 for isGameOver function for province = 1, one supply count is 0----------");
        1:   75:    test.supplyCount[adventurer] = 0;
        1:   76:    result = isGameOver(&test);
        -:   77:
        1:   78:    if(result == 0){
        1:   79:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   80:    }
        -:   81:    else{
    #####:   82:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   83:    }
        1:   84:    printf("\n--------Testing #5 for isGameOver function for province = 1, two supply count is 0----------");
        1:   85:    test.supplyCount[smithy] = 0;
        1:   86:    result = isGameOver(&test);
        -:   87:
        1:   88:    if(result == 0){
        1:   89:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   90:    }
        -:   91:    else{
    #####:   92:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   93:    }
        1:   94:    printf("\n--------Testing #6 for isGameOver function for province = 1, three supply count is 0----------");
        1:   95:    test.supplyCount[feast] = 0;
        1:   96:    result = isGameOver(&test);
        -:   97:
        1:   98:    if(result == 1){
        1:   99:    	printf("\n>>>>>>SUCCESS: Game must end!!!");
        -:  100:    }
        -:  101:    else{
    #####:  102:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:  103:    }
        -:  104:
        -:  105:
        1:  106:	return 0;
        -:  107:    
        -:  108:    
        -:  109:}File 'unittest4.c'
Lines executed:90.00% of 10
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for getCost()
        -:    3: *
        -:    4: * unittest4: unittest4.c dominion.o rngs.o
        -:    5: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:
        -:   16:
        1:   17:int main(){
        -:   18:	
        -:   19:	int i; 
        -:   20:	int value;
        1:   21:	int cardAmount = 27;
        -:   22:	char *availableCards[27]= {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", 
        -:   23:			"feast", "gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward",
        1:   24:			"tribute", "ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   25:
        1:   26:	int cardValue[27] = {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   27:
       28:   28:	for (i = 0; i < cardAmount; i++){
       27:   29:		value = getCost(i);
       27:   30:		if(value == cardValue[i]){
       27:   31:			printf(">>>>>Success:%s is the correct amount of %d\n", availableCards[i], cardValue[i]);
        -:   32:		}
        -:   33:			
        -:   34:		else
    #####:   35:			printf(">>>>>ERROR: %s is the incorrect amount.\n", availableCards[i]);
        -:   36:	}
        -:   37:
        1:   38:	return (0);
        -:   39:	
        -:   40:}File 'cardtest1.c'
Lines executed:85.42% of 48
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for smithy()
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "smithy"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        1:   22:    int xtraCoins = 0;
        1:   23:    int shuffledCards = 0;
        -:   24:
        -:   25:    
        1:   26:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   27:   
        1:   28:    int seed = 1000;
        1:   29:    int numPlayers = 2;
        1:   30:    int player1 = 0;
        1:   31:    int player2 = 1;
        -:   32:	struct gameState G, testG;
        -:   33:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   34:			sea_hag, tribute, smithy, council_room};
        -:   35:
        -:   36:	
        1:   37:	initializeGame(numPlayers, k, seed, &G);
        -:   38:
        1:   39:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   40:
        -:   41:	
        1:   42:	printf("TEST 1: choice1 = 0 = +3 cards\n");
        -:   43:
        -:   44:	// copy the game state to a test case
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:	
        1:   47:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   48:	newCards = 3;
        1:   49:	xtraCoins = 0;
        1:   50:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   51:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards + shuffledCards);
        1:   52:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   53:	printf("Player 1 coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   54:	//for player 2
        1:   55:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   56:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        1:   57:	printf("Player 2 discard count = %d, expected = %d\n", testG.discardCount[player2], G.discardCount[player2]);
        1:   58:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   59:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   60:	}
        -:   61:	else{
    #####:   62:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   63:	}
        1:   64:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   65:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   69:	}
        1:   70:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards + shuffledCards){
        1:   71:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
    #####:   74:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   75:	}
        1:   76:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   77:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   78:	}
        -:   79:	else{
    #####:   80:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   81:	}
        1:   82:	if(testG.discardCount[player1] == G.discardCount[player1] + 1){
    #####:   83:		printf("\n >>>>>> Success: Discard count of player1 is correct!!!");
        -:   84:	}
        -:   85:	else{
        1:   86:		printf("\n >>>>>> Fail: discardCount of player1 is incorrect!!!");
        -:   87:	}
        1:   88:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:   89:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:   90:	}
        -:   91:	else{
    #####:   92:		printf("\n >>>>>> Fail: discardCount of player2 is incorrect!!!");
        -:   93:	}
        1:   94:	if(testG.coins == G.coins + xtraCoins){
        1:   95:		printf("\n >>>>>> Success: Coin count of current player is correct!!!");
        -:   96:	}
        -:   97:	else{
    #####:   98:		printf("\n >>>>>> Fail: Coin count of current player is incorrect!!!");
        -:   99:	}
        -:  100:
        1:  101:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  102:
        -:  103:
        1:  104:	return 0;
        -:  105:}
File 'cardtest2.c'
Lines executed:84.62% of 52
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for adventurer()
        -:    3: *
        -:    4: * cardtest2: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest2 -g cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "adventurer"
        -:   18:
        1:   19:int main() {
        -:   20:   
        -:   21:    int i;
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        1:   25:    int player1 = 0;
        1:   26:    int player2 = 1;
        -:   27:	struct gameState G, testG;
        -:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   29:			sea_hag, tribute, smithy, council_room};
        -:   30:
        -:   31:	
        1:   32:	initializeGame(numPlayers, k, seed, &G);
        -:   33:
        1:   34:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   35:
        -:   36:	
        1:   37:	printf("TEST 1: choice1 = 0 = Reveal 2 treasure cards\n");
        -:   38:
        -:   39:	// copy the game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:	
        1:   42:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   43:
        -:   44:
        1:   45:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + 2 - 1);
        -:   46:
        -:   47:
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - (testG.discardCount[player1] + 2));
        -:   49:	
        1:   50:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   51:	int coinCardsTest = 0;
     8001:   52:	for(i=0; i < sizeof(testG.hand); i++){
     8000:   53:		if(testG.hand[player1][i] == gold || testG.hand[player1][i] == silver || testG.hand[player1][i] == copper){
       38:   54:			coinCardsTest++;
        -:   55:		}
        -:   56:	}
        1:   57:	int coinCardsG = 0;
     8001:   58:	for(i=0; i < sizeof(G.hand); i++){
     8000:   59:		if(G.hand[player1][i] == gold || G.hand[player1][i] == silver || G.hand[player1][i] == copper){
       36:   60:			coinCardsG++;
        -:   61:		}
        -:   62:	}
        -:   63:
        1:   64:	printf("Player 1 hand Treasure count = %d, expected = %d\n", coinCardsTest, coinCardsG + 2);
        -:   65:
        -:   66:
        -:   67:	//for player 2
        1:   68:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   69:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   70:	
        -:   71:
        -:   72:	//HandCount
        1:   73:	if(testG.handCount[player1] == G.handCount[player1] + 2 - 1){
    #####:   74:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   75:	}
        -:   76:	else{
        1:   77:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   78:	}
        -:   79:	//Deck Count, might be plus 2
        1:   80:	if(testG.deckCount[player1] == G.deckCount[player1] - (testG.discardCount[player1] + 1)){
    #####:   81:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   82:	}
        -:   83:	else{
        1:   84:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   85:	}
        -:   86:
        -:   87:	//Discard count
        1:   88:	if(testG.discardCount[player1] >= G.discardCount[player1] + 1){
    #####:   89:		printf("\n >>>>>> Success: Discard count of current player is correct!!!");
        -:   90:	}
        -:   91:	else{
        1:   92:		printf("\n >>>>>> Fail: Discard count of current player is incorrect!!!");
        -:   93:	}
        -:   94:	//Coin Count
        1:   95:	if(testG.coins > G.coins){
    #####:   96:		printf("\n >>>>>> Success: Coin count of player1 is correct!!!");
        -:   97:	}
        -:   98:	else{
        1:   99:		printf("\n >>>>>> Fail: Coin count of player1 is incorrect!!!");
        -:  100:	}
        -:  101:	
        1:  102:	if(coinCardsTest == coinCardsG + 2){
        1:  103:		printf("\n >>>>>> Success: Treasure Handcount of player1 is correct!!!");
        -:  104:	}
        -:  105:	else{
    #####:  106:		printf("\n >>>>>> Fail: Treasure Handcount of player1 is incorrect!!!");
        -:  107:	}
        -:  108:	//Player 2 Hand Count
        1:  109:	if(testG.handCount[player2] == G.handCount[player2]){
        1:  110:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:  111:	}
        -:  112:	else{
    #####:  113:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:  114:	}
        -:  115:	//Player 2 Deck Count
        1:  116:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:  117:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:  118:	}
        -:  119:	else{
    #####:  120:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:  121:	}
        -:  122:	//Discard Count
        1:  123:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:  124:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:  125:	}
        -:  126:	else{
    #####:  127:		printf("\n >>>>>> Fail: Discard count of player2 is incorrect!!!");
        -:  128:	}
        -:  129:	
        -:  130:
        1:  131:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  132:
        -:  133:
        1:  134:	return 0;
        -:  135:}
File 'cardtest3.c'
Lines executed:86.49% of 37
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for village()
        -:    3: *
        -:    4: * cardtest3: cardtest3.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "village"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        -:   22:   
        1:   23:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:  
        1:   25:    int seed = 1000;
        1:   26:    int numPlayers = 2;
        1:   27:    int player1 = 0;
        1:   28:    int player2 = 1;
        -:   29:	struct gameState G, testG;
        -:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   31:			sea_hag, tribute, smithy, council_room};
        -:   32:
        -:   33:	// initialize a game state and player cards
        1:   34:	initializeGame(numPlayers, k, seed, &G);
        -:   35:
        1:   36:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   37:
        -:   38:	
        1:   39:	printf("TEST 1: choice1 = 0 = +1 card & +2 actions.\n");
        -:   40:
        -:   41:	// copy the game state
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:	
        1:   44:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   45:	newCards = 1;
        -:   46:	
        -:   47:
        1:   48:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   49:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   50:	printf("Player 1 actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
        -:   51:	//for player 2
        1:   52:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   53:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   54:
        -:   55:	//Player 1 hand count
        1:   56:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   57:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   58:	}
        -:   59:	else{
    #####:   60:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   61:	}
        -:   62:	//Player 1 deck count
        1:   63:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   64:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   65:	}
        -:   66:	else{
    #####:   67:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   68:	}
        -:   69:	//Player 1 Number of actions
        1:   70:	if(testG.numActions== G.numActions + 1){
    #####:   71:		printf("\n >>>>>> Success: Number of Actions of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
        1:   74:		printf("\n >>>>>> Fail: Number of Actions of current player is incorrect!!!");
        -:   75:	}
        -:   76:
        -:   77:	//Player 2 handcount
        1:   78:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   79:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   80:	}
        -:   81:	else{
    #####:   82:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   83:	}
        -:   84:	//Player 2 deck Count
        1:   85:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   86:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   87:	}
        -:   88:	else{
    #####:   89:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   90:	}
        -:   91:	
        -:   92:
        1:   93:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   94:
        -:   95:
        1:   96:	return 0;
        -:   97:}
File 'cardtest4.c'
Lines executed:86.84% of 38
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for council_room()
        -:    3: *
        -:    4: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "council_room"
        -:   17:
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        -:   21: 
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player1 = 0;
        1:   27:    int player2 = 1;
        -:   28:	struct gameState G, testG;
        -:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state
        1:   33:	initializeGame(numPlayers, k, seed, &G);
        -:   34:
        1:   35:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   36:
        -:   37:
        1:   38:	printf("TEST 1: choice1 = 0 = +4 cards, +1 buys, 1 additional card for every other player.\n");
        -:   39:
        -:   40:	// copy the game state to a test case
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:	
        1:   43:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   44:	newCards = 4;
        1:   45:	int newBuy = 1;
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   49:	printf("Player 1 buys = %d, expected = %d\n", testG.numBuys, G.numBuys + newBuy);
        -:   50:	//for player 2
        1:   51:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2] + 1);
        1:   52:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2] - 1);
        -:   53:
        -:   54:	//Player 1 hand count
        1:   55:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   56:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   57:	}
        -:   58:	else{
    #####:   59:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   60:	}
        -:   61:	//Player 1 deck count
        1:   62:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   63:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   64:	}
        -:   65:	else{
    #####:   66:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   67:	}
        -:   68:	//Player 1 Number of actions
        1:   69:	if(testG.numBuys== G.numBuys + 1){
        1:   70:		printf("\n >>>>>> Success: Number of Buys of current player is correct!!!");
        -:   71:	}
        -:   72:	else{
    #####:   73:		printf("\n >>>>>> Fail: Number of Buys of current player is incorrect!!!");
        -:   74:	}
        -:   75:
        -:   76:	//Player 2 handcount
        1:   77:	if(testG.handCount[player2] == G.handCount[player2] + 1){
        1:   78:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   79:	}
        -:   80:	else{
    #####:   81:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   82:	}
        -:   83:	//Player 2 deck Count
        1:   84:	if(testG.deckCount[player2] == G.deckCount[player2] - 1){
        1:   85:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   89:	}
        -:   90:	
        -:   91:
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
File 'dominion.c'
Lines executed:32.57% of 565
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
       16:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
       70:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
      310:  215:    card = floor(Random() * state->deckCount[player]);
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  672:	  shuffle(currentPlayer, state);
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
        -:  704:	    {
        1:  705:	      drawCard(i, state);
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
    #####:  727:	if (supplyCount(choice1, state) <= 0){
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
    #####:  736:	  printf("That card is too expensive!\n");
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
    #####:  879:		isGameOver(state);
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
    #####:  896:	    isGameOver(state);
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
        -:  956:			{
    #####:  957:			  drawCard(i, state);
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
    #####:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1038:	  drawCard(currentPlayer, state);
    #####: 1039:	  drawCard(currentPlayer, state);
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
    #####: 1184:	if (i != currentPlayer){
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'dominion.c'
Lines executed:32.57% of 565
Branches executed:35.73% of 417
Taken at least once:28.54% of 417
Calls executed:17.78% of 90
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 465 returned 100% blocks executed 83%
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 97%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 100%
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 31 returned 100% blocks executed 93%
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 81 returned 100% blocks executed 36%
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 12%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
call    0 returned 100%
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  704:	    {
        1:  705:	      drawCard(i, state);
call    0 returned 100%
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  879:		isGameOver(state);
call    0 never executed
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:	    isGameOver(state);
call    0 never executed
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
call    0 never executed
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  956:			{
    #####:  957:			  drawCard(i, state);
call    0 never executed
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  971:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1038:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1184:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
function discardCard called 3 returned 100% blocks executed 75%
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
function updateCoins called 21 returned 100% blocks executed 100%
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'unittest1.c'
Lines executed:74.38% of 121
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for initializeGame()
        -:    3: *
        -:    4: * unittest1: unittest1.c dominion.o rngs.o
        -:    5: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int i;
        -:   21:  
        1:   22:    int seed = 1000;
        -:   23:    int totalPlayers;
        -:   24:    int result;
        1:   25:    int testNum = 3;
        -:   26:
        1:   27:    printf("\n--------Testing for game initilization function----------");
        -:   28:
        1:   29:   	printf("\n--------Testing #1 for only one player----------");
        -:   30:
        1:   31:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:   	totalPlayers = 1;
        -:   34:
        1:   35:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   36:
        1:   37:    if(result == -1){
        1:   38:    	printf("\n>>>>Success: one player is not enough to play the game!!!");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>Fail: one player alone cant play the game!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for only five players----------");
        -:   45:
        1:   46:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:   	totalPlayers = 5;
        -:   49:
        1:   50:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   51:
        1:   52:    if(result == -1){
        1:   53:    	printf("\n>>>>Success: five players is too much for the game!!!");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>Fail: five players cant play the game!!!");
        -:   57:    }
        -:   58:
        4:   59:    for(totalPlayers = 2; totalPlayers <=4; totalPlayers++){
        3:   60:    	printf("\n--------Testing #%d for only five players----------", testNum);
        -:   61:
        3:   62:    	testNum++;
        -:   63:
        3:   64:	   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   65:
        3:   66:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   67:
        3:   68:	    if(result == 0){
        3:   69:    	printf("\n>>>>Success: %d players is enough for the game!!!", totalPlayers);
        -:   70:	    }
        -:   71:	    else{
    #####:   72:	    	printf("\n>>>>Fail: %d players are suppose to be able to play the game!!!", totalPlayers);
        -:   73:	    }
        3:   74:	    if(totalPlayers == 2){
        1:   75:	    	if(test.supplyCount[curse] == 10){
        1:   76:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:   77:	    	}
        -:   78:	    	else{
    #####:   79:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:   80:	    	}
        1:   81:	    	if(test.supplyCount[estate] == 8){
        1:   82:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:   83:	    	}
        -:   84:	    	else{
    #####:   85:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:   86:	    	}
        1:   87:	    	if(test.supplyCount[duchy] == 8){
        1:   88:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:   89:	    	}
        -:   90:	    	else{
    #####:   91:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:   92:	    	}
        1:   93:	    	if(test.supplyCount[province] == 8){
        1:   94:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:   95:	    	}
        -:   96:	    	else{
    #####:   97:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:   98:	    	}
        1:   99:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  100:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  101:	    	}
        -:  102:	    	else{
    #####:  103:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  104:	    	}
        1:  105:	    	if(test.supplyCount[silver] == 40){
        1:  106:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  107:	    	}
        -:  108:	    	else{
    #####:  109:	    		printf("\n>>>Fail: supply count for silver is incorrect!!!");
        -:  110:	    	}
        1:  111:	    	if(test.supplyCount[gold] == 30){
        1:  112:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  113:	    	}
        -:  114:	    	else{
    #####:  115:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  116:	    	}
        -:  117:	    }
        3:  118:	    if(totalPlayers == 3){
        1:  119:	    	if(test.supplyCount[curse] == 20){
        1:  120:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  121:	    	}
        -:  122:	    	else{
    #####:  123:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  124:	    	}
        1:  125:	    	if(test.supplyCount[estate] == 12){
        1:  126:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  127:	    	}
        -:  128:	    	else{
    #####:  129:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  130:	    	}
        1:  131:	    	if(test.supplyCount[duchy] == 12){
        1:  132:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  133:	    	}
        -:  134:	    	else{
    #####:  135:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  136:	    	}
        1:  137:	    	if(test.supplyCount[province] == 12){
        1:  138:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  139:	    	}
        -:  140:	    	else{
    #####:  141:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  142:	    	}
        1:  143:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  144:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  145:	    	}
        -:  146:	    	else{
    #####:  147:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  148:	    	}
        1:  149:	    	if(test.supplyCount[silver] == 40){
        1:  150:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  151:	    	}
        -:  152:	    	else{
    #####:  153:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  154:	    	}
        1:  155:	    	if(test.supplyCount[gold] == 30){
        1:  156:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  157:	    	}
        -:  158:	    	else{
    #####:  159:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  160:	    	}
        -:  161:	    }
        3:  162:	    if(totalPlayers == 4){
        1:  163:	    	if(test.supplyCount[curse] == 30){
        1:  164:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  165:	    	}
        -:  166:	    	else{
    #####:  167:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  168:	    	}
        1:  169:	    	if(test.supplyCount[estate] == 12){
        1:  170:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  171:	    	}
        -:  172:	    	else{
    #####:  173:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  174:	    	}
        1:  175:	    	if(test.supplyCount[duchy] == 12){
        1:  176:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  177:	    	}
        -:  178:	    	else{
    #####:  179:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  180:	    	}
        1:  181:	    	if(test.supplyCount[province] == 12){
        1:  182:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  183:	    	}
        -:  184:	    	else{
    #####:  185:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  186:	    	}
        1:  187:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  188:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  189:	    	}
        -:  190:	    	else{
    #####:  191:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  192:	    	}
        1:  193:	    	if(test.supplyCount[silver] == 40){
        1:  194:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  195:	    	}
        -:  196:	    	else{
    #####:  197:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  198:	    	}
        1:  199:	    	if(test.supplyCount[gold] == 30){
        1:  200:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  201:	    	}
        -:  202:	    	else{
    #####:  203:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  204:	    	}
        -:  205:	    }
        -:  206:
        -:  207:    }
        1:  208:    	totalPlayers = 2;
        1:  209:    	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:  210:
        1:  211:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:  212:
        1:  213:	   	printf("\n-------Test if kingdom cards are correct amount-----");
        -:  214:
        1:  215:	   	if(test.supplyCount[adventurer] == 10){
        1:  216:	   		printf("\n>>>>SUCCESS: supply count for adventurer is correct!!!");
        -:  217:	   	}
        -:  218:	   	else{
    #####:  219:	    	printf("\n>>>>Fail: supply count for adventurer is incorrect!!!");
        -:  220:	    	}
        1:  221:	    if(test.supplyCount[gardens] == 8){
        1:  222:	   		printf("\n>>>>SUCCESS: supply count for gardens is correct!!!");
        -:  223:	   	}
        -:  224:	   	else{
    #####:  225:	    	printf("\n>>>>Fail: supply count for gardens is incorrect!!!");
        -:  226:	    	}
        -:  227:
        3:  228:	    for(i =0; i < totalPlayers; i++){
        -:  229:			
        2:  230:			if(i==0){
        1:  231:				if(test.handCount[i] == 5){
        1:  232:					printf("\n>>>>SUCCESS: Player #%d hand count is 5!!!", i+1);
        -:  233:				}
        -:  234:				else{
    #####:  235:					printf("\n>>>>Fail: Player #%d hand count is not 5!!!", i+1);
        -:  236:					}
        -:  237:			}
        -:  238:			else{
        1:  239:				if(test.handCount[i] == 0){
        1:  240:					printf("\n>>>>SUCCESS: Player #%d hand count is empty!!!", i+1);
        -:  241:				}
        -:  242:				else{
    #####:  243:					printf("\n>>>>Fail: Player #%d hand count is not empty!!!", i+1);
        -:  244:					}
        -:  245:			}
        2:  246:		    if(test.discardCount[i] == 0){
        2:  247:		    	printf("\n>>>>SUCCESS: Player #%d discardCount is empty!!!", i+1);
        -:  248:		    }
        -:  249:		    else{
    #####:  250:		    	printf("\n>>>>Fail: Player #%d discardCount is not empty!!!", i+1);
        -:  251:		    	}
        -:  252:
        -:  253:	    }
        -:  254:
        1:  255:	    if(test.numActions == 1){
        1:  256:	   		printf("\n>>>>SUCCESS: Number of actions is correct!!!");
        -:  257:	   	}
        -:  258:	   	else{
    #####:  259:	    	printf("\n>>>>Fail: Number of actions is inrrect!!!");
        -:  260:	    	}
        -:  261:
        1:  262:	    if(test.numBuys == 1){
        1:  263:	   		printf("\n>>>>SUCCESS: Number of buys is correct!!!\n\n");
        -:  264:	   	}
        -:  265:	   	else{
    #####:  266:	    	printf("\n>>>>Fail: Number of buys is inrrect!!!");
        -:  267:	    	}
        -:  268:		/*
        -:  269:		if(test.handCount[0] == 5){
        -:  270:		    	printf("\n>>>>SUCCESS: Player #1 hand count contains 5 cards!!!");
        -:  271:		    }
        -:  272:		else{
        -:  273:		    printf("\n>>>>Fail: Player #1 hand count does contains 5 cards!!!");
        -:  274:		    	}
        -:  275:				
        -:  276:		if(test.handCount[1] == 0){
        -:  277:		    	printf("\n>>>>SUCCESS: Player #2 hand count is empty!!!");
        -:  278:		    }
        -:  279:		else{
        -:  280:		    printf("\n>>>>Fail: Player #2 hand count is not empty to start!!!");
        -:  281:		    	}
        -:  282:		*/
        -:  283:
        -:  284:
        -:  285:
        -:  286:
        1:  287:    return 0;
        -:  288:}File 'unittest2.c'
Lines executed:92.31% of 52
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:
        1:   18:int main() {
        -:   19:    int i;
        1:   20:    int seed = 1000;
        1:   21:    int numPlayer = 2;
        1:   22:    int maxBonus = 10;
        -:   23:    int p, r, handCount;
        -:   24:    int bonus;
        -:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState test;
        1:   28:    int maxHandCount = 5;
        -:   29:    
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
      501:   33:    for (i = 0; i < MAX_HAND; i++)
        -:   34:    {
      500:   35:        coppers[i] = copper;
      500:   36:        silvers[i] = silver;
      500:   37:        golds[i] = gold;
        -:   38:    }
        1:   39:    int v =2;
        1:   40:    int w = 2;
        1:   41:    printf ("-------TESTING updateCoins()--------\n");
        3:   42:    for (p = 0; p < numPlayer; p++)
        -:   43:    {
        -:   44:                
        2:   45:                bonus = rand()% maxBonus;
        2:   46:                handCount = 5;
        2:   47:                printf("Player #%d with %d treasure cards and %d bonus.\n", p, handCount, bonus);
        -:   48:
        2:   49:                memset(&test, 23, sizeof(struct gameState));   
        2:   50:                initializeGame(numPlayer, k, seed, &test); 
        2:   51:                test.handCount[p] = handCount;                 
        2:   52:                memcpy(test.hand[p], coppers, sizeof(int) * handCount); 
        2:   53:                updateCoins(p, &test, bonus);
        -:   54:
        2:   55:                printf("All Copper Coins = %d, expected = %d\n", test.coins, handCount * 1 + bonus);
        -:   56:
        2:   57:                if(test.coins == handCount * 1 + bonus){
        2:   58:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   59:                }
        -:   60:                else{
    #####:   61:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   62:                }
        -:   63:
        2:   64:                memcpy(test.hand[p], silvers, sizeof(int) * handCount); 
        2:   65:                updateCoins(p, &test, bonus);
        -:   66:
        2:   67:                printf("All Silver Coins = %d, expected = %d\n", test.coins, handCount * 2 + bonus);
        -:   68:
        2:   69:                 if(test.coins == handCount * 2 + bonus){
        2:   70:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   71:                }
        -:   72:                else{
    #####:   73:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   74:                }
        -:   75:                
        -:   76:
        2:   77:                memcpy(test.hand[p], golds, sizeof(int) * handCount); 
        2:   78:                updateCoins(p, &test, bonus);
        -:   79:
        2:   80:                printf("All Gold Coins = %d, expected = %d\n", test.coins, handCount * 3 + bonus);
        -:   81:
        2:   82:                 if(test.coins == handCount * 3 + bonus){
        2:   83:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   84:                }
        -:   85:                else{ 
    #####:   86:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   87:                }
        2:   88:                if(p==0){
        1:   89:                printf("----Now Testing 5 Treasured Card, Mixed Coins: %d gold, 1 silver and %d copper\n", v, w);
        1:   90:                bonus = rand()% maxBonus;
        1:   91:                memset(&test, 23, sizeof(struct gameState));   
        1:   92:                initializeGame(numPlayer, k, seed, &test);
        1:   93:                memcpy(test.hand[p], golds, sizeof(int) * v);
        1:   94:                memcpy(test.hand[p] + v, silvers, sizeof(int) * 1);
        1:   95:                memcpy(test.hand[p] + v + 1, coppers, sizeof(int) * w);
        -:   96:
        1:   97:                updateCoins(p, &test, bonus);
        -:   98:
        1:   99:                printf("All Coins = %d, expected = %d\n", test.coins, (v*3)+2+(w*1)+bonus);
        -:  100:
        1:  101:                 if(test.coins == (v*3)+2+(w*1)+bonus){
        1:  102:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:  103:                }
        -:  104:                else{ 
    #####:  105:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:  106:                }
        -:  107:
        -:  108:            }
        -:  109:             
        -:  110:            }
        -:  111:      
        -:  112:
        1:  113:    return 0;
        -:  114:}File 'unittest3.c'
Lines executed:86.96% of 46
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        -:   15:
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState test;
        -:   19:
        -:   20:    int reset;
        -:   21:  
        1:   22:    int seed = 1000;
        1:   23:    int totalPlayers = 2;
        -:   24:   
        -:   25:
        -:   26:    int result;
        -:   27:
        -:   28:   
        1:   29:    printf("\n--------Testing #1 for isGameOver function for no state change----------");
        -:   30:
        1:   31:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   32:
        1:   33:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   34:
        1:   35:    result = isGameOver(&test);
        -:   36:
        1:   37:    if(result == 0){
        1:   38:    	printf("\n>>>>>>SUCCESS: No change in game state: game continues");
        -:   39:    }
        -:   40:    else{
    #####:   41:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   42:    }
        -:   43:
        1:   44:    printf("\n--------Testing #2 for isGameOver function for province = 0----------");
        -:   45:
        1:   46:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   47:
        1:   48:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   49:    test.supplyCount[province] = 0;
        1:   50:    result = isGameOver(&test);
        -:   51:
        1:   52:    if(result == 1){
        1:   53:    	printf("\n>>>>>>SUCCESS: Province is out of supply: game ends");
        -:   54:    }
        -:   55:    else{
    #####:   56:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:   57:    }
        1:   58:    printf("\n--------Testing #3 for isGameOver function for province = 1----------");
        -:   59:
        1:   60:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   61:
        1:   62:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   63:    test.supplyCount[province] = 1;
        -:   64:
        1:   65:    result = isGameOver(&test);
        -:   66:
        1:   67:    if(result == 0){
        1:   68:    	printf("\n>>>>>>SUCCESS: Province has only 1 card left: game continues");
        -:   69:    }
        -:   70:    else{
    #####:   71:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   72:    }
        -:   73:
        1:   74:    printf("\n--------Testing #4 for isGameOver function for province = 1, one supply count is 0----------");
        1:   75:    test.supplyCount[adventurer] = 0;
        1:   76:    result = isGameOver(&test);
        -:   77:
        1:   78:    if(result == 0){
        1:   79:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   80:    }
        -:   81:    else{
    #####:   82:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   83:    }
        1:   84:    printf("\n--------Testing #5 for isGameOver function for province = 1, two supply count is 0----------");
        1:   85:    test.supplyCount[smithy] = 0;
        1:   86:    result = isGameOver(&test);
        -:   87:
        1:   88:    if(result == 0){
        1:   89:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   90:    }
        -:   91:    else{
    #####:   92:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   93:    }
        1:   94:    printf("\n--------Testing #6 for isGameOver function for province = 1, three supply count is 0----------");
        1:   95:    test.supplyCount[feast] = 0;
        1:   96:    result = isGameOver(&test);
        -:   97:
        1:   98:    if(result == 1){
        1:   99:    	printf("\n>>>>>>SUCCESS: Game must end!!!");
        -:  100:    }
        -:  101:    else{
    #####:  102:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:  103:    }
        -:  104:
        -:  105:
        1:  106:	return 0;
        -:  107:    
        -:  108:    
        -:  109:}File 'unittest4.c'
Lines executed:90.00% of 10
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for getCost()
        -:    3: *
        -:    4: * unittest4: unittest4.c dominion.o rngs.o
        -:    5: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:
        -:   16:
        1:   17:int main(){
        -:   18:	
        -:   19:	int i; 
        -:   20:	int value;
        1:   21:	int cardAmount = 27;
        -:   22:	char *availableCards[27]= {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", 
        -:   23:			"feast", "gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward",
        1:   24:			"tribute", "ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   25:
        1:   26:	int cardValue[27] = {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   27:
       28:   28:	for (i = 0; i < cardAmount; i++){
       27:   29:		value = getCost(i);
       27:   30:		if(value == cardValue[i]){
       27:   31:			printf(">>>>>Success:%s is the correct amount of %d\n", availableCards[i], cardValue[i]);
        -:   32:		}
        -:   33:			
        -:   34:		else
    #####:   35:			printf(">>>>>ERROR: %s is the incorrect amount.\n", availableCards[i]);
        -:   36:	}
        -:   37:
        1:   38:	return (0);
        -:   39:	
        -:   40:}File 'cardtest1.c'
Lines executed:85.42% of 48
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for smithy()
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "smithy"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        1:   22:    int xtraCoins = 0;
        1:   23:    int shuffledCards = 0;
        -:   24:
        -:   25:    
        1:   26:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   27:   
        1:   28:    int seed = 1000;
        1:   29:    int numPlayers = 2;
        1:   30:    int player1 = 0;
        1:   31:    int player2 = 1;
        -:   32:	struct gameState G, testG;
        -:   33:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   34:			sea_hag, tribute, smithy, council_room};
        -:   35:
        -:   36:	
        1:   37:	initializeGame(numPlayers, k, seed, &G);
        -:   38:
        1:   39:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   40:
        -:   41:	
        1:   42:	printf("TEST 1: choice1 = 0 = +3 cards\n");
        -:   43:
        -:   44:	// copy the game state to a test case
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:	
        1:   47:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   48:	newCards = 3;
        1:   49:	xtraCoins = 0;
        1:   50:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   51:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards + shuffledCards);
        1:   52:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   53:	printf("Player 1 coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   54:	//for player 2
        1:   55:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   56:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        1:   57:	printf("Player 2 discard count = %d, expected = %d\n", testG.discardCount[player2], G.discardCount[player2]);
        1:   58:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   59:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   60:	}
        -:   61:	else{
    #####:   62:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   63:	}
        1:   64:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   65:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   69:	}
        1:   70:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards + shuffledCards){
        1:   71:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
    #####:   74:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   75:	}
        1:   76:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   77:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   78:	}
        -:   79:	else{
    #####:   80:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   81:	}
        1:   82:	if(testG.discardCount[player1] == G.discardCount[player1] + 1){
    #####:   83:		printf("\n >>>>>> Success: Discard count of player1 is correct!!!");
        -:   84:	}
        -:   85:	else{
        1:   86:		printf("\n >>>>>> Fail: discardCount of player1 is incorrect!!!");
        -:   87:	}
        1:   88:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:   89:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:   90:	}
        -:   91:	else{
    #####:   92:		printf("\n >>>>>> Fail: discardCount of player2 is incorrect!!!");
        -:   93:	}
        1:   94:	if(testG.coins == G.coins + xtraCoins){
        1:   95:		printf("\n >>>>>> Success: Coin count of current player is correct!!!");
        -:   96:	}
        -:   97:	else{
    #####:   98:		printf("\n >>>>>> Fail: Coin count of current player is incorrect!!!");
        -:   99:	}
        -:  100:
        1:  101:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  102:
        -:  103:
        1:  104:	return 0;
        -:  105:}
File 'cardtest2.c'
Lines executed:84.62% of 52
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for adventurer()
        -:    3: *
        -:    4: * cardtest2: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest2 -g cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "adventurer"
        -:   18:
        1:   19:int main() {
        -:   20:   
        -:   21:    int i;
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        1:   25:    int player1 = 0;
        1:   26:    int player2 = 1;
        -:   27:	struct gameState G, testG;
        -:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   29:			sea_hag, tribute, smithy, council_room};
        -:   30:
        -:   31:	
        1:   32:	initializeGame(numPlayers, k, seed, &G);
        -:   33:
        1:   34:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   35:
        -:   36:	
        1:   37:	printf("TEST 1: choice1 = 0 = Reveal 2 treasure cards\n");
        -:   38:
        -:   39:	// copy the game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:	
        1:   42:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   43:
        -:   44:
        1:   45:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + 2 - 1);
        -:   46:
        -:   47:
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - (testG.discardCount[player1] + 2));
        -:   49:	
        1:   50:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   51:	int coinCardsTest = 0;
     8001:   52:	for(i=0; i < sizeof(testG.hand); i++){
     8000:   53:		if(testG.hand[player1][i] == gold || testG.hand[player1][i] == silver || testG.hand[player1][i] == copper){
       38:   54:			coinCardsTest++;
        -:   55:		}
        -:   56:	}
        1:   57:	int coinCardsG = 0;
     8001:   58:	for(i=0; i < sizeof(G.hand); i++){
     8000:   59:		if(G.hand[player1][i] == gold || G.hand[player1][i] == silver || G.hand[player1][i] == copper){
       36:   60:			coinCardsG++;
        -:   61:		}
        -:   62:	}
        -:   63:
        1:   64:	printf("Player 1 hand Treasure count = %d, expected = %d\n", coinCardsTest, coinCardsG + 2);
        -:   65:
        -:   66:
        -:   67:	//for player 2
        1:   68:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   69:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   70:	
        -:   71:
        -:   72:	//HandCount
        1:   73:	if(testG.handCount[player1] == G.handCount[player1] + 2 - 1){
    #####:   74:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   75:	}
        -:   76:	else{
        1:   77:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   78:	}
        -:   79:	//Deck Count, might be plus 2
        1:   80:	if(testG.deckCount[player1] == G.deckCount[player1] - (testG.discardCount[player1] + 1)){
    #####:   81:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   82:	}
        -:   83:	else{
        1:   84:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   85:	}
        -:   86:
        -:   87:	//Discard count
        1:   88:	if(testG.discardCount[player1] >= G.discardCount[player1] + 1){
    #####:   89:		printf("\n >>>>>> Success: Discard count of current player is correct!!!");
        -:   90:	}
        -:   91:	else{
        1:   92:		printf("\n >>>>>> Fail: Discard count of current player is incorrect!!!");
        -:   93:	}
        -:   94:	//Coin Count
        1:   95:	if(testG.coins > G.coins){
    #####:   96:		printf("\n >>>>>> Success: Coin count of player1 is correct!!!");
        -:   97:	}
        -:   98:	else{
        1:   99:		printf("\n >>>>>> Fail: Coin count of player1 is incorrect!!!");
        -:  100:	}
        -:  101:	
        1:  102:	if(coinCardsTest == coinCardsG + 2){
        1:  103:		printf("\n >>>>>> Success: Treasure Handcount of player1 is correct!!!");
        -:  104:	}
        -:  105:	else{
    #####:  106:		printf("\n >>>>>> Fail: Treasure Handcount of player1 is incorrect!!!");
        -:  107:	}
        -:  108:	//Player 2 Hand Count
        1:  109:	if(testG.handCount[player2] == G.handCount[player2]){
        1:  110:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:  111:	}
        -:  112:	else{
    #####:  113:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:  114:	}
        -:  115:	//Player 2 Deck Count
        1:  116:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:  117:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:  118:	}
        -:  119:	else{
    #####:  120:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:  121:	}
        -:  122:	//Discard Count
        1:  123:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:  124:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:  125:	}
        -:  126:	else{
    #####:  127:		printf("\n >>>>>> Fail: Discard count of player2 is incorrect!!!");
        -:  128:	}
        -:  129:	
        -:  130:
        1:  131:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  132:
        -:  133:
        1:  134:	return 0;
        -:  135:}
File 'cardtest3.c'
Lines executed:86.49% of 37
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for village()
        -:    3: *
        -:    4: * cardtest3: cardtest3.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "village"
        -:   18:
        1:   19:int main() {
        1:   20:    int newCards = 0;
        1:   21:    int discarded = 1;
        -:   22:   
        1:   23:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:  
        1:   25:    int seed = 1000;
        1:   26:    int numPlayers = 2;
        1:   27:    int player1 = 0;
        1:   28:    int player2 = 1;
        -:   29:	struct gameState G, testG;
        -:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   31:			sea_hag, tribute, smithy, council_room};
        -:   32:
        -:   33:	// initialize a game state and player cards
        1:   34:	initializeGame(numPlayers, k, seed, &G);
        -:   35:
        1:   36:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   37:
        -:   38:	
        1:   39:	printf("TEST 1: choice1 = 0 = +1 card & +2 actions.\n");
        -:   40:
        -:   41:	// copy the game state
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:	
        1:   44:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   45:	newCards = 1;
        -:   46:	
        -:   47:
        1:   48:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   49:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   50:	printf("Player 1 actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
        -:   51:	//for player 2
        1:   52:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   53:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   54:
        -:   55:	//Player 1 hand count
        1:   56:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   57:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   58:	}
        -:   59:	else{
    #####:   60:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   61:	}
        -:   62:	//Player 1 deck count
        1:   63:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   64:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   65:	}
        -:   66:	else{
    #####:   67:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   68:	}
        -:   69:	//Player 1 Number of actions
        1:   70:	if(testG.numActions== G.numActions + 1){
    #####:   71:		printf("\n >>>>>> Success: Number of Actions of current player is correct!!!");
        -:   72:	}
        -:   73:	else{
        1:   74:		printf("\n >>>>>> Fail: Number of Actions of current player is incorrect!!!");
        -:   75:	}
        -:   76:
        -:   77:	//Player 2 handcount
        1:   78:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   79:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   80:	}
        -:   81:	else{
    #####:   82:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   83:	}
        -:   84:	//Player 2 deck Count
        1:   85:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   86:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   87:	}
        -:   88:	else{
    #####:   89:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   90:	}
        -:   91:	
        -:   92:
        1:   93:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   94:
        -:   95:
        1:   96:	return 0;
        -:   97:}
File 'cardtest4.c'
Lines executed:86.84% of 38
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for council_room()
        -:    3: *
        -:    4: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "council_room"
        -:   17:
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        -:   21: 
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player1 = 0;
        1:   27:    int player2 = 1;
        -:   28:	struct gameState G, testG;
        -:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state
        1:   33:	initializeGame(numPlayers, k, seed, &G);
        -:   34:
        1:   35:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   36:
        -:   37:
        1:   38:	printf("TEST 1: choice1 = 0 = +4 cards, +1 buys, 1 additional card for every other player.\n");
        -:   39:
        -:   40:	// copy the game state to a test case
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:	
        1:   43:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   44:	newCards = 4;
        1:   45:	int newBuy = 1;
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   49:	printf("Player 1 buys = %d, expected = %d\n", testG.numBuys, G.numBuys + newBuy);
        -:   50:	//for player 2
        1:   51:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2] + 1);
        1:   52:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2] - 1);
        -:   53:
        -:   54:	//Player 1 hand count
        1:   55:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   56:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   57:	}
        -:   58:	else{
    #####:   59:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   60:	}
        -:   61:	//Player 1 deck count
        1:   62:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   63:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   64:	}
        -:   65:	else{
    #####:   66:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   67:	}
        -:   68:	//Player 1 Number of actions
        1:   69:	if(testG.numBuys== G.numBuys + 1){
        1:   70:		printf("\n >>>>>> Success: Number of Buys of current player is correct!!!");
        -:   71:	}
        -:   72:	else{
    #####:   73:		printf("\n >>>>>> Fail: Number of Buys of current player is incorrect!!!");
        -:   74:	}
        -:   75:
        -:   76:	//Player 2 handcount
        1:   77:	if(testG.handCount[player2] == G.handCount[player2] + 1){
        1:   78:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   79:	}
        -:   80:	else{
    #####:   81:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   82:	}
        -:   83:	//Player 2 deck Count
        1:   84:	if(testG.deckCount[player2] == G.deckCount[player2] - 1){
        1:   85:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   89:	}
        -:   90:	
        -:   91:
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
File 'dominion.c'
Lines executed:32.57% of 565
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
       16:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
       70:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
      310:  215:    card = floor(Random() * state->deckCount[player]);
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  672:	  shuffle(currentPlayer, state);
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
        -:  704:	    {
        1:  705:	      drawCard(i, state);
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
    #####:  727:	if (supplyCount(choice1, state) <= 0){
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
    #####:  736:	  printf("That card is too expensive!\n");
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
    #####:  879:		isGameOver(state);
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
    #####:  896:	    isGameOver(state);
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
        -:  956:			{
    #####:  957:			  drawCard(i, state);
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
    #####:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1038:	  drawCard(currentPlayer, state);
    #####: 1039:	  drawCard(currentPlayer, state);
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
    #####: 1184:	if (i != currentPlayer){
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'dominion.c'
Lines executed:32.57% of 565
Branches executed:35.73% of 417
Taken at least once:28.54% of 417
Calls executed:17.78% of 90
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 465 returned 100% blocks executed 83%
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 97%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 100%
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 31 returned 100% blocks executed 93%
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 81 returned 100% blocks executed 36%
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 12%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
call    0 returned 100%
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  704:	    {
        1:  705:	      drawCard(i, state);
call    0 returned 100%
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  879:		isGameOver(state);
call    0 never executed
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:	    isGameOver(state);
call    0 never executed
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
call    0 never executed
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  956:			{
    #####:  957:			  drawCard(i, state);
call    0 never executed
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  971:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1038:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1184:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
function discardCard called 3 returned 100% blocks executed 75%
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
function updateCoins called 21 returned 100% blocks executed 100%
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'unittest1.c'
Lines executed:74.38% of 121
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for initializeGame()
        -:    3: *
        -:    4: * unittest1
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        1:   13:int main() {
        -:   14:
        -:   15:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   16:               , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState test;
        -:   18:
        -:   19:    int i;
        -:   20:  
        1:   21:    int seed = 1000;
        -:   22:    int totalPlayers;
        -:   23:    int result;
        1:   24:    int testNum = 3;
        -:   25:
        1:   26:    printf("\n--------Testing for game initilization function----------");
        -:   27:
        1:   28:   	printf("\n--------Testing #1 for only one player----------");
        -:   29:
        1:   30:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   31:
        1:   32:   	totalPlayers = 1;
        -:   33:
        1:   34:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   35:
        1:   36:    if(result == -1){
        1:   37:    	printf("\n>>>>Success: one player is not enough to play the game!!!");
        -:   38:    }
        -:   39:    else{
    #####:   40:    	printf("\n>>>>Fail: one player alone cant play the game!!!");
        -:   41:    }
        -:   42:
        1:   43:    printf("\n--------Testing #2 for only five players----------");
        -:   44:
        1:   45:   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   46:
        1:   47:   	totalPlayers = 5;
        -:   48:
        1:   49:   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   50:
        1:   51:    if(result == -1){
        1:   52:    	printf("\n>>>>Success: five players is too much for the game!!!");
        -:   53:    }
        -:   54:    else{
    #####:   55:    	printf("\n>>>>Fail: five players cant play the game!!!");
        -:   56:    }
        -:   57:
        4:   58:    for(totalPlayers = 2; totalPlayers <=4; totalPlayers++){
        3:   59:    	printf("\n--------Testing #%d for only five players----------", testNum);
        -:   60:
        3:   61:    	testNum++;
        -:   62:
        3:   63:	   	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   64:
        3:   65:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   66:
        3:   67:	    if(result == 0){
        3:   68:    	printf("\n>>>>Success: %d players is enough for the game!!!", totalPlayers);
        -:   69:	    }
        -:   70:	    else{
    #####:   71:	    	printf("\n>>>>Fail: %d players are suppose to be able to play the game!!!", totalPlayers);
        -:   72:	    }
        3:   73:	    if(totalPlayers == 2){
        1:   74:	    	if(test.supplyCount[curse] == 10){
        1:   75:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:   76:	    	}
        -:   77:	    	else{
    #####:   78:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:   79:	    	}
        1:   80:	    	if(test.supplyCount[estate] == 8){
        1:   81:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:   82:	    	}
        -:   83:	    	else{
    #####:   84:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:   85:	    	}
        1:   86:	    	if(test.supplyCount[duchy] == 8){
        1:   87:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:   88:	    	}
        -:   89:	    	else{
    #####:   90:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:   91:	    	}
        1:   92:	    	if(test.supplyCount[province] == 8){
        1:   93:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:   94:	    	}
        -:   95:	    	else{
    #####:   96:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:   97:	    	}
        1:   98:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:   99:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  100:	    	}
        -:  101:	    	else{
    #####:  102:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  103:	    	}
        1:  104:	    	if(test.supplyCount[silver] == 40){
        1:  105:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  106:	    	}
        -:  107:	    	else{
    #####:  108:	    		printf("\n>>>Fail: supply count for silver is incorrect!!!");
        -:  109:	    	}
        1:  110:	    	if(test.supplyCount[gold] == 30){
        1:  111:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  112:	    	}
        -:  113:	    	else{
    #####:  114:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  115:	    	}
        -:  116:	    }
        3:  117:	    if(totalPlayers == 3){
        1:  118:	    	if(test.supplyCount[curse] == 20){
        1:  119:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  120:	    	}
        -:  121:	    	else{
    #####:  122:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  123:	    	}
        1:  124:	    	if(test.supplyCount[estate] == 12){
        1:  125:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  126:	    	}
        -:  127:	    	else{
    #####:  128:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  129:	    	}
        1:  130:	    	if(test.supplyCount[duchy] == 12){
        1:  131:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  132:	    	}
        -:  133:	    	else{
    #####:  134:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  135:	    	}
        1:  136:	    	if(test.supplyCount[province] == 12){
        1:  137:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  138:	    	}
        -:  139:	    	else{
    #####:  140:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  141:	    	}
        1:  142:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  143:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  144:	    	}
        -:  145:	    	else{
    #####:  146:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  147:	    	}
        1:  148:	    	if(test.supplyCount[silver] == 40){
        1:  149:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  150:	    	}
        -:  151:	    	else{
    #####:  152:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  153:	    	}
        1:  154:	    	if(test.supplyCount[gold] == 30){
        1:  155:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  156:	    	}
        -:  157:	    	else{
    #####:  158:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  159:	    	}
        -:  160:	    }
        3:  161:	    if(totalPlayers == 4){
        1:  162:	    	if(test.supplyCount[curse] == 30){
        1:  163:	    		printf("\n>>>>SUCCESS: supply count for curse is correct!!!");
        -:  164:	    	}
        -:  165:	    	else{
    #####:  166:	    		printf("\n>>>>Fail: supply count for curse is incorrect!!!");
        -:  167:	    	}
        1:  168:	    	if(test.supplyCount[estate] == 12){
        1:  169:	    		printf("\n>>>>SUCCESS: supply count for estate is correct!!!");
        -:  170:	    	}
        -:  171:	    	else{
    #####:  172:	    		printf("\n>>>>Fail: supply count for estate is incorrect!!!");
        -:  173:	    	}
        1:  174:	    	if(test.supplyCount[duchy] == 12){
        1:  175:	    		printf("\n>>>>SUCCESS: supply count for duchy is correct!!!");
        -:  176:	    	}
        -:  177:	    	else{
    #####:  178:	    		printf("\n>>>>Fail: supply count for duchy is incorrect!!!");
        -:  179:	    	}
        1:  180:	    	if(test.supplyCount[province] == 12){
        1:  181:	    		printf("\n>>>>SUCCESS: supply count for province is correct!!!");
        -:  182:	    	}
        -:  183:	    	else{
    #####:  184:	    		printf("\n>>>>Fail: supply count for province is incorrect!!!");
        -:  185:	    	}
        1:  186:	    	if(test.supplyCount[copper] == 60 - (7 * totalPlayers)){
        1:  187:	    		printf("\n>>>>SUCCESS: supply count for copper is correct!!!");
        -:  188:	    	}
        -:  189:	    	else{
    #####:  190:	    		printf("\n>>>>Fail: supply count for copper is incorrect!!!");
        -:  191:	    	}
        1:  192:	    	if(test.supplyCount[silver] == 40){
        1:  193:	    		printf("\n>>>>SUCCESS: supply count for silver is correct!!!");
        -:  194:	    	}
        -:  195:	    	else{
    #####:  196:	    		printf("\n>>>>Fail: supply count for silver is incorrect!!!");
        -:  197:	    	}
        1:  198:	    	if(test.supplyCount[gold] == 30){
        1:  199:	    		printf("\n>>>>SUCCESS: supply count for gold is correct!!!");
        -:  200:	    	}
        -:  201:	    	else{
    #####:  202:	    		printf("\n>>>>Fail: supply count for gold is incorrect!!!");
        -:  203:	    	}
        -:  204:	    }
        -:  205:
        -:  206:    }
        1:  207:    	totalPlayers = 2;
        1:  208:    	memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:  209:
        1:  210:	   	result = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:  211:
        1:  212:	   	printf("\n-------Test if kingdom cards are correct amount-----");
        -:  213:
        1:  214:	   	if(test.supplyCount[adventurer] == 10){
        1:  215:	   		printf("\n>>>>SUCCESS: supply count for adventurer is correct!!!");
        -:  216:	   	}
        -:  217:	   	else{
    #####:  218:	    	printf("\n>>>>Fail: supply count for adventurer is incorrect!!!");
        -:  219:	    	}
        1:  220:	    if(test.supplyCount[gardens] == 8){
        1:  221:	   		printf("\n>>>>SUCCESS: supply count for gardens is correct!!!");
        -:  222:	   	}
        -:  223:	   	else{
    #####:  224:	    	printf("\n>>>>Fail: supply count for gardens is incorrect!!!");
        -:  225:	    	}
        -:  226:
        3:  227:	    for(i =0; i < totalPlayers; i++){
        -:  228:			
        2:  229:			if(i==0){
        1:  230:				if(test.handCount[i] == 5){
        1:  231:					printf("\n>>>>SUCCESS: Player #%d hand count is 5!!!", i+1);
        -:  232:				}
        -:  233:				else{
    #####:  234:					printf("\n>>>>Fail: Player #%d hand count is not 5!!!", i+1);
        -:  235:					}
        -:  236:			}
        -:  237:			else{
        1:  238:				if(test.handCount[i] == 0){
        1:  239:					printf("\n>>>>SUCCESS: Player #%d hand count is empty!!!", i+1);
        -:  240:				}
        -:  241:				else{
    #####:  242:					printf("\n>>>>Fail: Player #%d hand count is not empty!!!", i+1);
        -:  243:					}
        -:  244:			}
        2:  245:		    if(test.discardCount[i] == 0){
        2:  246:		    	printf("\n>>>>SUCCESS: Player #%d discardCount is empty!!!", i+1);
        -:  247:		    }
        -:  248:		    else{
    #####:  249:		    	printf("\n>>>>Fail: Player #%d discardCount is not empty!!!", i+1);
        -:  250:		    	}
        -:  251:
        -:  252:	    }
        -:  253:
        1:  254:	    if(test.numActions == 1){
        1:  255:	   		printf("\n>>>>SUCCESS: Number of actions is correct!!!");
        -:  256:	   	}
        -:  257:	   	else{
    #####:  258:	    	printf("\n>>>>Fail: Number of actions is inrrect!!!");
        -:  259:	    	}
        -:  260:
        1:  261:	    if(test.numBuys == 1){
        1:  262:	   		printf("\n>>>>SUCCESS: Number of buys is correct!!!\n\n");
        -:  263:	   	}
        -:  264:	   	else{
    #####:  265:	    	printf("\n>>>>Fail: Number of buys is inrrect!!!");
        -:  266:	    	}
        -:  267:		/*
        -:  268:		if(test.handCount[0] == 5){
        -:  269:		    	printf("\n>>>>SUCCESS: Player #1 hand count contains 5 cards!!!");
        -:  270:		    }
        -:  271:		else{
        -:  272:		    printf("\n>>>>Fail: Player #1 hand count does contains 5 cards!!!");
        -:  273:		    	}
        -:  274:				
        -:  275:		if(test.handCount[1] == 0){
        -:  276:		    	printf("\n>>>>SUCCESS: Player #2 hand count is empty!!!");
        -:  277:		    }
        -:  278:		else{
        -:  279:		    printf("\n>>>>Fail: Player #2 hand count is not empty to start!!!");
        -:  280:		    	}
        -:  281:		*/
        -:  282:
        -:  283:
        -:  284:
        -:  285:
        1:  286:    return 0;
        -:  287:}File 'unittest2.c'
Lines executed:92.31% of 52
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for updateCoins()
        -:    3: * unittest2
        -:    4: * -----------------------------------------------------------------------
        -:    5: */
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:
        -:   15:
        1:   16:int main() {
        -:   17:    int i;
        1:   18:    int seed = 1000;
        1:   19:    int numPlayer = 2;
        1:   20:    int maxBonus = 10;
        -:   21:    int p, r, handCount;
        -:   22:    int bonus;
        -:   23:    int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   24:               , remodel, smithy, village, baron, great_hall};
        -:   25:    struct gameState test;
        1:   26:    int maxHandCount = 5;
        -:   27:    
        -:   28:    int coppers[MAX_HAND];
        -:   29:    int silvers[MAX_HAND];
        -:   30:    int golds[MAX_HAND];
      501:   31:    for (i = 0; i < MAX_HAND; i++)
        -:   32:    {
      500:   33:        coppers[i] = copper;
      500:   34:        silvers[i] = silver;
      500:   35:        golds[i] = gold;
        -:   36:    }
        1:   37:    int v =2;
        1:   38:    int w = 2;
        1:   39:    printf ("-------TESTING updateCoins()--------\n");
        3:   40:    for (p = 0; p < numPlayer; p++)
        -:   41:    {
        -:   42:                
        2:   43:                bonus = rand()% maxBonus;
        2:   44:                handCount = 5;
        2:   45:                printf("Player #%d with %d treasure cards and %d bonus.\n", p, handCount, bonus);
        -:   46:
        2:   47:                memset(&test, 23, sizeof(struct gameState));   
        2:   48:                initializeGame(numPlayer, k, seed, &test); 
        2:   49:                test.handCount[p] = handCount;                 
        2:   50:                memcpy(test.hand[p], coppers, sizeof(int) * handCount); 
        2:   51:                updateCoins(p, &test, bonus);
        -:   52:
        2:   53:                printf("All Copper Coins = %d, expected = %d\n", test.coins, handCount * 1 + bonus);
        -:   54:
        2:   55:                if(test.coins == handCount * 1 + bonus){
        2:   56:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   57:                }
        -:   58:                else{
    #####:   59:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   60:                }
        -:   61:
        2:   62:                memcpy(test.hand[p], silvers, sizeof(int) * handCount); 
        2:   63:                updateCoins(p, &test, bonus);
        -:   64:
        2:   65:                printf("All Silver Coins = %d, expected = %d\n", test.coins, handCount * 2 + bonus);
        -:   66:
        2:   67:                 if(test.coins == handCount * 2 + bonus){
        2:   68:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   69:                }
        -:   70:                else{
    #####:   71:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   72:                }
        -:   73:                
        -:   74:
        2:   75:                memcpy(test.hand[p], golds, sizeof(int) * handCount); 
        2:   76:                updateCoins(p, &test, bonus);
        -:   77:
        2:   78:                printf("All Gold Coins = %d, expected = %d\n", test.coins, handCount * 3 + bonus);
        -:   79:
        2:   80:                 if(test.coins == handCount * 3 + bonus){
        2:   81:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:   82:                }
        -:   83:                else{ 
    #####:   84:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:   85:                }
        2:   86:                if(p==0){
        1:   87:                printf("----Now Testing 5 Treasured Card, Mixed Coins: %d gold, 1 silver and %d copper\n", v, w);
        1:   88:                bonus = rand()% maxBonus;
        1:   89:                memset(&test, 23, sizeof(struct gameState));   
        1:   90:                initializeGame(numPlayer, k, seed, &test);
        1:   91:                memcpy(test.hand[p], golds, sizeof(int) * v);
        1:   92:                memcpy(test.hand[p] + v, silvers, sizeof(int) * 1);
        1:   93:                memcpy(test.hand[p] + v + 1, coppers, sizeof(int) * w);
        -:   94:
        1:   95:                updateCoins(p, &test, bonus);
        -:   96:
        1:   97:                printf("All Coins = %d, expected = %d\n", test.coins, (v*3)+2+(w*1)+bonus);
        -:   98:
        1:   99:                 if(test.coins == (v*3)+2+(w*1)+bonus){
        1:  100:                    printf(">>>SUCCESS: Coins are equal!!!\n");
        -:  101:                }
        -:  102:                else{ 
    #####:  103:                    printf(">>>FAIL: Coins are not equal!!!\n");
        -:  104:                }
        -:  105:
        -:  106:            }
        -:  107:             
        -:  108:            }
        -:  109:      
        -:  110:
        1:  111:    return 0;
        -:  112:}File 'unittest3.c'
Lines executed:86.96% of 46
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for isGameOver()
        -:    3: *
        -:    4: * unittest3
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include "rngs.h"
        -:   12:
        1:   13:int main() {
        -:   14:
        -:   15:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   16:               , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState test;
        -:   18:
        -:   19:    int reset;
        -:   20:  
        1:   21:    int seed = 1000;
        1:   22:    int totalPlayers = 2;
        -:   23:   
        -:   24:
        -:   25:    int result;
        -:   26:
        -:   27:   
        1:   28:    printf("\n--------Testing #1 for isGameOver function for no state change----------");
        -:   29:
        1:   30:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   31:
        1:   32:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        -:   33:
        1:   34:    result = isGameOver(&test);
        -:   35:
        1:   36:    if(result == 0){
        1:   37:    	printf("\n>>>>>>SUCCESS: No change in game state: game continues");
        -:   38:    }
        -:   39:    else{
    #####:   40:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   41:    }
        -:   42:
        1:   43:    printf("\n--------Testing #2 for isGameOver function for province = 0----------");
        -:   44:
        1:   45:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   46:
        1:   47:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   48:    test.supplyCount[province] = 0;
        1:   49:    result = isGameOver(&test);
        -:   50:
        1:   51:    if(result == 1){
        1:   52:    	printf("\n>>>>>>SUCCESS: Province is out of supply: game ends");
        -:   53:    }
        -:   54:    else{
    #####:   55:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:   56:    }
        1:   57:    printf("\n--------Testing #3 for isGameOver function for province = 1----------");
        -:   58:
        1:   59:    memset(&test, 23, sizeof(struct gameState));   // clear the game state
        -:   60:
        1:   61:    reset = initializeGame(totalPlayers, k, seed, &test); // initialize a new game
        1:   62:    test.supplyCount[province] = 1;
        -:   63:
        1:   64:    result = isGameOver(&test);
        -:   65:
        1:   66:    if(result == 0){
        1:   67:    	printf("\n>>>>>>SUCCESS: Province has only 1 card left: game continues");
        -:   68:    }
        -:   69:    else{
    #####:   70:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   71:    }
        -:   72:
        1:   73:    printf("\n--------Testing #4 for isGameOver function for province = 1, one supply count is 0----------");
        1:   74:    test.supplyCount[adventurer] = 0;
        1:   75:    result = isGameOver(&test);
        -:   76:
        1:   77:    if(result == 0){
        1:   78:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   79:    }
        -:   80:    else{
    #####:   81:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   82:    }
        1:   83:    printf("\n--------Testing #5 for isGameOver function for province = 1, two supply count is 0----------");
        1:   84:    test.supplyCount[smithy] = 0;
        1:   85:    result = isGameOver(&test);
        -:   86:
        1:   87:    if(result == 0){
        1:   88:    	printf("\n>>>>>>SUCCESS: Game must continue!!!");
        -:   89:    }
        -:   90:    else{
    #####:   91:    	printf("\n>>>>>>Fail: Game was not suppose to end!!!");
        -:   92:    }
        1:   93:    printf("\n--------Testing #6 for isGameOver function for province = 1, three supply count is 0----------");
        1:   94:    test.supplyCount[feast] = 0;
        1:   95:    result = isGameOver(&test);
        -:   96:
        1:   97:    if(result == 1){
        1:   98:    	printf("\n>>>>>>SUCCESS: Game must end!!!");
        -:   99:    }
        -:  100:    else{
    #####:  101:    	printf("\n>>>>>>Fail: Game was suppose to end!!!");
        -:  102:    }
        -:  103:
        -:  104:
        1:  105:	return 0;
        -:  106:    
        -:  107:    
        -:  108:}File 'unittest4.c'
Lines executed:90.00% of 10
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for getCost()
        -:    3: *
        -:    4: * unittest4
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:
        -:   15:
        1:   16:int main(){
        -:   17:	
        -:   18:	int i; 
        -:   19:	int value;
        1:   20:	int cardAmount = 27;
        -:   21:	char *availableCards[27]= {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", 
        -:   22:			"feast", "gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward",
        1:   23:			"tribute", "ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   24:
        1:   25:	int cardValue[27] = {0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   26:
       28:   27:	for (i = 0; i < cardAmount; i++){
       27:   28:		value = getCost(i);
       27:   29:		if(value == cardValue[i]){
       27:   30:			printf(">>>>>Success:%s is the correct amount of %d\n", availableCards[i], cardValue[i]);
        -:   31:		}
        -:   32:			
        -:   33:		else
    #####:   34:			printf(">>>>>ERROR: %s is the incorrect amount.\n", availableCards[i]);
        -:   35:	}
        -:   36:
        1:   37:	return (0);
        -:   38:	
        -:   39:}File 'cardtest1.c'
Lines executed:85.42% of 48
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for smithy()
        -:    3: *
        -:    4: * cardtest1
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "smithy"
        -:   17:
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        1:   21:    int xtraCoins = 0;
        1:   22:    int shuffledCards = 0;
        -:   23:
        -:   24:    
        1:   25:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   26:   
        1:   27:    int seed = 1000;
        1:   28:    int numPlayers = 2;
        1:   29:    int player1 = 0;
        1:   30:    int player2 = 1;
        -:   31:	struct gameState G, testG;
        -:   32:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   33:			sea_hag, tribute, smithy, council_room};
        -:   34:
        -:   35:	
        1:   36:	initializeGame(numPlayers, k, seed, &G);
        -:   37:
        1:   38:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   39:
        -:   40:	
        1:   41:	printf("TEST 1: choice1 = 0 = +3 cards\n");
        -:   42:
        -:   43:	// copy the game state to a test case
        1:   44:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:	
        1:   46:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   47:	newCards = 3;
        1:   48:	xtraCoins = 0;
        1:   49:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   50:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards + shuffledCards);
        1:   51:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   52:	printf("Player 1 coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   53:	//for player 2
        1:   54:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   55:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        1:   56:	printf("Player 2 discard count = %d, expected = %d\n", testG.discardCount[player2], G.discardCount[player2]);
        1:   57:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   58:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   59:	}
        -:   60:	else{
    #####:   61:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   62:	}
        1:   63:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   64:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   65:	}
        -:   66:	else{
    #####:   67:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   68:	}
        1:   69:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards + shuffledCards){
        1:   70:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   71:	}
        -:   72:	else{
    #####:   73:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   74:	}
        1:   75:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   76:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   77:	}
        -:   78:	else{
    #####:   79:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   80:	}
        1:   81:	if(testG.discardCount[player1] == G.discardCount[player1] + 1){
    #####:   82:		printf("\n >>>>>> Success: Discard count of player1 is correct!!!");
        -:   83:	}
        -:   84:	else{
        1:   85:		printf("\n >>>>>> Fail: discardCount of player1 is incorrect!!!");
        -:   86:	}
        1:   87:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:   88:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:   89:	}
        -:   90:	else{
    #####:   91:		printf("\n >>>>>> Fail: discardCount of player2 is incorrect!!!");
        -:   92:	}
        1:   93:	if(testG.coins == G.coins + xtraCoins){
        1:   94:		printf("\n >>>>>> Success: Coin count of current player is correct!!!");
        -:   95:	}
        -:   96:	else{
    #####:   97:		printf("\n >>>>>> Fail: Coin count of current player is incorrect!!!");
        -:   98:	}
        -:   99:
        1:  100:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  101:
        -:  102:
        1:  103:	return 0;
        -:  104:}
File 'cardtest2.c'
Lines executed:84.62% of 52
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for adventurer()
        -:    3: *
        -:    4: * cardtest2
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "adventurer"
        -:   17:
        1:   18:int main() {
        -:   19:   
        -:   20:    int i;
        1:   21:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayers = 2;
        1:   24:    int player1 = 0;
        1:   25:    int player2 = 1;
        -:   26:	struct gameState G, testG;
        -:   27:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   28:			sea_hag, tribute, smithy, council_room};
        -:   29:
        -:   30:	
        1:   31:	initializeGame(numPlayers, k, seed, &G);
        -:   32:
        1:   33:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   34:
        -:   35:	
        1:   36:	printf("TEST 1: choice1 = 0 = Reveal 2 treasure cards\n");
        -:   37:
        -:   38:	// copy the game state to a test case
        1:   39:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   40:	
        1:   41:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   42:
        -:   43:
        1:   44:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + 2 - 1);
        -:   45:
        -:   46:
        1:   47:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - (testG.discardCount[player1] + 2));
        -:   48:	
        1:   49:	printf("Player 1 discard count = %d, expected = %d\n", testG.discardCount[player1], G.discardCount[player1] + 1);
        1:   50:	int coinCardsTest = 0;
     8001:   51:	for(i=0; i < sizeof(testG.hand); i++){
     8000:   52:		if(testG.hand[player1][i] == gold || testG.hand[player1][i] == silver || testG.hand[player1][i] == copper){
       38:   53:			coinCardsTest++;
        -:   54:		}
        -:   55:	}
        1:   56:	int coinCardsG = 0;
     8001:   57:	for(i=0; i < sizeof(G.hand); i++){
     8000:   58:		if(G.hand[player1][i] == gold || G.hand[player1][i] == silver || G.hand[player1][i] == copper){
       36:   59:			coinCardsG++;
        -:   60:		}
        -:   61:	}
        -:   62:
        1:   63:	printf("Player 1 hand Treasure count = %d, expected = %d\n", coinCardsTest, coinCardsG + 2);
        -:   64:
        -:   65:
        -:   66:	//for player 2
        1:   67:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   68:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   69:	
        -:   70:
        -:   71:	//HandCount
        1:   72:	if(testG.handCount[player1] == G.handCount[player1] + 2 - 1){
    #####:   73:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   74:	}
        -:   75:	else{
        1:   76:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   77:	}
        -:   78:	//Deck Count, might be plus 2
        1:   79:	if(testG.deckCount[player1] == G.deckCount[player1] - (testG.discardCount[player1] + 1)){
    #####:   80:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   81:	}
        -:   82:	else{
        1:   83:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   84:	}
        -:   85:
        -:   86:	//Discard count
        1:   87:	if(testG.discardCount[player1] >= G.discardCount[player1] + 1){
    #####:   88:		printf("\n >>>>>> Success: Discard count of current player is correct!!!");
        -:   89:	}
        -:   90:	else{
        1:   91:		printf("\n >>>>>> Fail: Discard count of current player is incorrect!!!");
        -:   92:	}
        -:   93:	//Coin Count
        1:   94:	if(testG.coins > G.coins){
    #####:   95:		printf("\n >>>>>> Success: Coin count of player1 is correct!!!");
        -:   96:	}
        -:   97:	else{
        1:   98:		printf("\n >>>>>> Fail: Coin count of player1 is incorrect!!!");
        -:   99:	}
        -:  100:	
        1:  101:	if(coinCardsTest == coinCardsG + 2){
        1:  102:		printf("\n >>>>>> Success: Treasure Handcount of player1 is correct!!!");
        -:  103:	}
        -:  104:	else{
    #####:  105:		printf("\n >>>>>> Fail: Treasure Handcount of player1 is incorrect!!!");
        -:  106:	}
        -:  107:	//Player 2 Hand Count
        1:  108:	if(testG.handCount[player2] == G.handCount[player2]){
        1:  109:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:  110:	}
        -:  111:	else{
    #####:  112:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:  113:	}
        -:  114:	//Player 2 Deck Count
        1:  115:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:  116:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:  117:	}
        -:  118:	else{
    #####:  119:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:  120:	}
        -:  121:	//Discard Count
        1:  122:	if(testG.discardCount[player2] == G.discardCount[player2]){
        1:  123:		printf("\n >>>>>> Success: Discard count of player2 is correct!!!");
        -:  124:	}
        -:  125:	else{
    #####:  126:		printf("\n >>>>>> Fail: Discard count of player2 is incorrect!!!");
        -:  127:	}
        -:  128:	
        -:  129:
        1:  130:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  131:
        -:  132:
        1:  133:	return 0;
        -:  134:}
File 'cardtest3.c'
Lines executed:86.49% of 37
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for village()
        -:    3: *
        -:    4: * cardtest3
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:#define TESTCARD "village"
        -:   17:
        1:   18:int main() {
        1:   19:    int newCards = 0;
        1:   20:    int discarded = 1;
        -:   21:   
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:  
        1:   24:    int seed = 1000;
        1:   25:    int numPlayers = 2;
        1:   26:    int player1 = 0;
        1:   27:    int player2 = 1;
        -:   28:	struct gameState G, testG;
        -:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state and player cards
        1:   33:	initializeGame(numPlayers, k, seed, &G);
        -:   34:
        1:   35:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   36:
        -:   37:	
        1:   38:	printf("TEST 1: choice1 = 0 = +1 card & +2 actions.\n");
        -:   39:
        -:   40:	// copy the game state
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:	
        1:   43:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   44:	newCards = 1;
        -:   45:	
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   48:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   49:	printf("Player 1 actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
        -:   50:	//for player 2
        1:   51:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2]);
        1:   52:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2]);
        -:   53:
        -:   54:	//Player 1 hand count
        1:   55:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   56:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   57:	}
        -:   58:	else{
    #####:   59:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   60:	}
        -:   61:	//Player 1 deck count
        1:   62:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   63:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   64:	}
        -:   65:	else{
    #####:   66:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   67:	}
        -:   68:	//Player 1 Number of actions
        1:   69:	if(testG.numActions== G.numActions + 1){
    #####:   70:		printf("\n >>>>>> Success: Number of Actions of current player is correct!!!");
        -:   71:	}
        -:   72:	else{
        1:   73:		printf("\n >>>>>> Fail: Number of Actions of current player is incorrect!!!");
        -:   74:	}
        -:   75:
        -:   76:	//Player 2 handcount
        1:   77:	if(testG.handCount[player2] == G.handCount[player2]){
        1:   78:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   79:	}
        -:   80:	else{
    #####:   81:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   82:	}
        -:   83:	//Player 2 deck Count
        1:   84:	if(testG.deckCount[player2] == G.deckCount[player2]){
        1:   85:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   89:	}
        -:   90:	
        -:   91:
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
File 'cardtest4.c'
Lines executed:86.84% of 38
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Test is for council_room()
        -:    3: *
        -:    4: * cardtest4
        -:    5: * -----------------------------------------------------------------------
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:
        -:   15:#define TESTCARD "council_room"
        -:   16:
        1:   17:int main() {
        1:   18:    int newCards = 0;
        1:   19:    int discarded = 1;
        -:   20: 
        1:   21:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   22:
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        1:   25:    int player1 = 0;
        1:   26:    int player2 = 1;
        -:   27:	struct gameState G, testG;
        -:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        1:   29:			sea_hag, tribute, smithy, council_room};
        -:   30:
        -:   31:	// initialize a game state
        1:   32:	initializeGame(numPlayers, k, seed, &G);
        -:   33:
        1:   34:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   35:
        -:   36:
        1:   37:	printf("TEST 1: choice1 = 0 = +4 cards, +1 buys, 1 additional card for every other player.\n");
        -:   38:
        -:   39:	// copy the game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:	
        1:   42:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   43:	newCards = 4;
        1:   44:	int newBuy = 1;
        -:   45:
        1:   46:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[player1], G.handCount[player1] + newCards - discarded);
        1:   47:	printf("Player 1 deck count = %d, expected = %d\n", testG.deckCount[player1], G.deckCount[player1] - newCards);
        1:   48:	printf("Player 1 buys = %d, expected = %d\n", testG.numBuys, G.numBuys + newBuy);
        -:   49:	//for player 2
        1:   50:	printf("Player 2 hand count = %d, expected = %d\n", testG.handCount[player2], G.handCount[player2] + 1);
        1:   51:	printf("Player 2 deck count = %d, expected = %d\n", testG.deckCount[player2], G.deckCount[player2] - 1);
        -:   52:
        -:   53:	//Player 1 hand count
        1:   54:	if(testG.handCount[player1] == G.handCount[player1] + newCards - discarded){
        1:   55:		printf("\n >>>>>> Success: Handcount of current player is correct!!!");
        -:   56:	}
        -:   57:	else{
    #####:   58:		printf("\n >>>>>> Fail: Handcount of current player is incorrect!!!");
        -:   59:	}
        -:   60:	//Player 1 deck count
        1:   61:	if(testG.deckCount[player1] == G.deckCount[player1] - newCards){
        1:   62:		printf("\n >>>>>> Success: Deck count of current player is correct!!!");
        -:   63:	}
        -:   64:	else{
    #####:   65:		printf("\n >>>>>> Fail: Deck count of current player is incorrect!!!");
        -:   66:	}
        -:   67:	//Player 1 Number of actions
        1:   68:	if(testG.numBuys== G.numBuys + 1){
        1:   69:		printf("\n >>>>>> Success: Number of Buys of current player is correct!!!");
        -:   70:	}
        -:   71:	else{
    #####:   72:		printf("\n >>>>>> Fail: Number of Buys of current player is incorrect!!!");
        -:   73:	}
        -:   74:
        -:   75:	//Player 2 handcount
        1:   76:	if(testG.handCount[player2] == G.handCount[player2] + 1){
        1:   77:		printf("\n >>>>>> Success: Handcount of player2 is correct!!!");
        -:   78:	}
        -:   79:	else{
    #####:   80:		printf("\n >>>>>> Fail: Handcount of player2 is incorrect!!!");
        -:   81:	}
        -:   82:	//Player 2 deck Count
        1:   83:	if(testG.deckCount[player2] == G.deckCount[player2] - 1){
        1:   84:		printf("\n >>>>>> Success: Deck count of player2 is correct!!!");
        -:   85:	}
        -:   86:	else{
    #####:   87:		printf("\n >>>>>> Fail: Deck count of player2 is incorrect!!!");
        -:   88:	}
        -:   89:	
        -:   90:
        1:   91:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   92:
        -:   93:
        1:   94:	return 0;
        -:   95:}
File 'dominion.c'
Lines executed:32.57% of 565
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
       16:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
       70:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
      310:  215:    card = floor(Random() * state->deckCount[player]);
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  672:	  shuffle(currentPlayer, state);
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
        -:  704:	    {
        1:  705:	      drawCard(i, state);
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
    #####:  727:	if (supplyCount(choice1, state) <= 0){
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
    #####:  736:	  printf("That card is too expensive!\n");
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
    #####:  879:		isGameOver(state);
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
    #####:  896:	    isGameOver(state);
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
        -:  956:			{
    #####:  957:			  drawCard(i, state);
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
    #####:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1038:	  drawCard(currentPlayer, state);
    #####: 1039:	  drawCard(currentPlayer, state);
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
    #####: 1184:	if (i != currentPlayer){
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
File 'dominion.c'
Lines executed:32.57% of 565
Branches executed:35.73% of 417
Taken at least once:28.54% of 417
Calls executed:17.78% of 90
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 465 returned 100% blocks executed 83%
      465:    8:int compare(const void* a, const void* b) {
      465:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      465:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      124:   12:    return -1;
      341:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 97%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 100%
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       45:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
       31:  140:      state->deckCount[i] = 0;
      124:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       93:  143:	  state->deck[i][j] = estate;
       93:  144:	  state->deckCount[i]++;
        -:  145:	}
      248:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      217:  148:	  state->deck[i][j] = copper;
      217:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       45:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
       31:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       31:  166:      state->handCount[i] = 0;
       31:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 31 returned 100% blocks executed 93%
       31:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       31:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       31:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      372:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      310:  216:    newDeck[newDeckPos] = state->deck[player][card];
      310:  217:    newDeckPos++;
     1084:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      774:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      310:  221:    state->deckCount[player]--;
        -:  222:  }
      341:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      310:  224:    state->deck[player][i] = newDeck[i];
      310:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 81 returned 100% blocks executed 36%
       81:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       81:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       81:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       81:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       81:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  576:    state->deckCount[player]--;
       81:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       81:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 12%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  672:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  673:	}
        2:  674:	drawCard(currentPlayer, state);
call    0 returned 100%
        2:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
        2:  684:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
        1:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
        5:  692:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  693:	{
        4:  694:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
        1:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
        3:  701:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  702:	{
        2:  703:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  704:	    {
        1:  705:	      drawCard(i, state);
call    0 returned 100%
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
        1:  710:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  711:			
        1:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  727:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  737:
    #####:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
    #####:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
        4:  833:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  834:	{
        3:  835:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
        1:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
        1:  844:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  845:			
        -:  846:      //+2 Actions
        1:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
        1:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  879:		isGameOver(state);
call    0 never executed
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:	    isGameOver(state);
call    0 never executed
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
call    0 never executed
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  956:			{
    #####:  957:			  drawCard(i, state);
call    0 never executed
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  971:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1038:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
    #####: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1184:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
function discardCard called 3 returned 100% blocks executed 75%
        3: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
        3: 1230:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1231:    {
        -: 1232:      //add card to played pile
        3: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
        3: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
        3: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        3: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
        3: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
        3: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
        3: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
        3: 1261:  return 0;
        -: 1262:}
        -: 1263:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
function updateCoins called 21 returned 100% blocks executed 100%
       21: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       21: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      126: 1309:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1310:    {
      105: 1311:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1312:	{
       68: 1313:	  state->coins += 1;
        -: 1314:	}
       37: 1315:      else if (state->hand[player][i] == silver)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 1316:	{
       11: 1317:	  state->coins += 2;
        -: 1318:	}
       26: 1319:      else if (state->hand[player][i] == gold)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1320:	{
       12: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       21: 1326:  state->coins += bonus;
        -: 1327:
       21: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
        -: 1333:
