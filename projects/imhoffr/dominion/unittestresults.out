----------------- Testing Function: isGameOver() ----------------
TEST 1: Game is over when no provinces are left
When there is at least 1 province card:
TEST 2: Game continues when no supply pile is zero
TEST 3: Game continues when 1 supply pile is zero
TEST 4: Game continues when 2 supply piles are zero
TEST 5: Game is over when 3 supply piles are zeroTEST 6: Game is over when 3 or more supply piles are zero

 >>>>> SUCCESS: Testing complete isGameOver() <<<<<

----------------- Testing Function: gainCard() ----------------
TEST 1: No cards left in the pile
TEST 2: Sending card to deck
deck count = 6, expect = 6
Last card in deck = 1, expect = 1
supply count = 0, expect = 0
TEST 3: Sending card to hand
hand count = 6, expect = 6
Last card in hand = 1, expect = 1
supply count = 0, expect = 0
TEST 4: Sending card to discard
discard count = 1, expect = 1
Last card in discard = 1, expect = 1
supply count = 0, expect = 0

 >>>>> SUCCESS: Testing complete gainCard() <<<<<

----------------- Testing Function: updateCoins() ----------------
Test 1: coins get reset - if no bonus and handCount
coins = 0, expected = 0
Test 2: empty hand, 5 bonus coins
coins = 5, expected = 5
Test 3: copper coin adds 1
coins = 1, expected = 1
Test 4: silver coin adds 2
coins = 2, expected = 2
Test 5: gold coin adds 3
coins = 3, expected = 3
TEST 6: add 1 copper, 2 silver, 1 gold, one bonus
coins = 9, expected = 9

 >>>>> SUCCESS: Testing complete updateCoins() <<<<<

----------------- Testing Function: fullDeckCount() ----------------
Test 1: Full deck count is zero when deck count, hand count, and discard count are all zero
Full deck count = 0, expected 0
TEST 2: Mix of cards, two of same card testing deckCount
Full deck count = 2, expected = 2
TEST 3: Mix of cards, two of same card testing handCount
Full hand count = 2, expected = 2
TEST 4: Mix of cards, two of same card testing discardCount
Full hand count = 2, expected = 2

 >>>>> SUCCESS: Testing complete fullDeckCount() <<<<<

----------------- Testing Card: smithy ----------------
Test 1: There are no cards in the deck
Hand count = 0, expected = 0

Test 2: one card in hand
Hand count = 1, expected = 1
Card in hand = 1, expected = 1

Test 3: two cards in hand
Hand count = 2, expected = 2
Card in first position = 1, expected = 1
Card in second position = 2, expected = 2

Test 4: three cards in hand
Hand count = 3, expected = 3
Card 1 in hand = 1, expected = 1
Card 2 in hand = 1, expected = 1
Card 3 in hand = 1, expected = 1


 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: adventurer ----------------
Test 1: drawn treasure = 1 when the treasure is copper
Card 4 in hand = 1, expected = 1

Test 2:drawn treasure = 1 when the treasure is silver
Card 5 in hand = 1, expected = 1

Test 2:drawn treasure = 1 when the treasure is gold
Card 6 in hand = 1, expected = 1


 >>>>> SUCCESS: Testing complete adventurer <<<<<

----------------- Testing Card: village ----------------
Test 1: draw one card from empty deck
Hand Count = 0, expected = 0
Number of Actions = 3, expected = 3

Test 2: draw one card from non-empty deck
Hand Count = 1, expected = 1
Number of Actions = 3, expected = 3

Test 3: number of actions increases by 1
Card found in hand = 0, expected 0
Number of Actions = 3, expected = 3


 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: great_hall ----------------
Test 1: draw one card from empty deck
Hand Count = 0, expected = 0
Number of Actions = 2, expected = 2

Test 2: draw one card from non-empty deck
Hand Count = 1, expected = 1
Number of Actions = 2, expected = 2

Test 3: number of actions increases by 1
Card found in hand = 0, expected 0
Number of Actions = 2, expected = 2


 >>>>> SUCCESS: Testing complete great_hall <<<<<

File 'dominion.c'
Lines executed:32.15% of 647
Branches executed:32.85% of 417
Taken at least once:25.18% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:63
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1764 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
     1764:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
     1764:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      630:   12:        return -1;
     1134:   13:    return 0;
     1764:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:        int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 63 returned 100% blocks executed 83%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:        struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;			
        -:   43:    //set up random number generator
       63:   44:    SelectStream(1);
       63:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
      126:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       63:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
     1386:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
    13860:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
    11970:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
     6300:   65:        }
      630:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       63:   73:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       63:   75:        state->supplyCount[curse] = 10;
       63:   76:    }
    #####:   77:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       63:   87:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       63:   89:        state->supplyCount[estate] = 8;
       63:   90:        state->supplyCount[duchy] = 8;
       63:   91:        state->supplyCount[province] = 8;
       63:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       63:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       63:  102:    state->supplyCount[silver] = 40;
       63:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
     2646:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    20790:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
     9765:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
     1260:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  114:                {
    #####:  115:                    if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:                        state->supplyCount[i] = 8; 
    #####:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
    #####:  119:                }
        -:  120:                else
        -:  121:                {
      630:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
      630:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
     9135:  128:                state->supplyCount[i] = -1;
        -:  129:            }
     9135:  130:        }
        -:  131:
     1260:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
      378:  138:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
      126:  140:        state->deckCount[i] = 0;
     1008:  141:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:        {
      378:  143:            state->deck[i][j] = estate;
      378:  144:            state->deckCount[i]++;
      378:  145:        }
     2016:  146:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:        {
      882:  148:            state->deck[i][j] = copper;
      882:  149:            state->deckCount[i]++;		
      882:  150:        }
      126:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
      378:  154:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
      126:  156:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
      126:  160:    }
        -:  161:
        -:  162:    //draw player hands
      378:  163:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:        //initialize hand size to zero
      126:  166:        state->handCount[i] = 0;
      126:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
      126:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
     3528:  176:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
     1701:  178:        state->embargoTokens[i] = 0;
     1701:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
       63:  182:    state->outpostPlayed = 0;
       63:  183:    state->phase = 0;
       63:  184:    state->numActions = 1;
       63:  185:    state->numBuys = 1;
       63:  186:    state->playedCardCount = 0;
       63:  187:    state->whoseTurn = 0;
       63:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
      756:  192:    for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      315:  193:        drawCard(state->whoseTurn, state);
      315:  194:    }
        -:  195:
       63:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
       63:  198:    return 0;
       63:  199:}
        -:  200:
function shuffle called 270 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
      270:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
      270:  209:    if (state->deckCount[player] < 1)
branch  0 taken 53%
branch  1 taken 47%
      144:  210:        return -1;
      126:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2772:  214:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     1260:  215:        card = floor(Random() * state->deckCount[player]);
     1260:  216:        newDeck[newDeckPos] = state->deck[player][card];
     1260:  217:        newDeckPos++;
     8820:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
     3150:  219:            state->deck[player][i] = state->deck[player][i+1];
     3150:  220:        }
     1260:  221:        state->deckCount[player]--;
        -:  222:    }
     2772:  223:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     1260:  224:        state->deck[player][i] = newDeck[i];
     1260:  225:        state->deckCount[player]++;
     1260:  226:    }
        -:  227:
      126:  228:    return 0;
      270:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:        if (DEBUG) 
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 35 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
       35:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 24 returned 100% blocks executed 100%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
       24:  326:    int count = 0;
        -:  327:
       90:  328:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 47%
branch  1 taken 53%
        -:  329:    {
       35:  330:        if (state->deck[player][i] == card) count++;
branch  0 taken 67%
branch  1 taken 33%
       21:  331:    }
        -:  332:
       78:  333:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 38%
branch  1 taken 62%
        -:  334:    {
       25:  335:        if (state->hand[player][i] == card) count++;
branch  0 taken 67%
branch  1 taken 33%
       15:  336:    }
        -:  337:
       72:  338:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 33%
branch  1 taken 67%
        -:  339:    {
       20:  340:        if (state->discard[player][i] == card) count++;
branch  0 taken 67%
branch  1 taken 33%
       12:  341:    }
        -:  342:
       24:  343:    return count;
        -:  344:}
        -:  345:
function whoseTurn called 25 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       25:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
function isGameOver called 18 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
       18:  395:    if (state->supplyCount[province] == 0)
branch  0 taken 17%
branch  1 taken 83%
        -:  396:    {
        3:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
       15:  401:    j = 0;
      780:  402:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
      375:  404:        if (state->supplyCount[i] == 0)
branch  0 taken 8%
branch  1 taken 92%
        -:  405:        {
       30:  406:            j++;
       30:  407:        }
      375:  408:    }
       15:  409:    if ( j >= 3)
branch  0 taken 40%
branch  1 taken 60%
        -:  410:    {
        6:  411:        return 1;
        -:  412:    }
        -:  413:
        9:  414:    return 0;
       18:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;	
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:        {
    #####:  469:            players[i] = -9999;
    #####:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:        {
    #####:  483:            j = i;
    #####:  484:        }
    #####:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:        {
    #####:  494:            players[i]++;
    #####:  495:        }
    #####:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:        {
    #####:  504:            j = i;
    #####:  505:        }
    #####:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:        {
    #####:  514:            players[i] = 1;
    #####:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
    #####:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
function drawCard called 476 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
      476:  528:    if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 21%
branch  1 taken 79%
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
      198:  533:        for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
    #####:  536:        }
        -:  537:
       99:  538:        state->deckCount[player] = state->discardCount[player];
       99:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
       99:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
       99:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
       99:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
       99:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       99:  559:        if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
       99:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
    #####:  565:    }
        -:  566:
        -:  567:    else{
      377:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
      377:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
      377:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      377:  576:        state->deckCount[player]--;
      377:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
      377:  580:    return 0;
      476:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo: 
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
    #####:  644:}
        -:  645:
function cardEffect called 25 returned 100% blocks executed 2%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:    int i;
        -:  649:    int j;
        -:  650:    int k;
        -:  651:    int x;
        -:  652:    int index;
       25:  653:    int currentPlayer = whoseTurn(state);
       25:  654:    int nextPlayer = currentPlayer + 1;
        -:  655:
       25:  656:    int tributeRevealedCards[2] = {-1, -1};
        -:  657:    int temphand[MAX_HAND];// moved above the if statement
       25:  658:    int drawntreasure=0;
        -:  659:    int cardDrawn;
       25:  660:    int z = 0;// this is the counter for the temp hand
       25:  661:    if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  662:        nextPlayer = 0;
    #####:  663:    }
        -:  664:
        -:  665:
        -:  666:    //uses switch to select card and perform actions
       25:  667:    switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 52%
branch  8 taken 0%
branch  9 taken 48%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:        case adventurer:
    #####:  670:            return playAdventurer(currentPlayer, state);
        -:  671:            
        -:  672:            /*while(drawntreasure<2){
        -:  673:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  674:                    shuffle(currentPlayer, state);
        -:  675:                }
        -:  676:                drawCard(currentPlayer, state);
        -:  677:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  678:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  679:                    drawntreasure++;
        -:  680:                else{
        -:  681:                    temphand[z]=cardDrawn;
        -:  682:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  683:                    z++;
        -:  684:                }
        -:  685:            }
        -:  686:            while(z-1>=0){
        -:  687:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  688:                z=z-1;
        -:  689:            }
        -:  690:            return 0; */
        -:  691:
        -:  692:        case council_room:
    #####:  693:            return playCouncilRoom(currentPlayer, state, handPos);
        -:  694:            
        -:  695:            /* //+4 Cards
        -:  696:            for (i = 0; i < 4; i++)
        -:  697:            {
        -:  698:                drawCard(currentPlayer, state);
        -:  699:            }
        -:  700:
        -:  701:            //+1 Buy
        -:  702:            state->numBuys++;
        -:  703:
        -:  704:            //Each other player draws a card
        -:  705:            for (i = 0; i < state->numPlayers; i++)
        -:  706:            {
        -:  707:                if ( i != currentPlayer )
        -:  708:                {
        -:  709:                    drawCard(i, state);
        -:  710:                }
        -:  711:            }
        -:  712:
        -:  713:            //put played card in played card pile
        -:  714:            discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:            return 0; */
        -:  717:
        -:  718:        case feast:
        -:  719:            //gain card with cost up to 5
        -:  720:            //Backup hand
    #####:  721:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:                state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:            }
        -:  725:            //Backup hand
        -:  726:
        -:  727:            //Update Coins for Buy
    #####:  728:            updateCoins(currentPlayer, state, 5);
    #####:  729:            x = 1;//Condition to loop on
    #####:  730:            while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:                if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:                    if (DEBUG)
        -:  733:                        printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:                    if (DEBUG){
        -:  736:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:                    }
    #####:  738:                }
    #####:  739:                else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:                    printf("That card is too expensive!\n");
        -:  741:
        -:  742:                    if (DEBUG){
        -:  743:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:                    }
    #####:  745:                }
        -:  746:                else{
        -:  747:
        -:  748:                    if (DEBUG){
        -:  749:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:                    }
        -:  751:
    #####:  752:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:                    x = 0;//No more buying cards
        -:  754:
        -:  755:                    if (DEBUG){
        -:  756:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:                    }
        -:  758:
        -:  759:                }
        -:  760:            }     
        -:  761:
        -:  762:            //Reset Hand
    #####:  763:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:                state->hand[currentPlayer][i] = temphand[i];
    #####:  765:                temphand[i] = -1;
    #####:  766:            }
        -:  767:            //Reset Hand
        -:  768:
    #####:  769:            return 0;
        -:  770:
        -:  771:        case gardens:
    #####:  772:            return -1;
        -:  773:
        -:  774:        case mine:
    #####:  775:            return playMine(currentPlayer, state, handPos, choice1, choice2);
        -:  776:            
        -:  777:            /*
        -:  778:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  779:
        -:  780:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  781:            {
        -:  782:                return -1;
        -:  783:            }
        -:  784:
        -:  785:            if (choice2 > treasure_map || choice2 < curse)
        -:  786:            {
        -:  787:                return -1;
        -:  788:            }
        -:  789:
        -:  790:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  791:            {
        -:  792:                return -1;
        -:  793:            }
        -:  794:
        -:  795:            gainCard(choice2, state, 2, currentPlayer);
        -:  796:
        -:  797:            //discard card from hand
        -:  798:            discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:            //discard trashed card
        -:  801:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:            {
        -:  803:                if (state->hand[currentPlayer][i] == j)
        -:  804:                {
        -:  805:                    discardCard(i, currentPlayer, state, 0);			
        -:  806:                    break;
        -:  807:                }
        -:  808:            }
        -:  809:
        -:  810:            return 0; */
        -:  811:
        -:  812:        case remodel:
    #####:  813:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  814:
    #####:  815:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  816:            {
    #####:  817:                return -1;
        -:  818:            }
        -:  819:
    #####:  820:            gainCard(choice2, state, 0, currentPlayer);
        -:  821:
        -:  822:            //discard card from hand
    #####:  823:            discardCard(handPos, currentPlayer, state, 0);
        -:  824:
        -:  825:            //discard trashed card
    #####:  826:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  827:            {
    #####:  828:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  829:                {
    #####:  830:                    discardCard(i, currentPlayer, state, 0);			
    #####:  831:                    break;
        -:  832:                }
    #####:  833:            }
        -:  834:
        -:  835:
    #####:  836:            return 0;
        -:  837:
        -:  838:        case smithy:
    #####:  839:            return playSmithy(currentPlayer, state, handPos);
        -:  840:            
        -:  841:            /*
        -:  842:            //+3 Cards
        -:  843:            for (i = 0; i < 3; i++)
        -:  844:            {
        -:  845:                drawCard(currentPlayer, state);
        -:  846:            }
        -:  847:
        -:  848:            //discard card from hand
        -:  849:            discardCard(handPos, currentPlayer, state, 0);
        -:  850:            return 0;  */
        -:  851:
        -:  852:        case village:
        -:  853:            //+1 Card
       13:  854:            drawCard(currentPlayer, state);
        -:  855:
        -:  856:            //+2 Actions
       13:  857:            state->numActions = state->numActions + 2;
        -:  858:
        -:  859:            //discard played card from hand
       13:  860:            discardCard(handPos, currentPlayer, state, 0);
       13:  861:            return 0;
        -:  862:
        -:  863:        case baron:
    #####:  864:            state->numBuys++;//Increase buys by 1!
    #####:  865:            if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  866:                int p = 0;//Iterator for hand!
    #####:  867:                int card_not_discarded = 1;//Flag for discard set!
    #####:  868:                while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  869:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  870:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  871:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  872:                        state->discardCount[currentPlayer]++;
    #####:  873:                        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  874:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  875:                        }
    #####:  876:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  877:                        state->handCount[currentPlayer]--;
    #####:  878:                        card_not_discarded = 0;//Exit the loop
    #####:  879:                    }
    #####:  880:                    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  881:                        if(DEBUG) {
        -:  882:                            printf("No estate cards in your hand, invalid choice\n");
        -:  883:                            printf("Must gain an estate if there are any\n");
        -:  884:                        }
    #####:  885:                        if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  886:                            gainCard(estate, state, 0, currentPlayer);
    #####:  887:                            state->supplyCount[estate]--;//Decrement estates
    #####:  888:                            if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  889:                                isGameOver(state);
    #####:  890:                            }
    #####:  891:                        }
    #####:  892:                        card_not_discarded = 0;//Exit the loop
    #####:  893:                    }
        -:  894:
        -:  895:                    else{
    #####:  896:                        p++;//Next card
        -:  897:                    }
        -:  898:                }
    #####:  899:            }
        -:  900:
        -:  901:            else{
    #####:  902:                if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  903:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  904:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  905:                    if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  906:                        isGameOver(state);
    #####:  907:                    }
    #####:  908:                }
        -:  909:            }
        -:  910:
        -:  911:
    #####:  912:            return 0;
        -:  913:
        -:  914:        case great_hall:
        -:  915:            //+1 Card
       12:  916:            drawCard(currentPlayer, state);
        -:  917:
        -:  918:            //+1 Actions
       12:  919:            state->numActions++;
        -:  920:
        -:  921:            //discard card from hand
       12:  922:            discardCard(handPos, currentPlayer, state, 0);
       12:  923:            return 0;
        -:  924:
        -:  925:        case minion:
        -:  926:            //+1 action
    #####:  927:            state->numActions++;
        -:  928:
        -:  929:            //discard card from hand
    #####:  930:            discardCard(handPos, currentPlayer, state, 0);
        -:  931:
    #####:  932:            if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  933:            {
    #####:  934:                state->coins = state->coins + 2;
    #####:  935:            }
        -:  936:
    #####:  937:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  938:            {
        -:  939:                //discard hand
    #####:  940:                while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  941:                {
    #####:  942:                    discardCard(handPos, currentPlayer, state, 0);
        -:  943:                }
        -:  944:
        -:  945:                //draw 4
    #####:  946:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  947:                {
    #####:  948:                    drawCard(currentPlayer, state);
    #####:  949:                }
        -:  950:
        -:  951:                //other players discard hand and redraw if hand size > 4
    #####:  952:                for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  953:                {
    #####:  954:                    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  955:                    {
    #####:  956:                        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  957:                        {
        -:  958:                            //discard hand
    #####:  959:                            while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  960:                            {
    #####:  961:                                discardCard(handPos, i, state, 0);
        -:  962:                            }
        -:  963:
        -:  964:                            //draw 4
    #####:  965:                            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  966:                            {
    #####:  967:                                drawCard(i, state);
    #####:  968:                            }
    #####:  969:                        }
    #####:  970:                    }
    #####:  971:                }
        -:  972:
    #####:  973:            }
    #####:  974:            return 0;
        -:  975:
        -:  976:        case steward:
    #####:  977:            if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  978:            {
        -:  979:                //+2 cards
    #####:  980:                drawCard(currentPlayer, state);
    #####:  981:                drawCard(currentPlayer, state);
    #####:  982:            }
    #####:  983:            else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  984:            {
        -:  985:                //+2 coins
    #####:  986:                state->coins = state->coins + 2;
    #####:  987:            }
        -:  988:            else
        -:  989:            {
        -:  990:                //trash 2 cards in hand
    #####:  991:                discardCard(choice2, currentPlayer, state, 1);
    #####:  992:                discardCard(choice3, currentPlayer, state, 1);
        -:  993:            }
        -:  994:
        -:  995:            //discard card from hand
    #####:  996:            discardCard(handPos, currentPlayer, state, 0);
    #####:  997:            return 0;
        -:  998:
        -:  999:        case tribute:
    #####: 1000:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1001:                if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1002:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1003:                    state->deckCount[nextPlayer]--;
    #####: 1004:                }
    #####: 1005:                else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1006:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1007:                    state->discardCount[nextPlayer]--;
    #####: 1008:                }
        -: 1009:                else{
        -: 1010:                    //No Card to Reveal
        -: 1011:                    if (DEBUG){
        -: 1012:                        printf("No cards to reveal\n");
        -: 1013:                    }
        -: 1014:                }
    #####: 1015:            }
        -: 1016:
        -: 1017:            else{
    #####: 1018:                if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1019:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1020:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1021:                        state->deckCount[nextPlayer]++;
    #####: 1022:                        state->discard[nextPlayer][i] = -1;
    #####: 1023:                        state->discardCount[nextPlayer]--;
    #####: 1024:                    }
        -: 1025:
    #####: 1026:                    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1027:                } 
    #####: 1028:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:                state->deckCount[nextPlayer]--;
    #####: 1031:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1033:                state->deckCount[nextPlayer]--;
        -: 1034:            }    
        -: 1035:
    #####: 1036:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1037:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1038:                state->playedCardCount++;
    #####: 1039:                tributeRevealedCards[1] = -1;
    #####: 1040:            }
        -: 1041:
    #####: 1042:            for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1043:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1044:                    state->coins += 2;
    #####: 1045:                }
        -: 1046:
    #####: 1047:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1048:                    drawCard(currentPlayer, state);
    #####: 1049:                    drawCard(currentPlayer, state);
    #####: 1050:                }
        -: 1051:                else{//Action Card
    #####: 1052:                    state->numActions = state->numActions + 2;
        -: 1053:                }
    #####: 1054:            }
        -: 1055:
    #####: 1056:            return 0;
        -: 1057:
        -: 1058:        case ambassador:
    #####: 1059:            j = 0;		//used to check if player has enough cards to discard
        -: 1060:
    #####: 1061:            if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1062:            {
    #####: 1063:                return -1;				
        -: 1064:            }
        -: 1065:
    #####: 1066:            if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1067:            {
    #####: 1068:                return -1;
        -: 1069:            }
        -: 1070:
    #####: 1071:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1072:            {
    #####: 1073:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1074:                {
    #####: 1075:                    j++;
    #####: 1076:                }
    #####: 1077:            }
    #####: 1078:            if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1079:            {
    #####: 1080:                return -1;				
        -: 1081:            }
        -: 1082:
        -: 1083:            if (DEBUG) 
        -: 1084:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1085:
        -: 1086:            //increase supply count for choosen card by amount being discarded
    #####: 1087:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1088:
        -: 1089:            //each other player gains a copy of revealed card
    #####: 1090:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:            {
    #####: 1092:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1093:                {
    #####: 1094:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1095:                }
    #####: 1096:            }
        -: 1097:
        -: 1098:            //discard played card from hand
    #####: 1099:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1100:
        -: 1101:            //trash copies of cards returned to supply
    #####: 1102:            for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1103:            {
    #####: 1104:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:                {
    #####: 1106:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1107:                    {
    #####: 1108:                        discardCard(i, currentPlayer, state, 1);
    #####: 1109:                        break;
        -: 1110:                    }
    #####: 1111:                }
    #####: 1112:            }			
        -: 1113:
    #####: 1114:            return 0;
        -: 1115:
        -: 1116:        case cutpurse:
        -: 1117:
    #####: 1118:            updateCoins(currentPlayer, state, 2);
    #####: 1119:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:            {
    #####: 1121:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1122:                {
    #####: 1123:                    for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:                    {
    #####: 1125:                        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1126:                        {
    #####: 1127:                            discardCard(j, i, state, 0);
    #####: 1128:                            break;
        -: 1129:                        }
    #####: 1130:                        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1131:                        {
    #####: 1132:                            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1133:                            {
        -: 1134:                                if (DEBUG)
        -: 1135:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1136:                            }	
    #####: 1137:                            break;
        -: 1138:                        }		
    #####: 1139:                    }
        -: 1140:
    #####: 1141:                }
        -: 1142:
    #####: 1143:            }				
        -: 1144:
        -: 1145:            //discard played card from hand
    #####: 1146:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
    #####: 1148:            return 0;
        -: 1149:
        -: 1150:
        -: 1151:        case embargo: 
        -: 1152:            //+2 Coins
    #####: 1153:            state->coins = state->coins + 2;
        -: 1154:
        -: 1155:            //see if selected pile is in play
    #####: 1156:            if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1157:            {
    #####: 1158:                return -1;
        -: 1159:            }
        -: 1160:
        -: 1161:            //add embargo token to selected supply pile
    #####: 1162:            state->embargoTokens[choice1]++;
        -: 1163:
        -: 1164:            //trash card
    #####: 1165:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:        case outpost:
        -: 1169:            //set outpost flag
    #####: 1170:            state->outpostPlayed++;
        -: 1171:
        -: 1172:            //discard card
    #####: 1173:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1174:            return 0;
        -: 1175:
        -: 1176:        case salvager:
        -: 1177:            //+1 buy
    #####: 1178:            state->numBuys++;
        -: 1179:
    #####: 1180:            if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1181:            {
        -: 1182:                //gain coins equal to trashed card
    #####: 1183:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1184:                //trash card
    #####: 1185:                discardCard(choice1, currentPlayer, state, 1);	
    #####: 1186:            }
        -: 1187:
        -: 1188:            //discard card
    #####: 1189:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1190:            return 0;
        -: 1191:
        -: 1192:        case sea_hag:
    #####: 1193:            return playSeaHag(currentPlayer, state);
        -: 1194:            
        -: 1195:            /*
        -: 1196:            for (i = 0; i < state->numPlayers; i++){
        -: 1197:                if (i != currentPlayer){
        -: 1198:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1199:                    state->discardCount[i]++;
        -: 1200:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1201:                }
        -: 1202:            }
        -: 1203:            return 0; */
        -: 1204:
        -: 1205:        case treasure_map:
        -: 1206:            //search hand for another treasure_map
    #####: 1207:            index = -1;
    #####: 1208:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1209:            {
    #####: 1210:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1211:                {
    #####: 1212:                    index = i;
    #####: 1213:                    break;
        -: 1214:                }
    #####: 1215:            }
    #####: 1216:            if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1217:            {
        -: 1218:                //trash both treasure cards
    #####: 1219:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1220:                discardCard(index, currentPlayer, state, 1);
        -: 1221:
        -: 1222:                //gain 4 Gold cards
    #####: 1223:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1224:                {
    #####: 1225:                    gainCard(gold, state, 1, currentPlayer);
    #####: 1226:                }
        -: 1227:
        -: 1228:                //return success
    #####: 1229:                return 1;
        -: 1230:            }
        -: 1231:
        -: 1232:            //no second treasure_map found in hand
    #####: 1233:            return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    return -1;
       25: 1237:}
        -: 1238:
function discardCard called 50 returned 100% blocks executed 90%
        -: 1239:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1240:{
        -: 1241:
        -: 1242:    //if card is not trashed, added to Played pile 
       50: 1243:    if (trashFlag < 1)
branch  0 taken 50%
branch  1 taken 50%
        -: 1244:    {
        -: 1245:        //add card to played pile
       25: 1246:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       25: 1247:        state->playedCardCount++;
       25: 1248:    }
        -: 1249:
        -: 1250:    //set played card to -1
       50: 1251:    state->hand[currentPlayer][handPos] = -1;
        -: 1252:
        -: 1253:    //remove card from player's hand
       50: 1254:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 36%
branch  1 taken 64%
        -: 1255:    {
        -: 1256:        //reduce number of cards in hand
       18: 1257:        state->handCount[currentPlayer]--;
       18: 1258:    }
       32: 1259:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1260:    {
        -: 1261:        //reduce number of cards in hand
    #####: 1262:        state->handCount[currentPlayer]--;
    #####: 1263:    }
        -: 1264:    else 	
        -: 1265:    {
        -: 1266:        //replace discarded card with last card in hand
       32: 1267:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1268:        //set last card to -1
       32: 1269:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1270:        //reduce number of cards in hand
       32: 1271:        state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:
       50: 1274:    return 0;
        -: 1275:}
        -: 1276:
function gainCard called 35 returned 100% blocks executed 100%
        -: 1277:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1278:{
        -: 1279:    //Note: supplyPos is enum of choosen card
        -: 1280:
        -: 1281:    //check if supply pile is empty (0) or card is not used in game (-1)
       35: 1282:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 31%
branch  1 taken 69%
        -: 1283:    {
       11: 1284:        return -1;
        -: 1285:    }
        -: 1286:
        -: 1287:    //added card for [whoseTurn] current player:
        -: 1288:    // toFlag = 0 : add to discard
        -: 1289:    // toFlag = 1 : add to deck
        -: 1290:    // toFlag = 2 : add to hand
        -: 1291:
       24: 1292:    if (toFlag == 1)
branch  0 taken 38%
branch  1 taken 63%
        -: 1293:    {
        9: 1294:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        9: 1295:        state->deckCount[player]++;
        9: 1296:    }
       15: 1297:    else if (toFlag == 2)
branch  0 taken 53%
branch  1 taken 47%
        -: 1298:    {
        8: 1299:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        8: 1300:        state->handCount[player]++;
        8: 1301:    }
        -: 1302:    else
        -: 1303:    {
        7: 1304:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        7: 1305:        state->discardCount[player]++;
        -: 1306:    }
        -: 1307:
        -: 1308:    //decrease number in supply pile
       24: 1309:    state->supplyCount[supplyPos]--;
        -: 1310:
       24: 1311:    return 0;
       35: 1312:}
        -: 1313:
function updateCoins called 110 returned 100% blocks executed 100%
        -: 1314:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1315:{
        -: 1316:    int i;
        -: 1317:
        -: 1318:    //reset coin count
      110: 1319:    state->coins = 0;
        -: 1320:
        -: 1321:    //add coins for each Treasure card in player's hand
      932: 1322:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 76%
branch  1 taken 24%
        -: 1323:    {
      356: 1324:        if (state->hand[player][i] == copper)
branch  0 taken 74%
branch  1 taken 26%
        -: 1325:        {
      265: 1326:            state->coins += 1;
      265: 1327:        }
       91: 1328:        else if (state->hand[player][i] == silver)
branch  0 taken 19%
branch  1 taken 81%
        -: 1329:        {
       17: 1330:            state->coins += 2;
       17: 1331:        }
       74: 1332:        else if (state->hand[player][i] == gold)
branch  0 taken 15%
branch  1 taken 85%
        -: 1333:        {
       11: 1334:            state->coins += 3;
       11: 1335:        }	
      356: 1336:    }	
        -: 1337:
        -: 1338:    //add bonus
      110: 1339:    state->coins += bonus;
        -: 1340:
      110: 1341:    return 0;
        -: 1342:}
        -: 1343:
function playAdventurer called 24 returned 100% blocks executed 100%
        -: 1344:int playAdventurer(int currentPlayer, struct gameState *state) {
        -: 1345:    
       24: 1346:    int drawntreasure = 0;
       24: 1347:    int z = 0;
        -: 1348:    int cardDrawn;
        -: 1349:    int temphand[MAX_HAND];
        -: 1350:    
      170: 1351:    while(drawntreasure<2){
branch  0 taken 72%
branch  1 taken 28%
       61: 1352:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 72%
branch  1 taken 28%
       44: 1353:            shuffle(currentPlayer, state);
       44: 1354:        }
       61: 1355:        drawCard(currentPlayer, state);
       61: 1356:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      107: 1357:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 44%
branch  1 taken 56%
branch  2 taken 70%
branch  3 taken 30%
branch  4 taken 32%
branch  5 taken 68%
       48: 1358:            drawntreasure++;
        -: 1359:        else{
       13: 1360:            temphand[z]=cardDrawn;
       13: 1361:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       13: 1362:            z++;
        -: 1363:        }
        -: 1364:    }
       60: 1365:    while(z-1>0){
branch  0 taken 20%
branch  1 taken 80%
        6: 1366:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6: 1367:        z=z-1;
        -: 1368:    }
       24: 1369:    return 0;
        -: 1370:
        -: 1371:}
        -: 1372:
function playSmithy called 25 returned 100% blocks executed 100%
        -: 1373:int playSmithy(int currentPlayer, struct gameState *state, int handPos) {
        -: 1374:    int i;
        -: 1375:    
        -: 1376:    //+3 Cards
      200: 1377:    for (i = 1; i <= 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1378:    {
       75: 1379:        drawCard(currentPlayer, state);
       75: 1380:    }
        -: 1381:    
        -: 1382:    //discard card from hand
       25: 1383:    discardCard(handPos, currentPlayer, state, 1);
       25: 1384:    return 0;
        -: 1385:}
        -: 1386:
function playCouncilRoom called 0 returned 0% blocks executed 0%
        -: 1387:int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -: 1388:    int i;
        -: 1389:    
        -: 1390:    //+4 Cards
    #####: 1391:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1392:    {
    #####: 1393:        drawCard(currentPlayer, state);
    #####: 1394:    }
        -: 1395:    
        -: 1396:    //+1 Buy
    #####: 1397:    state->numBuys+=2;
        -: 1398:    
        -: 1399:    //Each other player draws a card
    #####: 1400:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1401:    {
    #####: 1402:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1403:        {
    #####: 1404:            drawCard(i, state);
    #####: 1405:        }
    #####: 1406:    }
        -: 1407:    
        -: 1408:    //put played card in played card pile
    #####: 1409:    discardCard(handPos, currentPlayer, state, 0);
        -: 1410:    
    #####: 1411:    return 0;
        -: 1412:}
        -: 1413:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 1414:int playSeaHag(int currentPlayer, struct gameState *state){
        -: 1415:    int i;
        -: 1416:    
    #####: 1417:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1418:        if (i = currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1419:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1420:            state->discardCount[i]++;
    #####: 1421:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1422:        }
    #####: 1423:    }
    #####: 1424:    return 0;
        -: 1425:}
        -: 1426:
function playMine called 0 returned 0% blocks executed 0%
        -: 1427:int playMine(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2) {
        -: 1428:    int i;
        -: 1429:    int j;
        -: 1430:    
    #####: 1431:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1432:    
    #####: 1433:    if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1434:    {
    #####: 1435:        return -1;
        -: 1436:    }
        -: 1437:    
    #####: 1438:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1439:    {
    #####: 1440:        return -1;
        -: 1441:    }
        -: 1442:    
    #####: 1443:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1444:    {
    #####: 1445:        return -1;
        -: 1446:    }
        -: 1447:    
    #####: 1448:    gainCard(choice2, state, 2, currentPlayer);
        -: 1449:    
        -: 1450:    //discard card from hand
    #####: 1451:    discardCard(handPos, currentPlayer, state, 0);
        -: 1452:    
        -: 1453:    //discard trashed card
    #####: 1454:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1455:    {
    #####: 1456:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1457:        {
    #####: 1458:            discardCard(i, currentPlayer, state, 0);
    #####: 1459:            break;
        -: 1460:        }
    #####: 1461:    }
        -: 1462:    
    #####: 1463:    return 0;
    #####: 1464:}
        -: 1465:
        -: 1466://end of dominion.c
