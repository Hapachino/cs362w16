Starting game. with 2 players
TESTING Adventurer CARD: ------------------ 
Most Failed : 1 tests 
Total Failed : 4970 tests of 5000 


Starting game.


TESTING Smithy CARD: ------------------ 
BeginHand Count was: 5 
Actual Hand Count was: 8 
Hand Count should be: 7 
FAILED : 3 tests 
Starting game.


TESTING Adventurer CARD: ------------------ 
BeginDeck Count was: 5 
PERFORMING DRAW TESTs-------------------------: 
BeginHand Count was: 5 
Actual Hand Count was: 6 
Hand Count should be: 7 
PERFORMING TEST 1-------------------------: 
PASSED 
PERFORMING TEST 2-------------------------: 
PASSED 
PERFORMING TEST 3-------------------------: 
Current Deck Count was: 0 
PASSED 
FAILED : 1 tests
Starting game.


TESTING drawCard: ------------------ 
test drawCard: OK 
Starting game.


TESTING scoreFor: ------------------ 
Scenario: Curse         , Scenario: Estate        , Scenario: Duchy         
Score is not correct scoreFor returned: 1100, but should have returned 1000
Scenario: Estate        , Scenario: Duchy         , Scenario: Province      
Score is not correct scoreFor returned: 3600, but should have returned 3700
Scenario: Duchy         , Scenario: Province      , Scenario: Gardens       
Score is not correct scoreFor returned: 3900, but should have returned 4200
Scenario: Province      , Scenario: Gardens       , Scenario: Great Hall    
Score is not correct scoreFor returned: 2100, but should have returned 2400
Scenario: Gardens       , Scenario: Great Hall    , Scenario: Curse         
Score is not correct scoreFor returned: 9200, but should have returned -300
Scenario: Great Hall    , Scenario: Curse         , Scenario: Estate        
Score is not correct scoreFor returned: 100, but should have returned -200
FAILED : 6 tests
Starting game.


TESTING gainCard: ------------------ 
test Gain Card: OK 
Starting game.


TESTING discardCard: ------------------ 
test discardCard with Trash on: OK 
test discardCard with Trash off: OK 
Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:8.75% of 240
Branches executed:18.59% of 199
Taken at least once:7.04% of 199
Calls executed:6.25% of 64

Function 'playBaron'
Lines executed:0.00% of 29
Branches executed:0.00% of 18
Taken at least once:0.00% of 18
Calls executed:0.00% of 8

Function 'playRemodel'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'playFeast'
Lines executed:0.00% of 18
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 5

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:23.33% of 30
Branches executed:100.00% of 28
Taken at least once:17.86% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 42
Branches executed:100.00% of 42
Taken at least once:100.00% of 42
Calls executed:100.00% of 3

Function 'isGameOver'
Lines executed:80.00% of 10
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'endTurn'
Lines executed:100.00% of 20
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:83.33% of 12
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:76.92% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:44.87% of 653
Branches executed:52.69% of 465
Taken at least once:38.71% of 465
Calls executed:28.57% of 112
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:27
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 5299781 returned 100% blocks executed 100%
  5299781:    8:int compare(const void *a, const void *b) {
  5299781:    9:  if (*(int *) a > *(int *) b)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
  1963468:   10:    return 1;
  3336313:   11:  if (*(int *) a < *(int *) b)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
  1951716:   12:    return -1;
  1384597:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState *newGame() {
    #####:   17:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int *k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 27 returned 100% blocks executed 88%
       27:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:  int i, j, it;
        -:   39:  //set up random number generator
       27:   40:  SelectStream(1);
call    0 returned 100%
       27:   41:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   42:  //check number of players
       27:   43:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   44:    return -1;
        -:   45:  //set number of players
       27:   46:  state->numPlayers = numPlayers;
        -:   47:  //check selected kingdom cards are different
      297:   48:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2970:   49:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2700:   50:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   51:        return -1;
        -:   52:    }
        -:   53:  }
        -:   54:  //initialize supply  
        -:   55:  //set number of Curse cards
       27:   56:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:   57:    state->supplyCount[curse] = 10;
    #####:   58:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
    #####:   59:    state->supplyCount[curse] = 20;
        -:   60:  else
    #####:   61:    state->supplyCount[curse] = 30;
        -:   62:  //set number of Victory cards
       27:   63:  if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:   64:    state->supplyCount[estate] = 8;
       27:   65:    state->supplyCount[duchy] = 8;
       27:   66:    state->supplyCount[province] = 8;
        -:   67:  }
        -:   68:  else {
    #####:   69:    state->supplyCount[estate] = 12;
    #####:   70:    state->supplyCount[duchy] = 12;
    #####:   71:    state->supplyCount[province] = 12;
        -:   72:  }
        -:   73:  //set number of Treasure cards
       27:   74:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       27:   75:  state->supplyCount[silver] = 40;
       27:   76:  state->supplyCount[gold] = 30;
        -:   77:  //set number of Kingdom cards
      567:   78:  for (i = adventurer; i <= treasure_map; i++) { //loop all cards  
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
     4455:   79:    for (j = 0; j < 10; j++) { //loop chosen cards    
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
     4185:   80:      if (kingdomCards[j] == i) { //check if card is a 'Victory' Kingdom card        
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
      270:   81:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
       54:   82:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:   83:            state->supplyCount[i] = 8;
        -:   84:          else
    #####:   85:            state->supplyCount[i] = 12;
        -:   86:        }
        -:   87:        else
      243:   88:          state->supplyCount[i] = 10;
      270:   89:        break;
        -:   90:      }
        -:   91:      else    //card is not in the set choosen for the game
     3915:   92:        state->supplyCount[i] = -1;
        -:   93:    }
        -:   94:  }
        -:   95:  //supply intilization complete
        -:   96:  //set player decks
       81:   97:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       54:   98:    state->deckCount[i] = 0;
      216:   99:    for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      162:  100:      state->deck[i][j] = estate;
      162:  101:      state->deckCount[i]++;
        -:  102:    }
      432:  103:    for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
      378:  104:      state->deck[i][j] = copper;
      378:  105:      state->deckCount[i]++;
        -:  106:    }
        -:  107:  }
        -:  108:  //shuffle player decks
       81:  109:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       54:  110:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  111:      return -1;
        -:  112:  }
       81:  113:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       54:  114:    state->handCount[i] = 0;
       54:  115:    state->discardCount[i] = 0;
        -:  116:  }
        -:  117:  //set embargo tokens to 0 for all supply piles
      756:  118:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      729:  119:    state->embargoTokens[i] = 0;
        -:  120:  //initialize first player's turn
       27:  121:  state->outpostPlayed = 0;
       27:  122:  state->phase = 0;
       27:  123:  state->numActions = 1;
       27:  124:  state->numBuys = 1;
       27:  125:  state->playedCardCount = 0;
       27:  126:  state->whoseTurn = 0;
       27:  127:  state->handCount[state->whoseTurn] = 0;
        -:  128:  //Moved draw cards to here, only drawing at the start of a turn
      162:  129:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      135:  130:    drawCard(state->whoseTurn, state);
call    0 returned 100%
       27:  131:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
       27:  132:  return 0;
        -:  133:}
        -:  134:
function shuffle called 33316 returned 100% blocks executed 100%
    33316:  135:int shuffle(int player, struct gameState *state) {
    33316:  136:  int newDeck[MAX_DECK], newDeckPos = 0, card, i;
    33316:  137:  if (state->deckCount[player] < 1)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
    20525:  138:    return -1;
    12791:  139:  qsort((void *) (state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  140:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
  1328826:  141:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1303244:  142:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  1303244:  143:    newDeck[newDeckPos] = state->deck[player][card];
  1303244:  144:    newDeckPos++;
108497695:  145:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
107194451:  146:      state->deck[player][i] = state->deck[player][i + 1];
  1303244:  147:    state->deckCount[player]--;
        -:  148:  }
  1316035:  149:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1303244:  150:    state->deck[player][i] = newDeck[i];
  1303244:  151:    state->deckCount[player]++;
        -:  152:  }
    12791:  153:  return 0;
        -:  154:}
        -:  155:
function playCard called 30 returned 100% blocks executed 80%
       30:  156:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  157:  int card;
       30:  158:  int coin_bonus = 0; //tracks coins gain from actions
        -:  159:  //check if it is the right phase
       30:  160:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  161:    return -1;
        -:  162:  //check if player has enough actions
       30:  163:  if (state->numActions < 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       25:  164:    return -1;
        -:  165:  //get card played
        5:  166:  card = handCard(handPos, state);
call    0 returned 100%
        -:  167:  //check if selected card is an action
        5:  168:  if (card < adventurer || card > treasure_map)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  169:    return -1;
        -:  170:  //play card
        5:  171:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  172:    return -1;
        -:  173:  //reduce number of actions
        5:  174:  state->numActions--;
        -:  175:  //update coins (Treasure cards may be added with card draws)
        5:  176:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        5:  177:  return 0;
        -:  178:}
        -:  179:
function buyCard called 35 returned 100% blocks executed 79%
       35:  180:int buyCard(int supplyPos, struct gameState *state) {
        -:  181:  int who;
        -:  182:  if (DEBUG)
        -:  183:    printf("Entering buyCard...\n");
        -:  184:  // I don't know what to do about the phase thing.
       35:  185:  who = state->whoseTurn;
       35:  186:  if (state->numBuys < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  187:    if (DEBUG)
        -:  188:      printf("You do not have any buys left\n");
    #####:  189:    return -1;
        -:  190:  } 
       35:  191:  else if (supplyCount(supplyPos, state) < 1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  192:    if (DEBUG)
        -:  193:      printf("There are not any of that type of card left\n");
    #####:  194:    return -1;
        -:  195:  } 
       35:  196:  else if (state->coins < getCost(supplyPos)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  197:    if (DEBUG)
        -:  198:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  199:    return -1;
        -:  200:  } 
        -:  201:  else {
       35:  202:    state->phase = 1;
        -:  203:    //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
       35:  204:    gainCard(supplyPos, state, 0, who); 
call    0 returned 100%
       35:  205:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       35:  206:    state->numBuys--;
        -:  207:    if (DEBUG)
        -:  208:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos,
        -:  209:             getCost(supplyPos), state->numBuys, state->coins);
        -:  210:  }
       35:  211:  return 0;
        -:  212:}
        -:  213:
function numHandCards called 250 returned 100% blocks executed 100%
      250:  214:int numHandCards(struct gameState *state) {
      250:  215:  return state->handCount[whoseTurn(state)];
call    0 returned 100%
        -:  216:}
        -:  217:
function handCard called 490 returned 100% blocks executed 100%
      490:  218:int handCard(int handPos, struct gameState *state) {
      490:  219:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      490:  220:  return state->hand[currentPlayer][handPos];
        -:  221:}
        -:  222:
function supplyCount called 226 returned 100% blocks executed 100%
      226:  223:int supplyCount(int card, struct gameState *state) {
      226:  224:  return state->supplyCount[card];
        -:  225:}
        -:  226:
function fullDeckCount called 2200 returned 100% blocks executed 88%
     2200:  227:int fullDeckCount(int player, int card, struct gameState *state) {
     2200:  228:  int i, count = 0;
   882200:  229:  for (i = 0; i < state->deckCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   880000:  230:    if (state->deck[player][i] == card) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  231:      count++;
        -:  232:  }
  1102200:  233:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1100000:  234:    if (state->hand[player][i] == card) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  235:      count++;
        -:  236:  }
   662200:  237:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   660000:  238:    if (state->discard[player][i] == card)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   180000:  239:      count++;
        -:  240:  }
     2200:  241:  return count;
        -:  242:}
        -:  243:
function whoseTurn called 835 returned 100% blocks executed 100%
      835:  244:int whoseTurn(struct gameState *state) {
      835:  245:  return state->whoseTurn;
        -:  246:}
        -:  247:
function endTurn called 35 returned 100% blocks executed 100%
       35:  248:int endTurn(struct gameState *state) {
        -:  249:  int k, i;
       35:  250:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  251:  //Discard hand
      220:  252:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      185:  253:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      185:  254:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  255:  }
       35:  256:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  257:  //Code for determining the player
       35:  258:  if (currentPlayer < (state->numPlayers - 1))
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       18:  259:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  260:  else
       17:  261:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  262:
       35:  263:  state->outpostPlayed = 0;
       35:  264:  state->phase = 0;
       35:  265:  state->numActions = 1;
       35:  266:  state->coins = 0;
       35:  267:  state->numBuys = 1;
       35:  268:  state->playedCardCount = 0;
       35:  269:  state->handCount[state->whoseTurn] = 0;
        -:  270:
        -:  271:  //Next player draws hand
      210:  272:  for (k = 0; k < 5; k++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      175:  273:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  274:  //Update money
       35:  275:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
       35:  276:  return 0;
        -:  277:}
        -:  278:
function isGameOver called 36 returned 100% blocks executed 82%
       36:  279:int isGameOver(struct gameState *state) {
        -:  280:  int i, j;
        -:  281:  //if stack of Province cards is empty, the game ends
       36:  282:  if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        1:  283:    return 1;
        -:  284:  //if three supply pile are at 0, the game ends
       35:  285:  j = 0;
      910:  286:  for (i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      875:  287:    if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  288:      j++;
        -:  289:  }
       35:  290:  if (j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  291:    return 1;
       35:  292:  return 0;
        -:  293:}
        -:  294:
function scoreFor called 14 returned 100% blocks executed 100%
       14:  295:int scoreFor(int player, struct gameState *state) {
       14:  296:  int i, score = 0;
        -:  297:  //score from hand
     6019:  298:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     6005:  299:    if (state->hand[player][i] == curse)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  300:      score = score - 1;
     6005:  301:    if (state->hand[player][i] == estate)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  302:      score = score + 1;
     6005:  303:    if (state->hand[player][i] == duchy)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  304:      score = score + 3;
     6005:  305:    if (state->hand[player][i] == province)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  306:      score = score + 6;
     6005:  307:    if (state->hand[player][i] == great_hall)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  308:      score = score + 1;
     6005:  309:    if (state->hand[player][i] == gardens)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  310:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 returned 100%
        -:  311:  }
        -:  312:  //score from discard
     3658:  313:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     3644:  314:    if (state->discard[player][i] == curse)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  315:      score = score - 1;
     3644:  316:    if (state->discard[player][i] == estate)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      606:  317:      score = score + 1;
     3644:  318:    if (state->discard[player][i] == duchy)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  319:      score = score + 3;
     3644:  320:    if (state->discard[player][i] == province)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      607:  321:      score = score + 6;
     3644:  322:    if (state->discard[player][i] == great_hall)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  323:      score = score + 1;
     3644:  324:    if (state->discard[player][i] == gardens)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  325:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 returned 100%
        -:  326:  }
        -:  327:  //score from deck
     3658:  328:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     3644:  329:    if (state->deck[player][i] == curse)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      606:  330:      score = score - 1;
     3644:  331:    if (state->deck[player][i] == estate)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      604:  332:      score = score + 1;
     3644:  333:    if (state->deck[player][i] == duchy)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  334:      score = score + 3;
     3644:  335:    if (state->deck[player][i] == province)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      604:  336:      score = score + 6;
     3644:  337:    if (state->deck[player][i] == great_hall)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  338:      score = score + 1;
     3644:  339:    if (state->deck[player][i] == gardens)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  340:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 returned 100%
        -:  341:  }
       14:  342:  return score;
        -:  343:}
        -:  344:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  345:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  346:  int i, j, highScore, currentPlayer;
        -:  347:  //get score for each player
    #####:  348:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  349:    //set unused player scores to -9999
    #####:  350:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
    #####:  351:      players[i] = -9999;
        -:  352:    else
    #####:  353:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  354:  }
        -:  355:  //find highest score
    #####:  356:  j = 0;
    #####:  357:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  358:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
    #####:  359:      j = i;
        -:  360:  }
    #####:  361:  highScore = players[j];
        -:  362:  //add 1 to players who had less turns
    #####:  363:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  364:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  365:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  366:      players[i]++;
        -:  367:  }
        -:  368:  //find new highest score
    #####:  369:  j = 0;
    #####:  370:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  371:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
    #####:  372:      j = i;
        -:  373:  }
    #####:  374:  highScore = players[j];
        -:  375:  //set winners in array to 1 and rest to 0
    #####:  376:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  377:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
    #####:  378:      players[i] = 1;
        -:  379:    else
    #####:  380:      players[i] = 0;
        -:  381:  }
    #####:  382:  return 0;
        -:  383:}
        -:  384:
function drawCard called 2620087 returned 100% blocks executed 100%
  2620087:  385:int drawCard(int player, struct gameState *state) {
        -:  386:  int count, deckCounter, i;
  2620087:  387:  if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  388:    //Step 1 Shuffle the discard pile back into a deck
        -:  389:    //Move discard to deck
  1330684:  390:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
  1302704:  391:      state->deck[player][i] = state->discard[player][i];
  1302704:  392:      state->discard[player][i] = -1;
        -:  393:    }
    27980:  394:    state->deckCount[player] = state->discardCount[player];
    27980:  395:    state->discardCount[player] = 0;//Reset discard
        -:  396:    //Shufffle the deck
    27980:  397:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  398:    if (DEBUG) //Debug statements
        -:  399:      printf("Deck count now: %d\n", state->deckCount[player]);
    27980:  400:    state->discardCount[player] = 0;
        -:  401:    //Step 2 Draw Card
    27980:  402:    count = state->handCount[player];//Get current player's hand count
        -:  403:    if (DEBUG) //Debug statements
        -:  404:      printf("Current hand count: %d\n", count);
    27980:  405:    deckCounter = state->deckCount[player];//Create a holder for the deck count
    27980:  406:    if (deckCounter == 0)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
    15243:  407:      return -1;
    12737:  408:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    12737:  409:    state->deckCount[player]--;
    12737:  410:    state->handCount[player]++;//Increment hand count
        -:  411:  }
        -:  412:  else {
  2592107:  413:    int count = state->handCount[player];//Get current hand count for player
        -:  414:    int deckCounter;
        -:  415:    if (DEBUG) //Debug statements
        -:  416:      printf("Current hand count: %d\n", count);
  2592107:  417:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2592107:  418:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2592107:  419:    state->deckCount[player]--;
  2592107:  420:    state->handCount[player]++;//Increment hand count
        -:  421:  }
  2604844:  422:  return 0;
        -:  423:}
        -:  424:
function getCost called 70 returned 100% blocks executed 23%
       70:  425:int getCost(int cardNumber) {
       70:  426:  switch (cardNumber) {
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 23%
branch  4 taken 0%
branch  5 taken 40%
branch  6 taken 26%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  427:    case curse:
    #####:  428:      return 0;
        -:  429:    case estate:
    #####:  430:      return 2;
        -:  431:    case duchy:
    #####:  432:      return 5;
        -:  433:    case province:
       16:  434:      return 8;
        -:  435:    case copper:
    #####:  436:      return 0;
        -:  437:    case silver:
       28:  438:      return 3;
        -:  439:    case gold:
       18:  440:      return 6;
        -:  441:    case adventurer:
        4:  442:      return 6;
        -:  443:    case council_room:
    #####:  444:      return 5;
        -:  445:    case feast:
    #####:  446:      return 4;
        -:  447:    case gardens:
    #####:  448:      return 4;
        -:  449:    case mine:
    #####:  450:      return 5;
        -:  451:    case remodel:
    #####:  452:      return 4;
        -:  453:    case smithy:
        4:  454:      return 4;
        -:  455:    case village:
    #####:  456:      return 3;
        -:  457:    case baron:
    #####:  458:      return 4;
        -:  459:    case great_hall:
    #####:  460:      return 3;
        -:  461:    case minion:
    #####:  462:      return 5;
        -:  463:    case steward:
    #####:  464:      return 3;
        -:  465:    case tribute:
    #####:  466:      return 5;
        -:  467:    case ambassador:
    #####:  468:      return 3;
        -:  469:    case cutpurse:
    #####:  470:      return 4;
        -:  471:    case embargo:
    #####:  472:      return 2;
        -:  473:    case outpost:
    #####:  474:      return 5;
        -:  475:    case salvager:
    #####:  476:      return 4;
        -:  477:    case sea_hag:
    #####:  478:      return 4;
        -:  479:    case treasure_map:
    #####:  480:      return 4;
        -:  481:  }
    #####:  482:  return -1;
        -:  483:}
        -:  484:
        -:  485://Refactored cases from original cardEffect() switch statement: playAdventurer, playSmithy, playFeast, playRemodel, and playBaron
        -:  486://Refactored case adventurer
function playAdventurer called 25012 returned 100% blocks executed 100%
    25012:  487:int playAdventurer(struct gameState *state, int currentPlayer) {
        -:  488:  int temphand[MAX_HAND];// moved above the if statement
    25012:  489:  int drawntreasure = 0;
        -:  490:  int cardDrawn;
    25012:  491:  int z = 0;// this is the counter for the temp hand
  2569769:  492:  while (drawntreasure < 2) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2519745:  493:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     5282:  494:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  495:    }
  2519745:  496:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  497:    //top card of hand is most recently drawn card.
  2519745:  498:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
  2519745:  499:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
    25012:  500:      drawntreasure+=2;
        -:  501:    else {
  2494733:  502:      temphand[z] = cardDrawn;
  2494733:  503:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  2494733:  504:      z++;
        -:  505:    }
        -:  506:  }
  2544757:  507:  while (z - 1 >= 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  508:    // discard all cards in play that have been drawn
  2494733:  509:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
  2494733:  510:    z = z - 1;
        -:  511:  }
    25012:  512:  return 0;
        -:  513:}
        -:  514:
        -:  515://Refactored case smithy
function playSmithy called 25004 returned 100% blocks executed 100%
    25004:  516:int playSmithy(struct gameState *state, int handPos, int currentPlayer) {
        -:  517:  int i;
        -:  518:  //+3 Cards
   125020:  519:  for (i = 0; i <= 3; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
   100016:  520:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  521:  }
        -:  522:  //discard card from hand
    25004:  523:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    25004:  524:  return 0;
        -:  525:}
        -:  526:
        -:  527://Refactored case feast
function playFeast called 0 returned 0% blocks executed 0%
    #####:  528:int playFeast(struct gameState *state, int currentPlayer, int choice1) {
    #####:  529:  int nextPlayer = currentPlayer + 1;
    #####:  530:  int tributeRevealedCards[2] = {-1, -1};
        -:  531:  int temphand[MAX_HAND];// moved above the if statement
        -:  532:  int i;
        -:  533:  int x;
        -:  534:  //gain card with cost up to 5
        -:  535:  //Backup hand
    #####:  536:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  537:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  538:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  539:  }
        -:  540:  //Backup hand
        -:  541:
        -:  542:  //Update Coins for Buy
    #####:  543:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  544:  x = 1;//Condition to loop on
    #####:  545:  while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  546:    if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  547:      if (DEBUG)
        -:  548:        printf("None of that card left, sorry!\n");
        -:  549:
        -:  550:      if (DEBUG) {
        -:  551:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  552:      }
        -:  553:    }
    #####:  554:    else if (state->coins <= getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  555:      printf("That card is too expensive!\n");
call    0 never executed
        -:  556:
        -:  557:      if (DEBUG) {
        -:  558:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  559:      }
        -:  560:    }
        -:  561:    else {
        -:  562:
        -:  563:      if (DEBUG) {
        -:  564:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  565:                                   state->discardCount[currentPlayer]);
        -:  566:      }
        -:  567:
    #####:  568:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  569:      x = 0;//No more buying cards
        -:  570:
        -:  571:      if (DEBUG) {
        -:  572:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  573:                                   state->discardCount[currentPlayer]);
        -:  574:      }
        -:  575:
        -:  576:    }
        -:  577:  }
        -:  578:
        -:  579:  //Reset Hand
    #####:  580:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  581:    state->hand[currentPlayer][i] = temphand[i];
    #####:  582:    temphand[i] = -1;
        -:  583:  }
        -:  584:  //Reset Hand
        -:  585:
    #####:  586:  return 0;
        -:  587:}
        -:  588:
        -:  589://Refactored case remodel
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  590:int playRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -:  591:  int i;
        -:  592:  int j;
        -:  593:
    #####:  594:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  595:
    #####:  596:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  597:    return -1;
        -:  598:  }
        -:  599:
    #####:  600:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  601:
        -:  602:  //discard card from hand
    #####:  603:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  604:
        -:  605:  //discard trashed card
    #####:  606:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  607:    if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  608:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  609:      break;
        -:  610:    }
        -:  611:  }
        -:  612:
    #####:  613:  return 0;
        -:  614:}
        -:  615:
        -:  616://Refactored case baron
function playBaron called 0 returned 0% blocks executed 0%
    #####:  617:int playBaron(struct gameState *state, int currentPlayer, int choice1) {
    #####:  618:  state->numBuys++;//Increase buys by 1!
    #####:  619:  if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  620:    int p = 0;//Iterator for hand!
    #####:  621:    int card_not_discarded = 1;//Flag for discard set!
    #####:  622:    while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  623:      if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  624:        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  625:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  626:        state->discardCount[currentPlayer]++;
    #####:  627:        for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  628:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  629:        }
    #####:  630:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  631:        state->handCount[currentPlayer]--;
    #####:  632:        card_not_discarded = 0;//Exit the loop
        -:  633:      }
    #####:  634:      else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  635:        if (DEBUG) {
        -:  636:          printf("No estate cards in your hand, invalid choice\n");
        -:  637:          printf("Must gain an estate if there are any\n");
        -:  638:        }
    #####:  639:        if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  640:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  641:          state->supplyCount[estate]--;//Decrement estates
    #####:  642:          if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  643:            isGameOver(state);
call    0 never executed
        -:  644:          }
        -:  645:        }
    #####:  646:        card_not_discarded = 0;//Exit the loop
        -:  647:      }
        -:  648:
        -:  649:      else {
    #####:  650:        p++;//Next card
        -:  651:      }
        -:  652:    }
        -:  653:  }
        -:  654:
        -:  655:  else {
    #####:  656:    if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  657:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  658:      state->supplyCount[estate]--;//Decrement Estates
    #####:  659:      if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  660:        isGameOver(state);
call    0 never executed
        -:  661:      }
        -:  662:    }
        -:  663:  }
        -:  664:
    #####:  665:  return 0;
        -:  666:}
        -:  667:
function cardEffect called 5 returned 100% blocks executed 9%
        5:  668:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  669:  int i, j, k, x, index;
        5:  670:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  671:  int nextPlayer = currentPlayer + 1;
        5:  672:  int tributeRevealedCards[2] = {-1, -1};
        -:  673:  int temphand[MAX_HAND];// moved above the if statement
        5:  674:  int drawntreasure = 0;
        -:  675:  int cardDrawn;
        5:  676:  int z = 0;// this is the counter for the temp hand
        5:  677:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        3:  678:    nextPlayer = 0;
        -:  679:  //uses switch to select card and perform actions
        5:  680:  switch (card) {
branch  0 taken 60%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 40%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  681:    case adventurer:
       12:  682:      while (drawntreasure < 2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  683:        if (state->deckCount[currentPlayer] < 1) //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  684:          shuffle(currentPlayer, state);
call    0 never executed
        6:  685:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  686:        //top card of hand is most recently drawn card.
        6:  687:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        6:  688:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        6:  689:          drawntreasure++;
        -:  690:        else {
    #####:  691:          temphand[z] = cardDrawn;
    #####:  692:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  693:          z++;
        -:  694:        }
        -:  695:      }
        6:  696:      while (z - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  697:        // discard all cards in play that have been drawn
    #####:  698:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  699:        z = z - 1;
        -:  700:      }
        3:  701:      return 0;
        -:  702:
        -:  703:    case council_room:      
    #####:  704:      for (i = 0; i < 4; i++) //+4 Cards
branch  0 never executed
branch  1 never executed
    #####:  705:        drawCard(currentPlayer, state);      
call    0 never executed
    #####:  706:      state->numBuys++; //+1 Buy
        -:  707:      //Each other player draws a card
    #####:  708:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  709:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
    #####:  710:          drawCard(i, state);
call    0 never executed
        -:  711:      }
        -:  712:      //put played card in played card pile
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  714:      return 0;
        -:  715:
        -:  716:    case feast: //gain card with cost up to 5      
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  719:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  721:      }
        -:  722:      //Update Coins for Buy
    #####:  723:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  724:      x = 1;//Condition to loop on
    #####:  725:      while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  726:        if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  727:          if (DEBUG)
        -:  728:            printf("None of that card left, sorry!\n");
        -:  729:          if (DEBUG)
        -:  730:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  731:        }
    #####:  732:        else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:          printf("That card is too expensive!\n");
call    0 never executed
        -:  734:          if (DEBUG)
        -:  735:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  736:        }
        -:  737:        else {
        -:  738:          if (DEBUG)
        -:  739:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  740:                                       state->discardCount[currentPlayer]);
    #####:  741:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  742:          x = 0;//No more buying cards
        -:  743:          if (DEBUG)
        -:  744:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  745:                                       state->discardCount[currentPlayer]);
        -:  746:        }
        -:  747:      }
        -:  748:      //Reset Hand
    #####:  749:      for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  750:        state->hand[currentPlayer][i] = temphand[i];
    #####:  751:        temphand[i] = -1;
        -:  752:      }
    #####:  753:      return 0;
        -:  754:
        -:  755:    case gardens:
    #####:  756:      return -1;
        -:  757:
        -:  758:    case mine:
    #####:  759:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  760:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  761:        return -1;
    #####:  762:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  763:        return -1;
    #####:  764:      if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  765:        return -1;      
    #####:  766:      gainCard(choice2, state, 2, currentPlayer);      
call    0 never executed
    #####:  767:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
        -:  768:      //discard trashed card
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  770:        if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  771:          discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  772:          break;
        -:  773:        }
        -:  774:      }
    #####:  775:      return 0;
        -:  776:
        -:  777:    case remodel:
    #####:  778:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  779:      if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  780:        return -1;
    #####:  781:      gainCard(choice2, state, 0, currentPlayer);      
call    0 never executed
    #####:  782:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  785:        if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  786:          discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  787:          break;
        -:  788:        }
        -:  789:      }
    #####:  790:      return 0;
        -:  791:
        -:  792:    case smithy: //+3 Cards      
        8:  793:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:  794:        drawCard(currentPlayer, state);      
call    0 returned 100%
        2:  795:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 returned 100%
        2:  796:      return 0;
        -:  797:
        -:  798:    case village: //+1 Card      
    #####:  799:      drawCard(currentPlayer, state);      
call    0 never executed
    #####:  800:      state->numActions = state->numActions + 2; //+2 Actions      
    #####:  801:      discardCard(handPos, currentPlayer, state, 0); //discard played card from hand
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case baron:
    #####:  805:      state->numBuys++;//Increase buys by 1
    #####:  806:      if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  807:        int p = 0;//Iterator for hand
    #####:  808:        int card_not_discarded = 1;//Flag for discard set
    #####:  809:        while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  810:          if (state->hand[currentPlayer][p] == estate) {//Found an estate card
branch  0 never executed
branch  1 never executed
    #####:  811:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  812:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  813:            state->discardCount[currentPlayer]++;
    #####:  814:            for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
    #####:  815:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####:  816:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  817:            state->handCount[currentPlayer]--;
    #####:  818:            card_not_discarded = 0;//Exit the loop
        -:  819:          }
    #####:  820:          else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  821:            if (DEBUG) {
        -:  822:              printf("No estate cards in your hand, invalid choice\n");
        -:  823:              printf("Must gain an estate if there are any\n");
        -:  824:            }
    #####:  825:            if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:              gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  827:              state->supplyCount[estate]--;//Decrement estates
    #####:  828:              if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:                isGameOver(state);
call    0 never executed
        -:  830:            }
    #####:  831:            card_not_discarded = 0;//Exit the loop
        -:  832:          }
        -:  833:          else
    #####:  834:            p++;//Next card
        -:  835:        }
        -:  836:      }
        -:  837:      else {
    #####:  838:        if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:          state->supplyCount[estate]--;//Decrement Estates
    #####:  841:          if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:            isGameOver(state);
call    0 never executed
        -:  843:        }
        -:  844:      }
    #####:  845:      return 0;
        -:  846:
        -:  847:    case great_hall: //+1 Card      
    #####:  848:      drawCard(currentPlayer, state);      
call    0 never executed
    #####:  849:      state->numActions++; //+1 Actions      
    #####:  850:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
    #####:  851:      return 0;
        -:  852:
        -:  853:    case minion: //+1 action      
    #####:  854:      state->numActions++;      
    #####:  855:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
    #####:  856:      if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
    #####:  857:        state->coins = state->coins + 2;
    #####:  858:      else if (choice2) { //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4        
branch  0 never executed
branch  1 never executed
    #####:  859:        while (numHandCards(state) > 0) //discard hand
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  860:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  861:        for (i = 0; i < 4; i++) //draw 4
branch  0 never executed
branch  1 never executed
    #####:  862:          drawCard(currentPlayer, state);
call    0 never executed
        -:  863:        //other players discard hand and redraw if hand size > 4
    #####:  864:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  865:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  866:            if (state->handCount[i] > 4) {              
branch  0 never executed
branch  1 never executed
    #####:  867:              while (state->handCount[i] > 0) //discard hand
branch  0 never executed
branch  1 never executed
    #####:  868:                discardCard(handPos, i, state, 0);              
call    0 never executed
    #####:  869:              for (j = 0; j < 4; j++) //draw 4
branch  0 never executed
branch  1 never executed
    #####:  870:                drawCard(i, state);
call    0 never executed
        -:  871:            }
        -:  872:          }
        -:  873:        }
        -:  874:      }
    #####:  875:      return 0;
        -:  876:
        -:  877:    case steward:
    #####:  878:      if (choice1 == 1) { //+2 cards        
branch  0 never executed
branch  1 never executed
    #####:  879:        drawCard(currentPlayer, state);
call    0 never executed
    #####:  880:        drawCard(currentPlayer, state);
call    0 never executed
        -:  881:      }
    #####:  882:      else if (choice1 == 2) //+2 coins        
branch  0 never executed
branch  1 never executed
    #####:  883:        state->coins = state->coins + 2;
        -:  884:      else { //trash 2 cards in hand
    #####:  885:        discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  886:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  887:      }      
    #####:  888:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
    #####:  889:      return 0;
        -:  890:
        -:  891:    case tribute:
    #####:  892:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  893:        if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  894:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  895:          state->deckCount[nextPlayer]--;
        -:  896:        }
    #####:  897:        else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  898:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  899:          state->discardCount[nextPlayer]--;
        -:  900:        }
        -:  901:        else //No Card to Reveal          
        -:  902:          if (DEBUG)
        -:  903:            printf("No cards to reveal\n");
        -:  904:      }
        -:  905:      else {
    #####:  906:        if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  907:          for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  908:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:            state->deckCount[nextPlayer]++;
    #####:  910:            state->discard[nextPlayer][i] = -1;
    #####:  911:            state->discardCount[nextPlayer]--;
        -:  912:          }
    #####:  913:          shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -:  914:        }
    #####:  915:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  916:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:        state->deckCount[nextPlayer]--;
    #####:  918:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  919:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:        state->deckCount[nextPlayer]--;
        -:  921:      }
    #####:  922:      if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  923:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  924:        state->playedCardCount++;
    #####:  925:        tributeRevealedCards[1] = -1;
        -:  926:      }
    #####:  927:      for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  928:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  929:          || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
    #####:  930:          state->coins += 2;
        -:  931:        }
    #####:  932:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  933:                 || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  934:                 || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
    #####:  935:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  936:          drawCard(currentPlayer, state);
call    0 never executed
        -:  937:        }
        -:  938:        else //Action Card
    #####:  939:          state->numActions = state->numActions + 2;
        -:  940:      }
    #####:  941:      return 0;
        -:  942:
        -:  943:    case ambassador:
    #####:  944:      j = 0;    //used to check if player has enough cards to discard
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  946:        return -1;
    #####:  947:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
    #####:  948:        return -1;
    #####:  949:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  950:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  951:          j++;
        -:  952:      }
    #####:  953:      if (j < choice2)
branch  0 never executed
branch  1 never executed
    #####:  954:        return -1;
        -:  955:      if (DEBUG)
        -:  956:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  957:      //increase supply count for choosen card by amount being discarded
    #####:  958:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  959:      //each other player gains a copy of revealed card
    #####:  960:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  961:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
    #####:  962:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  963:      }      
    #####:  964:      discardCard(handPos, currentPlayer, state, 0); //discard played card from hand
call    0 never executed
        -:  965:      //trash copies of cards returned to supply
    #####:  966:      for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  967:        for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  969:            discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  970:            break;
        -:  971:          }
        -:  972:        }
        -:  973:      }
    #####:  974:      return 0;
        -:  975:
        -:  976:    case cutpurse:
    #####:  977:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  978:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  979:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  980:          for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  981:            if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  982:              discardCard(j, i, state, 0);
call    0 never executed
    #####:  983:              break;
        -:  984:            }
    #####:  985:            if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  986:              for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  987:                if (DEBUG)
        -:  988:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  989:              }
    #####:  990:              break;
        -:  991:            }
        -:  992:          }
        -:  993:        }
        -:  994:      }      
    #####:  995:      discardCard(handPos, currentPlayer, state, 0); //discard played card from hand
call    0 never executed
    #####:  996:      return 0;
        -:  997:
        -:  998:    case embargo:      
    #####:  999:      state->coins = state->coins + 2; //+2 Coins
        -: 1000:      //see if selected pile is in play
    #####: 1001:      if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
    #####: 1002:        return -1;
        -: 1003:      //add embargo token to selected supply pile
    #####: 1004:      state->embargoTokens[choice1]++;
        -: 1005:      //trash card
    #####: 1006:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case outpost:      
    #####: 1010:      state->outpostPlayed++; //set outpost flag      
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0); //discard card
call    0 never executed
    #####: 1012:      return 0;
        -: 1013:
        -: 1014:    case salvager: //+1 buy      
    #####: 1015:      state->numBuys++;
    #####: 1016:      if (choice1) { //gain coins equal to trashed card        
branch  0 never executed
branch  1 never executed
    #####: 1017:        state->coins = state->coins + getCost(handCard(choice1, state));        
call    0 never executed
call    1 never executed
    #####: 1018:        discardCard(choice1, currentPlayer, state, 1); //trash card
call    0 never executed
        -: 1019:      }      
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0); //discard card
call    0 never executed
    #####: 1021:      return 0;
        -: 1022:
        -: 1023:    case sea_hag:
    #####: 1024:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1025:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1026:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1027:          state->deckCount[i]--;
    #####: 1028:          state->discardCount[i]++;
    #####: 1029:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1030:        }
        -: 1031:      }
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:    case treasure_map:      
    #####: 1035:      index = -1; //search hand for another treasure_map
    #####: 1036:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1037:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1038:          index = i;
    #####: 1039:          break;
        -: 1040:        }
        -: 1041:      }
    #####: 1042:      if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1043:        //trash both treasure cards
    #####: 1044:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:        discardCard(index, currentPlayer, state, 1);        
call    0 never executed
    #####: 1046:        for (i = 0; i < 4; i++) //gain 4 Gold cards
branch  0 never executed
branch  1 never executed
    #####: 1047:          gainCard(gold, state, 1, currentPlayer);        
call    0 never executed
    #####: 1048:        return 1; //return success
        -: 1049:      }
        -: 1050:      //no second treasure_map found in hand
    #####: 1051:      return -1;
        -: 1052:  }
    #####: 1053:  return -1;
        -: 1054:}
        -: 1055:
function discardCard called 25026 returned 100% blocks executed 100%
    25026: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:  //if card is not trashed, added to Played pile 
    25026: 1058:  if (trashFlag < 1) { //add card to played pile    
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    25012: 1059:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    25012: 1060:    state->playedCardCount++;
        -: 1061:  }  
    25026: 1062:  state->hand[currentPlayer][handPos] = -1; //set played card to -1
        -: 1063:  //remove card from player's hand
    25026: 1064:  if (handPos == (state->handCount[currentPlayer] - 1))  //last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        8: 1065:    state->handCount[currentPlayer]--; //reduce number of cards in hand
    25018: 1066:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4: 1067:    state->handCount[currentPlayer]--; //reduce number of cards in hand
        -: 1068:  else { //replace discarded card with last card in hand    
    25014: 1069:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1070:    //set last card to -1
    25014: 1071:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1072:    //reduce number of cards in hand
    25014: 1073:    state->handCount[currentPlayer]--;
        -: 1074:  }
    25026: 1075:  return 0;
        -: 1076:}
        -: 1077:
function gainCard called 191 returned 100% blocks executed 100%
      191: 1078:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1079:  //Note: supplyPos is enum of choosen card
        -: 1080:  //check if supply pile is empty (0) or card is not used in game (-1)
      191: 1081:  if (supplyCount(supplyPos, state) < 1)
call    0 returned 100%
branch  1 taken 28% (fallthrough)
branch  2 taken 72%
       54: 1082:    return -1;
        -: 1083:  //added card for [whoseTurn] current player:
        -: 1084:  // toFlag = 0 : add to discard
        -: 1085:  // toFlag = 1 : add to deck
        -: 1086:  // toFlag = 2 : add to hand
      137: 1087:  if (toFlag == 1) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       34: 1088:    state->deck[player][state->deckCount[player]] = supplyPos;
       34: 1089:    state->deckCount[player]++;
        -: 1090:  }
      103: 1091:  else if (toFlag == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       34: 1092:    state->hand[player][state->handCount[player]] = supplyPos;
       34: 1093:    state->handCount[player]++;
        -: 1094:  }
        -: 1095:  else {
       69: 1096:    state->discard[player][state->discardCount[player]] = supplyPos;
       69: 1097:    state->discardCount[player]++;
        -: 1098:  }
      137: 1099:  state->supplyCount[supplyPos]--; //decrease number in supply pile
      137: 1100:  return 0;
        -: 1101:}
        -: 1102:
function updateCoins called 67 returned 100% blocks executed 100%
       67: 1103:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1104:  int i;  
       67: 1105:  state->coins = 0; //reset coin count
        -: 1106:  //add coins for each Treasure card in player's hand
      412: 1107:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      345: 1108:    if (state->hand[player][i] == copper)
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
      205: 1109:      state->coins += 1;
      140: 1110:    else if (state->hand[player][i] == silver)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
       42: 1111:      state->coins += 2;
       98: 1112:    else if (state->hand[player][i] == gold)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       15: 1113:      state->coins += 3;
        -: 1114:  }  
       67: 1115:  state->coins += bonus; //add bonus
       67: 1116:  return 0;
        -: 1117:}
        -: 1118://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:27
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 5299781 returned 100% blocks executed 100%
  5299781:    8:int compare(const void *a, const void *b) {
  5299781:    9:  if (*(int *) a > *(int *) b)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
  1963468:   10:    return 1;
  3336313:   11:  if (*(int *) a < *(int *) b)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
  1951716:   12:    return -1;
  1384597:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState *newGame() {
    #####:   17:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int *k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 27 returned 100% blocks executed 88%
       27:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:  int i, j, it;
        -:   39:  //set up random number generator
       27:   40:  SelectStream(1);
call    0 returned 100%
       27:   41:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   42:  //check number of players
       27:   43:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   44:    return -1;
        -:   45:  //set number of players
       27:   46:  state->numPlayers = numPlayers;
        -:   47:  //check selected kingdom cards are different
      297:   48:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2970:   49:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2700:   50:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   51:        return -1;
        -:   52:    }
        -:   53:  }
        -:   54:  //initialize supply  
        -:   55:  //set number of Curse cards
       27:   56:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:   57:    state->supplyCount[curse] = 10;
    #####:   58:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
    #####:   59:    state->supplyCount[curse] = 20;
        -:   60:  else
    #####:   61:    state->supplyCount[curse] = 30;
        -:   62:  //set number of Victory cards
       27:   63:  if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:   64:    state->supplyCount[estate] = 8;
       27:   65:    state->supplyCount[duchy] = 8;
       27:   66:    state->supplyCount[province] = 8;
        -:   67:  }
        -:   68:  else {
    #####:   69:    state->supplyCount[estate] = 12;
    #####:   70:    state->supplyCount[duchy] = 12;
    #####:   71:    state->supplyCount[province] = 12;
        -:   72:  }
        -:   73:  //set number of Treasure cards
       27:   74:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       27:   75:  state->supplyCount[silver] = 40;
       27:   76:  state->supplyCount[gold] = 30;
        -:   77:  //set number of Kingdom cards
      567:   78:  for (i = adventurer; i <= treasure_map; i++) { //loop all cards  
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
     4455:   79:    for (j = 0; j < 10; j++) { //loop chosen cards    
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
     4185:   80:      if (kingdomCards[j] == i) { //check if card is a 'Victory' Kingdom card        
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
      270:   81:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
       54:   82:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:   83:            state->supplyCount[i] = 8;
        -:   84:          else
    #####:   85:            state->supplyCount[i] = 12;
        -:   86:        }
        -:   87:        else
      243:   88:          state->supplyCount[i] = 10;
      270:   89:        break;
        -:   90:      }
        -:   91:      else    //card is not in the set choosen for the game
     3915:   92:        state->supplyCount[i] = -1;
        -:   93:    }
        -:   94:  }
        -:   95:  //supply intilization complete
        -:   96:  //set player decks
       81:   97:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       54:   98:    state->deckCount[i] = 0;
      216:   99:    for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      162:  100:      state->deck[i][j] = estate;
      162:  101:      state->deckCount[i]++;
        -:  102:    }
      432:  103:    for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
      378:  104:      state->deck[i][j] = copper;
      378:  105:      state->deckCount[i]++;
        -:  106:    }
        -:  107:  }
        -:  108:  //shuffle player decks
       81:  109:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       54:  110:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  111:      return -1;
        -:  112:  }
       81:  113:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       54:  114:    state->handCount[i] = 0;
       54:  115:    state->discardCount[i] = 0;
        -:  116:  }
        -:  117:  //set embargo tokens to 0 for all supply piles
      756:  118:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      729:  119:    state->embargoTokens[i] = 0;
        -:  120:  //initialize first player's turn
       27:  121:  state->outpostPlayed = 0;
       27:  122:  state->phase = 0;
       27:  123:  state->numActions = 1;
       27:  124:  state->numBuys = 1;
       27:  125:  state->playedCardCount = 0;
       27:  126:  state->whoseTurn = 0;
       27:  127:  state->handCount[state->whoseTurn] = 0;
        -:  128:  //Moved draw cards to here, only drawing at the start of a turn
      162:  129:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      135:  130:    drawCard(state->whoseTurn, state);
call    0 returned 100%
       27:  131:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
       27:  132:  return 0;
        -:  133:}
        -:  134:
function shuffle called 33316 returned 100% blocks executed 100%
    33316:  135:int shuffle(int player, struct gameState *state) {
    33316:  136:  int newDeck[MAX_DECK], newDeckPos = 0, card, i;
    33316:  137:  if (state->deckCount[player] < 1)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
    20525:  138:    return -1;
    12791:  139:  qsort((void *) (state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  140:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
  1328826:  141:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1303244:  142:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  1303244:  143:    newDeck[newDeckPos] = state->deck[player][card];
  1303244:  144:    newDeckPos++;
108497695:  145:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
107194451:  146:      state->deck[player][i] = state->deck[player][i + 1];
  1303244:  147:    state->deckCount[player]--;
        -:  148:  }
  1316035:  149:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1303244:  150:    state->deck[player][i] = newDeck[i];
  1303244:  151:    state->deckCount[player]++;
        -:  152:  }
    12791:  153:  return 0;
        -:  154:}
        -:  155:
function playCard called 30 returned 100% blocks executed 80%
       30:  156:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  157:  int card;
       30:  158:  int coin_bonus = 0; //tracks coins gain from actions
        -:  159:  //check if it is the right phase
       30:  160:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  161:    return -1;
        -:  162:  //check if player has enough actions
       30:  163:  if (state->numActions < 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       25:  164:    return -1;
        -:  165:  //get card played
        5:  166:  card = handCard(handPos, state);
call    0 returned 100%
        -:  167:  //check if selected card is an action
        5:  168:  if (card < adventurer || card > treasure_map)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  169:    return -1;
        -:  170:  //play card
        5:  171:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  172:    return -1;
        -:  173:  //reduce number of actions
        5:  174:  state->numActions--;
        -:  175:  //update coins (Treasure cards may be added with card draws)
        5:  176:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        5:  177:  return 0;
        -:  178:}
        -:  179:
function buyCard called 35 returned 100% blocks executed 79%
       35:  180:int buyCard(int supplyPos, struct gameState *state) {
        -:  181:  int who;
        -:  182:  if (DEBUG)
        -:  183:    printf("Entering buyCard...\n");
        -:  184:  // I don't know what to do about the phase thing.
       35:  185:  who = state->whoseTurn;
       35:  186:  if (state->numBuys < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  187:    if (DEBUG)
        -:  188:      printf("You do not have any buys left\n");
    #####:  189:    return -1;
        -:  190:  } 
       35:  191:  else if (supplyCount(supplyPos, state) < 1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  192:    if (DEBUG)
        -:  193:      printf("There are not any of that type of card left\n");
    #####:  194:    return -1;
        -:  195:  } 
       35:  196:  else if (state->coins < getCost(supplyPos)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  197:    if (DEBUG)
        -:  198:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  199:    return -1;
        -:  200:  } 
        -:  201:  else {
       35:  202:    state->phase = 1;
        -:  203:    //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
       35:  204:    gainCard(supplyPos, state, 0, who); 
call    0 returned 100%
       35:  205:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       35:  206:    state->numBuys--;
        -:  207:    if (DEBUG)
        -:  208:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos,
        -:  209:             getCost(supplyPos), state->numBuys, state->coins);
        -:  210:  }
       35:  211:  return 0;
        -:  212:}
        -:  213:
function numHandCards called 250 returned 100% blocks executed 100%
      250:  214:int numHandCards(struct gameState *state) {
      250:  215:  return state->handCount[whoseTurn(state)];
call    0 returned 100%
        -:  216:}
        -:  217:
function handCard called 490 returned 100% blocks executed 100%
      490:  218:int handCard(int handPos, struct gameState *state) {
      490:  219:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      490:  220:  return state->hand[currentPlayer][handPos];
        -:  221:}
        -:  222:
function supplyCount called 226 returned 100% blocks executed 100%
      226:  223:int supplyCount(int card, struct gameState *state) {
      226:  224:  return state->supplyCount[card];
        -:  225:}
        -:  226:
function fullDeckCount called 2200 returned 100% blocks executed 88%
     2200:  227:int fullDeckCount(int player, int card, struct gameState *state) {
     2200:  228:  int i, count = 0;
   882200:  229:  for (i = 0; i < state->deckCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   880000:  230:    if (state->deck[player][i] == card) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  231:      count++;
        -:  232:  }
  1102200:  233:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1100000:  234:    if (state->hand[player][i] == card) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  235:      count++;
        -:  236:  }
   662200:  237:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   660000:  238:    if (state->discard[player][i] == card)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   180000:  239:      count++;
        -:  240:  }
     2200:  241:  return count;
        -:  242:}
        -:  243:
function whoseTurn called 835 returned 100% blocks executed 100%
      835:  244:int whoseTurn(struct gameState *state) {
      835:  245:  return state->whoseTurn;
        -:  246:}
        -:  247:
function endTurn called 35 returned 100% blocks executed 100%
       35:  248:int endTurn(struct gameState *state) {
        -:  249:  int k, i;
       35:  250:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  251:  //Discard hand
      220:  252:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      185:  253:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      185:  254:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  255:  }
       35:  256:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  257:  //Code for determining the player
       35:  258:  if (currentPlayer < (state->numPlayers - 1))
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       18:  259:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  260:  else
       17:  261:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  262:
       35:  263:  state->outpostPlayed = 0;
       35:  264:  state->phase = 0;
       35:  265:  state->numActions = 1;
       35:  266:  state->coins = 0;
       35:  267:  state->numBuys = 1;
       35:  268:  state->playedCardCount = 0;
       35:  269:  state->handCount[state->whoseTurn] = 0;
        -:  270:
        -:  271:  //Next player draws hand
      210:  272:  for (k = 0; k < 5; k++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      175:  273:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  274:  //Update money
       35:  275:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
       35:  276:  return 0;
        -:  277:}
        -:  278:
function isGameOver called 36 returned 100% blocks executed 82%
       36:  279:int isGameOver(struct gameState *state) {
        -:  280:  int i, j;
        -:  281:  //if stack of Province cards is empty, the game ends
       36:  282:  if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        1:  283:    return 1;
        -:  284:  //if three supply pile are at 0, the game ends
       35:  285:  j = 0;
      910:  286:  for (i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      875:  287:    if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  288:      j++;
        -:  289:  }
       35:  290:  if (j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  291:    return 1;
       35:  292:  return 0;
        -:  293:}
        -:  294:
function scoreFor called 14 returned 100% blocks executed 100%
       14:  295:int scoreFor(int player, struct gameState *state) {
       14:  296:  int i, score = 0;
        -:  297:  //score from hand
     6019:  298:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     6005:  299:    if (state->hand[player][i] == curse)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  300:      score = score - 1;
     6005:  301:    if (state->hand[player][i] == estate)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  302:      score = score + 1;
     6005:  303:    if (state->hand[player][i] == duchy)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  304:      score = score + 3;
     6005:  305:    if (state->hand[player][i] == province)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  306:      score = score + 6;
     6005:  307:    if (state->hand[player][i] == great_hall)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  308:      score = score + 1;
     6005:  309:    if (state->hand[player][i] == gardens)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1000:  310:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 returned 100%
        -:  311:  }
        -:  312:  //score from discard
     3658:  313:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     3644:  314:    if (state->discard[player][i] == curse)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  315:      score = score - 1;
     3644:  316:    if (state->discard[player][i] == estate)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      606:  317:      score = score + 1;
     3644:  318:    if (state->discard[player][i] == duchy)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  319:      score = score + 3;
     3644:  320:    if (state->discard[player][i] == province)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      607:  321:      score = score + 6;
     3644:  322:    if (state->discard[player][i] == great_hall)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  323:      score = score + 1;
     3644:  324:    if (state->discard[player][i] == gardens)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  325:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 returned 100%
        -:  326:  }
        -:  327:  //score from deck
     3658:  328:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     3644:  329:    if (state->deck[player][i] == curse)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      606:  330:      score = score - 1;
     3644:  331:    if (state->deck[player][i] == estate)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      604:  332:      score = score + 1;
     3644:  333:    if (state->deck[player][i] == duchy)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  334:      score = score + 3;
     3644:  335:    if (state->deck[player][i] == province)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      604:  336:      score = score + 6;
     3644:  337:    if (state->deck[player][i] == great_hall)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  338:      score = score + 1;
     3644:  339:    if (state->deck[player][i] == gardens)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      600:  340:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 returned 100%
        -:  341:  }
       14:  342:  return score;
        -:  343:}
        -:  344:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  345:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  346:  int i, j, highScore, currentPlayer;
        -:  347:  //get score for each player
    #####:  348:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  349:    //set unused player scores to -9999
    #####:  350:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
    #####:  351:      players[i] = -9999;
        -:  352:    else
    #####:  353:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  354:  }
        -:  355:  //find highest score
    #####:  356:  j = 0;
    #####:  357:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  358:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
    #####:  359:      j = i;
        -:  360:  }
    #####:  361:  highScore = players[j];
        -:  362:  //add 1 to players who had less turns
    #####:  363:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  364:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  365:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  366:      players[i]++;
        -:  367:  }
        -:  368:  //find new highest score
    #####:  369:  j = 0;
    #####:  370:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  371:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
    #####:  372:      j = i;
        -:  373:  }
    #####:  374:  highScore = players[j];
        -:  375:  //set winners in array to 1 and rest to 0
    #####:  376:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  377:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
    #####:  378:      players[i] = 1;
        -:  379:    else
    #####:  380:      players[i] = 0;
        -:  381:  }
    #####:  382:  return 0;
        -:  383:}
        -:  384:
function drawCard called 2620087 returned 100% blocks executed 100%
  2620087:  385:int drawCard(int player, struct gameState *state) {
        -:  386:  int count, deckCounter, i;
  2620087:  387:  if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  388:    //Step 1 Shuffle the discard pile back into a deck
        -:  389:    //Move discard to deck
  1330684:  390:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
  1302704:  391:      state->deck[player][i] = state->discard[player][i];
  1302704:  392:      state->discard[player][i] = -1;
        -:  393:    }
    27980:  394:    state->deckCount[player] = state->discardCount[player];
    27980:  395:    state->discardCount[player] = 0;//Reset discard
        -:  396:    //Shufffle the deck
    27980:  397:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  398:    if (DEBUG) //Debug statements
        -:  399:      printf("Deck count now: %d\n", state->deckCount[player]);
    27980:  400:    state->discardCount[player] = 0;
        -:  401:    //Step 2 Draw Card
    27980:  402:    count = state->handCount[player];//Get current player's hand count
        -:  403:    if (DEBUG) //Debug statements
        -:  404:      printf("Current hand count: %d\n", count);
    27980:  405:    deckCounter = state->deckCount[player];//Create a holder for the deck count
    27980:  406:    if (deckCounter == 0)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
    15243:  407:      return -1;
    12737:  408:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    12737:  409:    state->deckCount[player]--;
    12737:  410:    state->handCount[player]++;//Increment hand count
        -:  411:  }
        -:  412:  else {
  2592107:  413:    int count = state->handCount[player];//Get current hand count for player
        -:  414:    int deckCounter;
        -:  415:    if (DEBUG) //Debug statements
        -:  416:      printf("Current hand count: %d\n", count);
  2592107:  417:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2592107:  418:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2592107:  419:    state->deckCount[player]--;
  2592107:  420:    state->handCount[player]++;//Increment hand count
        -:  421:  }
  2604844:  422:  return 0;
        -:  423:}
        -:  424:
function getCost called 70 returned 100% blocks executed 23%
       70:  425:int getCost(int cardNumber) {
       70:  426:  switch (cardNumber) {
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 23%
branch  4 taken 0%
branch  5 taken 40%
branch  6 taken 26%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  427:    case curse:
    #####:  428:      return 0;
        -:  429:    case estate:
    #####:  430:      return 2;
        -:  431:    case duchy:
    #####:  432:      return 5;
        -:  433:    case province:
       16:  434:      return 8;
        -:  435:    case copper:
    #####:  436:      return 0;
        -:  437:    case silver:
       28:  438:      return 3;
        -:  439:    case gold:
       18:  440:      return 6;
        -:  441:    case adventurer:
        4:  442:      return 6;
        -:  443:    case council_room:
    #####:  444:      return 5;
        -:  445:    case feast:
    #####:  446:      return 4;
        -:  447:    case gardens:
    #####:  448:      return 4;
        -:  449:    case mine:
    #####:  450:      return 5;
        -:  451:    case remodel:
    #####:  452:      return 4;
        -:  453:    case smithy:
        4:  454:      return 4;
        -:  455:    case village:
    #####:  456:      return 3;
        -:  457:    case baron:
    #####:  458:      return 4;
        -:  459:    case great_hall:
    #####:  460:      return 3;
        -:  461:    case minion:
    #####:  462:      return 5;
        -:  463:    case steward:
    #####:  464:      return 3;
        -:  465:    case tribute:
    #####:  466:      return 5;
        -:  467:    case ambassador:
    #####:  468:      return 3;
        -:  469:    case cutpurse:
    #####:  470:      return 4;
        -:  471:    case embargo:
    #####:  472:      return 2;
        -:  473:    case outpost:
    #####:  474:      return 5;
        -:  475:    case salvager:
    #####:  476:      return 4;
        -:  477:    case sea_hag:
    #####:  478:      return 4;
        -:  479:    case treasure_map:
    #####:  480:      return 4;
        -:  481:  }
    #####:  482:  return -1;
        -:  483:}
        -:  484:
        -:  485://Refactored cases from original cardEffect() switch statement: playAdventurer, playSmithy, playFeast, playRemodel, and playBaron
        -:  486://Refactored case adventurer
function playAdventurer called 25012 returned 100% blocks executed 100%
    25012:  487:int playAdventurer(struct gameState *state, int currentPlayer) {
        -:  488:  int temphand[MAX_HAND];// moved above the if statement
    25012:  489:  int drawntreasure = 0;
        -:  490:  int cardDrawn;
    25012:  491:  int z = 0;// this is the counter for the temp hand
  2569769:  492:  while (drawntreasure < 2) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2519745:  493:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     5282:  494:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  495:    }
  2519745:  496:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  497:    //top card of hand is most recently drawn card.
  2519745:  498:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
  2519745:  499:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
    25012:  500:      drawntreasure+=2;
        -:  501:    else {
  2494733:  502:      temphand[z] = cardDrawn;
  2494733:  503:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  2494733:  504:      z++;
        -:  505:    }
        -:  506:  }
  2544757:  507:  while (z - 1 >= 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  508:    // discard all cards in play that have been drawn
  2494733:  509:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
  2494733:  510:    z = z - 1;
        -:  511:  }
    25012:  512:  return 0;
        -:  513:}
        -:  514:
        -:  515://Refactored case smithy
function playSmithy called 25004 returned 100% blocks executed 100%
    25004:  516:int playSmithy(struct gameState *state, int handPos, int currentPlayer) {
        -:  517:  int i;
        -:  518:  //+3 Cards
   125020:  519:  for (i = 0; i <= 3; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
   100016:  520:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  521:  }
        -:  522:  //discard card from hand
    25004:  523:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    25004:  524:  return 0;
        -:  525:}
        -:  526:
        -:  527://Refactored case feast
function playFeast called 0 returned 0% blocks executed 0%
    #####:  528:int playFeast(struct gameState *state, int currentPlayer, int choice1) {
    #####:  529:  int nextPlayer = currentPlayer + 1;
    #####:  530:  int tributeRevealedCards[2] = {-1, -1};
        -:  531:  int temphand[MAX_HAND];// moved above the if statement
        -:  532:  int i;
        -:  533:  int x;
        -:  534:  //gain card with cost up to 5
        -:  535:  //Backup hand
    #####:  536:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  537:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  538:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  539:  }
        -:  540:  //Backup hand
        -:  541:
        -:  542:  //Update Coins for Buy
    #####:  543:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  544:  x = 1;//Condition to loop on
    #####:  545:  while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  546:    if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  547:      if (DEBUG)
        -:  548:        printf("None of that card left, sorry!\n");
        -:  549:
        -:  550:      if (DEBUG) {
        -:  551:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  552:      }
        -:  553:    }
    #####:  554:    else if (state->coins <= getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  555:      printf("That card is too expensive!\n");
call    0 never executed
        -:  556:
        -:  557:      if (DEBUG) {
        -:  558:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  559:      }
        -:  560:    }
        -:  561:    else {
        -:  562:
        -:  563:      if (DEBUG) {
        -:  564:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  565:                                   state->discardCount[currentPlayer]);
        -:  566:      }
        -:  567:
    #####:  568:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  569:      x = 0;//No more buying cards
        -:  570:
        -:  571:      if (DEBUG) {
        -:  572:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  573:                                   state->discardCount[currentPlayer]);
        -:  574:      }
        -:  575:
        -:  576:    }
        -:  577:  }
        -:  578:
        -:  579:  //Reset Hand
    #####:  580:  for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  581:    state->hand[currentPlayer][i] = temphand[i];
    #####:  582:    temphand[i] = -1;
        -:  583:  }
        -:  584:  //Reset Hand
        -:  585:
    #####:  586:  return 0;
        -:  587:}
        -:  588:
        -:  589://Refactored case remodel
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  590:int playRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -:  591:  int i;
        -:  592:  int j;
        -:  593:
    #####:  594:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  595:
    #####:  596:  if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  597:    return -1;
        -:  598:  }
        -:  599:
    #####:  600:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  601:
        -:  602:  //discard card from hand
    #####:  603:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  604:
        -:  605:  //discard trashed card
    #####:  606:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  607:    if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  608:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  609:      break;
        -:  610:    }
        -:  611:  }
        -:  612:
    #####:  613:  return 0;
        -:  614:}
        -:  615:
        -:  616://Refactored case baron
function playBaron called 0 returned 0% blocks executed 0%
    #####:  617:int playBaron(struct gameState *state, int currentPlayer, int choice1) {
    #####:  618:  state->numBuys++;//Increase buys by 1!
    #####:  619:  if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  620:    int p = 0;//Iterator for hand!
    #####:  621:    int card_not_discarded = 1;//Flag for discard set!
    #####:  622:    while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  623:      if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  624:        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  625:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  626:        state->discardCount[currentPlayer]++;
    #####:  627:        for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  628:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  629:        }
    #####:  630:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  631:        state->handCount[currentPlayer]--;
    #####:  632:        card_not_discarded = 0;//Exit the loop
        -:  633:      }
    #####:  634:      else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  635:        if (DEBUG) {
        -:  636:          printf("No estate cards in your hand, invalid choice\n");
        -:  637:          printf("Must gain an estate if there are any\n");
        -:  638:        }
    #####:  639:        if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  640:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  641:          state->supplyCount[estate]--;//Decrement estates
    #####:  642:          if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  643:            isGameOver(state);
call    0 never executed
        -:  644:          }
        -:  645:        }
    #####:  646:        card_not_discarded = 0;//Exit the loop
        -:  647:      }
        -:  648:
        -:  649:      else {
    #####:  650:        p++;//Next card
        -:  651:      }
        -:  652:    }
        -:  653:  }
        -:  654:
        -:  655:  else {
    #####:  656:    if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  657:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  658:      state->supplyCount[estate]--;//Decrement Estates
    #####:  659:      if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  660:        isGameOver(state);
call    0 never executed
        -:  661:      }
        -:  662:    }
        -:  663:  }
        -:  664:
    #####:  665:  return 0;
        -:  666:}
        -:  667:
function cardEffect called 5 returned 100% blocks executed 9%
        5:  668:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  669:  int i, j, k, x, index;
        5:  670:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  671:  int nextPlayer = currentPlayer + 1;
        5:  672:  int tributeRevealedCards[2] = {-1, -1};
        -:  673:  int temphand[MAX_HAND];// moved above the if statement
        5:  674:  int drawntreasure = 0;
        -:  675:  int cardDrawn;
        5:  676:  int z = 0;// this is the counter for the temp hand
        5:  677:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        3:  678:    nextPlayer = 0;
        -:  679:  //uses switch to select card and perform actions
        5:  680:  switch (card) {
branch  0 taken 60%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 40%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  681:    case adventurer:
       12:  682:      while (drawntreasure < 2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  683:        if (state->deckCount[currentPlayer] < 1) //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  684:          shuffle(currentPlayer, state);
call    0 never executed
        6:  685:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  686:        //top card of hand is most recently drawn card.
        6:  687:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        6:  688:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        6:  689:          drawntreasure++;
        -:  690:        else {
    #####:  691:          temphand[z] = cardDrawn;
    #####:  692:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  693:          z++;
        -:  694:        }
        -:  695:      }
        6:  696:      while (z - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  697:        // discard all cards in play that have been drawn
    #####:  698:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  699:        z = z - 1;
        -:  700:      }
        3:  701:      return 0;
        -:  702:
        -:  703:    case council_room:      
    #####:  704:      for (i = 0; i < 4; i++) //+4 Cards
branch  0 never executed
branch  1 never executed
    #####:  705:        drawCard(currentPlayer, state);      
call    0 never executed
    #####:  706:      state->numBuys++; //+1 Buy
        -:  707:      //Each other player draws a card
    #####:  708:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  709:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
    #####:  710:          drawCard(i, state);
call    0 never executed
        -:  711:      }
        -:  712:      //put played card in played card pile
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  714:      return 0;
        -:  715:
        -:  716:    case feast: //gain card with cost up to 5      
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  719:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  721:      }
        -:  722:      //Update Coins for Buy
    #####:  723:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  724:      x = 1;//Condition to loop on
    #####:  725:      while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  726:        if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  727:          if (DEBUG)
        -:  728:            printf("None of that card left, sorry!\n");
        -:  729:          if (DEBUG)
        -:  730:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  731:        }
    #####:  732:        else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:          printf("That card is too expensive!\n");
call    0 never executed
        -:  734:          if (DEBUG)
        -:  735:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  736:        }
        -:  737:        else {
        -:  738:          if (DEBUG)
        -:  739:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  740:                                       state->discardCount[currentPlayer]);
    #####:  741:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  742:          x = 0;//No more buying cards
        -:  743:          if (DEBUG)
        -:  744:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  745:                                       state->discardCount[currentPlayer]);
        -:  746:        }
        -:  747:      }
        -:  748:      //Reset Hand
    #####:  749:      for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  750:        state->hand[currentPlayer][i] = temphand[i];
    #####:  751:        temphand[i] = -1;
        -:  752:      }
    #####:  753:      return 0;
        -:  754:
        -:  755:    case gardens:
    #####:  756:      return -1;
        -:  757:
        -:  758:    case mine:
    #####:  759:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  760:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  761:        return -1;
    #####:  762:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  763:        return -1;
    #####:  764:      if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  765:        return -1;      
    #####:  766:      gainCard(choice2, state, 2, currentPlayer);      
call    0 never executed
    #####:  767:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
        -:  768:      //discard trashed card
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  770:        if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  771:          discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  772:          break;
        -:  773:        }
        -:  774:      }
    #####:  775:      return 0;
        -:  776:
        -:  777:    case remodel:
    #####:  778:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  779:      if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  780:        return -1;
    #####:  781:      gainCard(choice2, state, 0, currentPlayer);      
call    0 never executed
    #####:  782:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  785:        if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  786:          discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  787:          break;
        -:  788:        }
        -:  789:      }
    #####:  790:      return 0;
        -:  791:
        -:  792:    case smithy: //+3 Cards      
        8:  793:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:  794:        drawCard(currentPlayer, state);      
call    0 returned 100%
        2:  795:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 returned 100%
        2:  796:      return 0;
        -:  797:
        -:  798:    case village: //+1 Card      
    #####:  799:      drawCard(currentPlayer, state);      
call    0 never executed
    #####:  800:      state->numActions = state->numActions + 2; //+2 Actions      
    #####:  801:      discardCard(handPos, currentPlayer, state, 0); //discard played card from hand
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case baron:
    #####:  805:      state->numBuys++;//Increase buys by 1
    #####:  806:      if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  807:        int p = 0;//Iterator for hand
    #####:  808:        int card_not_discarded = 1;//Flag for discard set
    #####:  809:        while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  810:          if (state->hand[currentPlayer][p] == estate) {//Found an estate card
branch  0 never executed
branch  1 never executed
    #####:  811:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  812:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  813:            state->discardCount[currentPlayer]++;
    #####:  814:            for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
    #####:  815:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####:  816:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  817:            state->handCount[currentPlayer]--;
    #####:  818:            card_not_discarded = 0;//Exit the loop
        -:  819:          }
    #####:  820:          else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  821:            if (DEBUG) {
        -:  822:              printf("No estate cards in your hand, invalid choice\n");
        -:  823:              printf("Must gain an estate if there are any\n");
        -:  824:            }
    #####:  825:            if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:              gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  827:              state->supplyCount[estate]--;//Decrement estates
    #####:  828:              if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:                isGameOver(state);
call    0 never executed
        -:  830:            }
    #####:  831:            card_not_discarded = 0;//Exit the loop
        -:  832:          }
        -:  833:          else
    #####:  834:            p++;//Next card
        -:  835:        }
        -:  836:      }
        -:  837:      else {
    #####:  838:        if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:          state->supplyCount[estate]--;//Decrement Estates
    #####:  841:          if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:            isGameOver(state);
call    0 never executed
        -:  843:        }
        -:  844:      }
    #####:  845:      return 0;
        -:  846:
        -:  847:    case great_hall: //+1 Card      
    #####:  848:      drawCard(currentPlayer, state);      
call    0 never executed
    #####:  849:      state->numActions++; //+1 Actions      
    #####:  850:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
    #####:  851:      return 0;
        -:  852:
        -:  853:    case minion: //+1 action      
    #####:  854:      state->numActions++;      
    #####:  855:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
    #####:  856:      if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
    #####:  857:        state->coins = state->coins + 2;
    #####:  858:      else if (choice2) { //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4        
branch  0 never executed
branch  1 never executed
    #####:  859:        while (numHandCards(state) > 0) //discard hand
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  860:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  861:        for (i = 0; i < 4; i++) //draw 4
branch  0 never executed
branch  1 never executed
    #####:  862:          drawCard(currentPlayer, state);
call    0 never executed
        -:  863:        //other players discard hand and redraw if hand size > 4
    #####:  864:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  865:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  866:            if (state->handCount[i] > 4) {              
branch  0 never executed
branch  1 never executed
    #####:  867:              while (state->handCount[i] > 0) //discard hand
branch  0 never executed
branch  1 never executed
    #####:  868:                discardCard(handPos, i, state, 0);              
call    0 never executed
    #####:  869:              for (j = 0; j < 4; j++) //draw 4
branch  0 never executed
branch  1 never executed
    #####:  870:                drawCard(i, state);
call    0 never executed
        -:  871:            }
        -:  872:          }
        -:  873:        }
        -:  874:      }
    #####:  875:      return 0;
        -:  876:
        -:  877:    case steward:
    #####:  878:      if (choice1 == 1) { //+2 cards        
branch  0 never executed
branch  1 never executed
    #####:  879:        drawCard(currentPlayer, state);
call    0 never executed
    #####:  880:        drawCard(currentPlayer, state);
call    0 never executed
        -:  881:      }
    #####:  882:      else if (choice1 == 2) //+2 coins        
branch  0 never executed
branch  1 never executed
    #####:  883:        state->coins = state->coins + 2;
        -:  884:      else { //trash 2 cards in hand
    #####:  885:        discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  886:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  887:      }      
    #####:  888:      discardCard(handPos, currentPlayer, state, 0); //discard card from hand
call    0 never executed
    #####:  889:      return 0;
        -:  890:
        -:  891:    case tribute:
    #####:  892:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  893:        if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  894:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  895:          state->deckCount[nextPlayer]--;
        -:  896:        }
    #####:  897:        else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  898:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  899:          state->discardCount[nextPlayer]--;
        -:  900:        }
        -:  901:        else //No Card to Reveal          
        -:  902:          if (DEBUG)
        -:  903:            printf("No cards to reveal\n");
        -:  904:      }
        -:  905:      else {
    #####:  906:        if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  907:          for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  908:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  909:            state->deckCount[nextPlayer]++;
    #####:  910:            state->discard[nextPlayer][i] = -1;
    #####:  911:            state->discardCount[nextPlayer]--;
        -:  912:          }
    #####:  913:          shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -:  914:        }
    #####:  915:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  916:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:        state->deckCount[nextPlayer]--;
    #####:  918:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  919:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:        state->deckCount[nextPlayer]--;
        -:  921:      }
    #####:  922:      if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  923:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  924:        state->playedCardCount++;
    #####:  925:        tributeRevealedCards[1] = -1;
        -:  926:      }
    #####:  927:      for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  928:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  929:          || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
    #####:  930:          state->coins += 2;
        -:  931:        }
    #####:  932:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  933:                 || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  934:                 || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
    #####:  935:          drawCard(currentPlayer, state);
call    0 never executed
    #####:  936:          drawCard(currentPlayer, state);
call    0 never executed
        -:  937:        }
        -:  938:        else //Action Card
    #####:  939:          state->numActions = state->numActions + 2;
        -:  940:      }
    #####:  941:      return 0;
        -:  942:
        -:  943:    case ambassador:
    #####:  944:      j = 0;    //used to check if player has enough cards to discard
    #####:  945:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  946:        return -1;
    #####:  947:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
    #####:  948:        return -1;
    #####:  949:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  950:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  951:          j++;
        -:  952:      }
    #####:  953:      if (j < choice2)
branch  0 never executed
branch  1 never executed
    #####:  954:        return -1;
        -:  955:      if (DEBUG)
        -:  956:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  957:      //increase supply count for choosen card by amount being discarded
    #####:  958:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  959:      //each other player gains a copy of revealed card
    #####:  960:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  961:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
    #####:  962:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  963:      }      
    #####:  964:      discardCard(handPos, currentPlayer, state, 0); //discard played card from hand
call    0 never executed
        -:  965:      //trash copies of cards returned to supply
    #####:  966:      for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  967:        for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  969:            discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  970:            break;
        -:  971:          }
        -:  972:        }
        -:  973:      }
    #####:  974:      return 0;
        -:  975:
        -:  976:    case cutpurse:
    #####:  977:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  978:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  979:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  980:          for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  981:            if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  982:              discardCard(j, i, state, 0);
call    0 never executed
    #####:  983:              break;
        -:  984:            }
    #####:  985:            if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  986:              for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  987:                if (DEBUG)
        -:  988:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  989:              }
    #####:  990:              break;
        -:  991:            }
        -:  992:          }
        -:  993:        }
        -:  994:      }      
    #####:  995:      discardCard(handPos, currentPlayer, state, 0); //discard played card from hand
call    0 never executed
    #####:  996:      return 0;
        -:  997:
        -:  998:    case embargo:      
    #####:  999:      state->coins = state->coins + 2; //+2 Coins
        -: 1000:      //see if selected pile is in play
    #####: 1001:      if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
    #####: 1002:        return -1;
        -: 1003:      //add embargo token to selected supply pile
    #####: 1004:      state->embargoTokens[choice1]++;
        -: 1005:      //trash card
    #####: 1006:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case outpost:      
    #####: 1010:      state->outpostPlayed++; //set outpost flag      
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0); //discard card
call    0 never executed
    #####: 1012:      return 0;
        -: 1013:
        -: 1014:    case salvager: //+1 buy      
    #####: 1015:      state->numBuys++;
    #####: 1016:      if (choice1) { //gain coins equal to trashed card        
branch  0 never executed
branch  1 never executed
    #####: 1017:        state->coins = state->coins + getCost(handCard(choice1, state));        
call    0 never executed
call    1 never executed
    #####: 1018:        discardCard(choice1, currentPlayer, state, 1); //trash card
call    0 never executed
        -: 1019:      }      
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0); //discard card
call    0 never executed
    #####: 1021:      return 0;
        -: 1022:
        -: 1023:    case sea_hag:
    #####: 1024:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1025:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1026:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1027:          state->deckCount[i]--;
    #####: 1028:          state->discardCount[i]++;
    #####: 1029:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1030:        }
        -: 1031:      }
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:    case treasure_map:      
    #####: 1035:      index = -1; //search hand for another treasure_map
    #####: 1036:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1037:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1038:          index = i;
    #####: 1039:          break;
        -: 1040:        }
        -: 1041:      }
    #####: 1042:      if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1043:        //trash both treasure cards
    #####: 1044:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:        discardCard(index, currentPlayer, state, 1);        
call    0 never executed
    #####: 1046:        for (i = 0; i < 4; i++) //gain 4 Gold cards
branch  0 never executed
branch  1 never executed
    #####: 1047:          gainCard(gold, state, 1, currentPlayer);        
call    0 never executed
    #####: 1048:        return 1; //return success
        -: 1049:      }
        -: 1050:      //no second treasure_map found in hand
    #####: 1051:      return -1;
        -: 1052:  }
    #####: 1053:  return -1;
        -: 1054:}
        -: 1055:
function discardCard called 25026 returned 100% blocks executed 100%
    25026: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:  //if card is not trashed, added to Played pile 
    25026: 1058:  if (trashFlag < 1) { //add card to played pile    
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    25012: 1059:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    25012: 1060:    state->playedCardCount++;
        -: 1061:  }  
    25026: 1062:  state->hand[currentPlayer][handPos] = -1; //set played card to -1
        -: 1063:  //remove card from player's hand
    25026: 1064:  if (handPos == (state->handCount[currentPlayer] - 1))  //last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        8: 1065:    state->handCount[currentPlayer]--; //reduce number of cards in hand
    25018: 1066:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4: 1067:    state->handCount[currentPlayer]--; //reduce number of cards in hand
        -: 1068:  else { //replace discarded card with last card in hand    
    25014: 1069:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1070:    //set last card to -1
    25014: 1071:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1072:    //reduce number of cards in hand
    25014: 1073:    state->handCount[currentPlayer]--;
        -: 1074:  }
    25026: 1075:  return 0;
        -: 1076:}
        -: 1077:
function gainCard called 191 returned 100% blocks executed 100%
      191: 1078:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1079:  //Note: supplyPos is enum of choosen card
        -: 1080:  //check if supply pile is empty (0) or card is not used in game (-1)
      191: 1081:  if (supplyCount(supplyPos, state) < 1)
call    0 returned 100%
branch  1 taken 28% (fallthrough)
branch  2 taken 72%
       54: 1082:    return -1;
        -: 1083:  //added card for [whoseTurn] current player:
        -: 1084:  // toFlag = 0 : add to discard
        -: 1085:  // toFlag = 1 : add to deck
        -: 1086:  // toFlag = 2 : add to hand
      137: 1087:  if (toFlag == 1) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       34: 1088:    state->deck[player][state->deckCount[player]] = supplyPos;
       34: 1089:    state->deckCount[player]++;
        -: 1090:  }
      103: 1091:  else if (toFlag == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       34: 1092:    state->hand[player][state->handCount[player]] = supplyPos;
       34: 1093:    state->handCount[player]++;
        -: 1094:  }
        -: 1095:  else {
       69: 1096:    state->discard[player][state->discardCount[player]] = supplyPos;
       69: 1097:    state->discardCount[player]++;
        -: 1098:  }
      137: 1099:  state->supplyCount[supplyPos]--; //decrease number in supply pile
      137: 1100:  return 0;
        -: 1101:}
        -: 1102:
function updateCoins called 67 returned 100% blocks executed 100%
       67: 1103:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1104:  int i;  
       67: 1105:  state->coins = 0; //reset coin count
        -: 1106:  //add coins for each Treasure card in player's hand
      412: 1107:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      345: 1108:    if (state->hand[player][i] == copper)
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
      205: 1109:      state->coins += 1;
      140: 1110:    else if (state->hand[player][i] == silver)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
       42: 1111:      state->coins += 2;
       98: 1112:    else if (state->hand[player][i] == gold)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       15: 1113:      state->coins += 3;
        -: 1114:  }  
       67: 1115:  state->coins += bonus; //add bonus
       67: 1116:  return 0;
        -: 1117:}
        -: 1118://end of dominion.c
