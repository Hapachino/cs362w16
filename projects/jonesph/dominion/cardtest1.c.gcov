        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/********************
        -:    2:* Author: Philip Jones
        -:    3:* Term: Winter 2016
        -:    4:* Description: Checks the Village card.
        -:    5:********************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <assert.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:#define NOISY_TEST 1
        -:   17:
     2000:   18:int testVillageCard(int player, struct gameState *after, int position)
        -:   19:{
        -:   20:	int i;
        -:   21:	struct gameState before;
     2000:   22:	memcpy(&before, after, sizeof(struct gameState));
        -:   23:
     2000:   24:	i = cardEffect(village, 0, 0, 0, after, position, 0);
        -:   25:
        -:   26:	//village: + 1 card and + 2 actions
     2000:   27:	drawCard(player, &before);
     2000:   28:	before.numActions = before.numActions + 2;
        -:   29:
     2000:   30:	discardCard(position, player, &before, 0);
        -:   31:
     2000:   32:	if (i != 0)
        -:   33:	{
    #####:   34:		printf("The Village card didn't work properly. \n");
        -:   35:	}
        -:   36://	assert(i == 0);
        -:   37:
     2000:   38:	if (after->handCount[player] != before.handCount[player])
        -:   39:	{
     2000:   40:		printf("The Village card didn't work properly. \n");
        -:   41:	}
        -:   42://	assert(after->handCount[player] == before.handCount[player]);
        -:   43:
     2000:   44:	if (memcmp(&before, after, sizeof(struct gameState)) != 0)
        -:   45:	{
     2000:   46:		printf("The Village card didn't work properly. \n");
        -:   47:	}
        -:   48://	assert(memcmp(&before, after, sizeof(struct gameState)) == 0);
        -:   49:
     2000:   50:	if (memcmp(after->deck[player], before.deck[player], sizeof(after->deck[player])) != 0)
        -:   51:	{
        3:   52:		printf("The Village card didn't work properly. \n");
        -:   53:	}
        -:   54://	assert(memcmp(after->deck[player], before.deck[player], sizeof(after->deck[player])) == 0);
        -:   55:
     2000:   56:	return 0;
        -:   57:}
        -:   58:
        1:   59:int main()
        -:   60:{
        -:   61:	int i, j, p, position;
        -:   62:	struct gameState state;
        -:   63:
        1:   64:	SelectStream(2);
        1:   65:	PutSeed(3);
        -:   66:
     2001:   67:	for (i = 0; i < 2000; i++)
        -:   68:	{
 52602000:   69:		for (j = 0; j < sizeof(struct gameState); j++)
        -:   70:		{
 52600000:   71:			((char*)&state)[j] = floor(Random() * 256);
        -:   72:		}
     2000:   73:		p = floor(Random() * 4);
        -:   74:
     2000:   75:		position = floor(Random() * 20);
     2000:   76:		state.deckCount[p] = floor(Random() * MAX_DECK);
     2000:   77:		state.discardCount[p] = floor(Random() * MAX_DECK);
     2000:   78:		state.playedCardCount = floor(Random() * MAX_DECK);
     2000:   79:		state.handCount[p] = floor(Random() * MAX_HAND);
     2000:   80:		state.whoseTurn = p;
     2000:   81:		state.numActions = floor(Random() * 1);
        -:   82:
    54000:   83:		for (j = 0; j < treasure_map; j++)
        -:   84:		{
    52000:   85:			state.supplyCount[j] = floor(Random() * 25);
        -:   86:		}
        -:   87:
   500955:   88:		for (j = 0; j < state.handCount[p]; j++)
        -:   89:		{
   498955:   90:			state.hand[p][j] = floor(Random() * MAX_HAND);
        -:   91:		}
        -:   92:
   494137:   93:		for (j = 0; j < state.discardCount[p]; j++)
        -:   94:		{
   492137:   95:			state.discard[p][j] = floor(Random() * MAX_DECK);
        -:   96:		}
        -:   97:
   502853:   98:		for (j = 0; j < state.deckCount[p]; j++)
        -:   99:		{
   500853:  100:			state.deck[p][j] = floor(Random() * MAX_DECK);
        -:  101:		}
        -:  102:
   501312:  103:		for (j = 0; j < state.playedCardCount; j++)
        -:  104:		{
   499312:  105:			state.playedCards[j] = floor(Random() * MAX_DECK);
        -:  106:		}
        -:  107:
     2000:  108:		testVillageCard(p, &state, position);
        -:  109:	}
        -:  110:
        1:  111:	printf("No errors found in tests of Village Card \n");
        -:  112:
        1:  113:	return 0;
        -:  114:}