        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/********************
        -:    2:* Author: Philip Jones
        -:    3:* Term: Winter 2016
        -:    4:* Description: Checks the Smithy card.
        -:    5:********************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <assert.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:#define NOISY_TEST 1
        -:   17:
     2000:   18:int testSmithyCard(int card, int player, int position, struct gameState *after)
        -:   19:{
        -:   20:	struct gameState before;
     2000:   21:	memcpy(&before, after, sizeof(struct gameState));
        -:   22:	int i;
     2000:   23:	int count = after->handCount[player];
     2000:   24:	int x = cardEffect(card, 0, 0, 0, after, position, 0);
        -:   25:
     8000:   26:	for (i = 0; i < 3; i++)
        -:   27:	{
     6000:   28:		drawCard(player, &before);
        -:   29:	}
        -:   30:
     2000:   31:	discardCard(position, player, &before, 0);
        -:   32:
     2000:   33:	if (after->handCount[player] != (count + 2))
        -:   34:	{
     2000:   35:		printf("The Smithy card didn't work properly. \n");
        -:   36:	}
        -:   37://	assert(after->handCount == (count + 2));
        -:   38:
     2000:   39:	if (x != 0)
        -:   40:	{
    #####:   41:		printf("The Smithy card didn't work properly. \n");
        -:   42:	}
        -:   43://	assert(r == 0);
        -:   44:
     2000:   45:	if (memcmp(&before, after, sizeof(struct gameState)) != 0)
        -:   46:	{
     2000:   47:		printf("The Smithy card didn't work properly. \n");
        -:   48:	}
        -:   49://	assert(memcmp(&before, after, sizeof(struct gameState)) == 0);
        -:   50:
     2000:   51:	return 0;
        -:   52:}
        -:   53:
        1:   54:int main()
        -:   55:{
        -:   56:	int i, j, p, position;
        -:   57:	struct gameState state;
        -:   58:
        1:   59:	SelectStream(2);
        1:   60:	PutSeed(3);
        -:   61:
     2001:   62:	for (i = 0; i < 2000; i++)
        -:   63:	{
 52602000:   64:		for (j = 0; j < sizeof(struct gameState); j++)
        -:   65:		{
 52600000:   66:			((char*)&state)[j] = floor(Random() * 256);
        -:   67:		}
        -:   68:
     2000:   69:		state.numPlayers = 2 + floor(Random() * (MAX_PLAYERS - 1));
     2000:   70:		p = floor(Random() * state.numPlayers);
     2000:   71:		state.whoseTurn = p;
        -:   72:
     2000:   73:		state.deckCount[p] = floor(Random() * MAX_DECK);
     2000:   74:		state.discardCount[p] = floor(Random() * MAX_DECK);
     2000:   75:		state.handCount[p] = floor(Random() * MAX_HAND);
     2000:   76:		state.playedCardCount = floor(Random() * MAX_DECK);
        -:   77:
     2000:   78:		position = floor(Random() * (state.handCount[p]));
        -:   79:
     2000:   80:		testSmithyCard(smithy, p, position, &state);
        -:   81:	}
        -:   82:
        1:   83:	printf("No errors found in tests of Smithy Card \n");
        -:   84:
        1:   85:	return 0;
        -:   86:}