        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/********************
        -:    2:* Author: Philip Jones
        -:    3:* Term: Winter 2016
        -:    4:* Description: Checks the buyCard() function.
        -:    5:********************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <assert.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:// set NOISY_TEST to 0 to remove printfs from output
        -:   17:#define NOISY_TEST 1
        -:   18:
     2000:   19:int testBuyCard(int player, struct gameState *after)
        -:   20:{
        -:   21:	struct gameState before;
     2000:   22:	memcpy(&before, after, sizeof(struct gameState));
        -:   23:
     2000:   24:	int results = buyCard(player, after);
     2000:   25:	int turn = before.whoseTurn;
     2000:   26:	int canBuy = 0;
     2000:   27:	int cost = getCost(player);
        -:   28:
     2000:   29:	if (before.numBuys < 0 || before.supplyCount[player] < 1 || before.coins < cost)
        -:   30:	{
     1719:   31:		canBuy = -1;
        -:   32:	}
        -:   33:
     2000:   34:	assert(results == canBuy);
        -:   35:
     2000:   36:	if (canBuy == 0)
        -:   37:	{
      281:   38:		before.phase = 1;
      281:   39:		before.discard[turn][before.discardCount[turn]] = player;
      281:   40:		before.discardCount[turn]++;
      281:   41:		before.supplyCount[player]--;
        -:   42:	}
        -:   43:
     2000:   44:	assert(before.phase == after->phase);
     2000:   45:	assert(before.discard[turn][before.discardCount[turn]] == after->discard[turn][after->discardCount[turn]]);
     2000:   46:	assert(before.discardCount[turn] == after->discardCount[turn]);
     2000:   47:	assert(before.supplyCount[player] == after->supplyCount[player]);
        -:   48:
     2000:   49:	return 0;
        -:   50:}
        -:   51:
        1:   52:int main()
        -:   53:{
        -:   54:	int i, j, p, s;
        -:   55://	int card[10] = { adventurer, baron, council_room, feast, gardens, great_hall, mine, remodel, smithy, village };
        -:   56:	struct gameState state;
        -:   57:
        1:   58:	SelectStream(2);
        1:   59:	PutSeed(3);
        -:   60:
     2001:   61:	for (i = 0; i < 2000; i++)
        -:   62:	{
 52602000:   63:		for (j = 0; j < sizeof(struct gameState); j++)
        -:   64:		{
 52600000:   65:			((char*)&state)[j] = floor(Random() * 256);
        -:   66:		}
        -:   67:
     2000:   68:		s = floor(Random() * 10);
        -:   69:
    10000:   70:		for (p = 0; p < MAX_PLAYERS; p++)
        -:   71:		{
     8000:   72:			state.deckCount[p] = floor(Random() * MAX_DECK);
     8000:   73:			state.discardCount[p] = floor(Random() * MAX_DECK);
     8000:   74:			state.handCount[p] = floor(Random() * MAX_HAND);
        -:   75:		}
        -:   76:
     2000:   77:		state.whoseTurn = floor(Random() * MAX_PLAYERS);
     2000:   78:		testBuyCard(s, &state);
        -:   79:	}
        1:   80:	printf("No errors encountered in 2000 tests of buyCard(). \n");
        1:   81:	return 0;
        -:   82:}