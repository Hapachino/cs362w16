        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/********************
        -:    2:* Author: Philip Jones
        -:    3:* Term: Winter 2016
        -:    4:* Description: Checks the discardCard() function.
        -:    5:********************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <assert.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:// set NOISY_TEST to 0 to remove printfs from output
        -:   17:#define NOISY_TEST 1
        -:   18:
     2000:   19:int testDiscardCard(int position, int player, struct gameState *after, int trash)
        -:   20:{
        -:   21:	
        -:   22:	struct gameState before;
     2000:   23:	memcpy(&before, after, sizeof(struct gameState));
        -:   24:
     2000:   25:	int cardStart = after->playedCardCount;
     2000:   26:	int handStart = after->handCount[player];
     2000:   27:	int c = discardCard(position, player, after, trash);
        -:   28:
     2000:   29:	if (trash < 1) //not being trashed
        -:   30:	{
      656:   31:		before.playedCards[before.playedCardCount] = before.hand[player][position];
      656:   32:		before.playedCardCount++;
        -:   33:
        -:   34://		assert(after->playedCardCount == (cardStart + 1));
      656:   35:		if (after->playedCardCount != (cardStart + 1))
        -:   36:		{
    #####:   37:			printf ("The discard didn't work as it should have. \n");
        -:   38:		}
        -:   39:	}
        -:   40:
     2000:   41:	before.hand[player][position] = -1;
        -:   42:
     2000:   43:	if (position == (before.handCount[player] - 1))
        -:   44:	{
       29:   45:		before.handCount[player]--;
        -:   46:
        -:   47://		assert(after->handCount[player] == (handStart + 1));
       29:   48:		if (after->handCount[player] != (handStart - 1))
        -:   49:		{
    #####:   50:			printf("The discard didn't work as it should have. \n");
        -:   51:		}
        -:   52:	}
        -:   53:
     1971:   54:	else if (before.handCount[player] == 1)
        -:   55:	{
    #####:   56:		before.handCount[player]--;
        -:   57:
        -:   58://		assert(after->handCount[player] == (handStart - 1));
    #####:   59:		if (after->handCount[player] != (handStart - 1))
        -:   60:		{
    #####:   61:			printf("The discard didn't work as it should have. \n");
        -:   62:		}
        -:   63:	}
        -:   64:
        -:   65:	else
        -:   66:	{
     1971:   67:		before.hand[player][position] = before.hand[player][(before.handCount[player] - 1)];
     1971:   68:		before.hand[player][before.handCount[player] - 1] = -1;
     1971:   69:		before.handCount[player]--;
        -:   70:
        -:   71://		assert(after->handCount[player] == (handStart - 1));
     1971:   72:		if (after->handCount[player] != (handStart - 1))
        -:   73:		{
    #####:   74:			printf("The discard didn't work as it should have. \n");
        -:   75:		}
        -:   76:	}
        -:   77:	
     2000:   78:	if (c != 0)
        -:   79:	{
    #####:   80:		printf("The discard didn't work as it should have. \n");
        -:   81:	}
        -:   82:	//assert(c == 0);
        -:   83:
     2000:   84:	if (memcmp(&before, after, sizeof(struct gameState)) != 0)
        -:   85:	{
    #####:   86:		printf("The discard didn't work as it should have. \n");
        -:   87:	}
        -:   88:	//assert(memcmp(&before, after, sizeof(struct gameState)) == 0);
        -:   89:
     2000:   90:	return 0;
        -:   91:}
        -:   92:
        1:   93:int main()
        -:   94:{
        -:   95:	int i, j, position, trash, player;
        -:   96:
        -:   97:	struct gameState state;
        -:   98:
        1:   99:	SelectStream(2);
        1:  100:	PutSeed(3);
        -:  101:
     2001:  102:	for (i = 0; i < 2000; i++)
        -:  103:	{
 52602000:  104:		for (j = 0; j < sizeof(struct gameState); j++)
        -:  105:		{
 52600000:  106:			((char*)&state)[j] = floor(Random() * 256);
        -:  107:		}
        -:  108:
     2000:  109:		state.numPlayers = 2 + floor(Random() * (MAX_PLAYERS - 1));
     2000:  110:		player = floor(Random() * state.numPlayers);
     2000:  111:		state.whoseTurn = player;
        -:  112:
     2000:  113:		trash = floor(Random() * 3);
        -:  114:
     2000:  115:		state.deckCount[player] = floor(Random() * MAX_DECK);
     2000:  116:		state.handCount[player] = floor(Random() * MAX_HAND);
     2000:  117:		state.discardCount[player] = floor(Random() * MAX_DECK);
     2000:  118:		state.playedCardCount = floor(Random() * MAX_DECK);
        -:  119:
     2000:  120:		position = floor(Random() * state.handCount[player]);
        -:  121:
   503439:  122:		for (j = 0; j < state.handCount[player]; j++)
        -:  123:		{
   501439:  124:			state.hand[player][j] = floor(Random() * (treasure_map + 1));
        -:  125:		}
        -:  126:
   494915:  127:		for (j = 0; j < state.playedCardCount; j++)
        -:  128:		{
   492915:  129:			state.playedCards[j] = floor(Random() * (treasure_map + 1));
        -:  130:		}
        -:  131:
     2000:  132:		testDiscardCard(position, player, &state, trash);
        -:  133:	}
        -:  134:
        1:  135:	printf("No errors encountered in 2000 tests of discardCard(). \n");
        1:  136:	return 0;
        -:  137:}