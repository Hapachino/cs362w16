        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <time.h>
        -:    9:
        1:   10:int main() {
        -:   11:
        1:   12:	printf("-------------------------------------\n");
        1:   13:	printf("START of the unittest1\n");
        1:   14:	printf("-------------------------------------\n");
        -:   15:	struct gameState G;
        -:   16:	struct gameState G2;
        -:   17:	int i, j;
        1:   18:	int numPlayers = 2;
        -:   19:	// Initialize G.
        -:   20:	  //set number of Kingdom cards
       26:   21:	for(i = 0; i < 25; i++) {
       25:   22:		G.supplyCount[i] = 1;
        -:   23:	}
        -:   24:	
        1:   25:	G.supplyCount[province] = 10;
        -:   26:
        1:   27:	int ret = isGameOver(&G);
        1:   28:	if(ret == 0) 
        -:   29:	{
        1:   30:		printf("PASS when all supply count is 1\n");
        -:   31:	}
        -:   32:	else
        -:   33:	{
    #####:   34:		printf("FAIL when all supply count is 1\n");
        -:   35:	}
        1:   36:	assert(ret == 0);
        -:   37:
        -:   38:
       26:   39:	for(i = 0; i < 25; i++) {
       25:   40:		G.supplyCount[i] = 0;
        -:   41:
       25:   42:		ret = isGameOver(&G);
        -:   43:		//assert(ret == 0);
       25:   44:		if(i == province)
        -:   45:		{
        1:   46:			if(ret == 0)
    #####:   47:				printf("FAIL: isGameOver should return 1 when province supply is 0; instead got %d\n", ret);
        1:   48:			assert(ret == 1);
        -:   49:		}
        -:   50:		else
        -:   51:		{
       24:   52:			if(ret == 1)
    #####:   53:				printf("FAIL: isGameOver should return 0 when only 1 supply is 0; instead got %d\n", ret);
       24:   54:			assert(ret == 0);
        -:   55:		}
       25:   56:		G.supplyCount[i] = 1;
        -:   57:	}
        1:   58:	printf("PASS when any one supply is set to 0\n");
        -:   59:
        -:   60:
        -:   61:	//random testing when any two supplies are 0
        1:   62:	SelectStream(1);
        1:   63:	PutSeed((long)time(NULL));
        -:   64:	
    10001:   65:	for(i = 0; i < 10000; i++) 
        -:   66:	{
        -:   67:		int r1, r2;
    10000:   68:		r1 = floor(Random()*25);
        -:   69:		do
    10438:   70:			r2 = floor(Random()*25);
    10438:   71:		while(r2 == r1);
        -:   72:
    10000:   73:		G.supplyCount[r1] = 0;
    10000:   74:		G.supplyCount[r2] = 0;
    10000:   75:		ret = isGameOver(&G);
        -:   76:
    10000:   77:		if(r2 == province || r1 == province)
        -:   78:		{
        -:   79:			//if province is 0, game should be over
      838:   80:			if(ret == 0)
    #####:   81:				printf("FAIL: isGameOver should return 1 when province supply is 0; instead got %d\n", ret);
      838:   82:			assert(ret == 1);
        -:   83:		}
        -:   84:		else
        -:   85:		{
     9162:   86:			if(ret == 1)
    #####:   87:				printf("FAIL: isGameOver should return 0 when only two supplies are 0; instead got %d\n", ret);
     9162:   88:			assert(ret == 0);
        -:   89:		}
    10000:   90:		G.supplyCount[r1] = 1;
    10000:   91:		G.supplyCount[r2] = 1;
        -:   92:	}
        1:   93:	printf("PASS when any two supplies are set to 0\n");
        -:   94:
        -:   95:	//random testing when any three supplies are 0
        -:   96:
    10001:   97:	for(i = 0; i < 10000; i++) 
        -:   98:	{
        -:   99:		int r1, r2, r3;
    10000:  100:		r1 = floor(Random()*25);
        -:  101:		do
    10424:  102:			r2 = floor(Random()*25);
    10424:  103:		while(r2 == r1);
        -:  104:
        -:  105:		do
    10865:  106:			r3 = floor(Random()*25);
    10865:  107:		while(r3 == r1 || r3 == r2 );
        -:  108:
        -:  109:
    10000:  110:		G.supplyCount[r1] = 0;
    10000:  111:		G.supplyCount[r2] = 0;
    10000:  112:		G.supplyCount[r3] = 0;
    10000:  113:		ret = isGameOver(&G);
        -:  114:
        -:  115:		//if three supplies are 0 game should be over
    10000:  116:		if(ret == 0)
    #####:  117:			printf("FAIL: isGameOver should return 1 when province three supplies are 0; instead got %d\n", ret);
    10000:  118:		assert(ret == 1);
        -:  119:		
    10000:  120:		G.supplyCount[r1] = 1;
    10000:  121:		G.supplyCount[r2] = 1;
    10000:  122:		G.supplyCount[r3] = 1;
        -:  123:	}
        -:  124:
        1:  125:	printf("PASS when any three supplies are set to 0\n");
        1:  126:	printf("-------------------------------------\n");
        1:  127:	return 0;
        -:  128:}
