        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#define NUMCARDS 10
        -:   10:#define NUMTRIALS 1000000
        -:   11:
function getUniqueCards called 4 returned 100% blocks executed 100%
        4:   12:int* getUniqueCards() 
        -:   13:{
        4:   14:	return kingdomCards(5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
call    0 returned 100%
        -:   15:}
        -:   16:
function ASSERT2 called 2000021 returned 100% blocks executed 29%
  2000021:   17:void ASSERT2(int testVal, int assVal, char *s) 
        -:   18:{	
  2000021:   19:	if(assVal != testVal) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   20:	{
    #####:   21:		printf("FAIL - %s\n", s);
call    0 never executed
    #####:   22:		printf("ASSERTED value is %d; got %d", assVal, testVal);
call    0 never executed
    #####:   23:		assert(assVal == testVal);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   24:		exit(1);
call    0 never executed
        -:   25:	}
  2000021:   26:}
        -:   27:
function cardsAreUnique called 1000000 returned 100% blocks executed 100%
  1000000:   28:int cardsAreUnique(int k[]) 
        -:   29:{
        -:   30:	int i, j;
        -:   31:	//check selected kingdom cards are different (from dominion.c)
  2294022:   32:	for (i = 0; i < NUMCARDS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   33:	{
 20300017:   34:		for (j = 0; j < NUMCARDS; j++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   35:		{
 19005995:   36:			if (j != i && k[j] == k[i])
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:   37:			{
   981249:   38:				return -1;
        -:   39:			}
        -:   40:		}
        -:   41:	}
    18751:   42:	return 0;
        -:   43:}
        -:   44:
function cardsAreCorrectVals called 0 returned 0% blocks executed 0%
    #####:   45:int cardsAreCorrectVals(int k[]) {
        -:   46:	int i;
    #####:   47:	for(i = 0; i < NUMCARDS; i++) 
branch  0 never executed
branch  1 never executed
        -:   48:	{
    #####:   49:		if(k[i] > treasure_map || k[i] < adventurer) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   50:			return -1;
        -:   51:		}
        -:   52:	}
    #####:   53:	return 0;
        -:   54:}
        -:   55:
function test1 called 1 returned 100% blocks executed 100%
        1:   56:int test1(int seed) 
        -:   57:{
        -:   58:	int i, j;
        1:   59:	int *k = (int*)malloc(sizeof(int)*NUMCARDS);
        -:   60:
        1:   61:	int numPlayers = (rand()% 3) + 2;
call    0 returned 100%
        1:   62:	int ret = -1;
        -:   63:
        1:   64:	struct gameState *G = newGame();
call    0 returned 100%
        -:   65://	struct gameState *Gcpy = newGame();
        -:   66:	//repeat until you get return val 0 in initializeGame, i.e. all kingdom cards are unique
        -:   67:
        1:   68:	printf("TEST #1: Kingdom cards random testing\n");
call    0 returned 100%
        1:   69:	printf("\t should return 0 if unique; -1 if non-unique\n");
call    0 returned 100%
  1000001:   70:	for(i = 0; i < NUMTRIALS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   71:	{
 11000000:   72:		for(j = 0; j < NUMCARDS; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 10000000:   73:			k[j] = (rand()%15);
call    0 returned 100%
        -:   74:		}
  1000000:   75:		ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
  1000000:   76:		int cret = cardsAreUnique(k);
call    0 returned 100%
  1000000:   77:		if(cret == 0) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
    18751:   78:			ASSERT2(ret, 0, "FAIL when cards are unique");
call    0 returned 100%
        -:   79:		}
        -:   80:		else {
   981249:   81:			ASSERT2(ret, -1, "FAIL when cards are non-unique");
call    0 returned 100%
        -:   82:		}
        -:   83:	}
        -:   84:
        1:   85:	printf("PASS\n");
call    0 returned 100%
        1:   86:	printf("------------------\n");
call    0 returned 100%
        1:   87:	free(G);
        1:   88:	free(k);
        1:   89:}
        -:   90:
function test2 called 1 returned 100% blocks executed 94%
        1:   91:int test2(int seed) {
        1:   92:	struct gameState *G = newGame();
call    0 returned 100%
        -:   93:	//struct gameState *Gcpy = newGame();
        -:   94:	int i;
        -:   95:	int numPlayers;
        -:   96:	int ret;
        1:   97:	int *k = getUniqueCards();
call    0 returned 100%
        1:   98:	printf("TEST #2: Number of players random testing\n");
call    0 returned 100%
        1:   99:	printf("\t should return 0 if 2 - 4; -1 otherwise\n");
call    0 returned 100%
        -:  100:	//random testing for number of players
  1000001:  101:	for(i = 0; i < NUMTRIALS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1000000:  102:		numPlayers = rand();
call    0 returned 100%
  1000000:  103:		ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
  1000000:  104:		if((numPlayers == 1) || (numPlayers == 2) || (numPlayers == 3) || (numPlayers == 4))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  105:		{
    #####:  106:			ASSERT2(ret, 0, "FAIL");
call    0 never executed
        -:  107:		}
        -:  108:		else
        -:  109:		{
  1000000:  110:			ASSERT2(ret, -1, "FAIL");
call    0 returned 100%
        -:  111:		}
        -:  112:	}
        1:  113:	printf("PASS\n");
call    0 returned 100%
        1:  114:	printf("----------------------\n");
call    0 returned 100%
        1:  115:	free(G);
        1:  116:	free(k);
        1:  117:}
        -:  118:
function test3a called 1 returned 100% blocks executed 100%
        1:  119:int test3a(int seed) {
        -:  120:	int ret;
        -:  121:	int numPlayers;
        1:  122:	int curseCount, estateCount, duchyCount, provinceCount, copperCount, silverCount = 40, goldCount = 30;
        1:  123:	struct gameState *G = newGame();
call    0 returned 100%
        1:  124:	int *k = getUniqueCards();
call    0 returned 100%
        -:  125:
        -:  126:	//Test when players are 2
        1:  127:	numPlayers = 2;
        1:  128:	ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
        1:  129:	curseCount = G->supplyCount[curse];
        1:  130:	estateCount = G->supplyCount[estate];
        1:  131:	duchyCount = G->supplyCount[duchy];
        1:  132:	provinceCount = G->supplyCount[province];
        1:  133:	copperCount = G->supplyCount[copper];
        1:  134:	silverCount = G->supplyCount[silver];
        1:  135:	goldCount = G->supplyCount[gold];
        1:  136:	ASSERT2(curseCount, 10, "curseCount");
call    0 returned 100%
        1:  137:	ASSERT2(estateCount, 8, "estateCount");
call    0 returned 100%
        1:  138:	ASSERT2(duchyCount, 8, "duchyCount");
call    0 returned 100%
        1:  139:	ASSERT2(provinceCount, 8, "provinceCount");
call    0 returned 100%
        1:  140:	ASSERT2(copperCount, (60 - (7 * numPlayers)), "copperCount");
call    0 returned 100%
        1:  141:	ASSERT2(silverCount, 40, "silverCount");
call    0 returned 100%
        1:  142:	ASSERT2(goldCount, 30, "goldCount");
call    0 returned 100%
        -:  143:
        1:  144:	free(G);
        1:  145:	free(k);
        1:  146:}
        -:  147:
function test3b called 1 returned 100% blocks executed 100%
        1:  148:int test3b(int seed) {
        -:  149:	int ret;
        -:  150:	int numPlayers;
        1:  151:	int curseCount, estateCount, duchyCount, provinceCount, copperCount, silverCount = 40, goldCount = 30;
        1:  152:	struct gameState *G = newGame();
call    0 returned 100%
        1:  153:	int *k = getUniqueCards();
call    0 returned 100%
        -:  154:	//Test when players are 3
        -:  155:
        1:  156:	numPlayers = 3;
        1:  157:	ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
        1:  158:	curseCount = G->supplyCount[curse];
        1:  159:	estateCount = G->supplyCount[estate];
        1:  160:	duchyCount = G->supplyCount[duchy];
        1:  161:	provinceCount = G->supplyCount[province];
        1:  162:	copperCount = G->supplyCount[copper];
        1:  163:	silverCount = G->supplyCount[silver];
        1:  164:	goldCount = G->supplyCount[gold];
        1:  165:	ASSERT2(curseCount, 20, "curseCount");
call    0 returned 100%
        1:  166:	ASSERT2(estateCount, 12, "estateCount");
call    0 returned 100%
        1:  167:	ASSERT2(duchyCount, 12, "duchyCount");
call    0 returned 100%
        1:  168:	ASSERT2(provinceCount, 12, "provinceCount");
call    0 returned 100%
        1:  169:	ASSERT2(copperCount, (60 - (7 * numPlayers)), "copperCount");
call    0 returned 100%
        1:  170:	ASSERT2(silverCount, 40, "silverCount");
call    0 returned 100%
        1:  171:	ASSERT2(goldCount, 30, "goldCount");
call    0 returned 100%
        -:  172:
        1:  173:	free(G);
        1:  174:	free(k);
        1:  175:}
        -:  176:
function test3c called 1 returned 100% blocks executed 100%
        1:  177:int test3c(int seed) {
        -:  178:	int ret;
        -:  179:	int numPlayers;
        1:  180:	int curseCount, estateCount, duchyCount, provinceCount, copperCount, silverCount = 40, goldCount = 30;
        1:  181:	struct gameState *G = newGame();
call    0 returned 100%
        1:  182:	int *k = getUniqueCards();
call    0 returned 100%
        -:  183:
        -:  184:	//Test when players are 4
        1:  185:	numPlayers = 4;
        1:  186:	ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
        1:  187:	curseCount = G->supplyCount[curse];
        1:  188:	estateCount = G->supplyCount[estate];
        1:  189:	duchyCount = G->supplyCount[duchy];
        1:  190:	provinceCount = G->supplyCount[province];
        1:  191:	copperCount = G->supplyCount[copper];
        1:  192:	silverCount = G->supplyCount[silver];
        1:  193:	goldCount = G->supplyCount[gold];
        1:  194:	ASSERT2(curseCount, 30, "curseCount");
call    0 returned 100%
        1:  195:	ASSERT2(estateCount, 12, "estateCount");
call    0 returned 100%
        1:  196:	ASSERT2(duchyCount, 12, "duchyCount");
call    0 returned 100%
        1:  197:	ASSERT2(provinceCount, 12, "provinceCount");
call    0 returned 100%
        1:  198:	ASSERT2(copperCount, (60 - (7 * numPlayers)), "copperCount");
call    0 returned 100%
        1:  199:	ASSERT2(silverCount, 40, "silverCount");
call    0 returned 100%
        1:  200:	ASSERT2(goldCount, 30, "goldCount");
call    0 returned 100%
        1:  201:	free(G);
        1:  202:	free(k);
        1:  203:}
        -:  204:
function test4 called 0 returned 0% blocks executed 0%
    #####:  205:int test4(int seed) 
        -:  206:{
        -:  207:	int i, j, t, x;
    #####:  208:	int *k = (int*)malloc(sizeof(int)*NUMCARDS);
    #####:  209:	int *supplyCount = (int*)malloc(sizeof(int)*NUMCARDS);
    #####:  210:	int trialCount = 100;
    #####:  211:	int numPlayers = (rand()% 3) + 2;
call    0 never executed
    #####:  212:	int ret = -1;
        -:  213:	int rand1;
    #####:  214:	struct gameState *G = newGame();
call    0 never executed
        -:  215:
        -:  216:	//initialize supplyCount 
    #####:  217:	for(i = 0; i < NUMCARDS; i++) 
branch  0 never executed
branch  1 never executed
        -:  218:	{
    #####:  219:		supplyCount[i] = -1;
        -:  220:	}
    #####:  221:	while(t < trialCount)
branch  0 never executed
branch  1 never executed
        -:  222:	{
    #####:  223:		for(j = 0; j < NUMCARDS; j++) {
branch  0 never executed
branch  1 never executed
    #####:  224:			rand1 = (rand()%15);
call    0 never executed
    #####:  225:			k[j] = rand1;
        -:  226:		}
        -:  227:
    #####:  228:		for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  229:		{
    #####:  230:			for (j = 0; j < NUMCARDS; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  231:			{
    #####:  232:				if (k[j] == i)
branch  0 never executed
branch  1 never executed
        -:  233:				{
        -:  234:					//check if card is a 'Victory' Kingdom card
    #####:  235:					if (k[j] == great_hall || k[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  236:					{
    #####:  237:						if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:  238:						{ 
    #####:  239:							supplyCount[i] = 8; 
        -:  240:						}
        -:  241:						else
        -:  242:						{
    #####:  243:							supplyCount[i] = 12;
        -:  244:						}
        -:  245:					}
        -:  246:					else
        -:  247:					{
    #####:  248:						supplyCount[i] = 10;
        -:  249:					}
    #####:  250:					break;
        -:  251:				}
        -:  252:			}
        -:  253:		}
    #####:  254:		ret = initializeGame(numPlayers, k, seed, G);
call    0 never executed
    #####:  255:		int cret = cardsAreUnique(k);
call    0 never executed
    #####:  256:		if(cret == 0) 
branch  0 never executed
branch  1 never executed
        -:  257:		{
    #####:  258:			t++;
    #####:  259:			for(x = 0; x < NUMCARDS; x++) 
branch  0 never executed
branch  1 never executed
        -:  260:			{
    #####:  261:				if(supplyCount[x] == -1) 
branch  0 never executed
branch  1 never executed
        -:  262:				{
    #####:  263:					ASSERT2(k[x], -1, "when initializing supplyCount (-1)");				
call    0 never executed
        -:  264:				}
        -:  265:				else 
        -:  266:				{
    #####:  267:					ASSERT2(k[x], supplyCount[x], "when initializing supplyCount");
call    0 never executed
        -:  268:				}
        -:  269:			}
        -:  270:		}
        -:  271:	}
        -:  272:
        -:  273:
    #####:  274:	printf("PASS\n");
call    0 never executed
    #####:  275:	printf("------------------\n");
call    0 never executed
    #####:  276:	free(G);
    #####:  277:	free(k);
    #####:  278:	return 0;
        -:  279:}
        -:  280:
function test5 called 0 returned 0% blocks executed 0%
    #####:  281:int test5(int seed) {
        -:  282:	int i,j;
    #####:  283:	int *k = getUniqueCards();
call    0 never executed
        -:  284:	int numPlayers ;
        -:  285:	struct gameState *G;
        -:  286:	struct gameState *Gcpy;
    #####:  287:	G = newGame();
call    0 never executed
    #####:  288:	Gcpy = newGame();
call    0 never executed
    #####:  289:	numPlayers = 2;
        -:  290:
    #####:  291:	initializeGame(numPlayers, k, seed, Gcpy);
call    0 never executed
        -:  292:	//set player decks
    #####:  293:	for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  294:	{
    #####:  295:		G->deckCount[i] = 0;
    #####:  296:		for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  297:		{
    #####:  298:		  G->deck[i][j] = estate;
    #####:  299:		  G->deckCount[i]++;
        -:  300:		}
    #####:  301:		for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  302:		{
    #####:  303:		  G->deck[i][j] = copper;
    #####:  304:		  G->deckCount[i]++;		
        -:  305:		}
        -:  306:	}
        -:  307:
    #####:  308:	for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  309:	{
    #####:  310:		for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  311:		{
    #####:  312:			printf("G: %d, copy: %d\n", G->deck[i][j],Gcpy->deck[i][j]);
call    0 never executed
        -:  313:
    #####:  314:			ASSERT2(Gcpy->deck[i][j], G->deck[i][j], "when initializing player decks");
call    0 never executed
        -:  315:		}
        -:  316:	}
    #####:  317:	return 0;
        -:  318:}
        -:  319:
function main called 1 returned 100% blocks executed 100%
        1:  320:int main() {
        1:  321:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:  322:	int seed = rand() + 1;
call    0 returned 100%
        -:  323:		//declaring the reusable variables
        1:  324:	int *k = (int*)malloc(sizeof(int)*NUMCARDS);
        -:  325:
        1:  326:	printf("-------------------------------------------------------\n");
call    0 returned 100%
        1:  327:	printf("START OF UNIT TEST 3 - INITIALIZEGAME\n\n");
call    0 returned 100%
        -:  328:
        -:  329:	//testing for unique kingdom cards
        1:  330:	test1(seed);
call    0 returned 100%
        -:  331:
        -:  332:	//testing for number of players
        1:  333:	test2(seed);
call    0 returned 100%
        -:  334:
        -:  335:	//testing for supply count
        -:  336:	//when 2 players
        1:  337:	printf("TEST #3a: Supply cards: 3 players\n");
call    0 returned 100%
        1:  338:	printf("\t curse = 10, estate|province|duchy = 8\n");
call    0 returned 100%
        1:  339:	test3a(seed);
call    0 returned 100%
        1:  340:	printf("PASS\n");
call    0 returned 100%
        1:  341:	printf("------------------\n");
call    0 returned 100%
        -:  342:
        -:  343:	//when 3 players
        1:  344:	printf("TEST #3b: Supply cards: 3 players\n");
call    0 returned 100%
        1:  345:	printf("\t curse = 20, estate|province|duchy = 12\n");
call    0 returned 100%
        1:  346:	test3b(seed);
call    0 returned 100%
        1:  347:	printf("PASS\n");
call    0 returned 100%
        1:  348:	printf("------------------\n");
call    0 returned 100%
        -:  349:
        -:  350:	//when 4 players
        1:  351:	printf("TEST #3c: Supply cards: 4 players\n");
call    0 returned 100%
        1:  352:	printf("\t curse = 30, estate|province|duchy = 12\n");
call    0 returned 100%
        1:  353:	test3c(seed);
call    0 returned 100%
        1:  354:	printf("PASS\n");
call    0 returned 100%
        1:  355:	printf("------------------\n");
call    0 returned 100%
        -:  356:
        -:  357:	//testing for correct kingdom card values
        1:  358:	printf("TEST #4: Kingdom cards correct values\n");
call    0 returned 100%
        1:  359:	printf("\t should return 8, 10, 12 depending on number of players; -1 for unselected card\n");
call    0 returned 100%
        -:  360:	//test4(seed);
        -:  361:	//test5(seed);
        -:  362:
        1:  363:	printf("\nEND OF UNIT TEST 3 - INITIALIZEGAME\n");
call    0 returned 100%
        1:  364:	printf("---------------------------------------------------\n");
call    0 returned 100%
        1:  365:	return 0;
        -:  366:}
