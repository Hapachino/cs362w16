File 'smithytest.c'
Lines executed:79.63% of 108
Branches executed:86.36% of 44
Taken at least once:63.64% of 44
Calls executed:73.17% of 41
Creating 'smithytest.c.gcov'

        -:    0:Source:smithytest.c
        -:    0:Graph:smithytest.gcno
        -:    0:Data:smithytest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include "cardFunctions.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <assert.h>
        -:    9:// 1. Current player should receive exact 3 cards.
        -:   10:
        -:   11:// 2. 3 cards should come from his own pile.
        -:   12:
        -:   13:// 3. No state change should occur for other players.
        -:   14:
        -:   15:// 4. No state change should occur to the victory card piles and kingdom card piles.
        -:   16:
        -:   17:int drawCard2(int player, struct gameState *state);
        -:   18:
        -:   19://random hand with smithy at the end
function createRandomHand called 4 returned 100% blocks executed 100%
        4:   20:int createRandomHand(int *k, int max) 
        -:   21:{
        -:   22:	int j;
       20:   23:	for(j = 0; j < max-1; j++) 
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   24:	{
       16:   25:		k[j] = (rand()%15);
call    0 returned 100%
        -:   26:	}
        4:   27:	k[j] = smithy;
        4:   28:}
        -:   29:
        -:   30://random hand with smithy at the end
function createRandomDeck called 4 returned 100% blocks executed 100%
        4:   31:int createRandomDeck(int *k, int max) 
        -:   32:{
        -:   33:	int j;
     1984:   34:	for(j = 0; j < max; j++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   35:	{
     1980:   36:		k[j] = (rand()%15);
call    0 returned 100%
        -:   37:	}
        4:   38:}
        -:   39:
function setDiscardDeck called 4 returned 100% blocks executed 100%
        4:   40:int setDiscardDeck(int *k, int max) {
        -:   41:	int i;
     2004:   42:	for(i = 0; i < max; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   43:	{
     2000:   44:		k[i] = -1;
        -:   45:	}
        4:   46:}
        -:   47:
        -:   48:
function main called 1 returned 100% blocks executed 85%
        1:   49:int main() {
        1:   50:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   51:	struct gameState G;
        -:   52:
        -:   53:	struct gameState Gcopy;
        -:   54:	struct infosStruct infos;
        1:   55:	int k[] = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14};	
        1:   56:	int numPlayers = 4;
        -:   57:	int handCountBefore, handCountAfter;
        -:   58:	int deckCountBefore, deckCountAfter;
        1:   59:	int curPlayer, p1 = 0, p2 = 1, p3 = 2, p4 = 3;
        -:   60:	int i;
        1:   61:	G.numPlayers = numPlayers;
        1:   62:	G.whoseTurn = 0;
        1:   63:	infos.currentPlayer = 0;
        1:   64:	infos.handPos = 4;
        -:   65:
        1:   66:	int handCount = 5;
        1:   67:	int deckCount = MAX_DECK - handCount;
        1:   68:	createRandomHand(G.hand[p1], handCount);
call    0 returned 100%
        1:   69:	createRandomHand(G.hand[p2], handCount);
call    0 returned 100%
        1:   70:	createRandomHand(G.hand[p3], handCount);
call    0 returned 100%
        1:   71:	createRandomHand(G.hand[p4], handCount);
call    0 returned 100%
        -:   72:
        1:   73:	G.handCount[p1] = handCount;
        1:   74:	G.handCount[p2] = handCount;	
        1:   75:	G.handCount[p3] = handCount;	
        1:   76:	G.handCount[p4] = handCount;
        -:   77:
        1:   78:	createRandomDeck(G.deck[p1], deckCount);
call    0 returned 100%
        1:   79:	createRandomDeck(G.deck[p2], deckCount);
call    0 returned 100%
        1:   80:	createRandomDeck(G.deck[p3], deckCount);
call    0 returned 100%
        1:   81:	createRandomDeck(G.deck[p4], deckCount);
call    0 returned 100%
        -:   82:
        1:   83:	G.deckCount[p1] = deckCount;
        1:   84:	G.deckCount[p2] = deckCount;	
        1:   85:	G.deckCount[p3] = deckCount;	
        1:   86:	G.deckCount[p4] = deckCount;
        1:   87:	printf("handCount: %d\n", G.deckCount[p2]);
call    0 returned 100%
        -:   88:
        1:   89:	setDiscardDeck(G.discard[p1], MAX_DECK);
call    0 returned 100%
        1:   90:	setDiscardDeck(G.discard[p2], MAX_DECK);
call    0 returned 100%
        1:   91:	setDiscardDeck(G.discard[p3], MAX_DECK);
call    0 returned 100%
        1:   92:	setDiscardDeck(G.discard[p4], MAX_DECK);
call    0 returned 100%
        -:   93:
        1:   94:	G.discardCount[p1] = 0;
        1:   95:	G.discardCount[p2] = 0;	
        1:   96:	G.discardCount[p3] = 0;	
        1:   97:	G.discardCount[p4] = 0;
        -:   98:
        -:   99:
        1:  100:  	memcpy (&Gcopy, &G, sizeof(G) );
        1:  101:	curPlayer = p1;
        1:  102:    int nextPlayer = 1;
        1:  103:	printf("handCount: %d\n", G.handCount[0]);
call    0 returned 100%
        -:  104:
        -:  105:
        -:  106:	//check handCount and deckCount of current player
        1:  107:	handCountBefore = G.handCount[curPlayer];
        1:  108:	deckCountBefore = G.deckCount[curPlayer];
        -:  109:
        1:  110:	printf("discard count %d\n", G.discardCount[0]);
call    0 returned 100%
        1:  111:	effectSmithy(&G, &infos);
call    0 returned 100%
        -:  112:
        1:  113:    handCountAfter = G.handCount[curPlayer];
        1:  114:    deckCountAfter = G.deckCount[curPlayer];
        1:  115:    printf("%d, %d\n", handCountBefore, handCountAfter);
call    0 returned 100%
        1:  116:    printf("%d, %d\n", deckCountBefore, deckCountAfter);
call    0 returned 100%
        -:  117:
        -:  118:
        -:  119: //check state of other player(s)
        -:  120:  //  printf("size: %d\n", G.deckCount[p1]);
        -:  121:
        1:  122:    assert((Gcopy.deckCount[p1]-3) == G.deckCount[p1]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  123:    assert(Gcopy.deckCount[p2] == G.deckCount[p2]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  124:    assert(Gcopy.deckCount[p3] == G.deckCount[p3]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  125:    assert(Gcopy.deckCount[p4] == G.deckCount[p4]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  126:
        -:  127:
        1:  128:    printf("TEST: current player deck is unchanged");
call    0 returned 100%
        -:  129:    // for(i = 0; i < G.deckCount[p1]; i++)
        -:  130:    // {
        -:  131:    // 	assert(Gcopy.deck[p1][i] == G.deck[p1][i]);
        -:  132:    // }
        -:  133:
        1:  134:    printf("TEST: player 2 deck is unchanged\n");
call    0 returned 100%
      496:  135:    for(i = 0; i < G.deckCount[p2]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  136:    {
      495:  137:    	assert(Gcopy.deck[p2][i] == G.deck[p2][i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  138:    }
        1:  139:    printf("PASS");
call    0 returned 100%
        -:  140:
        1:  141:    printf("TEST: player 3 deck is unchanged\n");
call    0 returned 100%
      496:  142:    for(i = 0; i < G.deckCount[p3]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  143:    {
      495:  144:    	assert(Gcopy.deck[p3][i] == G.deck[p3][i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  145:    }
        -:  146:
        1:  147:    printf("TEST: player 4 deck is unchanged\n");
call    0 returned 100%
      496:  148:    for(i = 0; i < G.deckCount[p4]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  149:    {
      495:  150:    	assert(Gcopy.deck[p4][i] == G.deck[p4][i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  151:    }
        -:  152:
        -:  153:
        -:  154:    // for(i = 0; i < G.handCount[p1]; i++)
        -:  155:    // {
        -:  156:    // 	assert(Gcopy.hand[p1][i] == G.hand[p1][i]);
        -:  157:    // }
        -:  158:
        1:  159:    printf("TEST: player 2 hand is unchanged\n");
call    0 returned 100%
        6:  160:    for(i = 0; i < G.handCount[p2]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  161:    {
        5:  162:    	assert(Gcopy.hand[p2][i] == G.hand[p2][i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  163:    }
        -:  164:
        1:  165:    printf("TEST: player 3 hand is unchanged\n");
call    0 returned 100%
        6:  166:    for(i = 0; i < G.handCount[p3]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  167:    {
        5:  168:    	assert(Gcopy.hand[p3][i] == G.hand[p3][i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  169:    }
        -:  170:
        1:  171:    printf("TEST: player 4 hand is unchanged\n");
call    0 returned 100%
        6:  172:    for(i = 0; i < G.handCount[p4]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  173:    {
        5:  174:    	assert(Gcopy.hand[p4][i] == G.hand[p4][i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  175:    }
        1:  176:	return 0;
        -:  177:}
        -:  178:
        -:  179:
        -:  180:
        -:  181:
function drawCard2 called 0 returned 0% blocks executed 0%
    #####:  182:int drawCard2(int player, struct gameState *state)
        -:  183:{	
        -:  184:	int count;
        -:  185:  int deckCounter;
    #####:  186:  if (state->deckCount[player] <= 0)
branch  0 never executed
branch  1 never executed
        -:  187:  {
        -:  188: 	//Deck is empty
        -:  189:    //Step 1 Shuffle the discard pile back into a deck
        -:  190:    int i;
        -:  191:    //Move discard to deck
    #####:  192:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  193:      state->deck[player][i] = state->discard[player][i];
    #####:  194:      state->discard[player][i] = -1;
        -:  195:    }
        -:  196:
    #####:  197:    state->deckCount[player] = state->discardCount[player];
    #####:  198:    state->discardCount[player] = 0;//Reset discard
        -:  199:
        -:  200:    //Shufffle the deck
    #####:  201:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  202:   
        -:  203:    if (DEBUG){//Debug statements
        -:  204:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  205:    }
        -:  206:    
    #####:  207:    state->discardCount[player] = 0;
        -:  208:
        -:  209:    //Step 2 Draw Card
    #####:  210:    count = state->handCount[player];//Get current player's hand count
        -:  211:    
        -:  212:    if (DEBUG){//Debug statements
        -:  213:      printf("Current hand count: %d\n", count);
        -:  214:    }
        -:  215:    
    #####:  216:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  217:
    #####:  218:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  219:      return -1;
        -:  220:
    #####:  221:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  222:    state->deckCount[player]--;
    #####:  223:    state->handCount[player]++;//Increment hand count
        -:  224:  }
        -:  225: 
        -:  226:  else
        -:  227:  {
    #####:  228:    int count = state->handCount[player];//Get current hand count for player
        -:  229:    int deckCounter;
        -:  230:    if (DEBUG){//Debug statements
        -:  231:      printf("Current hand count: %d\n", count);
        -:  232:    }
        -:  233:
    #####:  234:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  235:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  236:    state->deckCount[player]--;
    #####:  237:    state->handCount[player]++;//Increment hand count
        -:  238:  }
        -:  239:
    #####:  240:  return 0;
        -:  241:}
        -:  242:
        -:  243:
-------------------------------------
START of the unittest2 - KingdomCards
-------------------------------------
PASS: kingdom cards allocated correctly
File 'unittest2.c'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:75.00% of 8
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:
function main called 1 returned 100% blocks executed 87%
        1:    9:int main() {
        -:   10:
        1:   11:	printf("-------------------------------------\n");
call    0 returned 100%
        1:   12:	printf("START of the unittest2 - KingdomCards\n");
call    0 returned 100%
        1:   13:	printf("-------------------------------------\n");
call    0 returned 100%
        -:   14:
        -:   15:	int i;
        1:   16:	int k1[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   17:	int *k2 = kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        -:   18:
       11:   19:	for(i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   20:		int ret = compare(&k1[i], &	k2[i]);
call    0 returned 100%
       10:   21:		if(ret != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   22:			printf("FAIL: return val should be 0, got %d\n", ret);
call    0 never executed
       10:   23:		assert(ret == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   24:	}
        1:   25:	printf("PASS: kingdom cards allocated correctly\n");
call    0 returned 100%
        -:   26:
        1:   27:	return 0;
        -:   28:}
-------------------------------------
START of the unittest1
-------------------------------------
PASS when all supply count is 1
PASS when any one supply is set to 0
PASS when any two supplies are set to 0
PASS when any three supplies are set to 0
-------------------------------------
File 'unittest1.c'
Lines executed:90.48% of 63
Branches executed:100.00% of 46
Taken at least once:73.91% of 46
Calls executed:62.50% of 32
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <time.h>
        -:    9:
function main called 1 returned 100% blocks executed 82%
        1:   10:int main() {
        -:   11:
        1:   12:	printf("-------------------------------------\n");
call    0 returned 100%
        1:   13:	printf("START of the unittest1\n");
call    0 returned 100%
        1:   14:	printf("-------------------------------------\n");
call    0 returned 100%
        -:   15:	struct gameState G;
        -:   16:	struct gameState G2;
        -:   17:	int i, j;
        1:   18:	int numPlayers = 2;
        -:   19:	// Initialize G.
        -:   20:	  //set number of Kingdom cards
       26:   21:	for(i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       25:   22:		G.supplyCount[i] = 1;
        -:   23:	}
        -:   24:	
        1:   25:	G.supplyCount[province] = 10;
        -:   26:
        1:   27:	int ret = isGameOver(&G);
call    0 returned 100%
        1:   28:	if(ret == 0) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   29:	{
        1:   30:		printf("PASS when all supply count is 1\n");
call    0 returned 100%
        -:   31:	}
        -:   32:	else
        -:   33:	{
    #####:   34:		printf("FAIL when all supply count is 1\n");
call    0 never executed
        -:   35:	}
        1:   36:	assert(ret == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   37:
        -:   38:
       26:   39:	for(i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       25:   40:		G.supplyCount[i] = 0;
        -:   41:
       25:   42:		ret = isGameOver(&G);
call    0 returned 100%
        -:   43:		//assert(ret == 0);
       25:   44:		if(i == province)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:   45:		{
        1:   46:			if(ret == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   47:				printf("FAIL: isGameOver should return 1 when province supply is 0; instead got %d\n", ret);
call    0 never executed
        1:   48:			assert(ret == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   49:		}
        -:   50:		else
        -:   51:		{
       24:   52:			if(ret == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:				printf("FAIL: isGameOver should return 0 when only 1 supply is 0; instead got %d\n", ret);
call    0 never executed
       24:   54:			assert(ret == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   55:		}
       25:   56:		G.supplyCount[i] = 1;
        -:   57:	}
        1:   58:	printf("PASS when any one supply is set to 0\n");
call    0 returned 100%
        -:   59:
        -:   60:
        -:   61:	//random testing when any two supplies are 0
        1:   62:	SelectStream(1);
call    0 returned 100%
        1:   63:	PutSeed((long)time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   64:	
    10001:   65:	for(i = 0; i < 10000; i++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   66:	{
        -:   67:		int r1, r2;
    10000:   68:		r1 = floor(Random()*25);
call    0 returned 100%
        -:   69:		do
    10437:   70:			r2 = floor(Random()*25);
call    0 returned 100%
    10437:   71:		while(r2 == r1);
branch  0 taken 4%
branch  1 taken 96% (fallthrough)
        -:   72:
    10000:   73:		G.supplyCount[r1] = 0;
    10000:   74:		G.supplyCount[r2] = 0;
    10000:   75:		ret = isGameOver(&G);
call    0 returned 100%
        -:   76:
    10000:   77:		if(r2 == province || r1 == province)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        -:   78:		{
        -:   79:			//if province is 0, game should be over
      842:   80:			if(ret == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   81:				printf("FAIL: isGameOver should return 1 when province supply is 0; instead got %d\n", ret);
call    0 never executed
      842:   82:			assert(ret == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   83:		}
        -:   84:		else
        -:   85:		{
     9158:   86:			if(ret == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   87:				printf("FAIL: isGameOver should return 0 when only two supplies are 0; instead got %d\n", ret);
call    0 never executed
     9158:   88:			assert(ret == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   89:		}
    10000:   90:		G.supplyCount[r1] = 1;
    10000:   91:		G.supplyCount[r2] = 1;
        -:   92:	}
        1:   93:	printf("PASS when any two supplies are set to 0\n");
call    0 returned 100%
        -:   94:
        -:   95:	//random testing when any three supplies are 0
        -:   96:
    10001:   97:	for(i = 0; i < 10000; i++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   98:	{
        -:   99:		int r1, r2, r3;
    10000:  100:		r1 = floor(Random()*25);
call    0 returned 100%
        -:  101:		do
    10417:  102:			r2 = floor(Random()*25);
call    0 returned 100%
    10417:  103:		while(r2 == r1);
branch  0 taken 4%
branch  1 taken 96% (fallthrough)
        -:  104:
        -:  105:		do
    10920:  106:			r3 = floor(Random()*25);
call    0 returned 100%
    10920:  107:		while(r3 == r1 || r3 == r2 );
branch  0 taken 4%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
branch  3 taken 96% (fallthrough)
        -:  108:
        -:  109:
    10000:  110:		G.supplyCount[r1] = 0;
    10000:  111:		G.supplyCount[r2] = 0;
    10000:  112:		G.supplyCount[r3] = 0;
    10000:  113:		ret = isGameOver(&G);
call    0 returned 100%
        -:  114:
        -:  115:		//if three supplies are 0 game should be over
    10000:  116:		if(ret == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  117:			printf("FAIL: isGameOver should return 1 when province three supplies are 0; instead got %d\n", ret);
call    0 never executed
    10000:  118:		assert(ret == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  119:		
    10000:  120:		G.supplyCount[r1] = 1;
    10000:  121:		G.supplyCount[r2] = 1;
    10000:  122:		G.supplyCount[r3] = 1;
        -:  123:	}
        -:  124:
        1:  125:	printf("PASS when any three supplies are set to 0\n");
call    0 returned 100%
        1:  126:	printf("-------------------------------------\n");
call    0 returned 100%
        1:  127:	return 0;
        -:  128:}
-------------------------------------------------------
START OF UNIT TEST 3 - INITIALIZEGAME

TEST #1: Kingdom cards random testing
	 should return 0 if unique; -1 if non-unique
PASS
------------------
TEST #2: Number of players random testing
	 should return 0 if 2 - 4; -1 otherwise
PASS
----------------------
TEST #3a: Supply cards: 3 players
	 curse = 10, estate|province|duchy = 8
PASS
------------------
TEST #3b: Supply cards: 3 players
	 curse = 20, estate|province|duchy = 12
PASS
------------------
TEST #3c: Supply cards: 4 players
	 curse = 30, estate|province|duchy = 12
PASS
------------------
TEST #4: Kingdom cards correct values
	 should return 8, 10, 12 depending on number of players; -1 for unselected card

END OF UNIT TEST 3 - INITIALIZEGAME
---------------------------------------------------
File 'unittest3.c'
Lines executed:69.08% of 207
Branches executed:38.24% of 68
Taken at least once:30.88% of 68
Calls executed:79.38% of 97
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#define NUMCARDS 10
        -:   10:#define NUMTRIALS 1000000
        -:   11:
function getUniqueCards called 4 returned 100% blocks executed 100%
        4:   12:int* getUniqueCards() 
        -:   13:{
        4:   14:	return kingdomCards(5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
call    0 returned 100%
        -:   15:}
        -:   16:
function ASSERT2 called 2000021 returned 100% blocks executed 29%
  2000021:   17:void ASSERT2(int testVal, int assVal, char *s) 
        -:   18:{	
  2000021:   19:	if(assVal != testVal) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   20:	{
    #####:   21:		printf("FAIL - %s\n", s);
call    0 never executed
    #####:   22:		printf("ASSERTED value is %d; got %d", assVal, testVal);
call    0 never executed
    #####:   23:		assert(assVal == testVal);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   24:		exit(1);
call    0 never executed
        -:   25:	}
  2000021:   26:}
        -:   27:
function cardsAreUnique called 1000000 returned 100% blocks executed 100%
  1000000:   28:int cardsAreUnique(int k[]) 
        -:   29:{
        -:   30:	int i, j;
        -:   31:	//check selected kingdom cards are different (from dominion.c)
  2299663:   32:	for (i = 0; i < NUMCARDS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   33:	{
 20362922:   34:		for (j = 0; j < NUMCARDS; j++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   35:		{
 19063259:   36:			if (j != i && k[j] == k[i])
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:   37:			{
   980840:   38:				return -1;
        -:   39:			}
        -:   40:		}
        -:   41:	}
    19160:   42:	return 0;
        -:   43:}
        -:   44:
function cardsAreCorrectVals called 0 returned 0% blocks executed 0%
    #####:   45:int cardsAreCorrectVals(int k[]) {
        -:   46:	int i;
    #####:   47:	for(i = 0; i < NUMCARDS; i++) 
branch  0 never executed
branch  1 never executed
        -:   48:	{
    #####:   49:		if(k[i] > treasure_map || k[i] < adventurer) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   50:			return -1;
        -:   51:		}
        -:   52:	}
    #####:   53:	return 0;
        -:   54:}
        -:   55:
function test1 called 1 returned 100% blocks executed 100%
        1:   56:int test1(int seed) 
        -:   57:{
        -:   58:	int i, j;
        1:   59:	int *k = (int*)malloc(sizeof(int)*NUMCARDS);
        -:   60:
        1:   61:	int numPlayers = (rand()% 3) + 2;
call    0 returned 100%
        1:   62:	int ret = -1;
        -:   63:
        1:   64:	struct gameState *G = newGame();
call    0 returned 100%
        -:   65://	struct gameState *Gcpy = newGame();
        -:   66:	//repeat until you get return val 0 in initializeGame, i.e. all kingdom cards are unique
        -:   67:
        1:   68:	printf("TEST #1: Kingdom cards random testing\n");
call    0 returned 100%
        1:   69:	printf("\t should return 0 if unique; -1 if non-unique\n");
call    0 returned 100%
  1000001:   70:	for(i = 0; i < NUMTRIALS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   71:	{
 11000000:   72:		for(j = 0; j < NUMCARDS; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 10000000:   73:			k[j] = (rand()%15);
call    0 returned 100%
        -:   74:		}
  1000000:   75:		ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
  1000000:   76:		int cret = cardsAreUnique(k);
call    0 returned 100%
  1000000:   77:		if(cret == 0) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
    19160:   78:			ASSERT2(ret, 0, "FAIL when cards are unique");
call    0 returned 100%
        -:   79:		}
        -:   80:		else {
   980840:   81:			ASSERT2(ret, -1, "FAIL when cards are non-unique");
call    0 returned 100%
        -:   82:		}
        -:   83:	}
        -:   84:
        1:   85:	printf("PASS\n");
call    0 returned 100%
        1:   86:	printf("------------------\n");
call    0 returned 100%
        1:   87:	free(G);
        1:   88:	free(k);
        1:   89:}
        -:   90:
function test2 called 1 returned 100% blocks executed 94%
        1:   91:int test2(int seed) {
        1:   92:	struct gameState *G = newGame();
call    0 returned 100%
        -:   93:	//struct gameState *Gcpy = newGame();
        -:   94:	int i;
        -:   95:	int numPlayers;
        -:   96:	int ret;
        1:   97:	int *k = getUniqueCards();
call    0 returned 100%
        1:   98:	printf("TEST #2: Number of players random testing\n");
call    0 returned 100%
        1:   99:	printf("\t should return 0 if 2 - 4; -1 otherwise\n");
call    0 returned 100%
        -:  100:	//random testing for number of players
  1000001:  101:	for(i = 0; i < NUMTRIALS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1000000:  102:		numPlayers = rand();
call    0 returned 100%
  1000000:  103:		ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
  1000000:  104:		if((numPlayers == 1) || (numPlayers == 2) || (numPlayers == 3) || (numPlayers == 4))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  105:		{
    #####:  106:			ASSERT2(ret, 0, "FAIL");
call    0 never executed
        -:  107:		}
        -:  108:		else
        -:  109:		{
  1000000:  110:			ASSERT2(ret, -1, "FAIL");
call    0 returned 100%
        -:  111:		}
        -:  112:	}
        1:  113:	printf("PASS\n");
call    0 returned 100%
        1:  114:	printf("----------------------\n");
call    0 returned 100%
        1:  115:	free(G);
        1:  116:	free(k);
        1:  117:}
        -:  118:
function test3a called 1 returned 100% blocks executed 100%
        1:  119:int test3a(int seed) {
        -:  120:	int ret;
        -:  121:	int numPlayers;
        1:  122:	int curseCount, estateCount, duchyCount, provinceCount, copperCount, silverCount = 40, goldCount = 30;
        1:  123:	struct gameState *G = newGame();
call    0 returned 100%
        1:  124:	int *k = getUniqueCards();
call    0 returned 100%
        -:  125:
        -:  126:	//Test when players are 2
        1:  127:	numPlayers = 2;
        1:  128:	ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
        1:  129:	curseCount = G->supplyCount[curse];
        1:  130:	estateCount = G->supplyCount[estate];
        1:  131:	duchyCount = G->supplyCount[duchy];
        1:  132:	provinceCount = G->supplyCount[province];
        1:  133:	copperCount = G->supplyCount[copper];
        1:  134:	silverCount = G->supplyCount[silver];
        1:  135:	goldCount = G->supplyCount[gold];
        1:  136:	ASSERT2(curseCount, 10, "curseCount");
call    0 returned 100%
        1:  137:	ASSERT2(estateCount, 8, "estateCount");
call    0 returned 100%
        1:  138:	ASSERT2(duchyCount, 8, "duchyCount");
call    0 returned 100%
        1:  139:	ASSERT2(provinceCount, 8, "provinceCount");
call    0 returned 100%
        1:  140:	ASSERT2(copperCount, (60 - (7 * numPlayers)), "copperCount");
call    0 returned 100%
        1:  141:	ASSERT2(silverCount, 40, "silverCount");
call    0 returned 100%
        1:  142:	ASSERT2(goldCount, 30, "goldCount");
call    0 returned 100%
        -:  143:
        1:  144:	free(G);
        1:  145:	free(k);
        1:  146:}
        -:  147:
function test3b called 1 returned 100% blocks executed 100%
        1:  148:int test3b(int seed) {
        -:  149:	int ret;
        -:  150:	int numPlayers;
        1:  151:	int curseCount, estateCount, duchyCount, provinceCount, copperCount, silverCount = 40, goldCount = 30;
        1:  152:	struct gameState *G = newGame();
call    0 returned 100%
        1:  153:	int *k = getUniqueCards();
call    0 returned 100%
        -:  154:	//Test when players are 3
        -:  155:
        1:  156:	numPlayers = 3;
        1:  157:	ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
        1:  158:	curseCount = G->supplyCount[curse];
        1:  159:	estateCount = G->supplyCount[estate];
        1:  160:	duchyCount = G->supplyCount[duchy];
        1:  161:	provinceCount = G->supplyCount[province];
        1:  162:	copperCount = G->supplyCount[copper];
        1:  163:	silverCount = G->supplyCount[silver];
        1:  164:	goldCount = G->supplyCount[gold];
        1:  165:	ASSERT2(curseCount, 20, "curseCount");
call    0 returned 100%
        1:  166:	ASSERT2(estateCount, 12, "estateCount");
call    0 returned 100%
        1:  167:	ASSERT2(duchyCount, 12, "duchyCount");
call    0 returned 100%
        1:  168:	ASSERT2(provinceCount, 12, "provinceCount");
call    0 returned 100%
        1:  169:	ASSERT2(copperCount, (60 - (7 * numPlayers)), "copperCount");
call    0 returned 100%
        1:  170:	ASSERT2(silverCount, 40, "silverCount");
call    0 returned 100%
        1:  171:	ASSERT2(goldCount, 30, "goldCount");
call    0 returned 100%
        -:  172:
        1:  173:	free(G);
        1:  174:	free(k);
        1:  175:}
        -:  176:
function test3c called 1 returned 100% blocks executed 100%
        1:  177:int test3c(int seed) {
        -:  178:	int ret;
        -:  179:	int numPlayers;
        1:  180:	int curseCount, estateCount, duchyCount, provinceCount, copperCount, silverCount = 40, goldCount = 30;
        1:  181:	struct gameState *G = newGame();
call    0 returned 100%
        1:  182:	int *k = getUniqueCards();
call    0 returned 100%
        -:  183:
        -:  184:	//Test when players are 4
        1:  185:	numPlayers = 4;
        1:  186:	ret = initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
        1:  187:	curseCount = G->supplyCount[curse];
        1:  188:	estateCount = G->supplyCount[estate];
        1:  189:	duchyCount = G->supplyCount[duchy];
        1:  190:	provinceCount = G->supplyCount[province];
        1:  191:	copperCount = G->supplyCount[copper];
        1:  192:	silverCount = G->supplyCount[silver];
        1:  193:	goldCount = G->supplyCount[gold];
        1:  194:	ASSERT2(curseCount, 30, "curseCount");
call    0 returned 100%
        1:  195:	ASSERT2(estateCount, 12, "estateCount");
call    0 returned 100%
        1:  196:	ASSERT2(duchyCount, 12, "duchyCount");
call    0 returned 100%
        1:  197:	ASSERT2(provinceCount, 12, "provinceCount");
call    0 returned 100%
        1:  198:	ASSERT2(copperCount, (60 - (7 * numPlayers)), "copperCount");
call    0 returned 100%
        1:  199:	ASSERT2(silverCount, 40, "silverCount");
call    0 returned 100%
        1:  200:	ASSERT2(goldCount, 30, "goldCount");
call    0 returned 100%
        1:  201:	free(G);
        1:  202:	free(k);
        1:  203:}
        -:  204:
function test4 called 0 returned 0% blocks executed 0%
    #####:  205:int test4(int seed) 
        -:  206:{
        -:  207:	int i, j, t, x;
    #####:  208:	int *k = (int*)malloc(sizeof(int)*NUMCARDS);
    #####:  209:	int *supplyCount = (int*)malloc(sizeof(int)*NUMCARDS);
    #####:  210:	int trialCount = 100;
    #####:  211:	int numPlayers = (rand()% 3) + 2;
call    0 never executed
    #####:  212:	int ret = -1;
        -:  213:	int rand1;
    #####:  214:	struct gameState *G = newGame();
call    0 never executed
        -:  215:
        -:  216:	//initialize supplyCount 
    #####:  217:	for(i = 0; i < NUMCARDS; i++) 
branch  0 never executed
branch  1 never executed
        -:  218:	{
    #####:  219:		supplyCount[i] = -1;
        -:  220:	}
    #####:  221:	while(t < trialCount)
branch  0 never executed
branch  1 never executed
        -:  222:	{
    #####:  223:		for(j = 0; j < NUMCARDS; j++) {
branch  0 never executed
branch  1 never executed
    #####:  224:			rand1 = (rand()%15);
call    0 never executed
    #####:  225:			k[j] = rand1;
        -:  226:		}
        -:  227:
    #####:  228:		for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  229:		{
    #####:  230:			for (j = 0; j < NUMCARDS; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  231:			{
    #####:  232:				if (k[j] == i)
branch  0 never executed
branch  1 never executed
        -:  233:				{
        -:  234:					//check if card is a 'Victory' Kingdom card
    #####:  235:					if (k[j] == great_hall || k[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  236:					{
    #####:  237:						if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:  238:						{ 
    #####:  239:							supplyCount[i] = 8; 
        -:  240:						}
        -:  241:						else
        -:  242:						{
    #####:  243:							supplyCount[i] = 12;
        -:  244:						}
        -:  245:					}
        -:  246:					else
        -:  247:					{
    #####:  248:						supplyCount[i] = 10;
        -:  249:					}
    #####:  250:					break;
        -:  251:				}
        -:  252:			}
        -:  253:		}
    #####:  254:		ret = initializeGame(numPlayers, k, seed, G);
call    0 never executed
    #####:  255:		int cret = cardsAreUnique(k);
call    0 never executed
    #####:  256:		if(cret == 0) 
branch  0 never executed
branch  1 never executed
        -:  257:		{
    #####:  258:			t++;
    #####:  259:			for(x = 0; x < NUMCARDS; x++) 
branch  0 never executed
branch  1 never executed
        -:  260:			{
    #####:  261:				if(supplyCount[x] == -1) 
branch  0 never executed
branch  1 never executed
        -:  262:				{
    #####:  263:					ASSERT2(k[x], -1, "when initializing supplyCount (-1)");				
call    0 never executed
        -:  264:				}
        -:  265:				else 
        -:  266:				{
    #####:  267:					ASSERT2(k[x], supplyCount[x], "when initializing supplyCount");
call    0 never executed
        -:  268:				}
        -:  269:			}
        -:  270:		}
        -:  271:	}
        -:  272:
        -:  273:
    #####:  274:	printf("PASS\n");
call    0 never executed
    #####:  275:	printf("------------------\n");
call    0 never executed
    #####:  276:	free(G);
    #####:  277:	free(k);
    #####:  278:	return 0;
        -:  279:}
        -:  280:
function test5 called 0 returned 0% blocks executed 0%
    #####:  281:int test5(int seed) {
        -:  282:	int i,j;
    #####:  283:	int *k = getUniqueCards();
call    0 never executed
        -:  284:	int numPlayers ;
        -:  285:	struct gameState *G;
        -:  286:	struct gameState *Gcpy;
    #####:  287:	G = newGame();
call    0 never executed
    #####:  288:	Gcpy = newGame();
call    0 never executed
    #####:  289:	numPlayers = 2;
        -:  290:
    #####:  291:	initializeGame(numPlayers, k, seed, Gcpy);
call    0 never executed
        -:  292:	//set player decks
    #####:  293:	for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  294:	{
    #####:  295:		G->deckCount[i] = 0;
    #####:  296:		for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  297:		{
    #####:  298:		  G->deck[i][j] = estate;
    #####:  299:		  G->deckCount[i]++;
        -:  300:		}
    #####:  301:		for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  302:		{
    #####:  303:		  G->deck[i][j] = copper;
    #####:  304:		  G->deckCount[i]++;		
        -:  305:		}
        -:  306:	}
        -:  307:
    #####:  308:	for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  309:	{
    #####:  310:		for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  311:		{
    #####:  312:			printf("G: %d, copy: %d\n", G->deck[i][j],Gcpy->deck[i][j]);
call    0 never executed
        -:  313:
    #####:  314:			ASSERT2(Gcpy->deck[i][j], G->deck[i][j], "when initializing player decks");
call    0 never executed
        -:  315:		}
        -:  316:	}
    #####:  317:	return 0;
        -:  318:}
        -:  319:
function main called 1 returned 100% blocks executed 100%
        1:  320:int main() {
        1:  321:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:  322:	int seed = rand() + 1;
call    0 returned 100%
        -:  323:		//declaring the reusable variables
        1:  324:	int *k = (int*)malloc(sizeof(int)*NUMCARDS);
        -:  325:
        1:  326:	printf("-------------------------------------------------------\n");
call    0 returned 100%
        1:  327:	printf("START OF UNIT TEST 3 - INITIALIZEGAME\n\n");
call    0 returned 100%
        -:  328:
        -:  329:	//testing for unique kingdom cards
        1:  330:	test1(seed);
call    0 returned 100%
        -:  331:
        -:  332:	//testing for number of players
        1:  333:	test2(seed);
call    0 returned 100%
        -:  334:
        -:  335:	//testing for supply count
        -:  336:	//when 2 players
        1:  337:	printf("TEST #3a: Supply cards: 3 players\n");
call    0 returned 100%
        1:  338:	printf("\t curse = 10, estate|province|duchy = 8\n");
call    0 returned 100%
        1:  339:	test3a(seed);
call    0 returned 100%
        1:  340:	printf("PASS\n");
call    0 returned 100%
        1:  341:	printf("------------------\n");
call    0 returned 100%
        -:  342:
        -:  343:	//when 3 players
        1:  344:	printf("TEST #3b: Supply cards: 3 players\n");
call    0 returned 100%
        1:  345:	printf("\t curse = 20, estate|province|duchy = 12\n");
call    0 returned 100%
        1:  346:	test3b(seed);
call    0 returned 100%
        1:  347:	printf("PASS\n");
call    0 returned 100%
        1:  348:	printf("------------------\n");
call    0 returned 100%
        -:  349:
        -:  350:	//when 4 players
        1:  351:	printf("TEST #3c: Supply cards: 4 players\n");
call    0 returned 100%
        1:  352:	printf("\t curse = 30, estate|province|duchy = 12\n");
call    0 returned 100%
        1:  353:	test3c(seed);
call    0 returned 100%
        1:  354:	printf("PASS\n");
call    0 returned 100%
        1:  355:	printf("------------------\n");
call    0 returned 100%
        -:  356:
        -:  357:	//testing for correct kingdom card values
        1:  358:	printf("TEST #4: Kingdom cards correct values\n");
call    0 returned 100%
        1:  359:	printf("\t should return 8, 10, 12 depending on number of players; -1 for unselected card\n");
call    0 returned 100%
        -:  360:	//test4(seed);
        -:  361:	//test5(seed);
        -:  362:
        1:  363:	printf("\nEND OF UNIT TEST 3 - INITIALIZEGAME\n");
call    0 returned 100%
        1:  364:	printf("---------------------------------------------------\n");
call    0 returned 100%
        1:  365:	return 0;
        -:  366:}
File 'unittest4.c'
Lines executed:100.00% of 20
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:55.56% of 9
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <assert.h>
        -:   10:#define NUMCARDS 10
        -:   11:
function main called 1 returned 100% blocks executed 73%
        1:   12:int main() {
        -:   13:
        -:   14:	struct gameState G;
        -:   15:
        1:   16:	int seed = 1000;
        -:   17:	int t1;
        1:   18:	int numPlayers = 4;
        1:   19:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   20:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   21:	G.whoseTurn = 0;
        1:   22:	t1 = G.whoseTurn;
        -:   23:
        1:   24:	endTurn(&G);
call    0 returned 100%
        1:   25:	t1 = G.whoseTurn;
        1:   26:	assert(t1 == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   27:
        1:   28:	endTurn(&G);
call    0 returned 100%
        1:   29:	t1 = G.whoseTurn;
        1:   30:	assert(t1 == 2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   31:
        1:   32:	endTurn(&G);
call    0 returned 100%
        1:   33:	t1 = G.whoseTurn;
        1:   34:	assert(t1 == 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   35:
        1:   36:	endTurn(&G);
call    0 returned 100%
        1:   37:	t1 = G.whoseTurn;
        1:   38:	assert(t1 == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   39:	return 0;
        -:   40:}
        -:   41:
        -:   42:
        -:   43:// int endTurn(struct gameState *state) {
        -:   44://   int k;
        -:   45://   int i;
        -:   46://   int currentPlayer = whoseTurn(state);
        -:   47:  
        -:   48://   //Discard hand
        -:   49://   for (i = 0; i < state->handCount[currentPlayer]; i++){
        -:   50://     state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        -:   51://     state->hand[currentPlayer][i] = -1;//Set card to -1
        -:   52://   }
        -:   53://   state->handCount[currentPlayer] = 0;//Reset hand count
        -:   54:    
        -:   55://   //Code for determining the player
        -:   56://   if (currentPlayer < (state->numPlayers - 1)){ 
        -:   57://     state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:   58://   }
        -:   59://   else{
        -:   60://     state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:   61://   }
        -:   62:
        -:   63://   state->outpostPlayed = 0;
        -:   64://   state->phase = 0;
        -:   65://   state->numActions = 1;
        -:   66://   state->coins = 0;
        -:   67://   state->numBuys = 1;
        -:   68://   state->playedCardCount = 0;
        -:   69://   state->handCount[state->whoseTurn] = 0;
        -:   70:
        -:   71://   //int k; move to top
        -:   72://   //Next player draws hand
        -:   73://   for (k = 0; k < 5; k++){
        -:   74://     drawCard(state->whoseTurn, state);//Draw a card
        -:   75://   }
        -:   76:
        -:   77://   //Update money
        -:   78://   updateCoins(state->whoseTurn, state , 0);
        -:   79:
        -:   80://   return 0;
        -:   81:// }
File 'villagetest.c'
Lines executed:100.00% of 86
Branches executed:100.00% of 24
Taken at least once:62.50% of 24
Calls executed:70.97% of 31
Creating 'villagetest.c.gcov'

        -:    0:Source:villagetest.c
        -:    0:Graph:villagetest.gcno
        -:    0:Data:villagetest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include "cardFunctions.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:
        -:   11://random hand with smithy at the end
function createRandomHand called 4 returned 100% blocks executed 100%
        4:   12:int createRandomHand(int *k, int max) 
        -:   13:{
        -:   14:	int j;
       20:   15:	for(j = 0; j < max-1; j++) 
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   16:	{
       16:   17:		k[j] = (rand()%15);
call    0 returned 100%
        -:   18:	}
        4:   19:	k[j] = smithy;
        4:   20:}
        -:   21:
        -:   22://random hand with smithy at the end
function createRandomDeck called 4 returned 100% blocks executed 100%
        4:   23:int createRandomDeck(int *k, int max) 
        -:   24:{
        -:   25:	int j;
     1984:   26:	for(j = 0; j < max; j++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   27:	{
     1980:   28:		k[j] = (rand()%15);
call    0 returned 100%
        -:   29:	}
        4:   30:}
        -:   31:
function setDiscardDeck called 4 returned 100% blocks executed 100%
        4:   32:int setDiscardDeck(int *k, int max) {
        -:   33:	int i;
     2004:   34:	for(i = 0; i < max; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   35:	{
     2000:   36:		k[i] = -1;
        -:   37:	}
        4:   38:}
        -:   39:
function main called 1 returned 100% blocks executed 78%
        1:   40:int main() {
        1:   41:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   42:	struct gameState G;
        -:   43:	struct infosStruct infos;
        1:   44:	int k[] = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14};	
        1:   45:	int numPlayers = 4;
        -:   46:	int handCountBefore, handCountAfter;
        -:   47:	int deckCountBefore, deckCountAfter;
        1:   48:	int curPlayer, p1 = 0, p2 = 1, p3 = 2, p4 = 3;
        -:   49:	int i;
        1:   50:	int seed = 1000;
        1:   51:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   52:	G.numPlayers = numPlayers;
        1:   53:	G.whoseTurn = 0;
        1:   54:	infos.currentPlayer = 0;
        1:   55:	infos.handPos = 4;
        -:   56:	int numActions1, numActions2;
        -:   57:	int numCards1, numCards2;
        -:   58:	int numDeck1, numDeck2;
        -:   59:	int numHand1, numHand2;
        -:   60:
        1:   61:	int handCount = 5;
        1:   62:	int deckCount = MAX_DECK - handCount;
        1:   63:	createRandomHand(G.hand[p1], handCount);
call    0 returned 100%
        1:   64:	createRandomHand(G.hand[p2], handCount);
call    0 returned 100%
        1:   65:	createRandomHand(G.hand[p3], handCount);
call    0 returned 100%
        1:   66:	createRandomHand(G.hand[p4], handCount);
call    0 returned 100%
        -:   67:
        1:   68:	G.handCount[p1] = handCount;
        1:   69:	G.handCount[p2] = handCount;	
        1:   70:	G.handCount[p3] = handCount;	
        1:   71:	G.handCount[p4] = handCount;
        -:   72:
        1:   73:	createRandomDeck(G.deck[p1], deckCount);
call    0 returned 100%
        1:   74:	createRandomDeck(G.deck[p2], deckCount);
call    0 returned 100%
        1:   75:	createRandomDeck(G.deck[p3], deckCount);
call    0 returned 100%
        1:   76:	createRandomDeck(G.deck[p4], deckCount);
call    0 returned 100%
        -:   77:
        1:   78:	G.deckCount[p1] = deckCount;
        1:   79:	G.deckCount[p2] = deckCount;	
        1:   80:	G.deckCount[p3] = deckCount;	
        1:   81:	G.deckCount[p4] = deckCount;
        -:   82:
        1:   83:	setDiscardDeck(G.discard[p1], MAX_DECK);
call    0 returned 100%
        1:   84:	setDiscardDeck(G.discard[p2], MAX_DECK);
call    0 returned 100%
        1:   85:	setDiscardDeck(G.discard[p3], MAX_DECK);
call    0 returned 100%
        1:   86:	setDiscardDeck(G.discard[p4], MAX_DECK);
call    0 returned 100%
        -:   87:
        1:   88:	G.discardCount[p1] = 0;
        1:   89:	G.discardCount[p2] = 0;	
        1:   90:	G.discardCount[p3] = 0;	
        1:   91:	G.discardCount[p4] = 0;
        -:   92:
        -:   93:
        -:   94://testing current player
        1:   95:	numActions1 = G.numActions;
        1:   96:	numHand1 = G.handCount[p1];
        1:   97:	numDeck1 = G.deckCount[p1];
        1:   98:	effectVillage(&G, &infos);
call    0 returned 100%
        -:   99:
        1:  100:	numHand2 = G.handCount[p1];
        1:  101:	numDeck2 = G.deckCount[p1];
        1:  102:	numActions2 = G.numActions;	
        1:  103:	assert(numActions1 +2 == numActions2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  104:	assert(numDeck1 -1 == numDeck2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  105:	//assert(numHand1 +1 == numHand2);
        -:  106:	
        1:  107:	endTurn(&G);
call    0 returned 100%
        1:  108:	assert(G.numActions == numActions1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  109:
        -:  110:	//testing for player 2
        1:  111:	infos.currentPlayer = 0;
        1:  112:	numHand1 = G.handCount[p2];
        1:  113:	numDeck1 = G.deckCount[p2];
        1:  114:	effectVillage(&G, &infos);
call    0 returned 100%
        -:  115:
        1:  116:	numHand2 = G.handCount[p2];
        1:  117:	numDeck2 = G.deckCount[p2];
        1:  118:	assert(numDeck1 == numDeck2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  119:	assert(numHand1 == numHand2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  120:
        -:  121://testing for player 3
        1:  122:	infos.currentPlayer = 0;
        1:  123:	numHand1 = G.handCount[p3];
        1:  124:	numDeck1 = G.deckCount[p3];
        1:  125:	effectVillage(&G, &infos);
call    0 returned 100%
        -:  126:
        1:  127:	numHand2 = G.handCount[p3];
        1:  128:	numDeck2 = G.deckCount[p3];
        1:  129:	assert(numDeck1 == numDeck2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  130:	assert(numHand1 == numHand2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  131:
        -:  132://testing for player 4
        1:  133:	infos.currentPlayer = 0;
        1:  134:	numHand1 = G.handCount[p4];
        1:  135:	numDeck1 = G.deckCount[p4];
        1:  136:	effectVillage(&G, &infos);
call    0 returned 100%
        -:  137:
        1:  138:	numHand2 = G.handCount[p4];
        1:  139:	numDeck2 = G.deckCount[p4];
        1:  140:	assert(numDeck1 == numDeck2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  141:	assert(numHand1 == numHand2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  142:
        -:  143:
        1:  144:	return 0;
        -:  145:}
        -:  146:
        -:  147:
        -:  148:
        -:  149:// int effectVillage(struct gameState *state, struct infosStruct *infos)
        -:  150:// {
        -:  151:
        -:  152://   int currentPlayer= infos->currentPlayer;
        -:  153:
        -:  154://   int handPos = infos->handPos;
        -:  155://   //+1 Card
        -:  156://   drawCard(currentPlayer, state);
        -:  157:
        -:  158://   //+2 Actions
        -:  159://   state->numActions = state->numActions + 2;
        -:  160:
        -:  161://   //discard played card from hand
        -:  162://   discardCard(handPos, currentPlayer, state, 0);
        -:  163://   return 0;
        -:  164:// }
        -:  165:
File 'dominion.c'
Lines executed:29.15% of 590
Branches executed:21.58% of 417
Taken at least once:19.42% of 417
Calls executed:14.29% of 98
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include "cardFunctions.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 575065 returned 100% blocks executed 83%
   575065:    9:int compare(const void* a, const void* b) {
   575065:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
   575065:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   153348:   13:    return -1;
   421717:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 5 returned 100% blocks executed 100%
        5:   17:struct gameState* newGame() {
        5:   18:  struct gameState* g = malloc(sizeof(struct gameState));
        5:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 5 returned 100% blocks executed 100%
        5:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
        5:   24:  int* k = malloc(10 * sizeof(int));
        -:   25:  
        5:   26:  k[0] = k1;
        5:   27:  k[1] = k2;
        5:   28:  k[2] = k3;
        5:   29:  k[3] = k4;
        5:   30:  k[4] = k5;
        5:   31:  k[5] = k6;
        5:   32:  k[6] = k7;
        5:   33:  k[7] = k8;
        5:   34:  k[8] = k9;
        5:   35:  k[9] = k10;
        5:   36:  return k;
        -:   37:}
        -:   38:
        -:   39:
function initializeGame called 2000005 returned 100% blocks executed 98%
  2000005:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) 
        -:   41:{
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;      
        -:   45:  //set up random number generator
  2000005:   46:  SelectStream(1);
call    0 returned 100%
  2000005:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
  2000005:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
  1000000:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
  1000005:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
  2299718:   59:  for (i = 0; i < 10; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   60:    {
 20363472:   61:      for (j = 0; j < 10; j++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   62:        {
 19063759:   63:   if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:   64:     {
   980840:   65:       return -1;
        -:   66:     }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
    19165:   74:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   75:    {
    19161:   76:      state->supplyCount[curse] = 10;
        -:   77:
        -:   78:    }
        4:   79:  else if (numPlayers == 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   80:    {
        1:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
        3:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
    19165:   89:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   90:    {
    19161:   91:      state->supplyCount[estate] = 8;
    19161:   92:      state->supplyCount[duchy] = 8;
    19161:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
        4:   97:      state->supplyCount[estate] = 12;
        4:   98:      state->supplyCount[duchy] = 12;
        4:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
    19165:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    19165:  104:  state->supplyCount[silver] = 40;
    19165:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
   402465:  108:  for (i = adventurer; i <= treasure_map; i++)         //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:  {
  3652791:  110:    for (j = 0; j < 10; j++)               //loop chosen cards
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  111:    {
  3371847:  112:      if (kingdomCards[j] == i)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  113:      {
        -:  114:        //check if card is a 'Victory' Kingdom card
   102356:  115:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
        -:  116:        {
    25674:  117:          if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  118:          { 
    12832:  119:            state->supplyCount[i] = 8; 
        -:  120:          }
        -:  121:          else
        -:  122:          {
        5:  123:            state->supplyCount[i] = 12;
        -:  124:          }
        -:  125:        }
        -:  126:        else
        -:  127:        {
    89519:  128:          state->supplyCount[i] = 10;
        -:  129:        }
   102356:  130:        break;
        -:  131:      }
        -:  132:      else    //card is not in the set choosen for the game
        -:  133:      {
  3269491:  134:        state->supplyCount[i] = -1;
        -:  135:      }
        -:  136:    }
        -:  137:  }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
    57502:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  144:  {
    38337:  145:    state->deckCount[i] = 0;
   153348:  146:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  147:   {
   115011:  148:     state->deck[i][j] = estate;
   115011:  149:     state->deckCount[i]++;
        -:  150:   }
   306696:  151:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  152:   {
   268359:  153:     state->deck[i][j] = copper;
   268359:  154:     state->deckCount[i]++;    
        -:  155:   }
        -:  156:  }
        -:  157:  //shuffle player decks
    57502:  158:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  159:    {
    38337:  160:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  161: {
    #####:  162:   return -1;
        -:  163: }
        -:  164:    }
        -:  165:
        -:  166:  //draw player hands
    57502:  167:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  168:    {  
        -:  169:      //initialize hand size to zero
    38337:  170:      state->handCount[i] = 0;
    38337:  171:      state->discardCount[i] = 0;
        -:  172:      //draw 5 cards
        -:  173:      // for (j = 0; j < 5; j++)
        -:  174:      // {
        -:  175:      //   drawCard(i, state);
        -:  176:      // }
        -:  177:    }
        -:  178:  
        -:  179:  //set embargo tokens to 0 for all supply piles
   536620:  180:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  181:    {
   517455:  182:      state->embargoTokens[i] = 0;
        -:  183:    }
        -:  184:
        -:  185:  //initialize first player's turn
    19165:  186:  state->outpostPlayed = 0;
    19165:  187:  state->phase = 0;
    19165:  188:  state->numActions = 1;
    19165:  189:  state->numBuys = 1;
    19165:  190:  state->playedCardCount = 0;
    19165:  191:  state->whoseTurn = 0;
    19165:  192:  state->handCount[state->whoseTurn] = 0;
        -:  193:  //int it; move to top
        -:  194:
        -:  195:  //Moved draw cards to here, only drawing at the start of a turn
   114990:  196:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    95825:  197:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  198:  }
    19165:  199:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  200:
    19165:  201:  return 0;
        -:  202:}
        -:  203:
        -:  204:
function shuffle called 38337 returned 100% blocks executed 94%
    38337:  205:int shuffle(int player, struct gameState *state) {
        -:  206: 
        -:  207:  int newDeck[MAX_DECK];
    38337:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
    38337:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:    return -1;
    38337:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
   460044:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   383370:  218:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   383370:  219:    newDeck[newDeckPos] = state->deck[player][card];
   383370:  220:    newDeckPos++;
  1399279:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
  1015909:  222:      state->deck[player][i] = state->deck[player][i+1];
        -:  223:    }
   383370:  224:    state->deckCount[player]--;
        -:  225:  }
   421707:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   383370:  227:    state->deck[player][i] = newDeck[i];
   383370:  228:    state->deckCount[player]++;
        -:  229:  }
    38337:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  348:int whoseTurn(struct gameState *state) {
        5:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 5 returned 100% blocks executed 100%
        5:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
        5:  355:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  356:  
        -:  357:  //Discard hand
       30:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       25:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
        5:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
        5:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
        1:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
        5:  372:  state->outpostPlayed = 0;
        5:  373:  state->phase = 0;
        5:  374:  state->numActions = 1;
        5:  375:  state->coins = 0;
        5:  376:  state->numBuys = 1;
        5:  377:  state->playedCardCount = 0;
        5:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
       30:  382:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  384:  }
        -:  385:
        -:  386:  //Update money
        5:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  388:
        5:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 20026 returned 100% blocks executed 100%
    20026:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    20026:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  398:    {
     2008:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    18018:  403:  j = 0;
   468468:  404:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  405:    {
   450450:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  407:	{
    44845:  408:	  j++;
        -:  409:	}
        -:  410:    }
    18018:  411:  if ( j >= 3)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  412:    {
     8835:  413:      return 1;
        -:  414:    }
        -:  415:
     9183:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 95857 returned 100% blocks executed 38%
    95857:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
    95857:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
    95857:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
    95857:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
    95857:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    95857:  578:    state->deckCount[player]--;
    95857:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
    95857:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:
    #####:  651:  struct infosStruct *infos = malloc(sizeof(struct infosStruct));
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
    #####:  657:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
    #####:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;// this is the counter for the temp hand
    #####:  665:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  666:    nextPlayer = 0;
    #####:  667:    infos->nextPlayer = nextPlayer;
        -:  668:  }
        -:  669:  
    #####:  670:  infos->z = 0;
    #####:  671:  infos->currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  672:  infos->tributeRevealedCards[0] = -1;
    #####:  673:  infos->tributeRevealedCards[1] = -1;
    #####:  674:  infos->drawntreasure = 0;
    #####:  675:  infos->handPos = handPos;
    #####:  676:  infos->choice1 = choice1;
    #####:  677:  infos->choice2 = choice2;
    #####:  678:  infos->choice3 = choice3;
        -:  679:  //uses switch to select card and perform actions
    #####:  680:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  681:    {
        -:  682:    case adventurer:
    #####:  683:      return effectAdventure(state, infos);
call    0 never executed
        -:  684:
        -:  685:    case council_room:
    #####:  686:      return effectCouncil(state, infos);
call    0 never executed
        -:  687:
        -:  688:
        -:  689:    case feast:
        -:  690:      //gain card with cost up to 5
        -:  691:      //Backup hand
    #####:  692:      for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  693:      {
    #####:  694:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  695:      	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  696:      }
        -:  697:      //Backup hand
        -:  698:
        -:  699:      //Update Coins for Buy
    #####:  700:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  701:      x = 1;//Condition to loop on
    #####:  702:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  703:	   if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  704:    	  if (DEBUG)
        -:  705:    	    printf("None of that card left, sorry!\n");
        -:  706:
        -:  707:    	  if (DEBUG){
        -:  708:    	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  709:    	  }
        -:  710:    	}
    #####:  711:    	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  712:    	  printf("That card is too expensive!\n");
call    0 never executed
        -:  713:
        -:  714:    	  if (DEBUG){
        -:  715:    	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  716:    	  }
        -:  717:    	}
        -:  718:  	else{
        -:  719:
        -:  720:  	  if (DEBUG){
        -:  721:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  722:  	  }
        -:  723:
    #####:  724:  	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  725:  	  x = 0;//No more buying cards
        -:  726:
        -:  727:  	  if (DEBUG){
        -:  728:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:  	  }
        -:  730:
        -:  731:  	}
        -:  732:      }     
        -:  733:
        -:  734:      //Reset Hand
    #####:  735:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  736:	state->hand[currentPlayer][i] = temphand[i];
    #####:  737:	temphand[i] = -1;
        -:  738:      }
        -:  739:      //Reset Hand
        -:  740:      			
    #####:  741:      return 0;
        -:  742:			
        -:  743:    case gardens:
    #####:  744:      return -1;
        -:  745:			
        -:  746:    case mine:
    #####:  747:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  748:
    #####:  749:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:		
    #####:  754:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  755:	{
    #####:  756:	  return -1;
        -:  757:	}
        -:  758:
    #####:  759:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  760:	{
    #####:  761:	  return -1;
        -:  762:	}
        -:  763:
    #####:  764:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  765:
        -:  766:      //discard card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  768:
        -:  769:      //discard trashed card
    #####:  770:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  771:	{
    #####:  772:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  773:	    {
    #####:  774:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  775:	      break;
        -:  776:	    }
        -:  777:	}
        -:  778:			
    #####:  779:      return 0;
        -:  780:			
        -:  781:    case remodel:
    #####:  782:      return effectRemodel(state, infos);
call    0 never executed
        -:  783:		
        -:  784:    case smithy:
    #####:  785:      return effectSmithy(state, infos);
call    0 never executed
        -:  786:
        -:  787:		case village:
    #####:  788:      return effectVillage(state, infos);
call    0 never executed
        -:  789:
        -:  790:    case baron:
    #####:  791:      state->numBuys++;//Increase buys by 1!
    #####:  792:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  793:	int p = 0;//Iterator for hand!
    #####:  794:	int card_not_discarded = 1;//Flag for discard set!
    #####:  795:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  796:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  797:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  798:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  799:	    state->discardCount[currentPlayer]++;
    #####:  800:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  801:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  802:	    }
    #####:  803:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  804:	    state->handCount[currentPlayer]--;
    #####:  805:	    card_not_discarded = 0;//Exit the loop
        -:  806:	  }
    #####:  807:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  808:	    if(DEBUG) {
        -:  809:	      printf("No estate cards in your hand, invalid choice\n");
        -:  810:	      printf("Must gain an estate if there are any\n");
        -:  811:	    }
    #####:  812:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  814:	      state->supplyCount[estate]--;//Decrement estates
    #####:  815:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  816:		isGameOver(state);
call    0 never executed
        -:  817:	      }
        -:  818:	    }
    #####:  819:	    card_not_discarded = 0;//Exit the loop
        -:  820:	  }
        -:  821:			    
        -:  822:	  else{
    #####:  823:	    p++;//Next card
        -:  824:	  }
        -:  825:	}
        -:  826:      }
        -:  827:			    
        -:  828:      else{
    #####:  829:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  831:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  832:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:	    isGameOver(state);
call    0 never executed
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:	    
        -:  838:      
    #####:  839:      return 0;
        -:  840:		
        -:  841:    case great_hall:
        -:  842:      //+1 Card
    #####:  843:      drawCard(currentPlayer, state);
call    0 never executed
        -:  844:			
        -:  845:      //+1 Actions
    #####:  846:      state->numActions++;
        -:  847:			
        -:  848:      //discard card from hand
    #####:  849:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  850:      return 0;
        -:  851:		
        -:  852:    case minion:
        -:  853:      //+1 action
    #####:  854:      state->numActions++;
        -:  855:			
        -:  856:      //discard card from hand
    #####:  857:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  858:			
    #####:  859:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  state->coins = state->coins + 2;
        -:  862:	}
        -:  863:			
    #####:  864:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  865:	{
        -:  866:	  //discard hand
    #####:  867:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  868:	    {
    #####:  869:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:	    }
        -:  871:				
        -:  872:	  //draw 4
    #####:  873:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  874:	    {
    #####:  875:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:	    }
        -:  877:				
        -:  878:	  //other players discard hand and redraw if hand size > 4
    #####:  879:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	    {
    #####:  881:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  882:		{
    #####:  883:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  884:		    {
        -:  885:		      //discard hand
    #####:  886:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  887:			{
    #####:  888:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  889:			}
        -:  890:							
        -:  891:		      //draw 4
    #####:  892:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  893:			{
    #####:  894:			  drawCard(i, state);
call    0 never executed
        -:  895:			}
        -:  896:		    }
        -:  897:		}
        -:  898:	    }
        -:  899:				
        -:  900:	}
    #####:  901:      return 0;
        -:  902:		
        -:  903:    case steward:
    #####:  904:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  905:    	{
        -:  906:    	  //+2 cards
    #####:  907:    	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  908:    	  drawCard(currentPlayer, state);
call    0 never executed
        -:  909:    	}
    #####:  910:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  911:    	{
        -:  912:    	  //+2 coins
    #####:  913:    	  state->coins = state->coins + 2;
        -:  914:    	}
        -:  915:      else
        -:  916:    	{
        -:  917:    	  //trash 2 cards in hand
    #####:  918:    	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  919:    	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  920:    	}
        -:  921:			
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  924:      return 0;
        -:  925:		
        -:  926:    case tribute:
    #####:  927:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -:  928:      {
    #####:  929:      	if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -:  930:        {
    #####:  931:      	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:      	  state->deckCount[nextPlayer]--;
        -:  933:      	}
    #####:  934:      	else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -:  935:        {
    #####:  936:      	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:      	  state->discardCount[nextPlayer]--;
        -:  938:        }
        -:  939:      	else
        -:  940:        {
        -:  941:      	  //No Card to Reveal
        -:  942:      	  if (DEBUG)
        -:  943:          {
        -:  944:      	    printf("No cards to reveal\n");
        -:  945:      	  }
        -:  946:      	}
        -:  947:      }
        -:  948:      else
        -:  949:      {
    #####:  950:      	if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -:  951:        {
    #####:  952:      	  for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  953:          {
    #####:  954:      	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  955:      	    state->deckCount[nextPlayer]++;
    #####:  956:      	    state->discard[nextPlayer][i] = -1;
    #####:  957:      	    state->discardCount[nextPlayer]--;
        -:  958:      	  }
    #####:  959:        shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  960:        }
    #####:  961:      	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:      	state->deckCount[nextPlayer]--;
    #####:  964:      	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:      	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:      	state->deckCount[nextPlayer]--;
        -:  967:      }    
        -:  968:		       
    #####:  969:      if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -:  970:      {//If we have a duplicate card, just drop one 
    #####:  971:      	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  972:      	state->playedCardCount++;
    #####:  973:      	tributeRevealedCards[1] = -1;
        -:  974:      }
        -:  975:
    #####:  976:      for (i = 0; i <= 2; i ++)
branch  0 never executed
branch  1 never executed
        -:  977:      {
    #####:  978:      	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  979:        {//Treasure cards
    #####:  980:      	  state->coins += 2;
        -:  981:        }
        -:  982:		    
    #####:  983:      	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  984:          {//Victory Card Found
    #####:  985:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  986:            drawCard(currentPlayer, state);
call    0 never executed
        -:  987:          }
        -:  988:      	else
        -:  989:        {//Action Card
    #####:  990:      	  state->numActions = state->numActions + 2;
        -:  991:      	}
        -:  992:      }
    #####:  993:    return 0;
        -:  994:		
        -:  995:    case ambassador:
    #####:  996:      j = 0;		//used to check if player has enough cards to discard
        -:  997:
    #####:  998:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:	{
    #####: 1000:	  return -1;				
        -: 1001:	}
        -: 1002:
    #####: 1003:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  return -1;
        -: 1006:	}
        -: 1007:
    #####: 1008:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
    #####: 1010:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1011:	    {
    #####: 1012:	      j++;
        -: 1013:	    }
        -: 1014:	}
    #####: 1015:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1016:	{
    #####: 1017:	  return -1;				
        -: 1018:	}
        -: 1019:
        -: 1020:      if (DEBUG) 
        -: 1021:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1022:
        -: 1023:      //increase supply count for choosen card by amount being discarded
    #####: 1024:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1025:			
        -: 1026:      //each other player gains a copy of revealed card
    #####: 1027:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
    #####: 1029:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1030:	    {
    #####: 1031:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1032:	    }
        -: 1033:	}
        -: 1034:
        -: 1035:      //discard played card from hand
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1037:
        -: 1038:      //trash copies of cards returned to supply
    #####: 1039:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1040:	{
    #####: 1041:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1042:	    {
    #####: 1043:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1044:		{
    #####: 1045:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1046:		  break;
        -: 1047:		}
        -: 1048:	    }
        -: 1049:	}			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case cutpurse:
        -: 1054:
    #####: 1055:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1056:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1057:	{
    #####: 1058:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1059:	    {
    #####: 1060:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1061:		{
    #####: 1062:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1063:		    {
    #####: 1064:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1065:		      break;
        -: 1066:		    }
    #####: 1067:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1068:		    {
    #####: 1069:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1070:			{
        -: 1071:			  if (DEBUG)
        -: 1072:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1073:			}	
    #####: 1074:		      break;
        -: 1075:		    }		
        -: 1076:		}
        -: 1077:					
        -: 1078:	    }
        -: 1079:				
        -: 1080:	}				
        -: 1081:
        -: 1082:      //discard played card from hand
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1084:
    #####: 1085:      return 0;
        -: 1086:
        -: 1087:		
        -: 1088:    case embargo: 
        -: 1089:      //+2 Coins
    #####: 1090:      state->coins = state->coins + 2;
        -: 1091:			
        -: 1092:      //see if selected pile is in play
    #####: 1093:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  return -1;
        -: 1096:	}
        -: 1097:			
        -: 1098:      //add embargo token to selected supply pile
    #####: 1099:      state->embargoTokens[choice1]++;
        -: 1100:			
        -: 1101:      //trash card
    #####: 1102:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case outpost:
        -: 1106:      //set outpost flag
    #####: 1107:      state->outpostPlayed++;
        -: 1108:			
        -: 1109:      //discard card
    #####: 1110:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case salvager:
        -: 1114:      //+1 buy
    #####: 1115:      state->numBuys++;
        -: 1116:			
    #####: 1117:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
        -: 1119:	  //gain coins equal to trashed card
    #####: 1120:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1121:	  //trash card
    #####: 1122:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1123:	}
        -: 1124:			
        -: 1125:      //discard card
    #####: 1126:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1127:      return 0;
        -: 1128:		
        -: 1129:    case sea_hag:
    #####: 1130:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1131:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1132:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1133:	  state->discardCount[i]++;
    #####: 1134:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1135:	}
        -: 1136:      }
    #####: 1137:      return 0;
        -: 1138:		
        -: 1139:    case treasure_map:
        -: 1140:      //search hand for another treasure_map
    #####: 1141:      index = -1;
    #####: 1142:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1145:	    {
    #####: 1146:	      index = i;
    #####: 1147:	      break;
        -: 1148:	    }
        -: 1149:	}
    #####: 1150:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1151:	{
        -: 1152:	  //trash both treasure cards
    #####: 1153:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1154:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1155:
        -: 1156:	  //gain 4 Gold cards
    #####: 1157:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1160:	    }
        -: 1161:				
        -: 1162:	  //return success
    #####: 1163:	  return 1;
        -: 1164:	}
        -: 1165:			
        -: 1166:      //no second treasure_map found in hand
    #####: 1167:      return -1;
        -: 1168:    }
        -: 1169:	
    #####: 1170:  return -1;
        -: 1171:}
        -: 1172:
function discardCard called 5 returned 100% blocks executed 89%
        5: 1173:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1174:{
        -: 1175:  //if card is not trashed, added to Played pile 
        5: 1176:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1177:    {
        -: 1178:      //add card to played pile
        5: 1179:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1180:      state->playedCardCount++;
        -: 1181:    }
        -: 1182:	
        -: 1183:  //set played card to -1
        5: 1184:  state->hand[currentPlayer][handPos] = -1;
        -: 1185:	
        -: 1186:  //remove card from player's hand
        5: 1187:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1188:    {
        -: 1189:      //reduce number of cards in hand
    #####: 1190:      state->handCount[currentPlayer]--;
        -: 1191:    }
        5: 1192:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1193:    {
        -: 1194:      //reduce number of cards in hand
        3: 1195:      state->handCount[currentPlayer]--;
        -: 1196:    }
        -: 1197:  else 	
        -: 1198:  {
        -: 1199:      //replace discarded card with last card in hand
        2: 1200:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1201:      //set last card to -1
        2: 1202:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1203:      //reduce number of cards in hand
        2: 1204:      state->handCount[currentPlayer]--;
        -: 1205:    }
        -: 1206:	
        5: 1207:  return 0;
        -: 1208:}
        -: 1209:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1210:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1211:{
        -: 1212:  //Note: supplyPos is enum of choosen card
        -: 1213:	
        -: 1214:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1215:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1216:    {
    #####: 1217:      return -1;
        -: 1218:    }
        -: 1219:	
        -: 1220:  //added card for [whoseTurn] current player:
        -: 1221:  // toFlag = 0 : add to discard
        -: 1222:  // toFlag = 1 : add to deck
        -: 1223:  // toFlag = 2 : add to hand
        -: 1224:
    #####: 1225:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1226:    {
    #####: 1227:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1228:      state->deckCount[player]++;
        -: 1229:    }
    #####: 1230:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1231:    {
    #####: 1232:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1233:      state->handCount[player]++;
        -: 1234:    }
        -: 1235:  else
        -: 1236:    {
    #####: 1237:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1238:      state->discardCount[player]++;
        -: 1239:    }
        -: 1240:	
        -: 1241:  //decrease number in supply pile
    #####: 1242:  state->supplyCount[supplyPos]--;
        -: 1243:	 
    #####: 1244:  return 0;
        -: 1245:}
        -: 1246:
function updateCoins called 19170 returned 100% blocks executed 82%
    19170: 1247:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1248:{
        -: 1249:  int i;
        -: 1250:	
        -: 1251:  //reset coin count
    19170: 1252:  state->coins = 0;
        -: 1253:
        -: 1254:  //add coins for each Treasure card in player's hand
   115020: 1255:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1256:    {
    95850: 1257:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1258:	{
    76673: 1259:	  state->coins += 1;
        -: 1260:	}
    19177: 1261:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1262:	{
    #####: 1263:	  state->coins += 2;
        -: 1264:	}
    19177: 1265:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1266:	{
    #####: 1267:	  state->coins += 3;
        -: 1268:	}	
        -: 1269:    }	
        -: 1270:
        -: 1271:  //add bonus
    19170: 1272:  state->coins += bonus;
        -: 1273:
    19170: 1274:  return 0;
        -: 1275:}
        -: 1276:
function effectAdventure called 0 returned 0% blocks executed 0%
    #####: 1277:int effectAdventure(struct gameState *state, struct infosStruct *infos) 
        -: 1278:{
    #####: 1279:  int drawntreasure2 = infos->drawntreasure;
    #####: 1280:  int currentPlayer = infos->currentPlayer;
    #####: 1281:  int cardDrawn = infos->cardDrawn;
    #####: 1282:  int *temphand = (infos->temphand);
    #####: 1283:  int z = infos->z;
    #####: 1284:  int handPos = infos->handPos;
    #####: 1285:  int i = infos->i;
        -: 1286:
    #####: 1287:  while(drawntreasure2<2) 
branch  0 never executed
branch  1 never executed
        -: 1288:  {
    #####: 1289:    if (state->deckCount[currentPlayer] <1) 
branch  0 never executed
branch  1 never executed
        -: 1290:    {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1291:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1292:    }
        -: 1293:
    #####: 1294:    drawCard(currentPlayer, state);// draw card doesn't update handCount?
call    0 never executed
        -: 1295:
    #####: 1296:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1297:    
    #####: 1298:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1299:    {
    #####: 1300:      drawntreasure2++;
        -: 1301:    }
        -: 1302:    else
        -: 1303:    {
    #####: 1304:      temphand[z]=cardDrawn;
    #####: 1305:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1306:      z++;
        -: 1307:    }
        -: 1308:  }
        -: 1309:
    #####: 1310:    printf("VAL OF Z IS : %d\n", z);
call    0 never executed
    #####: 1311:    printf("the discard count is : %d\n", state->discardCount[currentPlayer]);
call    0 never executed
        -: 1312: 
    #####: 1313:  while(z-1>=0)
branch  0 never executed
branch  1 never executed
        -: 1314:  {
    #####: 1315:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1316:    z=z-1;
        -: 1317:  }
    #####: 1318:  return 0;  
        -: 1319:}
        -: 1320:
function effectCouncil called 0 returned 0% blocks executed 0%
    #####: 1321:int effectCouncil(struct gameState *state, struct infosStruct *infos)
        -: 1322:{
        -: 1323:      //+4 Cards
    #####: 1324:  int currentPlayer = infos->currentPlayer;
    #####: 1325:  int handPos = infos->handPos;
    #####: 1326:  int i = infos->i;
    #####: 1327:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1328:      {
    #####: 1329:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1330:      }
        -: 1331:      
        -: 1332:      //+1 Buy
    #####: 1333:      state->numBuys++;
        -: 1334:      
        -: 1335:      //Each other player draws a card
    #####: 1336:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1337:      {
    #####: 1338:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1339:          {
    #####: 1340:            drawCard(i, state);
call    0 never executed
        -: 1341:          }
        -: 1342:      }
        -: 1343:      
        -: 1344:      //put played card in played card pile
    #####: 1345:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1346:
    #####: 1347:      return 0;
        -: 1348:}
        -: 1349://end of dominion.c
        -: 1350:
function effectRemodel called 0 returned 0% blocks executed 0%
    #####: 1351:int effectRemodel(struct gameState *state, struct infosStruct *infos) 
        -: 1352:{
    #####: 1353:  int currentPlayer = infos->currentPlayer;
    #####: 1354:  int choice1 = infos->choice1;
    #####: 1355:  int choice2 = infos->choice2;
    #####: 1356:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####: 1357:  int i = infos->i;
    #####: 1358:  int handPos = infos->handPos;
    #####: 1359:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:  {
    #####: 1361:    return -1;
        -: 1362:  }
        -: 1363:
    #####: 1364:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1365:
        -: 1366:  //discard card from hand
    #####: 1367:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1368:
        -: 1369:  //discard trashed card
    #####: 1370:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1371:  {
    #####: 1372:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1373:    {
    #####: 1374:      discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####: 1375:      break;
        -: 1376:    }
        -: 1377:  }
    #####: 1378:  return 0;
        -: 1379:}
        -: 1380:
function effectSmithy called 1 returned 100% blocks executed 100%
        1: 1381:int effectSmithy(struct gameState *state, struct infosStruct *infos) 
        -: 1382:{
        -: 1383:  int i;
        1: 1384:  int currentPlayer= infos->currentPlayer;
        1: 1385:  int handPos = infos->handPos;
        -: 1386:
        -: 1387:  //+3 Cards
        4: 1388:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1389:  {
        3: 1390:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1391:  }
        -: 1392:
        -: 1393:  //discard card from hand
        -: 1394:
        1: 1395:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1396:  return 0;
        -: 1397:}
        -: 1398:
function effectVillage called 4 returned 100% blocks executed 100%
        4: 1399:int effectVillage(struct gameState *state, struct infosStruct *infos)
        -: 1400:{
        -: 1401:
        4: 1402:  int currentPlayer= infos->currentPlayer;
        -: 1403:
        4: 1404:  int handPos = infos->handPos;
        -: 1405:  //+1 Card
        4: 1406:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1407:
        -: 1408:  //+2 Actions
        4: 1409:  state->numActions = state->numActions + 2;
        -: 1410:
        -: 1411:  //discard played card from hand
        4: 1412:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4: 1413:  return 0;
        -: 1414:}
