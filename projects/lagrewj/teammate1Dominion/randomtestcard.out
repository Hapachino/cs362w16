File 'dominion.c'
Lines executed:24.70% of 575
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   564930:    8:int compare(const void* a, const void* b) {
   564930:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   564930:   11:  if (*(int*)a < *(int*)b)
    11555:   12:    return -1;
   553375:   13:  return 0;
        -:   14:}
        -:   15:
     1000:   16:struct gameState* newGame() {
     1000:   17:  struct gameState* g = malloc(sizeof(struct gameState));
     1000:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
     1000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
        -:   74:    {
      379:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      621:   77:  else if (numPlayers == 3)
        -:   78:    {
      397:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      224:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
        -:   88:    {
      379:   89:      state->supplyCount[estate] = 8;
      379:   90:      state->supplyCount[duchy] = 8;
      379:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      621:   95:      state->supplyCount[estate] = 12;
      621:   96:      state->supplyCount[duchy] = 12;
      621:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    12000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2000:  115:		  if (numPlayers == 2){ 
      758:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1242:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3845:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     2845:  140:      state->deckCount[i] = 0;
    11380:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     8535:  143:	  state->deck[i][j] = estate;
     8535:  144:	  state->deckCount[i]++;
        -:  145:	}
    22760:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    19915:  148:	  state->deck[i][j] = copper;
    19915:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3845:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     2845:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3845:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2845:  166:      state->handCount[i] = 0;
     2845:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
     5000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
     3358:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3358:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3358:  209:  if (state->deckCount[player] < 1)
        1:  210:    return -1;
     3357:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   166297:  214:  while (state->deckCount[player] > 0) {
   159583:  215:    card = floor(Random() * state->deckCount[player]);
   159583:  216:    newDeck[newDeckPos] = state->deck[player][card];
   159583:  217:    newDeckPos++;
 11147747:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
 10988164:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   159583:  221:    state->deckCount[player]--;
        -:  222:  }
   162940:  223:  for (i = 0; i < newDeckPos; i++) {
   159583:  224:    state->deck[player][i] = newDeck[i];
   159583:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3357:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     1000:  346:int whoseTurn(struct gameState *state) {
     1000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     6000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     6000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   131646:  533:    for (i = 0; i < state->discardCount[player];i++){
   131133:  534:      state->deck[player][i] = state->discard[player][i];
   131133:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      513:  538:    state->deckCount[player] = state->discardCount[player];
      513:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      513:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
      513:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      513:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      513:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
      513:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      513:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      513:  559:    if (deckCounter == 0)
        1:  560:      return -1;
        -:  561:
      512:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      512:  563:    state->deckCount[player]--;
      512:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     5487:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
     5487:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5487:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5487:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5487:  576:    state->deckCount[player]--;
     5487:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5999:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
     1000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int x;
        -:  651:  int index;
     1000:  652:  int currentPlayer = whoseTurn(state);
     1000:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
     1000:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
     1000:  658:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
     1000:  664:  switch( card ) 
        -:  665:    {
        -:  666:    case adventurer:
    #####:  667:      return playAdventurer(state, currentPlayer);
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
    #####:  671:      for (i = 0; i < 4; i++)
        -:  672:	{
    #####:  673:	  drawCard(currentPlayer, state);
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
    #####:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
    #####:  680:      for (i = 0; i < state->numPlayers; i++)
        -:  681:	{
    #####:  682:	  if ( i != currentPlayer )
        -:  683:	    {
    #####:  684:	      drawCard(i, state);
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
        -:  690:			
    #####:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
    #####:  706:	if (supplyCount(choice1, state) <= 0){
    #####:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
    #####:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
    #####:  715:	  printf("That card is too expensive!\n");
        -:  716:
    #####:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
    #####:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
    #####:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      return playRemodel(state, currentPlayer, choice1, choice2, handPos);
        -:  786:		
        -:  787:    case smithy:
    #####:  788:      return playSmithy(currentPlayer, state, handPos);
        -:  789:		
        -:  790:    case village:
        -:  791:      //+1 Card
    #####:  792:      drawCard(currentPlayer, state);
        -:  793:			
        -:  794:      //+2 Actions
    #####:  795:      state->numActions = state->numActions + 2;
        -:  796:			
        -:  797:      //discard played card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
    #####:  799:      return 0;
        -:  800:		
        -:  801:    case baron:
    #####:  802:      state->numBuys++;//Increase buys by 1!
    #####:  803:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  804:	int p = 0;//Iterator for hand!
    #####:  805:	int card_not_discarded = 1;//Flag for discard set!
    #####:  806:	while(card_not_discarded){
    #####:  807:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  808:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  809:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  810:	    state->discardCount[currentPlayer]++;
    #####:  811:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  812:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  813:	    }
    #####:  814:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  815:	    state->handCount[currentPlayer]--;
    #####:  816:	    card_not_discarded = 0;//Exit the loop
        -:  817:	  }
    #####:  818:	  else if (p > state->handCount[currentPlayer]){
    #####:  819:	    if(DEBUG) {
        -:  820:	      printf("No estate cards in your hand, invalid choice\n");
        -:  821:	      printf("Must gain an estate if there are any\n");
        -:  822:	    }
    #####:  823:	    if (supplyCount(estate, state) > 0){
    #####:  824:	      gainCard(estate, state, 0, currentPlayer);
    #####:  825:	      state->supplyCount[estate]--;//Decrement estates
    #####:  826:	      if (supplyCount(estate, state) == 0){
    #####:  827:		isGameOver(state);
        -:  828:	      }
        -:  829:	    }
    #####:  830:	    card_not_discarded = 0;//Exit the loop
        -:  831:	  }
        -:  832:			    
        -:  833:	  else{
    #####:  834:	    p++;//Next card
        -:  835:	  }
        -:  836:	}
        -:  837:      }
        -:  838:			    
        -:  839:      else{
    #####:  840:	if (supplyCount(estate, state) > 0){
    #####:  841:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  842:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  843:	  if (supplyCount(estate, state) == 0){
    #####:  844:	    isGameOver(state);
        -:  845:	  }
        -:  846:	}
        -:  847:      }
        -:  848:	    
        -:  849:      
    #####:  850:      return 0;
        -:  851:		
        -:  852:    case great_hall:
        -:  853:      //+1 Card
     1000:  854:      drawCard(currentPlayer, state);
        -:  855:			
        -:  856:      //+1 Actions
     1000:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
     1000:  860:      discardCard(handPos, currentPlayer, state, 0);
     1000:  861:      return 0;
        -:  862:		
        -:  863:    case minion:
        -:  864:      //+1 action
    #####:  865:      state->numActions++;
        -:  866:			
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
        -:  869:			
    #####:  870:      if (choice1)		//+2 coins
        -:  871:	{
    #####:  872:	  state->coins = state->coins + 2;
        -:  873:	}
        -:  874:			
    #####:  875:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  876:	{
        -:  877:	  //discard hand
    #####:  878:	  while(numHandCards(state) > 0)
        -:  879:	    {
    #####:  880:	      discardCard(handPos, currentPlayer, state, 0);
        -:  881:	    }
        -:  882:				
        -:  883:	  //draw 4
    #####:  884:	  for (i = 0; i < 4; i++)
        -:  885:	    {
    #####:  886:	      drawCard(currentPlayer, state);
        -:  887:	    }
        -:  888:				
        -:  889:	  //other players discard hand and redraw if hand size > 4
    #####:  890:	  for (i = 0; i < state->numPlayers; i++)
        -:  891:	    {
    #####:  892:	      if (i != currentPlayer)
        -:  893:		{
    #####:  894:		  if ( state->handCount[i] > 4 )
        -:  895:		    {
        -:  896:		      //discard hand
    #####:  897:		      while( state->handCount[i] > 0 )
        -:  898:			{
    #####:  899:			  discardCard(handPos, i, state, 0);
        -:  900:			}
        -:  901:							
        -:  902:		      //draw 4
    #####:  903:		      for (j = 0; j < 4; j++)
        -:  904:			{
    #####:  905:			  drawCard(i, state);
        -:  906:			}
        -:  907:		    }
        -:  908:		}
        -:  909:	    }
        -:  910:				
        -:  911:	}
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case steward:
    #####:  915:      if (choice1 == 1)
        -:  916:	{
        -:  917:	  //+2 cards
    #####:  918:	  drawCard(currentPlayer, state);
    #####:  919:	  drawCard(currentPlayer, state);
        -:  920:	}
    #####:  921:      else if (choice1 == 2)
        -:  922:	{
        -:  923:	  //+2 coins
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:      else
        -:  927:	{
        -:  928:	  //trash 2 cards in hand
    #####:  929:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  930:	  discardCard(choice3, currentPlayer, state, 1);
        -:  931:	}
        -:  932:			
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case tribute:
    #####:  938:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  939:	if (state->deckCount[nextPlayer] > 0){
    #####:  940:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	  state->deckCount[nextPlayer]--;
        -:  942:	}
    #####:  943:	else if (state->discardCount[nextPlayer] > 0){
    #####:  944:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  945:	  state->discardCount[nextPlayer]--;
        -:  946:	}
        -:  947:	else{
        -:  948:	  //No Card to Reveal
    #####:  949:	  if (DEBUG){
        -:  950:	    printf("No cards to reveal\n");
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:	    
        -:  955:      else{
    #####:  956:	if (state->deckCount[nextPlayer] == 0){
    #####:  957:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  958:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  959:	    state->deckCount[nextPlayer]++;
    #####:  960:	    state->discard[nextPlayer][i] = -1;
    #####:  961:	    state->discardCount[nextPlayer]--;
        -:  962:	  }
        -:  963:			    
    #####:  964:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  965:	} 
    #####:  966:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  968:	state->deckCount[nextPlayer]--;
    #####:  969:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
        -:  972:      }    
        -:  973:		       
    #####:  974:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  975:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  976:	state->playedCardCount++;
    #####:  977:	tributeRevealedCards[1] = -1;
        -:  978:      }
        -:  979:
    #####:  980:      for (i = 0; i <= 2; i ++){
    #####:  981:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  982:	  state->coins += 2;
        -:  983:	}
        -:  984:		    
    #####:  985:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  986:	  drawCard(currentPlayer, state);
    #####:  987:	  drawCard(currentPlayer, state);
        -:  988:	}
        -:  989:	else{//Action Card
    #####:  990:	  state->numActions = state->numActions + 2;
        -:  991:	}
        -:  992:      }
        -:  993:	    
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case ambassador:
    #####:  997:      j = 0;		//used to check if player has enough cards to discard
        -:  998:
    #####:  999:      if (choice2 > 2 || choice2 < 0)
        -: 1000:	{
    #####: 1001:	  return -1;				
        -: 1002:	}
        -: 1003:
    #####: 1004:      if (choice1 == handPos)
        -: 1005:	{
    #####: 1006:	  return -1;
        -: 1007:	}
        -: 1008:
    #####: 1009:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1010:	{
    #####: 1011:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1012:	    {
    #####: 1013:	      j++;
        -: 1014:	    }
        -: 1015:	}
    #####: 1016:      if (j < choice2)
        -: 1017:	{
    #####: 1018:	  return -1;				
        -: 1019:	}
        -: 1020:
    #####: 1021:      if (DEBUG) 
        -: 1022:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1023:
        -: 1024:      //increase supply count for choosen card by amount being discarded
    #####: 1025:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1026:			
        -: 1027:      //each other player gains a copy of revealed card
    #####: 1028:      for (i = 0; i < state->numPlayers; i++)
        -: 1029:	{
    #####: 1030:	  if (i != currentPlayer)
        -: 1031:	    {
    #####: 1032:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1033:	    }
        -: 1034:	}
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
        -: 1039:      //trash copies of cards returned to supply
    #####: 1040:      for (j = 0; j < choice2; j++)
        -: 1041:	{
    #####: 1042:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1043:	    {
    #####: 1044:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1045:		{
    #####: 1046:		  discardCard(i, currentPlayer, state, 1);
    #####: 1047:		  break;
        -: 1048:		}
        -: 1049:	    }
        -: 1050:	}			
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case cutpurse:
    #####: 1055:      return playCutpurse(currentPlayer, state, handPos);
        -: 1056:		
        -: 1057:    case embargo: 
        -: 1058:      //+2 Coins
    #####: 1059:      state->coins = state->coins + 2;
        -: 1060:			
        -: 1061:      //see if selected pile is in play
    #####: 1062:      if ( state->supplyCount[choice1] == -1 )
        -: 1063:	{
    #####: 1064:	  return -1;
        -: 1065:	}
        -: 1066:			
        -: 1067:      //add embargo token to selected supply pile
    #####: 1068:      state->embargoTokens[choice1]++;
        -: 1069:			
        -: 1070:      //trash card
    #####: 1071:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case outpost:
        -: 1075:      //set outpost flag
    #####: 1076:      state->outpostPlayed++;
        -: 1077:			
        -: 1078:      //discard card
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case salvager:
        -: 1083:      //+1 buy
    #####: 1084:      state->numBuys++;
        -: 1085:			
    #####: 1086:      if (choice1)
        -: 1087:	{
        -: 1088:	  //gain coins equal to trashed card
    #####: 1089:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1090:	  //trash card
    #####: 1091:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1092:	}
        -: 1093:			
        -: 1094:      //discard card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case sea_hag:
    #####: 1099:      return playSea_Hag(state, currentPlayer);
        -: 1100:		
        -: 1101:    case treasure_map:
        -: 1102:      //search hand for another treasure_map
    #####: 1103:      index = -1;
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1107:	    {
    #####: 1108:	      index = i;
    #####: 1109:	      break;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (index > -1)
        -: 1113:	{
        -: 1114:	  //trash both treasure cards
    #####: 1115:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1116:	  discardCard(index, currentPlayer, state, 1);
        -: 1117:
        -: 1118:	  //gain 4 Gold cards
    #####: 1119:	  for (i = 0; i < 4; i++)
        -: 1120:	    {
    #####: 1121:	      gainCard(gold, state, 1, currentPlayer);
        -: 1122:	    }
        -: 1123:				
        -: 1124:	  //return success
    #####: 1125:	  return 1;
        -: 1126:	}
        -: 1127:			
        -: 1128:      //no second treasure_map found in hand
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
    #####: 1132:  return -1;
        -: 1133:}
        -: 1134:
     1000: 1135:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1136:{
        -: 1137:	
        -: 1138:  //if card is not trashed, added to Played pile 
     1000: 1139:  if (trashFlag < 1)
        -: 1140:    {
        -: 1141:      //add card to played pile
     1000: 1142:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1143:      state->playedCardCount++;
        -: 1144:    }
        -: 1145:	
        -: 1146:  //set played card to -1
     1000: 1147:  state->hand[currentPlayer][handPos] = -1;
        -: 1148:	
        -: 1149:  //remove card from player's hand
     1000: 1150:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
        1: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
      999: 1155:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
        1: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
        -: 1160:  else 	
        -: 1161:    {
        -: 1162:      //replace discarded card with last card in hand
      998: 1163:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1164:      //set last card to -1
      998: 1165:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1166:      //reduce number of cards in hand
      998: 1167:      state->handCount[currentPlayer]--;
        -: 1168:    }
        -: 1169:	
     1000: 1170:  return 0;
        -: 1171:}
        -: 1172:
    #####: 1173:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1174:{
        -: 1175:  //Note: supplyPos is enum of choosen card
        -: 1176:	
        -: 1177:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1178:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1179:    {
    #####: 1180:      return -1;
        -: 1181:    }
        -: 1182:	
        -: 1183:  //added card for [whoseTurn] current player:
        -: 1184:  // toFlag = 0 : add to discard
        -: 1185:  // toFlag = 1 : add to deck
        -: 1186:  // toFlag = 2 : add to hand
        -: 1187:
    #####: 1188:  if (toFlag == 1)
        -: 1189:    {
    #####: 1190:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1191:      state->deckCount[player]++;
        -: 1192:    }
    #####: 1193:  else if (toFlag == 2)
        -: 1194:    {
    #####: 1195:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1196:      state->handCount[player]++;
        -: 1197:    }
        -: 1198:  else
        -: 1199:    {
    #####: 1200:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1201:      state->discardCount[player]++;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //decrease number in supply pile
    #####: 1205:  state->supplyCount[supplyPos]--;
        -: 1206:	 
    #####: 1207:  return 0;
        -: 1208:}
        -: 1209:
     1000: 1210:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1211:{
        -: 1212:  int i;
        -: 1213:	
        -: 1214:  //reset coin count
     1000: 1215:  state->coins = 0;
        -: 1216:
        -: 1217:  //add coins for each Treasure card in player's hand
     6000: 1218:  for (i = 0; i < state->handCount[player]; i++)
        -: 1219:    {
     5000: 1220:      if (state->hand[player][i] == copper)
        -: 1221:	{
     3502: 1222:	  state->coins += 1;
        -: 1223:	}
     1498: 1224:      else if (state->hand[player][i] == silver)
        -: 1225:	{
    #####: 1226:	  state->coins += 2;
        -: 1227:	}
     1498: 1228:      else if (state->hand[player][i] == gold)
        -: 1229:	{
    #####: 1230:	  state->coins += 3;
        -: 1231:	}	
        -: 1232:    }	
        -: 1233:
        -: 1234:  //add bonus
     1000: 1235:  state->coins += bonus;
        -: 1236:
     1000: 1237:  return 0;
        -: 1238:}
        -: 1239:
        -: 1240:/*
        -: 1241:Adventurer
        -: 1242:
        -: 1243:Reveal cards from your deck until you reveal 2 Treasure cards.
        -: 1244:Put those Treasure cards into your hand and discard the other revealed cards.
        -: 1245:*/
    #####: 1246:int playAdventurer (struct gameState *state, int currentPlayer)
        -: 1247:{
        -: 1248:  int cardDrawn;
    #####: 1249:  int drawntreasure = 0;
        -: 1250:  int temphand[MAX_HAND];
        -: 1251:  // this is the counter for the temp hand
    #####: 1252:  int z = 0;
        -: 1253:
    #####: 1254:  while(drawntreasure<2) 
        -: 1255:  {
    #####: 1256:    if (state->deckCount[currentPlayer] <1)
        -: 1257:    {
        -: 1258:      //if the deck is empty we need to shuffle discard and add to deck
    #####: 1259:      shuffle(currentPlayer, state);
        -: 1260:    }
        -: 1261:
    #####: 1262:    drawCard(currentPlayer, state);
    #####: 1263:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1264:    
    #####: 1265:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1266:      drawntreasure++;
        -: 1267:    else
        -: 1268:    {
    #####: 1269:      temphand[z]=cardDrawn;
    #####: 1270:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1271:    }
        -: 1272:  }
        -: 1273:  
    #####: 1274:  while(z-1>=0)
        -: 1275:  {
    #####: 1276:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1277:    z=z-1;
        -: 1278:  }
        -: 1279:  
    #####: 1280:  return 0;
        -: 1281:}
        -: 1282:
        -: 1283:/*
        -: 1284:Smithy
        -: 1285:
        -: 1286:+3 Cards
        -: 1287:*/
    #####: 1288:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1289:{
        -: 1290:  int i;
        -: 1291:
        -: 1292:  //+3 Cards
    #####: 1293:  for (i = 0; i <= 3; i++)
        -: 1294:  {
    #####: 1295:    drawCard(currentPlayer, state);
        -: 1296:  }
        -: 1297:      
        -: 1298:  //discard card from hand
    #####: 1299:  discardCard(handPos, currentPlayer, state, 1);
    #####: 1300:  return 0;
        -: 1301:}
        -: 1302:
        -: 1303:/*
        -: 1304:Cutpurse
        -: 1305:
        -: 1306:+2 Coins
        -: 1307:Each other player discards a Copper card (or reveals a hand with no Copper).
        -: 1308:*/
    #####: 1309:int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1310:{
        -: 1311:  int i, j, k;
        -: 1312:
    #####: 1313:  updateCoins(currentPlayer, state, 2);
    #####: 1314:  for (i = 0; i < state->numPlayers - 1; i++)
        -: 1315:  {
    #####: 1316:    if (i != currentPlayer)
        -: 1317:    {
    #####: 1318:      for (j = 0; j < state->handCount[i]; j++)
        -: 1319:      {
    #####: 1320:        if (state->hand[i][j] == copper)
        -: 1321:        {
    #####: 1322:          discardCard(j, i, state, 0);
    #####: 1323:          break;
        -: 1324:        }
    #####: 1325:        if (j == state->handCount[i])
        -: 1326:        {
    #####: 1327:          for (k = 0; k < state->handCount[i]; k += 2)
        -: 1328:          {
    #####: 1329:            if (DEBUG)
        -: 1330:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1331:          } 
    #####: 1332:          break;
        -: 1333:        }   
        -: 1334:      }    
        -: 1335:    } 
        -: 1336:  }       
        -: 1337:
        -: 1338:  //discard played card from hand
    #####: 1339:  discardCard(handPos, currentPlayer, state, 0);      
        -: 1340:
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
        -: 1344:/*
        -: 1345:Remodel
        -: 1346:
        -: 1347:Trash a card from your hand.
        -: 1348:Gain a card costing up to 2 coins more than the trashed card.
        -: 1349:*/
    #####: 1350:int playRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -: 1351:{
        -: 1352:  int i, j;
        -: 1353:
    #####: 1354:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1355:
    #####: 1356:  if ( (getCost(state->hand[currentPlayer][choice2]) + 2) > getCost(choice1) )
        -: 1357:  {
    #####: 1358:    return -1;
        -: 1359:  }
        -: 1360:
    #####: 1361:  gainCard(choice2, state, 0, currentPlayer);
        -: 1362:
        -: 1363:  //discard card from hand
    #####: 1364:  discardCard(handPos, currentPlayer, state, 0);
        -: 1365:
        -: 1366:  //discard trashed card
    #####: 1367:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1368:  {
    #####: 1369:    if (state->hand[currentPlayer][i] == j)
        -: 1370:      {
    #####: 1371:        discardCard(i, currentPlayer, state, 0);      
    #####: 1372:        break;
        -: 1373:      }
        -: 1374:  }
        -: 1375:
    #####: 1376:  return 0;
        -: 1377:}
        -: 1378:
        -: 1379:/*
        -: 1380:Sea Hag
        -: 1381:
        -: 1382:Each other player discards the top card of his deck,
        -: 1383:then gains a Curse card, putting it on top of his deck.
        -: 1384:*/
    #####: 1385:int playSea_Hag(struct gameState *state, int currentPlayer)
        -: 1386:{
        -: 1387:  int i;
        -: 1388:
    #####: 1389:  for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:    {
    #####: 1393:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1394:      state->deckCount[i]++;
    #####: 1395:      state->discardCount[i]--;
    #####: 1396:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1397:    }
        -: 1398:  }
        -: 1399:  
    #####: 1400:  return 0;
        -: 1401:}
        -: 1402:
        -: 1403://end of dominion.c
File 'dominion.c'
Lines executed:24.70% of 575
Branches executed:24.22% of 417
Taken at least once:17.27% of 417
Calls executed:11.58% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 564930 returned 100% blocks executed 83%
   564930:    8:int compare(const void* a, const void* b) {
   564930:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
   564930:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
    11555:   12:    return -1;
   553375:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1000 returned 100% blocks executed 100%
     1000:   16:struct gameState* newGame() {
     1000:   17:  struct gameState* g = malloc(sizeof(struct gameState));
     1000:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -:   74:    {
      379:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      621:   77:  else if (numPlayers == 3)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:   78:    {
      397:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      224:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -:   88:    {
      379:   89:      state->supplyCount[estate] = 8;
      379:   90:      state->supplyCount[duchy] = 8;
      379:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      621:   95:      state->supplyCount[estate] = 12;
      621:   96:      state->supplyCount[duchy] = 12;
      621:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    12000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     2000:  115:		  if (numPlayers == 2){ 
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
      758:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1242:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3845:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  139:    {
     2845:  140:      state->deckCount[i] = 0;
    11380:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     8535:  143:	  state->deck[i][j] = estate;
     8535:  144:	  state->deckCount[i]++;
        -:  145:	}
    22760:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    19915:  148:	  state->deck[i][j] = copper;
    19915:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3845:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  155:    {
     2845:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3845:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2845:  166:      state->handCount[i] = 0;
     2845:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3358 returned 100% blocks executed 100%
     3358:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3358:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3358:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  210:    return -1;
     3357:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   166297:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   159583:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   159583:  216:    newDeck[newDeckPos] = state->deck[player][card];
   159583:  217:    newDeckPos++;
 11147747:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 10988164:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   159583:  221:    state->deckCount[player]--;
        -:  222:  }
   162940:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   159583:  224:    state->deck[player][i] = newDeck[i];
   159583:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3357:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1000 returned 100% blocks executed 100%
     1000:  346:int whoseTurn(struct gameState *state) {
     1000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6000 returned 100% blocks executed 100%
     6000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     6000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   131646:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   131133:  534:      state->deck[player][i] = state->discard[player][i];
   131133:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      513:  538:    state->deckCount[player] = state->discardCount[player];
      513:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      513:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
      513:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      513:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      513:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
      513:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      513:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      513:  559:    if (deckCounter == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  560:      return -1;
        -:  561:
      512:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      512:  563:    state->deckCount[player]--;
      512:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     5487:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
     5487:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5487:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5487:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5487:  576:    state->deckCount[player]--;
     5487:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5999:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 1000 returned 100% blocks executed 3%
     1000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int x;
        -:  651:  int index;
     1000:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1000:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
     1000:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
     1000:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
     1000:  664:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  665:    {
        -:  666:    case adventurer:
    #####:  667:      return playAdventurer(state, currentPlayer);
call    0 never executed
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
    #####:  671:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  672:	{
    #####:  673:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
    #####:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
    #####:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  681:	{
    #####:  682:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  683:	    {
    #####:  684:	      drawCard(i, state);
call    0 never executed
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  690:			
    #####:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
    #####:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
    #####:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
    #####:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
    #####:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      return playRemodel(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  786:		
        -:  787:    case smithy:
    #####:  788:      return playSmithy(currentPlayer, state, handPos);
call    0 never executed
        -:  789:		
        -:  790:    case village:
        -:  791:      //+1 Card
    #####:  792:      drawCard(currentPlayer, state);
call    0 never executed
        -:  793:			
        -:  794:      //+2 Actions
    #####:  795:      state->numActions = state->numActions + 2;
        -:  796:			
        -:  797:      //discard played card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  799:      return 0;
        -:  800:		
        -:  801:    case baron:
    #####:  802:      state->numBuys++;//Increase buys by 1!
    #####:  803:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  804:	int p = 0;//Iterator for hand!
    #####:  805:	int card_not_discarded = 1;//Flag for discard set!
    #####:  806:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  807:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  808:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  809:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  810:	    state->discardCount[currentPlayer]++;
    #####:  811:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  812:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  813:	    }
    #####:  814:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  815:	    state->handCount[currentPlayer]--;
    #####:  816:	    card_not_discarded = 0;//Exit the loop
        -:  817:	  }
    #####:  818:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  819:	    if(DEBUG) {
        -:  820:	      printf("No estate cards in your hand, invalid choice\n");
        -:  821:	      printf("Must gain an estate if there are any\n");
        -:  822:	    }
    #####:  823:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  824:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  825:	      state->supplyCount[estate]--;//Decrement estates
    #####:  826:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:		isGameOver(state);
call    0 never executed
        -:  828:	      }
        -:  829:	    }
    #####:  830:	    card_not_discarded = 0;//Exit the loop
        -:  831:	  }
        -:  832:			    
        -:  833:	  else{
    #####:  834:	    p++;//Next card
        -:  835:	  }
        -:  836:	}
        -:  837:      }
        -:  838:			    
        -:  839:      else{
    #####:  840:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  841:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  842:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  843:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	    isGameOver(state);
call    0 never executed
        -:  845:	  }
        -:  846:	}
        -:  847:      }
        -:  848:	    
        -:  849:      
    #####:  850:      return 0;
        -:  851:		
        -:  852:    case great_hall:
        -:  853:      //+1 Card
     1000:  854:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  855:			
        -:  856:      //+1 Actions
     1000:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
     1000:  860:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000:  861:      return 0;
        -:  862:		
        -:  863:    case minion:
        -:  864:      //+1 action
    #####:  865:      state->numActions++;
        -:  866:			
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:			
    #####:  870:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  871:	{
    #####:  872:	  state->coins = state->coins + 2;
        -:  873:	}
        -:  874:			
    #####:  875:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  876:	{
        -:  877:	  //discard hand
    #####:  878:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  879:	    {
    #####:  880:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  881:	    }
        -:  882:				
        -:  883:	  //draw 4
    #####:  884:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	    {
    #####:  886:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  887:	    }
        -:  888:				
        -:  889:	  //other players discard hand and redraw if hand size > 4
    #####:  890:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  891:	    {
    #####:  892:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  893:		{
    #####:  894:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  895:		    {
        -:  896:		      //discard hand
    #####:  897:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  898:			{
    #####:  899:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  900:			}
        -:  901:							
        -:  902:		      //draw 4
    #####:  903:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  904:			{
    #####:  905:			  drawCard(i, state);
call    0 never executed
        -:  906:			}
        -:  907:		    }
        -:  908:		}
        -:  909:	    }
        -:  910:				
        -:  911:	}
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case steward:
    #####:  915:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  916:	{
        -:  917:	  //+2 cards
    #####:  918:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  920:	}
    #####:  921:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  922:	{
        -:  923:	  //+2 coins
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:      else
        -:  927:	{
        -:  928:	  //trash 2 cards in hand
    #####:  929:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  930:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  931:	}
        -:  932:			
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case tribute:
    #####:  938:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  939:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  940:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	  state->deckCount[nextPlayer]--;
        -:  942:	}
    #####:  943:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  944:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  945:	  state->discardCount[nextPlayer]--;
        -:  946:	}
        -:  947:	else{
        -:  948:	  //No Card to Reveal
    #####:  949:	  if (DEBUG){
        -:  950:	    printf("No cards to reveal\n");
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:	    
        -:  955:      else{
    #####:  956:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  957:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  958:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  959:	    state->deckCount[nextPlayer]++;
    #####:  960:	    state->discard[nextPlayer][i] = -1;
    #####:  961:	    state->discardCount[nextPlayer]--;
        -:  962:	  }
        -:  963:			    
    #####:  964:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  965:	} 
    #####:  966:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  968:	state->deckCount[nextPlayer]--;
    #####:  969:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
        -:  972:      }    
        -:  973:		       
    #####:  974:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  975:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  976:	state->playedCardCount++;
    #####:  977:	tributeRevealedCards[1] = -1;
        -:  978:      }
        -:  979:
    #####:  980:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  981:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  982:	  state->coins += 2;
        -:  983:	}
        -:  984:		    
    #####:  985:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  986:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  988:	}
        -:  989:	else{//Action Card
    #####:  990:	  state->numActions = state->numActions + 2;
        -:  991:	}
        -:  992:      }
        -:  993:	    
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case ambassador:
    #####:  997:      j = 0;		//used to check if player has enough cards to discard
        -:  998:
    #####:  999:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1000:	{
    #####: 1001:	  return -1;				
        -: 1002:	}
        -: 1003:
    #####: 1004:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  return -1;
        -: 1007:	}
        -: 1008:
    #####: 1009:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:	{
    #####: 1011:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1012:	    {
    #####: 1013:	      j++;
        -: 1014:	    }
        -: 1015:	}
    #####: 1016:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1017:	{
    #####: 1018:	  return -1;				
        -: 1019:	}
        -: 1020:
    #####: 1021:      if (DEBUG) 
        -: 1022:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1023:
        -: 1024:      //increase supply count for choosen card by amount being discarded
    #####: 1025:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1026:			
        -: 1027:      //each other player gains a copy of revealed card
    #####: 1028:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
    #####: 1030:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1031:	    {
    #####: 1032:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1033:	    }
        -: 1034:	}
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1038:
        -: 1039:      //trash copies of cards returned to supply
    #####: 1040:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:	    {
    #####: 1044:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1045:		{
    #####: 1046:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1047:		  break;
        -: 1048:		}
        -: 1049:	    }
        -: 1050:	}			
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case cutpurse:
    #####: 1055:      return playCutpurse(currentPlayer, state, handPos);
call    0 never executed
        -: 1056:		
        -: 1057:    case embargo: 
        -: 1058:      //+2 Coins
    #####: 1059:      state->coins = state->coins + 2;
        -: 1060:			
        -: 1061:      //see if selected pile is in play
    #####: 1062:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1063:	{
    #####: 1064:	  return -1;
        -: 1065:	}
        -: 1066:			
        -: 1067:      //add embargo token to selected supply pile
    #####: 1068:      state->embargoTokens[choice1]++;
        -: 1069:			
        -: 1070:      //trash card
    #####: 1071:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case outpost:
        -: 1075:      //set outpost flag
    #####: 1076:      state->outpostPlayed++;
        -: 1077:			
        -: 1078:      //discard card
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case salvager:
        -: 1083:      //+1 buy
    #####: 1084:      state->numBuys++;
        -: 1085:			
    #####: 1086:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
        -: 1088:	  //gain coins equal to trashed card
    #####: 1089:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1090:	  //trash card
    #####: 1091:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1092:	}
        -: 1093:			
        -: 1094:      //discard card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case sea_hag:
    #####: 1099:      return playSea_Hag(state, currentPlayer);
call    0 never executed
        -: 1100:		
        -: 1101:    case treasure_map:
        -: 1102:      //search hand for another treasure_map
    #####: 1103:      index = -1;
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1107:	    {
    #####: 1108:	      index = i;
    #####: 1109:	      break;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //trash both treasure cards
    #####: 1115:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1116:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1117:
        -: 1118:	  //gain 4 Gold cards
    #####: 1119:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:	    {
    #####: 1121:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1122:	    }
        -: 1123:				
        -: 1124:	  //return success
    #####: 1125:	  return 1;
        -: 1126:	}
        -: 1127:			
        -: 1128:      //no second treasure_map found in hand
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
    #####: 1132:  return -1;
        -: 1133:}
        -: 1134:
function discardCard called 1000 returned 100% blocks executed 100%
     1000: 1135:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1136:{
        -: 1137:	
        -: 1138:  //if card is not trashed, added to Played pile 
     1000: 1139:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1140:    {
        -: 1141:      //add card to played pile
     1000: 1142:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1143:      state->playedCardCount++;
        -: 1144:    }
        -: 1145:	
        -: 1146:  //set played card to -1
     1000: 1147:  state->hand[currentPlayer][handPos] = -1;
        -: 1148:	
        -: 1149:  //remove card from player's hand
     1000: 1150:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
        1: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
      999: 1155:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
        1: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
        -: 1160:  else 	
        -: 1161:    {
        -: 1162:      //replace discarded card with last card in hand
      998: 1163:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1164:      //set last card to -1
      998: 1165:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1166:      //reduce number of cards in hand
      998: 1167:      state->handCount[currentPlayer]--;
        -: 1168:    }
        -: 1169:	
     1000: 1170:  return 0;
        -: 1171:}
        -: 1172:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1173:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1174:{
        -: 1175:  //Note: supplyPos is enum of choosen card
        -: 1176:	
        -: 1177:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1178:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1179:    {
    #####: 1180:      return -1;
        -: 1181:    }
        -: 1182:	
        -: 1183:  //added card for [whoseTurn] current player:
        -: 1184:  // toFlag = 0 : add to discard
        -: 1185:  // toFlag = 1 : add to deck
        -: 1186:  // toFlag = 2 : add to hand
        -: 1187:
    #####: 1188:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1189:    {
    #####: 1190:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1191:      state->deckCount[player]++;
        -: 1192:    }
    #####: 1193:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1194:    {
    #####: 1195:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1196:      state->handCount[player]++;
        -: 1197:    }
        -: 1198:  else
        -: 1199:    {
    #####: 1200:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1201:      state->discardCount[player]++;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //decrease number in supply pile
    #####: 1205:  state->supplyCount[supplyPos]--;
        -: 1206:	 
    #####: 1207:  return 0;
        -: 1208:}
        -: 1209:
function updateCoins called 1000 returned 100% blocks executed 80%
     1000: 1210:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1211:{
        -: 1212:  int i;
        -: 1213:	
        -: 1214:  //reset coin count
     1000: 1215:  state->coins = 0;
        -: 1216:
        -: 1217:  //add coins for each Treasure card in player's hand
     6000: 1218:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1219:    {
     5000: 1220:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1221:	{
     3502: 1222:	  state->coins += 1;
        -: 1223:	}
     1498: 1224:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1225:	{
    #####: 1226:	  state->coins += 2;
        -: 1227:	}
     1498: 1228:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 3;
        -: 1231:	}	
        -: 1232:    }	
        -: 1233:
        -: 1234:  //add bonus
     1000: 1235:  state->coins += bonus;
        -: 1236:
     1000: 1237:  return 0;
        -: 1238:}
        -: 1239:
        -: 1240:/*
        -: 1241:Adventurer
        -: 1242:
        -: 1243:Reveal cards from your deck until you reveal 2 Treasure cards.
        -: 1244:Put those Treasure cards into your hand and discard the other revealed cards.
        -: 1245:*/
function playAdventurer called 0 returned 0% blocks executed 0%
    #####: 1246:int playAdventurer (struct gameState *state, int currentPlayer)
        -: 1247:{
        -: 1248:  int cardDrawn;
    #####: 1249:  int drawntreasure = 0;
        -: 1250:  int temphand[MAX_HAND];
        -: 1251:  // this is the counter for the temp hand
    #####: 1252:  int z = 0;
        -: 1253:
    #####: 1254:  while(drawntreasure<2) 
branch  0 never executed
branch  1 never executed
        -: 1255:  {
    #####: 1256:    if (state->deckCount[currentPlayer] <1)
branch  0 never executed
branch  1 never executed
        -: 1257:    {
        -: 1258:      //if the deck is empty we need to shuffle discard and add to deck
    #####: 1259:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1260:    }
        -: 1261:
    #####: 1262:    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1263:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1264:    
    #####: 1265:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1266:      drawntreasure++;
        -: 1267:    else
        -: 1268:    {
    #####: 1269:      temphand[z]=cardDrawn;
    #####: 1270:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1271:    }
        -: 1272:  }
        -: 1273:  
    #####: 1274:  while(z-1>=0)
branch  0 never executed
branch  1 never executed
        -: 1275:  {
    #####: 1276:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1277:    z=z-1;
        -: 1278:  }
        -: 1279:  
    #####: 1280:  return 0;
        -: 1281:}
        -: 1282:
        -: 1283:/*
        -: 1284:Smithy
        -: 1285:
        -: 1286:+3 Cards
        -: 1287:*/
function playSmithy called 0 returned 0% blocks executed 0%
    #####: 1288:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1289:{
        -: 1290:  int i;
        -: 1291:
        -: 1292:  //+3 Cards
    #####: 1293:  for (i = 0; i <= 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1294:  {
    #####: 1295:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1296:  }
        -: 1297:      
        -: 1298:  //discard card from hand
    #####: 1299:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1300:  return 0;
        -: 1301:}
        -: 1302:
        -: 1303:/*
        -: 1304:Cutpurse
        -: 1305:
        -: 1306:+2 Coins
        -: 1307:Each other player discards a Copper card (or reveals a hand with no Copper).
        -: 1308:*/
function playCutpurse called 0 returned 0% blocks executed 0%
    #####: 1309:int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1310:{
        -: 1311:  int i, j, k;
        -: 1312:
    #####: 1313:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1314:  for (i = 0; i < state->numPlayers - 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1315:  {
    #####: 1316:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1319:      {
    #####: 1320:        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1321:        {
    #####: 1322:          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1323:          break;
        -: 1324:        }
    #####: 1325:        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1326:        {
    #####: 1327:          for (k = 0; k < state->handCount[i]; k += 2)
branch  0 never executed
branch  1 never executed
        -: 1328:          {
    #####: 1329:            if (DEBUG)
        -: 1330:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1331:          } 
    #####: 1332:          break;
        -: 1333:        }   
        -: 1334:      }    
        -: 1335:    } 
        -: 1336:  }       
        -: 1337:
        -: 1338:  //discard played card from hand
    #####: 1339:  discardCard(handPos, currentPlayer, state, 0);      
call    0 never executed
        -: 1340:
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
        -: 1344:/*
        -: 1345:Remodel
        -: 1346:
        -: 1347:Trash a card from your hand.
        -: 1348:Gain a card costing up to 2 coins more than the trashed card.
        -: 1349:*/
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1350:int playRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -: 1351:{
        -: 1352:  int i, j;
        -: 1353:
    #####: 1354:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1355:
    #####: 1356:  if ( (getCost(state->hand[currentPlayer][choice2]) + 2) > getCost(choice1) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1357:  {
    #####: 1358:    return -1;
        -: 1359:  }
        -: 1360:
    #####: 1361:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1362:
        -: 1363:  //discard card from hand
    #####: 1364:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1365:
        -: 1366:  //discard trashed card
    #####: 1367:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1368:  {
    #####: 1369:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1370:      {
    #####: 1371:        discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####: 1372:        break;
        -: 1373:      }
        -: 1374:  }
        -: 1375:
    #####: 1376:  return 0;
        -: 1377:}
        -: 1378:
        -: 1379:/*
        -: 1380:Sea Hag
        -: 1381:
        -: 1382:Each other player discards the top card of his deck,
        -: 1383:then gains a Curse card, putting it on top of his deck.
        -: 1384:*/
function playSea_Hag called 0 returned 0% blocks executed 0%
    #####: 1385:int playSea_Hag(struct gameState *state, int currentPlayer)
        -: 1386:{
        -: 1387:  int i;
        -: 1388:
    #####: 1389:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1392:    {
    #####: 1393:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1394:      state->deckCount[i]++;
    #####: 1395:      state->discardCount[i]--;
    #####: 1396:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1397:    }
        -: 1398:  }
        -: 1399:  
    #####: 1400:  return 0;
        -: 1401:}
        -: 1402:
        -: 1403://end of dominion.c
Testing great_hall.

discard count = 90		G->discardCount = 0
discard count = 153		G->discardCount = 0
discard count = 72		G->discardCount = 72
discard count = 149		G->discardCount = 149
discard count = 290		G->discardCount = 0
discard count = 58		G->discardCount = 0
discard count = 109		G->discardCount = 0
discard count = 260		G->discardCount = 0
discard count = 88		G->discardCount = 88
discard count = 93		G->discardCount = 93
discard count = 249		G->discardCount = 249
discard count = 25		G->discardCount = 25
discard count = 70		G->discardCount = 0
discard count = 442		G->discardCount = 442
discard count = 138		G->discardCount = 138
discard count = 493		G->discardCount = 493
discard count = 119		G->discardCount = 119
discard count = 123		G->discardCount = 123
discard count = 157		G->discardCount = 0
discard count = 17		G->discardCount = 17
discard count = 242		G->discardCount = 242
discard count = 342		G->discardCount = 342
discard count = 205		G->discardCount = 0
discard count = 432		G->discardCount = 432
discard count = 261		G->discardCount = 0
discard count = 467		G->discardCount = 467
discard count = 492		G->discardCount = 0
discard count = 134		G->discardCount = 0
discard count = 97		G->discardCount = 97
discard count = 12		G->discardCount = 0
discard count = 388		G->discardCount = 388
discard count = 415		G->discardCount = 415
discard count = 265		G->discardCount = 0
discard count = 418		G->discardCount = 418
discard count = 319		G->discardCount = 0
discard count = 196		G->discardCount = 0
discard count = 435		G->discardCount = 435
discard count = 152		G->discardCount = 152
discard count = 461		G->discardCount = 0
discard count = 20		G->discardCount = 0
discard count = 279		G->discardCount = 279
discard count = 75		G->discardCount = 75
discard count = 134		G->discardCount = 134
discard count = 221		G->discardCount = 0
discard count = 133		G->discardCount = 133
discard count = 439		G->discardCount = 439
discard count = 390		G->discardCount = 0
discard count = 409		G->discardCount = 0
discard count = 232		G->discardCount = 0
discard count = 106		G->discardCount = 106
discard count = 174		G->discardCount = 0
discard count = 380		G->discardCount = 0
discard count = 371		G->discardCount = 371
discard count = 72		G->discardCount = 0
discard count = 147		G->discardCount = 0
discard count = 416		G->discardCount = 0
discard count = 396		G->discardCount = 396
discard count = 14		G->discardCount = 0
discard count = 363		G->discardCount = 363
discard count = 186		G->discardCount = 186
discard count = 301		G->discardCount = 301
discard count = 111		G->discardCount = 0
discard count = 24		G->discardCount = 0
discard count = 444		G->discardCount = 444
discard count = 388		G->discardCount = 0
discard count = 460		G->discardCount = 0
discard count = 141		G->discardCount = 0
discard count = 126		G->discardCount = 126
discard count = 409		G->discardCount = 0
discard count = 228		G->discardCount = 0
discard count = 237		G->discardCount = 0
discard count = 181		G->discardCount = 0
discard count = 204		G->discardCount = 204
discard count = 106		G->discardCount = 0
discard count = 167		G->discardCount = 0
discard count = 267		G->discardCount = 0
discard count = 315		G->discardCount = 0
discard count = 268		G->discardCount = 268
discard count = 164		G->discardCount = 0
discard count = 384		G->discardCount = 384
discard count = 251		G->discardCount = 0
discard count = 35		G->discardCount = 35
discard count = 87		G->discardCount = 87
discard count = 278		G->discardCount = 0
discard count = 86		G->discardCount = 86
discard count = 49		G->discardCount = 49
discard count = 487		G->discardCount = 0
discard count = 382		G->discardCount = 382
discard count = 414		G->discardCount = 0
discard count = 345		G->discardCount = 0
discard count = 156		G->discardCount = 0
discard count = 197		G->discardCount = 197
discard count = 482		G->discardCount = 482
discard count = 241		G->discardCount = 0
discard count = 20		G->discardCount = 20
discard count = 401		G->discardCount = 401
discard count = 453		G->discardCount = 0
discard count = 413		G->discardCount = 0
discard count = 238		G->discardCount = 238
discard count = 490		G->discardCount = 490
discard count = 469		G->discardCount = 0
discard count = 476		G->discardCount = 476
discard count = 188		G->discardCount = 188
discard count = 491		G->discardCount = 0
discard count = 432		G->discardCount = 432
discard count = 138		G->discardCount = 138
discard count = 116		G->discardCount = 0
discard count = 443		G->discardCount = 443
discard count = 343		G->discardCount = 0
discard count = 166		G->discardCount = 0
discard count = 152		G->discardCount = 152
discard count = 46		G->discardCount = 46
discard count = 378		G->discardCount = 0
discard count = 178		G->discardCount = 178
discard count = 116		G->discardCount = 0
discard count = 44		G->discardCount = 0
discard count = 186		G->discardCount = 186
discard count = 342		G->discardCount = 0
discard count = 24		G->discardCount = 24
discard count = 188		G->discardCount = 188
discard count = 494		G->discardCount = 494
discard count = 162		G->discardCount = 162
discard count = 36		G->discardCount = 0
discard count = 178		G->discardCount = 0
discard count = 166		G->discardCount = 166
discard count = 404		G->discardCount = 0
discard count = 104		G->discardCount = 0
discard count = 46		G->discardCount = 0
discard count = 151		G->discardCount = 0
discard count = 290		G->discardCount = 290
discard count = 379		G->discardCount = 0
discard count = 334		G->discardCount = 334
discard count = 348		G->discardCount = 0
discard count = 324		G->discardCount = 0
discard count = 171		G->discardCount = 0
discard count = 96		G->discardCount = 96
discard count = 494		G->discardCount = 0
discard count = 441		G->discardCount = 0
discard count = 43		G->discardCount = 43
discard count = 340		G->discardCount = 0
discard count = 23		G->discardCount = 23
discard count = 207		G->discardCount = 207
discard count = 7		G->discardCount = 7
discard count = 340		G->discardCount = 0
discard count = 199		G->discardCount = 199
discard count = 86		G->discardCount = 86
discard count = 148		G->discardCount = 148
discard count = 119		G->discardCount = 0
discard count = 136		G->discardCount = 0
discard count = 99		G->discardCount = 0
discard count = 464		G->discardCount = 0
discard count = 44		G->discardCount = 44
discard count = 438		G->discardCount = 438
discard count = 463		G->discardCount = 0
discard count = 346		G->discardCount = 0
discard count = 370		G->discardCount = 370
discard count = 136		G->discardCount = 136
discard count = 38		G->discardCount = 38
discard count = 159		G->discardCount = 0
discard count = 426		G->discardCount = 0
discard count = 19		G->discardCount = 19
discard count = 134		G->discardCount = 134
discard count = 493		G->discardCount = 493
discard count = 16		G->discardCount = 0
discard count = 337		G->discardCount = 0
discard count = 398		G->discardCount = 398
discard count = 66		G->discardCount = 0
discard count = 140		G->discardCount = 140
discard count = 83		G->discardCount = 83
discard count = 468		G->discardCount = 0
discard count = 425		G->discardCount = 0
discard count = 49		G->discardCount = 49
discard count = 373		G->discardCount = 373
discard count = 262		G->discardCount = 262
discard count = 352		G->discardCount = 352
discard count = 370		G->discardCount = 0
discard count = 28		G->discardCount = 0
discard count = 242		G->discardCount = 0
discard count = 484		G->discardCount = 0
discard count = 272		G->discardCount = 272
discard count = 117		G->discardCount = 117
discard count = 28		G->discardCount = 28
discard count = 476		G->discardCount = 476
discard count = 432		G->discardCount = 432
discard count = 331		G->discardCount = 331
discard count = 242		G->discardCount = 0
discard count = 378		G->discardCount = 0
discard count = 291		G->discardCount = 0
discard count = 408		G->discardCount = 0
discard count = 125		G->discardCount = 125
discard count = 294		G->discardCount = 0
discard count = 5		G->discardCount = 0
discard count = 379		G->discardCount = 379
discard count = 258		G->discardCount = 258
discard count = 183		G->discardCount = 0
discard count = 53		G->discardCount = 0
discard count = 471		G->discardCount = 0
discard count = 75		G->discardCount = 75
discard count = 90		G->discardCount = 0
discard count = 178		G->discardCount = 0
discard count = 402		G->discardCount = 402
discard count = 222		G->discardCount = 222
discard count = 31		G->discardCount = 31
discard count = 79		G->discardCount = 79
discard count = 271		G->discardCount = 271
discard count = 415		G->discardCount = 415
discard count = 497		G->discardCount = 497
discard count = 303		G->discardCount = 0
discard count = 367		G->discardCount = 367
discard count = 250		G->discardCount = 0
discard count = 448		G->discardCount = 448
discard count = 363		G->discardCount = 363
discard count = 390		G->discardCount = 0
discard count = 372		G->discardCount = 372
discard count = 130		G->discardCount = 130
discard count = 143		G->discardCount = 0
discard count = 88		G->discardCount = 88
discard count = 341		G->discardCount = 0
discard count = 80		G->discardCount = 80
discard count = 345		G->discardCount = 0
discard count = 94		G->discardCount = 94
discard count = 343		G->discardCount = 0
discard count = 398		G->discardCount = 0
discard count = 233		G->discardCount = 233
discard count = 120		G->discardCount = 0
discard count = 168		G->discardCount = 168
discard count = 102		G->discardCount = 0
discard count = 338		G->discardCount = 338
discard count = 260		G->discardCount = 260
discard count = 162		G->discardCount = 0
discard count = 35		G->discardCount = 0
discard count = 459		G->discardCount = 0
discard count = 409		G->discardCount = 409
discard count = 119		G->discardCount = 119
discard count = 346		G->discardCount = 0
discard count = 127		G->discardCount = 0
discard count = 422		G->discardCount = 0
discard count = 408		G->discardCount = 0
discard count = 407		G->discardCount = 0
discard count = 120		G->discardCount = 0
discard count = 171		G->discardCount = 171
discard count = 205		G->discardCount = 205
discard count = 270		G->discardCount = 0
discard count = 427		G->discardCount = 427
discard count = 412		G->discardCount = 0
discard count = 372		G->discardCount = 0
discard count = 467		G->discardCount = 467
discard count = 382		G->discardCount = 382
discard count = 437		G->discardCount = 0
discard count = 491		G->discardCount = 491
discard count = 100		G->discardCount = 0
discard count = 150		G->discardCount = 0
discard count = 4		G->discardCount = 0
discard count = 466		G->discardCount = 466
discard count = 448		G->discardCount = 0
discard count = 416		G->discardCount = 0
discard count = 312		G->discardCount = 0
discard count = 451		G->discardCount = 451
discard count = 178		G->discardCount = 0
discard count = 168		G->discardCount = 168
discard count = 491		G->discardCount = 491
discard count = 203		G->discardCount = 203
discard count = 141		G->discardCount = 141
discard count = 212		G->discardCount = 212
discard count = 51		G->discardCount = 51
discard count = 106		G->discardCount = 106
discard count = 391		G->discardCount = 391
discard count = 409		G->discardCount = 409
discard count = 388		G->discardCount = 0
discard count = 247		G->discardCount = 0
discard count = 71		G->discardCount = 71
discard count = 290		G->discardCount = 0
discard count = 73		G->discardCount = 73
discard count = 432		G->discardCount = 0
discard count = 260		G->discardCount = 260
discard count = 292		G->discardCount = 292
discard count = 101		G->discardCount = 101
discard count = 288		G->discardCount = 0
discard count = 144		G->discardCount = 0
discard count = 407		G->discardCount = 407
discard count = 267		G->discardCount = 267
discard count = 44		G->discardCount = 0
discard count = 236		G->discardCount = 0
discard count = 94		G->discardCount = 94
discard count = 116		G->discardCount = 0
discard count = 243		G->discardCount = 0
discard count = 20		G->discardCount = 20
discard count = 271		G->discardCount = 271
discard count = 239		G->discardCount = 239
discard count = 193		G->discardCount = 0
discard count = 16		G->discardCount = 16
discard count = 89		G->discardCount = 89
discard count = 84		G->discardCount = 0
discard count = 261		G->discardCount = 261
discard count = 138		G->discardCount = 0
discard count = 271		G->discardCount = 0
discard count = 99		G->discardCount = 99
discard count = 277		G->discardCount = 0
discard count = 317		G->discardCount = 317
discard count = 137		G->discardCount = 137
discard count = 390		G->discardCount = 390
discard count = 362		G->discardCount = 362
discard count = 240		G->discardCount = 0
discard count = 23		G->discardCount = 0
discard count = 139		G->discardCount = 0
discard count = 422		G->discardCount = 0
discard count = 281		G->discardCount = 281
discard count = 195		G->discardCount = 195
discard count = 215		G->discardCount = 0
discard count = 344		G->discardCount = 344
discard count = 186		G->discardCount = 0
discard count = 46		G->discardCount = 46
discard count = 288		G->discardCount = 0
discard count = 185		G->discardCount = 185
discard count = 303		G->discardCount = 0
discard count = 360		G->discardCount = 0
discard count = 440		G->discardCount = 0
discard count = 420		G->discardCount = 420
discard count = 462		G->discardCount = 0
discard count = 233		G->discardCount = 233
discard count = 366		G->discardCount = 0
discard count = 204		G->discardCount = 0
discard count = 471		G->discardCount = 471
discard count = 416		G->discardCount = 416
discard count = 447		G->discardCount = 0
discard count = 411		G->discardCount = 411
discard count = 344		G->discardCount = 344
discard count = 182		G->discardCount = 182
discard count = 319		G->discardCount = 0
discard count = 96		G->discardCount = 96
discard count = 243		G->discardCount = 0
discard count = 415		G->discardCount = 415
discard count = 159		G->discardCount = 159
discard count = 323		G->discardCount = 0
discard count = 156		G->discardCount = 156
discard count = 430		G->discardCount = 0
discard count = 99		G->discardCount = 99
discard count = 120		G->discardCount = 0
discard count = 185		G->discardCount = 185
discard count = 49		G->discardCount = 0
discard count = 189		G->discardCount = 0
discard count = 52		G->discardCount = 52
discard count = 104		G->discardCount = 104
discard count = 70		G->discardCount = 0
discard count = 466		G->discardCount = 0
discard count = 205		G->discardCount = 205
discard count = 451		G->discardCount = 451
discard count = 334		G->discardCount = 0
discard count = 114		G->discardCount = 114
discard count = 240		G->discardCount = 0
discard count = 354		G->discardCount = 354
discard count = 146		G->discardCount = 146
discard count = 217		G->discardCount = 0
discard count = 108		G->discardCount = 0
discard count = 481		G->discardCount = 0
discard count = 406		G->discardCount = 406
discard count = 174		G->discardCount = 174
discard count = 266		G->discardCount = 0
discard count = 311		G->discardCount = 0
discard count = 372		G->discardCount = 372
discard count = 334		G->discardCount = 334
discard count = 84		G->discardCount = 84
discard count = 132		G->discardCount = 0
discard count = 358		G->discardCount = 358
discard count = 348		G->discardCount = 0
discard count = 418		G->discardCount = 418
discard count = 32		G->discardCount = 0
discard count = 161		G->discardCount = 0
discard count = 465		G->discardCount = 0
discard count = 254		G->discardCount = 254
discard count = 37		G->discardCount = 37
discard count = 326		G->discardCount = 0
discard count = 471		G->discardCount = 0
discard count = 308		G->discardCount = 0
discard count = 263		G->discardCount = 0
discard count = 467		G->discardCount = 467
discard count = 317		G->discardCount = 0
discard count = 85		G->discardCount = 85
discard count = 177		G->discardCount = 177
discard count = 80		G->discardCount = 0
discard count = 433		G->discardCount = 433
discard count = 484		G->discardCount = 484
discard count = 291		G->discardCount = 0
discard count = 259		G->discardCount = 0
discard count = 230		G->discardCount = 0
discard count = 313		G->discardCount = 0
discard count = 34		G->discardCount = 0
discard count = 414		G->discardCount = 0
discard count = 448		G->discardCount = 448
discard count = 25		G->discardCount = 25
discard count = 169		G->discardCount = 169
discard count = 438		G->discardCount = 438
discard count = 30		G->discardCount = 0
discard count = 366		G->discardCount = 366
discard count = 305		G->discardCount = 305
discard count = 472		G->discardCount = 0
discard count = 192		G->discardCount = 192
discard count = 155		G->discardCount = 155
discard count = 302		G->discardCount = 302
discard count = 464		G->discardCount = 464
discard count = 89		G->discardCount = 89
discard count = 180		G->discardCount = 180
discard count = 452		G->discardCount = 0
discard count = 262		G->discardCount = 0
discard count = 56		G->discardCount = 0
discard count = 188		G->discardCount = 0
discard count = 361		G->discardCount = 361
discard count = 287		G->discardCount = 287
discard count = 185		G->discardCount = 185
discard count = 375		G->discardCount = 375
discard count = 35		G->discardCount = 35
discard count = 24		G->discardCount = 0
discard count = 433		G->discardCount = 0
discard count = 303		G->discardCount = 303
discard count = 465		G->discardCount = 465
discard count = 38		G->discardCount = 0
discard count = 25		G->discardCount = 25
discard count = 464		G->discardCount = 0
discard count = 47		G->discardCount = 0
discard count = 331		G->discardCount = 331
discard count = 238		G->discardCount = 0
discard count = 259		G->discardCount = 259
discard count = 152		G->discardCount = 152
discard count = 102		G->discardCount = 0
discard count = 181		G->discardCount = 181
discard count = 334		G->discardCount = 0
discard count = 335		G->discardCount = 335
discard count = 303		G->discardCount = 0
discard count = 339		G->discardCount = 0
discard count = 365		G->discardCount = 365
discard count = 409		G->discardCount = 0
discard count = 412		G->discardCount = 412
discard count = 410		G->discardCount = 410
discard count = 292		G->discardCount = 0
discard count = 85		G->discardCount = 85
discard count = 414		G->discardCount = 0
discard count = 182		G->discardCount = 0
discard count = 0		G->discardCount = 0
discard count = 313		G->discardCount = 313
discard count = 408		G->discardCount = 0
discard count = 141		G->discardCount = 0
discard count = 172		G->discardCount = 172
discard count = 30		G->discardCount = 30
discard count = 184		G->discardCount = 0
discard count = 30		G->discardCount = 0
discard count = 318		G->discardCount = 318
discard count = 130		G->discardCount = 0
discard count = 289		G->discardCount = 289
discard count = 259		G->discardCount = 259
discard count = 298		G->discardCount = 0
discard count = 111		G->discardCount = 111
discard count = 107		G->discardCount = 107
discard count = 55		G->discardCount = 0
discard count = 123		G->discardCount = 123
discard count = 249		G->discardCount = 0
discard count = 282		G->discardCount = 0
discard count = 124		G->discardCount = 0
discard count = 449		G->discardCount = 0
discard count = 125		G->discardCount = 125
discard count = 175		G->discardCount = 0
discard count = 182		G->discardCount = 182
discard count = 205		G->discardCount = 205
discard count = 223		G->discardCount = 223
discard count = 167		G->discardCount = 0
discard count = 252		G->discardCount = 0
discard count = 297		G->discardCount = 297
discard count = 35		G->discardCount = 0
discard count = 474		G->discardCount = 474
discard count = 446		G->discardCount = 0
discard count = 324		G->discardCount = 324
discard count = 266		G->discardCount = 0
discard count = 301		G->discardCount = 0
discard count = 339		G->discardCount = 339
discard count = 81		G->discardCount = 0
discard count = 243		G->discardCount = 243
discard count = 193		G->discardCount = 0
discard count = 222		G->discardCount = 222
discard count = 312		G->discardCount = 0
discard count = 389		G->discardCount = 389
discard count = 271		G->discardCount = 271
discard count = 477		G->discardCount = 0
discard count = 406		G->discardCount = 0
discard count = 177		G->discardCount = 0
discard count = 231		G->discardCount = 0
discard count = 111		G->discardCount = 111
discard count = 402		G->discardCount = 0
discard count = 478		G->discardCount = 478
discard count = 269		G->discardCount = 269
discard count = 418		G->discardCount = 418
discard count = 367		G->discardCount = 367
discard count = 120		G->discardCount = 120
discard count = 316		G->discardCount = 0
discard count = 122		G->discardCount = 0
discard count = 455		G->discardCount = 455
discard count = 74		G->discardCount = 0
discard count = 63		G->discardCount = 0
discard count = 164		G->discardCount = 0
discard count = 176		G->discardCount = 176
discard count = 219		G->discardCount = 219
discard count = 204		G->discardCount = 204
discard count = 175		G->discardCount = 0
discard count = 180		G->discardCount = 180
discard count = 476		G->discardCount = 0
discard count = 430		G->discardCount = 430
discard count = 306		G->discardCount = 306
discard count = 112		G->discardCount = 0
discard count = 261		G->discardCount = 0
discard count = 372		G->discardCount = 0
discard count = 408		G->discardCount = 408
discard count = 33		G->discardCount = 33
discard count = 282		G->discardCount = 282
discard count = 227		G->discardCount = 0
discard count = 492		G->discardCount = 492
discard count = 455		G->discardCount = 455
discard count = 282		G->discardCount = 0
discard count = 319		G->discardCount = 0
discard count = 390		G->discardCount = 0
discard count = 374		G->discardCount = 0
discard count = 261		G->discardCount = 0
discard count = 474		G->discardCount = 474
discard count = 31		G->discardCount = 31
discard count = 93		G->discardCount = 0
discard count = 111		G->discardCount = 111
discard count = 82		G->discardCount = 0
discard count = 40		G->discardCount = 40
discard count = 212		G->discardCount = 0
discard count = 438		G->discardCount = 438
discard count = 98		G->discardCount = 0
discard count = 9		G->discardCount = 0
discard count = 231		G->discardCount = 0
discard count = 239		G->discardCount = 239
discard count = 248		G->discardCount = 0
discard count = 403		G->discardCount = 403
discard count = 427		G->discardCount = 427
discard count = 298		G->discardCount = 0
discard count = 499		G->discardCount = 0
discard count = 484		G->discardCount = 0
discard count = 345		G->discardCount = 345
discard count = 168		G->discardCount = 168
discard count = 219		G->discardCount = 0
discard count = 494		G->discardCount = 0
discard count = 159		G->discardCount = 159
discard count = 323		G->discardCount = 323
discard count = 205		G->discardCount = 0
discard count = 282		G->discardCount = 282
discard count = 446		G->discardCount = 446
discard count = 494		G->discardCount = 494
discard count = 311		G->discardCount = 311
discard count = 221		G->discardCount = 0
discard count = 188		G->discardCount = 0
discard count = 409		G->discardCount = 0
discard count = 319		G->discardCount = 319
discard count = 102		G->discardCount = 0
discard count = 60		G->discardCount = 0
discard count = 97		G->discardCount = 97
discard count = 477		G->discardCount = 0
discard count = 478		G->discardCount = 478
discard count = 252		G->discardCount = 252
discard count = 184		G->discardCount = 184
discard count = 316		G->discardCount = 316
discard count = 476		G->discardCount = 0
discard count = 96		G->discardCount = 0
discard count = 126		G->discardCount = 126
discard count = 461		G->discardCount = 461
discard count = 359		G->discardCount = 359
discard count = 298		G->discardCount = 298
discard count = 15		G->discardCount = 15
discard count = 228		G->discardCount = 0
discard count = 302		G->discardCount = 0
discard count = 379		G->discardCount = 379
discard count = 328		G->discardCount = 0
discard count = 122		G->discardCount = 122
discard count = 407		G->discardCount = 0
discard count = 311		G->discardCount = 311
discard count = 415		G->discardCount = 415
discard count = 60		G->discardCount = 60
discard count = 301		G->discardCount = 301
discard count = 171		G->discardCount = 0
discard count = 464		G->discardCount = 464
discard count = 289		G->discardCount = 0
discard count = 331		G->discardCount = 331
discard count = 44		G->discardCount = 44
discard count = 45		G->discardCount = 0
discard count = 83		G->discardCount = 83
discard count = 65		G->discardCount = 0
discard count = 438		G->discardCount = 0
discard count = 121		G->discardCount = 121
discard count = 311		G->discardCount = 0
discard count = 444		G->discardCount = 0
discard count = 72		G->discardCount = 72
discard count = 89		G->discardCount = 0
discard count = 359		G->discardCount = 0
discard count = 488		G->discardCount = 0
discard count = 234		G->discardCount = 234
discard count = 493		G->discardCount = 0
discard count = 39		G->discardCount = 39
discard count = 4		G->discardCount = 4
discard count = 442		G->discardCount = 442
discard count = 290		G->discardCount = 0
discard count = 223		G->discardCount = 0
discard count = 104		G->discardCount = 0
discard count = 136		G->discardCount = 0
discard count = 121		G->discardCount = 121
discard count = 297		G->discardCount = 297
discard count = 23		G->discardCount = 0
discard count = 492		G->discardCount = 492
discard count = 457		G->discardCount = 0
discard count = 354		G->discardCount = 0
discard count = 188		G->discardCount = 0
discard count = 330		G->discardCount = 330
discard count = 396		G->discardCount = 0
discard count = 45		G->discardCount = 45
discard count = 227		G->discardCount = 0
discard count = 362		G->discardCount = 362
discard count = 297		G->discardCount = 0
discard count = 71		G->discardCount = 0
discard count = 148		G->discardCount = 148
discard count = 391		G->discardCount = 0
discard count = 324		G->discardCount = 0
discard count = 55		G->discardCount = 55
discard count = 293		G->discardCount = 0
discard count = 43		G->discardCount = 0
discard count = 142		G->discardCount = 142
discard count = 138		G->discardCount = 0
discard count = 224		G->discardCount = 0
discard count = 197		G->discardCount = 197
discard count = 102		G->discardCount = 0
discard count = 111		G->discardCount = 111
discard count = 215		G->discardCount = 215
discard count = 6		G->discardCount = 0
discard count = 308		G->discardCount = 0
discard count = 408		G->discardCount = 408
discard count = 344		G->discardCount = 344
discard count = 164		G->discardCount = 0
discard count = 434		G->discardCount = 0
discard count = 167		G->discardCount = 0
discard count = 295		G->discardCount = 0
discard count = 205		G->discardCount = 205
discard count = 153		G->discardCount = 153
discard count = 147		G->discardCount = 0
discard count = 492		G->discardCount = 492
discard count = 252		G->discardCount = 252
discard count = 411		G->discardCount = 411
discard count = 342		G->discardCount = 342
discard count = 138		G->discardCount = 138
discard count = 445		G->discardCount = 0
discard count = 221		G->discardCount = 0
discard count = 455		G->discardCount = 0
discard count = 370		G->discardCount = 0
discard count = 62		G->discardCount = 0
discard count = 14		G->discardCount = 0
discard count = 228		G->discardCount = 0
discard count = 431		G->discardCount = 0
discard count = 61		G->discardCount = 61
discard count = 182		G->discardCount = 182
discard count = 391		G->discardCount = 391
discard count = 31		G->discardCount = 0
discard count = 455		G->discardCount = 455
discard count = 379		G->discardCount = 379
discard count = 323		G->discardCount = 0
discard count = 375		G->discardCount = 375
discard count = 492		G->discardCount = 492
discard count = 421		G->discardCount = 0
discard count = 115		G->discardCount = 115
discard count = 107		G->discardCount = 107
discard count = 457		G->discardCount = 457
discard count = 347		G->discardCount = 0
discard count = 336		G->discardCount = 0
discard count = 212		G->discardCount = 0
discard count = 64		G->discardCount = 0
discard count = 351		G->discardCount = 0
discard count = 14		G->discardCount = 0
discard count = 345		G->discardCount = 0
discard count = 334		G->discardCount = 334
discard count = 444		G->discardCount = 0
discard count = 1		G->discardCount = 0
discard count = 161		G->discardCount = 0
discard count = 245		G->discardCount = 245
discard count = 406		G->discardCount = 0
discard count = 46		G->discardCount = 46
discard count = 346		G->discardCount = 346
discard count = 134		G->discardCount = 134
discard count = 374		G->discardCount = 0
discard count = 170		G->discardCount = 170
discard count = 253		G->discardCount = 0
discard count = 353		G->discardCount = 353
discard count = 11		G->discardCount = 0
discard count = 18		G->discardCount = 18
discard count = 140		G->discardCount = 140
discard count = 465		G->discardCount = 0
discard count = 244		G->discardCount = 0
discard count = 355		G->discardCount = 355
discard count = 108		G->discardCount = 108
discard count = 128		G->discardCount = 0
discard count = 470		G->discardCount = 0
discard count = 76		G->discardCount = 76
discard count = 142		G->discardCount = 0
discard count = 74		G->discardCount = 74
discard count = 297		G->discardCount = 0
discard count = 372		G->discardCount = 0
discard count = 28		G->discardCount = 0
discard count = 166		G->discardCount = 0
discard count = 46		G->discardCount = 46
discard count = 22		G->discardCount = 0
discard count = 443		G->discardCount = 443
discard count = 362		G->discardCount = 0
discard count = 121		G->discardCount = 0
discard count = 457		G->discardCount = 457
discard count = 281		G->discardCount = 281
discard count = 323		G->discardCount = 0
discard count = 326		G->discardCount = 326
discard count = 93		G->discardCount = 93
discard count = 492		G->discardCount = 492
discard count = 414		G->discardCount = 414
discard count = 99		G->discardCount = 0
discard count = 468		G->discardCount = 0
discard count = 81		G->discardCount = 81
discard count = 402		G->discardCount = 0
discard count = 231		G->discardCount = 0
discard count = 300		G->discardCount = 0
discard count = 299		G->discardCount = 0
discard count = 262		G->discardCount = 262
discard count = 71		G->discardCount = 0
discard count = 39		G->discardCount = 0
discard count = 409		G->discardCount = 409
discard count = 229		G->discardCount = 229
discard count = 399		G->discardCount = 0
discard count = 255		G->discardCount = 255
discard count = 84		G->discardCount = 84
discard count = 170		G->discardCount = 0
discard count = 296		G->discardCount = 296
discard count = 203		G->discardCount = 203
discard count = 261		G->discardCount = 0
discard count = 45		G->discardCount = 45
discard count = 407		G->discardCount = 0
discard count = 468		G->discardCount = 0
discard count = 355		G->discardCount = 0
discard count = 249		G->discardCount = 249
discard count = 372		G->discardCount = 0
discard count = 236		G->discardCount = 0
discard count = 204		G->discardCount = 204
discard count = 264		G->discardCount = 264
discard count = 322		G->discardCount = 322
discard count = 222		G->discardCount = 0
discard count = 439		G->discardCount = 0
discard count = 211		G->discardCount = 211
discard count = 241		G->discardCount = 241
discard count = 148		G->discardCount = 0
discard count = 105		G->discardCount = 105
discard count = 490		G->discardCount = 0
discard count = 395		G->discardCount = 395
discard count = 91		G->discardCount = 91
discard count = 113		G->discardCount = 0
discard count = 387		G->discardCount = 387
discard count = 454		G->discardCount = 0
discard count = 498		G->discardCount = 0
discard count = 263		G->discardCount = 0
discard count = 281		G->discardCount = 281
discard count = 94		G->discardCount = 94
discard count = 349		G->discardCount = 0
discard count = 53		G->discardCount = 53
discard count = 457		G->discardCount = 0
discard count = 256		G->discardCount = 256
discard count = 301		G->discardCount = 0
discard count = 284		G->discardCount = 284
discard count = 293		G->discardCount = 0
discard count = 246		G->discardCount = 246
discard count = 136		G->discardCount = 136
discard count = 10		G->discardCount = 10
discard count = 430		G->discardCount = 430
discard count = 168		G->discardCount = 0
discard count = 419		G->discardCount = 0
discard count = 337		G->discardCount = 0
discard count = 416		G->discardCount = 0
discard count = 332		G->discardCount = 332
discard count = 187		G->discardCount = 187
discard count = 331		G->discardCount = 331
discard count = 237		G->discardCount = 237
discard count = 89		G->discardCount = 89
discard count = 164		G->discardCount = 0
discard count = 370		G->discardCount = 0
discard count = 153		G->discardCount = 153
discard count = 174		G->discardCount = 0
discard count = 328		G->discardCount = 0
discard count = 25		G->discardCount = 0
discard count = 433		G->discardCount = 0
discard count = 218		G->discardCount = 218
discard count = 257		G->discardCount = 257
discard count = 116		G->discardCount = 0
discard count = 310		G->discardCount = 310
discard count = 404		G->discardCount = 0
discard count = 276		G->discardCount = 0
discard count = 213		G->discardCount = 213
discard count = 49		G->discardCount = 0
discard count = 422		G->discardCount = 422
discard count = 341		G->discardCount = 0
discard count = 30		G->discardCount = 30
discard count = 180		G->discardCount = 0
discard count = 347		G->discardCount = 0
discard count = 351		G->discardCount = 351
discard count = 273		G->discardCount = 273
discard count = 213		G->discardCount = 213
discard count = 13		G->discardCount = 0
discard count = 90		G->discardCount = 90
discard count = 494		G->discardCount = 0
discard count = 123		G->discardCount = 0
discard count = 74		G->discardCount = 0
discard count = 69		G->discardCount = 69
discard count = 402		G->discardCount = 402
discard count = 213		G->discardCount = 0
discard count = 224		G->discardCount = 224
discard count = 194		G->discardCount = 194
discard count = 442		G->discardCount = 442
discard count = 439		G->discardCount = 439
discard count = 20		G->discardCount = 0
discard count = 173		G->discardCount = 0
discard count = 464		G->discardCount = 464
discard count = 125		G->discardCount = 125
discard count = 247		G->discardCount = 0
discard count = 261		G->discardCount = 261
discard count = 270		G->discardCount = 270
discard count = 149		G->discardCount = 149
discard count = 476		G->discardCount = 476
discard count = 7		G->discardCount = 0
discard count = 378		G->discardCount = 378
discard count = 249		G->discardCount = 0
discard count = 172		G->discardCount = 0
discard count = 32		G->discardCount = 32
discard count = 456		G->discardCount = 456
discard count = 138		G->discardCount = 138
discard count = 368		G->discardCount = 0
discard count = 71		G->discardCount = 0
discard count = 488		G->discardCount = 0
discard count = 263		G->discardCount = 263
discard count = 462		G->discardCount = 0
discard count = 249		G->discardCount = 0
discard count = 292		G->discardCount = 0
discard count = 416		G->discardCount = 416
discard count = 136		G->discardCount = 0
discard count = 178		G->discardCount = 0
discard count = 414		G->discardCount = 0
discard count = 224		G->discardCount = 224
discard count = 115		G->discardCount = 0
discard count = 197		G->discardCount = 0
discard count = 459		G->discardCount = 0
discard count = 222		G->discardCount = 0
discard count = 55		G->discardCount = 0
discard count = 122		G->discardCount = 122
discard count = 345		G->discardCount = 0
discard count = 311		G->discardCount = 0
discard count = 257		G->discardCount = 257
discard count = 173		G->discardCount = 173
discard count = 252		G->discardCount = 0
discard count = 322		G->discardCount = 322
discard count = 466		G->discardCount = 0
discard count = 66		G->discardCount = 0
discard count = 195		G->discardCount = 0
discard count = 482		G->discardCount = 0
discard count = 27		G->discardCount = 27
discard count = 62		G->discardCount = 62
discard count = 304		G->discardCount = 304
discard count = 223		G->discardCount = 223
discard count = 481		G->discardCount = 0
discard count = 195		G->discardCount = 0
discard count = 422		G->discardCount = 0
discard count = 92		G->discardCount = 0
discard count = 85		G->discardCount = 0
discard count = 278		G->discardCount = 0
discard count = 347		G->discardCount = 0
discard count = 208		G->discardCount = 0
discard count = 423		G->discardCount = 423
discard count = 496		G->discardCount = 496
discard count = 346		G->discardCount = 346
discard count = 125		G->discardCount = 0
discard count = 476		G->discardCount = 0
discard count = 364		G->discardCount = 364
discard count = 329		G->discardCount = 0
discard count = 292		G->discardCount = 0
discard count = 290		G->discardCount = 0
discard count = 65		G->discardCount = 65
discard count = 355		G->discardCount = 0
discard count = 481		G->discardCount = 0
discard count = 410		G->discardCount = 410
discard count = 462		G->discardCount = 462
discard count = 356		G->discardCount = 356
discard count = 244		G->discardCount = 244
discard count = 367		G->discardCount = 0
discard count = 55		G->discardCount = 55
discard count = 348		G->discardCount = 0
discard count = 179		G->discardCount = 0
discard count = 249		G->discardCount = 0
discard count = 363		G->discardCount = 363
discard count = 369		G->discardCount = 369
discard count = 232		G->discardCount = 232
discard count = 84		G->discardCount = 0
discard count = 209		G->discardCount = 0
discard count = 120		G->discardCount = 120
discard count = 164		G->discardCount = 0
discard count = 380		G->discardCount = 380
discard count = 442		G->discardCount = 0
discard count = 337		G->discardCount = 337
discard count = 330		G->discardCount = 0
discard count = 290		G->discardCount = 0
discard count = 206		G->discardCount = 206
discard count = 36		G->discardCount = 36
discard count = 497		G->discardCount = 0
discard count = 334		G->discardCount = 0
discard count = 184		G->discardCount = 0
discard count = 178		G->discardCount = 178
discard count = 20		G->discardCount = 0
discard count = 196		G->discardCount = 0
discard count = 129		G->discardCount = 129
discard count = 230		G->discardCount = 230
discard count = 423		G->discardCount = 423
discard count = 370		G->discardCount = 0
discard count = 275		G->discardCount = 0
discard count = 169		G->discardCount = 0
discard count = 39		G->discardCount = 0
discard count = 227		G->discardCount = 227
discard count = 33		G->discardCount = 0
discard count = 197		G->discardCount = 0
discard count = 403		G->discardCount = 403
discard count = 267		G->discardCount = 267
discard count = 168		G->discardCount = 168
discard count = 331		G->discardCount = 0
discard count = 246		G->discardCount = 0
discard count = 267		G->discardCount = 267
discard count = 92		G->discardCount = 0
discard count = 466		G->discardCount = 466
discard count = 316		G->discardCount = 0
discard count = 334		G->discardCount = 334
discard count = 309		G->discardCount = 309
discard count = 113		G->discardCount = 0
discard count = 139		G->discardCount = 0
discard count = 82		G->discardCount = 82
discard count = 209		G->discardCount = 0
discard count = 385		G->discardCount = 0
discard count = 481		G->discardCount = 481
discard count = 187		G->discardCount = 0
discard count = 3		G->discardCount = 0
discard count = 57		G->discardCount = 57
discard count = 310		G->discardCount = 310
discard count = 316		G->discardCount = 316
discard count = 7		G->discardCount = 7
discard count = 333		G->discardCount = 333
discard count = 304		G->discardCount = 0
discard count = 106		G->discardCount = 106
discard count = 374		G->discardCount = 0
discard count = 98		G->discardCount = 0
discard count = 49		G->discardCount = 0
discard count = 85		G->discardCount = 0
discard count = 116		G->discardCount = 116
discard count = 95		G->discardCount = 95
discard count = 430		G->discardCount = 0
discard count = 391		G->discardCount = 391
discard count = 42		G->discardCount = 42
discard count = 389		G->discardCount = 389
discard count = 316		G->discardCount = 316
discard count = 224		G->discardCount = 224
discard count = 474		G->discardCount = 0
discard count = 247		G->discardCount = 0
discard count = 356		G->discardCount = 0
discard count = 76		G->discardCount = 76
discard count = 88		G->discardCount = 0
discard count = 265		G->discardCount = 0
discard count = 204		G->discardCount = 0
discard count = 350		G->discardCount = 0
discard count = 320		G->discardCount = 0
discard count = 491		G->discardCount = 0
discard count = 96		G->discardCount = 0
discard count = 24		G->discardCount = 24
discard count = 306		G->discardCount = 306
discard count = 9		G->discardCount = 0
discard count = 53		G->discardCount = 0
discard count = 433		G->discardCount = 0
discard count = 28		G->discardCount = 28
discard count = 36		G->discardCount = 36
discard count = 137		G->discardCount = 137
discard count = 196		G->discardCount = 0
discard count = 334		G->discardCount = 0
discard count = 74		G->discardCount = 0
discard count = 233		G->discardCount = 0
discard count = 71		G->discardCount = 71
discard count = 45		G->discardCount = 45
discard count = 139		G->discardCount = 0
discard count = 393		G->discardCount = 393
discard count = 172		G->discardCount = 172
discard count = 192		G->discardCount = 0
discard count = 432		G->discardCount = 0
discard count = 394		G->discardCount = 394
discard count = 499		G->discardCount = 0
discard count = 344		G->discardCount = 0
discard count = 242		G->discardCount = 0
discard count = 180		G->discardCount = 180
discard count = 336		G->discardCount = 336
discard count = 259		G->discardCount = 0
discard count = 378		G->discardCount = 0
discard count = 383		G->discardCount = 0
discard count = 111		G->discardCount = 0
**Test complete.
