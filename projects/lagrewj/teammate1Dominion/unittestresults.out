TESTING updateCoins() first coppers and silvers:

Test player 0 with 5 copper(s), 0 silver(s), and 6 bonus.
G.coins = 11, expected = 11

Test player 0 with 4 copper(s), 1 silver(s), and 5 bonus.
G.coins = 11, expected = 11

Test player 0 with 3 copper(s), 2 silver(s), and 8 bonus.
G.coins = 15, expected = 15

Test player 0 with 2 copper(s), 3 silver(s), and 0 bonus.
G.coins = 8, expected = 8

Test player 0 with 1 copper(s), 4 silver(s), and 5 bonus.
G.coins = 14, expected = 14

Test player 0 with 0 copper(s), 5 silver(s), and 0 bonus.
G.coins = 10, expected = 10

Test player 1 with 5 copper(s), 0 silver(s), and 2 bonus.
G.coins = 7, expected = 7

Test player 1 with 4 copper(s), 1 silver(s), and 6 bonus.
G.coins = 12, expected = 12

Test player 1 with 3 copper(s), 2 silver(s), and 1 bonus.
G.coins = 8, expected = 8

Test player 1 with 2 copper(s), 3 silver(s), and 4 bonus.
G.coins = 12, expected = 12

Test player 1 with 1 copper(s), 4 silver(s), and 8 bonus.
G.coins = 17, expected = 17

Test player 1 with 0 copper(s), 5 silver(s), and 4 bonus.
G.coins = 14, expected = 14
TESTING updateCoins() with coppers and golds:

Test player 0 with 5 copper(s), 0 gold(s), and 3 bonus.
G.coins = 8, expected = 8

Test player 0 with 4 copper(s), 1 gold(s), and 9 bonus.
G.coins = 16, expected = 16

Test player 0 with 3 copper(s), 2 gold(s), and 2 bonus.
G.coins = 11, expected = 11

Test player 0 with 2 copper(s), 3 gold(s), and 1 bonus.
G.coins = 12, expected = 12

Test player 0 with 1 copper(s), 4 gold(s), and 4 bonus.
G.coins = 17, expected = 17

Test player 0 with 0 copper(s), 5 gold(s), and 5 bonus.
G.coins = 20, expected = 20

Test player 1 with 5 copper(s), 0 gold(s), and 1 bonus.
G.coins = 6, expected = 6

Test player 1 with 4 copper(s), 1 gold(s), and 5 bonus.
G.coins = 12, expected = 12

Test player 1 with 3 copper(s), 2 gold(s), and 5 bonus.
G.coins = 14, expected = 14

Test player 1 with 2 copper(s), 3 gold(s), and 2 bonus.
G.coins = 13, expected = 13

Test player 1 with 1 copper(s), 4 gold(s), and 8 bonus.
G.coins = 21, expected = 21

Test player 1 with 0 copper(s), 5 gold(s), and 8 bonus.
G.coins = 23, expected = 23
All tests passed!

TESTING fullDeckCount():

Testing for Player 0:
Adding the following to the
deck:         5 coppers
hand:         10 golds
discard pile: 2 provinces
hand:         3 smithys
discard pile: 4 tributes
deck:         5 embargos
Test results:
estate result: 3, expected: 3
copper result: 7, expected: 7
updated copper result: 12, expected: 12
gold result: 10, expected: 10
province result: 2, expected: 2
smithy result: 3, expected: 3
tribute result: 4, expected: 4
embargo result: 5, expected: 5

Testing for Player 1:
Adding the following to the
deck:         5 coppers
hand:         10 golds
discard pile: 2 provinces
hand:         3 smithys
discard pile: 4 tributes
deck:         5 embargos
Test results:
estate result: 3, expected: 3
copper result: 7, expected: 7
updated copper result: 12, expected: 12
gold result: 10, expected: 10
province result: 2, expected: 2
smithy result: 3, expected: 3
tribute result: 4, expected: 4
embargo result: 5, expected: 5

Testing for Player 2:
Adding the following to the
deck:         5 coppers
hand:         10 golds
discard pile: 2 provinces
hand:         3 smithys
discard pile: 4 tributes
deck:         5 embargos
Test results:
estate result: 3, expected: 3
copper result: 7, expected: 7
updated copper result: 12, expected: 12
gold result: 10, expected: 10
province result: 2, expected: 2
smithy result: 3, expected: 3
tribute result: 4, expected: 4
embargo result: 5, expected: 5

All tests successful!

TESTING isGameOver():
Game over = 1
Test #1: Nothing changed
Game is over: 0, expected: 0

Test 2: 0 Provinces
Game is over: 1, expected: 1

Test 3: 1 Empty pile
Game is over: 0, expected: 0

Test 4: 2 empty piles
Game is over: 0, expected: 0

Test 5: 3 empty piles
Game is over: 1, expected: 1

All tests passed!

TESTING scoreFor():

Test 1 - Player 0:
Putting in the discard pile:
    5 duchy
    3 provinces
    1 great halls
    2 gardens
    1 curses
deckCount: 5
discardCount: 8
handCount: 5
Player 0 score: 25, expected: 38

Test 2 - Player 1:
All cards in deck, no additional card changes:
deckCount: 10
discardCount: 0
handCount: 0
Player 1 score: 0, expected: 3

2/2 test(s) failed!
----------------- Testing Card: smithy ----------------
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 3 Actual: 4
ERROR 2: deckCount is incorrect. Expected: 124 Actual: 123
ERROR 3: playedCardCount is incorrect. Expected: 338 Actual: 337
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 154 Actual: 155
ERROR 2: deckCount is incorrect. Expected: 66 Actual: 65
ERROR 3: playedCardCount is incorrect. Expected: 450 Actual: 449
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 234 Actual: 235
ERROR 2: deckCount is incorrect. Expected: 495 Actual: 494
ERROR 3: playedCardCount is incorrect. Expected: 337 Actual: 336
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 217 Actual: 218
ERROR 2: deckCount is incorrect. Expected: 451 Actual: 450
ERROR 3: playedCardCount is incorrect. Expected: 41 Actual: 40
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 220 Actual: 221
ERROR 2: deckCount is incorrect. Expected: 179 Actual: 178
ERROR 3: playedCardCount is incorrect. Expected: 214 Actual: 213
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 126 Actual: 127
ERROR 2: deckCount is incorrect. Expected: 220 Actual: 219
ERROR 3: playedCardCount is incorrect. Expected: 112 Actual: 111
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 68 Actual: 69
ERROR 2: deckCount is incorrect. Expected: 332 Actual: 331
ERROR 3: playedCardCount is incorrect. Expected: 251 Actual: 250
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 102 Actual: 103
ERROR 2: deckCount is incorrect. Expected: 157 Actual: 156
ERROR 3: playedCardCount is incorrect. Expected: 346 Actual: 345
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 400 Actual: 401
ERROR 2: deckCount is incorrect. Expected: 247 Actual: 246
ERROR 3: playedCardCount is incorrect. Expected: 452 Actual: 451
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 124 Actual: 125
ERROR 2: deckCount is incorrect. Expected: 415 Actual: 414
ERROR 3: playedCardCount is incorrect. Expected: 7 Actual: 6
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 447 Actual: 448
ERROR 2: deckCount is incorrect. Expected: 101 Actual: 100
ERROR 3: playedCardCount is incorrect. Expected: 403 Actual: 402
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 101 Actual: 102
ERROR 2: deckCount is incorrect. Expected: 173 Actual: 172
ERROR 3: playedCardCount is incorrect. Expected: 118 Actual: 117
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 279 Actual: 280
ERROR 2: deckCount is incorrect. Expected: 397 Actual: 396
ERROR 3: playedCardCount is incorrect. Expected: 468 Actual: 467
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 162 Actual: 163
ERROR 2: deckCount is incorrect. Expected: 418 Actual: 417
ERROR 3: playedCardCount is incorrect. Expected: 373 Actual: 372
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 93 Actual: 94
ERROR 2: deckCount is incorrect. Expected: 394 Actual: 393
ERROR 3: playedCardCount is incorrect. Expected: 394 Actual: 393
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 94 Actual: 95
ERROR 2: deckCount is incorrect. Expected: 90 Actual: 89
ERROR 3: playedCardCount is incorrect. Expected: 379 Actual: 378
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 4 Actual: 5
ERROR 2: deckCount is incorrect. Expected: 157 Actual: 156
ERROR 3: playedCardCount is incorrect. Expected: 259 Actual: 258
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 247 Actual: 248
ERROR 2: deckCount is incorrect. Expected: 188 Actual: 187
ERROR 3: playedCardCount is incorrect. Expected: 482 Actual: 481
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 208 Actual: 209
ERROR 2: deckCount is incorrect. Expected: 21 Actual: 20
ERROR 3: playedCardCount is incorrect. Expected: 192 Actual: 191
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 56 Actual: 57
ERROR 2: deckCount is incorrect. Expected: 16 Actual: 15
ERROR 3: playedCardCount is incorrect. Expected: 423 Actual: 422
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 167 Actual: 168
ERROR 2: deckCount is incorrect. Expected: 425 Actual: 424
ERROR 3: playedCardCount is incorrect. Expected: 52 Actual: 51
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 330 Actual: 331
ERROR 2: deckCount is incorrect. Expected: 387 Actual: 386
ERROR 3: playedCardCount is incorrect. Expected: 348 Actual: 347
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 33 Actual: 34
ERROR 2: deckCount is incorrect. Expected: 393 Actual: 392
ERROR 3: playedCardCount is incorrect. Expected: 101 Actual: 100
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 183 Actual: 184
ERROR 2: deckCount is incorrect. Expected: 220 Actual: 219
ERROR 3: playedCardCount is incorrect. Expected: 437 Actual: 436
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 381 Actual: 382
ERROR 2: deckCount is incorrect. Expected: 385 Actual: 384
ERROR 3: playedCardCount is incorrect. Expected: 340 Actual: 339
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 153 Actual: 154
ERROR 2: deckCount is incorrect. Expected: 127 Actual: 126
ERROR 3: playedCardCount is incorrect. Expected: 37 Actual: 36
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 399 Actual: 400
ERROR 2: deckCount is incorrect. Expected: 29 Actual: 28
ERROR 3: playedCardCount is incorrect. Expected: 228 Actual: 227
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 45 Actual: 46
ERROR 2: deckCount is incorrect. Expected: 316 Actual: 315
ERROR 3: playedCardCount is incorrect. Expected: 360 Actual: 359
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 467 Actual: 468
ERROR 2: deckCount is incorrect. Expected: 495 Actual: 494
ERROR 3: playedCardCount is incorrect. Expected: 478 Actual: 477
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 259 Actual: 260
ERROR 2: deckCount is incorrect. Expected: 271 Actual: 270
ERROR 3: playedCardCount is incorrect. Expected: 299 Actual: 298
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 429 Actual: 430
ERROR 2: deckCount is incorrect. Expected: 423 Actual: 422
ERROR 3: playedCardCount is incorrect. Expected: 392 Actual: 391
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 82 Actual: 83
ERROR 2: deckCount is incorrect. Expected: 260 Actual: 259
ERROR 3: playedCardCount is incorrect. Expected: 137 Actual: 136
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 154 Actual: 155
ERROR 2: deckCount is incorrect. Expected: 454 Actual: 453
ERROR 3: playedCardCount is incorrect. Expected: 53 Actual: 52
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 219 Actual: 220
ERROR 2: deckCount is incorrect. Expected: 192 Actual: 191
ERROR 3: playedCardCount is incorrect. Expected: 209 Actual: 208
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 5 Actual: 6
ERROR 2: deckCount is incorrect. Expected: 232 Actual: 231
ERROR 3: playedCardCount is incorrect. Expected: 255 Actual: 254
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 429 Actual: 430
ERROR 2: deckCount is incorrect. Expected: 417 Actual: 416
ERROR 3: playedCardCount is incorrect. Expected: 371 Actual: 370
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 346 Actual: 347
ERROR 2: deckCount is incorrect. Expected: 175 Actual: 174
ERROR 3: playedCardCount is incorrect. Expected: 332 Actual: 331
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 150 Actual: 151
ERROR 2: deckCount is incorrect. Expected: 75 Actual: 74
ERROR 3: playedCardCount is incorrect. Expected: 75 Actual: 74
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 490 Actual: 491
ERROR 2: deckCount is incorrect. Expected: 184 Actual: 183
ERROR 3: playedCardCount is incorrect. Expected: 336 Actual: 335
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 441 Actual: 442
ERROR 2: deckCount is incorrect. Expected: 360 Actual: 359
ERROR 3: playedCardCount is incorrect. Expected: 402 Actual: 401
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 500 Actual: 501
ERROR 2: deckCount is incorrect. Expected: 437 Actual: 436
ERROR 3: playedCardCount is incorrect. Expected: 336 Actual: 335
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 50 Actual: 51
ERROR 2: deckCount is incorrect. Expected: 308 Actual: 307
ERROR 3: playedCardCount is incorrect. Expected: 51 Actual: 50
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 194 Actual: 195
ERROR 2: deckCount is incorrect. Expected: 376 Actual: 375
ERROR 3: playedCardCount is incorrect. Expected: 362 Actual: 361
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 354 Actual: 355
ERROR 2: deckCount is incorrect. Expected: 459 Actual: 458
ERROR 3: playedCardCount is incorrect. Expected: 16 Actual: 15
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 491 Actual: 492
ERROR 2: deckCount is incorrect. Expected: 452 Actual: 451
ERROR 3: playedCardCount is incorrect. Expected: 150 Actual: 149
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 171 Actual: 172
ERROR 2: deckCount is incorrect. Expected: 275 Actual: 274
ERROR 3: playedCardCount is incorrect. Expected: 403 Actual: 402
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 281 Actual: 282
ERROR 2: deckCount is incorrect. Expected: 213 Actual: 212
ERROR 3: playedCardCount is incorrect. Expected: 244 Actual: 243
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 342 Actual: 343
ERROR 2: deckCount is incorrect. Expected: 13 Actual: 12
ERROR 3: playedCardCount is incorrect. Expected: 438 Actual: 437
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 18 Actual: 19
ERROR 2: deckCount is incorrect. Expected: 106 Actual: 105
ERROR 3: playedCardCount is incorrect. Expected: 401 Actual: 400
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 446 Actual: 447
ERROR 2: deckCount is incorrect. Expected: 440 Actual: 439
ERROR 3: playedCardCount is incorrect. Expected: 152 Actual: 151
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 40 Actual: 41
ERROR 2: deckCount is incorrect. Expected: 345 Actual: 344
ERROR 3: playedCardCount is incorrect. Expected: 429 Actual: 428
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 327 Actual: 328
ERROR 2: deckCount is incorrect. Expected: 481 Actual: 480
ERROR 3: playedCardCount is incorrect. Expected: 149 Actual: 148
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 311 Actual: 312
ERROR 2: deckCount is incorrect. Expected: 436 Actual: 435
ERROR 3: playedCardCount is incorrect. Expected: 229 Actual: 228
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 74 Actual: 75
ERROR 2: deckCount is incorrect. Expected: 141 Actual: 140
ERROR 3: playedCardCount is incorrect. Expected: 209 Actual: 208
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 5 Actual: 6
ERROR 2: deckCount is incorrect. Expected: 467 Actual: 466
ERROR 3: playedCardCount is incorrect. Expected: 91 Actual: 90
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 91 Actual: 92
ERROR 2: deckCount is incorrect. Expected: 62 Actual: 61
ERROR 3: playedCardCount is incorrect. Expected: 8 Actual: 7
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 394 Actual: 395
ERROR 2: deckCount is incorrect. Expected: 346 Actual: 345
ERROR 3: playedCardCount is incorrect. Expected: 199 Actual: 198
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 429 Actual: 430
ERROR 2: deckCount is incorrect. Expected: 204 Actual: 203
ERROR 3: playedCardCount is incorrect. Expected: 280 Actual: 279
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 502 Actual: 503
ERROR 2: deckCount is incorrect. Expected: 260 Actual: 259
ERROR 3: playedCardCount is incorrect. Expected: 470 Actual: 469
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 436 Actual: 437
ERROR 2: deckCount is incorrect. Expected: 334 Actual: 333
ERROR 3: playedCardCount is incorrect. Expected: 460 Actual: 459
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 25 Actual: 26
ERROR 2: deckCount is incorrect. Expected: 484 Actual: 483
ERROR 3: playedCardCount is incorrect. Expected: 415 Actual: 414
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 63 Actual: 64
ERROR 2: deckCount is incorrect. Expected: 303 Actual: 302
ERROR 3: playedCardCount is incorrect. Expected: 62 Actual: 61
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 197 Actual: 198
ERROR 2: deckCount is incorrect. Expected: 37 Actual: 36
ERROR 3: playedCardCount is incorrect. Expected: 402 Actual: 401
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 330 Actual: 331
ERROR 2: deckCount is incorrect. Expected: 180 Actual: 179
ERROR 3: playedCardCount is incorrect. Expected: 44 Actual: 43
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 52 Actual: 53
ERROR 2: deckCount is incorrect. Expected: 73 Actual: 72
ERROR 3: playedCardCount is incorrect. Expected: 479 Actual: 478
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 70 Actual: 71
ERROR 2: deckCount is incorrect. Expected: 96 Actual: 95
ERROR 3: playedCardCount is incorrect. Expected: 481 Actual: 480
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 493 Actual: 494
ERROR 2: deckCount is incorrect. Expected: 315 Actual: 314
ERROR 3: playedCardCount is incorrect. Expected: 50 Actual: 49
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 443 Actual: 444
ERROR 2: deckCount is incorrect. Expected: 415 Actual: 414
ERROR 3: playedCardCount is incorrect. Expected: 101 Actual: 100
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 427 Actual: 428
ERROR 2: deckCount is incorrect. Expected: 270 Actual: 269
ERROR 3: playedCardCount is incorrect. Expected: 115 Actual: 114
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 449 Actual: 450
ERROR 2: deckCount is incorrect. Expected: 408 Actual: 407
ERROR 3: playedCardCount is incorrect. Expected: 474 Actual: 473
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 59 Actual: 60
ERROR 2: deckCount is incorrect. Expected: 425 Actual: 424
ERROR 3: playedCardCount is incorrect. Expected: 330 Actual: 329
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 358 Actual: 359
ERROR 2: deckCount is incorrect. Expected: 94 Actual: 93
ERROR 3: playedCardCount is incorrect. Expected: 159 Actual: 158
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 498 Actual: 499
ERROR 2: deckCount is incorrect. Expected: 416 Actual: 415
ERROR 3: playedCardCount is incorrect. Expected: 220 Actual: 219
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 36 Actual: 37
ERROR 2: deckCount is incorrect. Expected: 431 Actual: 430
ERROR 3: playedCardCount is incorrect. Expected: 67 Actual: 66
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 427 Actual: 428
ERROR 2: deckCount is incorrect. Expected: 421 Actual: 420
ERROR 3: playedCardCount is incorrect. Expected: 357 Actual: 356
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 117 Actual: 118
ERROR 2: deckCount is incorrect. Expected: 487 Actual: 486
ERROR 3: playedCardCount is incorrect. Expected: 421 Actual: 420
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 278 Actual: 279
ERROR 2: deckCount is incorrect. Expected: 53 Actual: 52
ERROR 3: playedCardCount is incorrect. Expected: 38 Actual: 37
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 68 Actual: 69
ERROR 2: deckCount is incorrect. Expected: 192 Actual: 191
ERROR 3: playedCardCount is incorrect. Expected: 19 Actual: 18
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 135 Actual: 136
ERROR 2: deckCount is incorrect. Expected: 421 Actual: 420
ERROR 3: playedCardCount is incorrect. Expected: 420 Actual: 419
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 377 Actual: 378
ERROR 2: deckCount is incorrect. Expected: 273 Actual: 272
ERROR 3: playedCardCount is incorrect. Expected: 20 Actual: 19
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 497 Actual: 498
ERROR 2: deckCount is incorrect. Expected: 370 Actual: 369
ERROR 3: playedCardCount is incorrect. Expected: 120 Actual: 119
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 303 Actual: 304
ERROR 2: deckCount is incorrect. Expected: 387 Actual: 386
ERROR 3: playedCardCount is incorrect. Expected: 10 Actual: 9
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 319 Actual: 320
ERROR 2: deckCount is incorrect. Expected: 362 Actual: 361
ERROR 3: playedCardCount is incorrect. Expected: 165 Actual: 164
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 13 Actual: 14
ERROR 2: deckCount is incorrect. Expected: 187 Actual: 186
ERROR 3: playedCardCount is incorrect. Expected: 95 Actual: 94
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 22 Actual: 23
ERROR 2: deckCount is incorrect. Expected: 170 Actual: 169
ERROR 3: playedCardCount is incorrect. Expected: 428 Actual: 427
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 65 Actual: 66
ERROR 2: deckCount is incorrect. Expected: 110 Actual: 109
ERROR 3: playedCardCount is incorrect. Expected: 351 Actual: 350
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 160 Actual: 161
ERROR 2: deckCount is incorrect. Expected: 326 Actual: 325
ERROR 3: playedCardCount is incorrect. Expected: 91 Actual: 90
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 400 Actual: 401
ERROR 2: deckCount is incorrect. Expected: 209 Actual: 208
ERROR 3: playedCardCount is incorrect. Expected: 44 Actual: 43
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 475 Actual: 476
ERROR 2: deckCount is incorrect. Expected: 90 Actual: 89
ERROR 3: playedCardCount is incorrect. Expected: 36 Actual: 35
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 469 Actual: 470
ERROR 2: deckCount is incorrect. Expected: 346 Actual: 345
ERROR 3: playedCardCount is incorrect. Expected: 491 Actual: 490
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 58 Actual: 59
ERROR 2: deckCount is incorrect. Expected: 37 Actual: 36
ERROR 3: playedCardCount is incorrect. Expected: 53 Actual: 52
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 390 Actual: 391
ERROR 2: deckCount is incorrect. Expected: 14 Actual: 13
ERROR 3: playedCardCount is incorrect. Expected: 180 Actual: 179
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 97 Actual: 98
ERROR 2: deckCount is incorrect. Expected: 230 Actual: 229
ERROR 3: playedCardCount is incorrect. Expected: 151 Actual: 150
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 56 Actual: 57
ERROR 2: deckCount is incorrect. Expected: 340 Actual: 339
ERROR 3: playedCardCount is incorrect. Expected: 88 Actual: 87
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 502 Actual: 503
ERROR 2: deckCount is incorrect. Expected: 10 Actual: 9
ERROR 3: playedCardCount is incorrect. Expected: 452 Actual: 451
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 317 Actual: 318
ERROR 2: deckCount is incorrect. Expected: 227 Actual: 226
ERROR 3: playedCardCount is incorrect. Expected: 478 Actual: 477
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 474 Actual: 475
ERROR 2: deckCount is incorrect. Expected: 444 Actual: 443
ERROR 3: playedCardCount is incorrect. Expected: 148 Actual: 147
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 228 Actual: 229
ERROR 2: deckCount is incorrect. Expected: 260 Actual: 259
ERROR 3: playedCardCount is incorrect. Expected: 310 Actual: 309
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 447 Actual: 448
ERROR 2: deckCount is incorrect. Expected: 410 Actual: 409
ERROR 3: playedCardCount is incorrect. Expected: 263 Actual: 262
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 232 Actual: 233
ERROR 2: deckCount is incorrect. Expected: 339 Actual: 338
ERROR 3: playedCardCount is incorrect. Expected: 30 Actual: 29
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 455 Actual: 456
ERROR 2: deckCount is incorrect. Expected: 279 Actual: 278
ERROR 3: playedCardCount is incorrect. Expected: 215 Actual: 214
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 499 Actual: 500
ERROR 2: deckCount is incorrect. Expected: 112 Actual: 111
ERROR 3: playedCardCount is incorrect. Expected: 371 Actual: 370
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 113 Actual: 114
ERROR 2: deckCount is incorrect. Expected: 96 Actual: 95
ERROR 3: playedCardCount is incorrect. Expected: 481 Actual: 480
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 308 Actual: 309
ERROR 2: deckCount is incorrect. Expected: 27 Actual: 26
ERROR 3: playedCardCount is incorrect. Expected: 373 Actual: 372
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 275 Actual: 276
ERROR 2: deckCount is incorrect. Expected: 145 Actual: 144
ERROR 3: playedCardCount is incorrect. Expected: 432 Actual: 431
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 327 Actual: 328
ERROR 2: deckCount is incorrect. Expected: 208 Actual: 207
ERROR 3: playedCardCount is incorrect. Expected: 180 Actual: 179
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 18 Actual: 19
ERROR 2: deckCount is incorrect. Expected: 488 Actual: 487
ERROR 3: playedCardCount is incorrect. Expected: 253 Actual: 252
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 295 Actual: 296
ERROR 2: deckCount is incorrect. Expected: 240 Actual: 239
ERROR 3: playedCardCount is incorrect. Expected: 190 Actual: 189
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 186 Actual: 187
ERROR 2: deckCount is incorrect. Expected: 234 Actual: 233
ERROR 3: playedCardCount is incorrect. Expected: 230 Actual: 229
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 182 Actual: 183
ERROR 2: deckCount is incorrect. Expected: 223 Actual: 222
ERROR 3: playedCardCount is incorrect. Expected: 431 Actual: 430
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 296 Actual: 297
ERROR 2: deckCount is incorrect. Expected: 310 Actual: 309
ERROR 3: playedCardCount is incorrect. Expected: 326 Actual: 325
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 410 Actual: 411
ERROR 2: deckCount is incorrect. Expected: 455 Actual: 454
ERROR 3: playedCardCount is incorrect. Expected: 268 Actual: 267
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 84 Actual: 85
ERROR 2: deckCount is incorrect. Expected: 261 Actual: 260
ERROR 3: playedCardCount is incorrect. Expected: 405 Actual: 404
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 280 Actual: 281
ERROR 2: deckCount is incorrect. Expected: 215 Actual: 214
ERROR 3: playedCardCount is incorrect. Expected: 450 Actual: 449
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 359 Actual: 360
ERROR 2: deckCount is incorrect. Expected: 404 Actual: 403
ERROR 3: playedCardCount is incorrect. Expected: 391 Actual: 390
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 39 Actual: 40
ERROR 2: deckCount is incorrect. Expected: 97 Actual: 96
ERROR 3: playedCardCount is incorrect. Expected: 140 Actual: 139
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 292 Actual: 293
ERROR 2: deckCount is incorrect. Expected: 11 Actual: 10
ERROR 3: playedCardCount is incorrect. Expected: 64 Actual: 63
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 119 Actual: 120
ERROR 2: deckCount is incorrect. Expected: 68 Actual: 67
ERROR 3: playedCardCount is incorrect. Expected: 132 Actual: 131
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 316 Actual: 317
ERROR 2: deckCount is incorrect. Expected: 251 Actual: 250
ERROR 3: playedCardCount is incorrect. Expected: 225 Actual: 224
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 135 Actual: 136
ERROR 2: deckCount is incorrect. Expected: 427 Actual: 426
ERROR 3: playedCardCount is incorrect. Expected: 435 Actual: 434
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 55 Actual: 56
ERROR 2: deckCount is incorrect. Expected: 259 Actual: 258
ERROR 3: playedCardCount is incorrect. Expected: 418 Actual: 417
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 382 Actual: 383
ERROR 2: deckCount is incorrect. Expected: 200 Actual: 199
ERROR 3: playedCardCount is incorrect. Expected: 52 Actual: 51
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 378 Actual: 379
ERROR 2: deckCount is incorrect. Expected: 296 Actual: 295
ERROR 3: playedCardCount is incorrect. Expected: 480 Actual: 479
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 93 Actual: 94
ERROR 2: deckCount is incorrect. Expected: 304 Actual: 303
ERROR 3: playedCardCount is incorrect. Expected: 389 Actual: 388
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 207 Actual: 208
ERROR 2: deckCount is incorrect. Expected: 489 Actual: 488
ERROR 3: playedCardCount is incorrect. Expected: 268 Actual: 267
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 374 Actual: 375
ERROR 2: deckCount is incorrect. Expected: 179 Actual: 178
ERROR 3: playedCardCount is incorrect. Expected: 369 Actual: 368
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 239 Actual: 240
ERROR 2: deckCount is incorrect. Expected: 373 Actual: 372
ERROR 3: playedCardCount is incorrect. Expected: 500 Actual: 499
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 9 Actual: 10
ERROR 2: deckCount is incorrect. Expected: 271 Actual: 270
ERROR 3: playedCardCount is incorrect. Expected: 71 Actual: 70
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 270 Actual: 271
ERROR 2: deckCount is incorrect. Expected: 463 Actual: 462
ERROR 3: playedCardCount is incorrect. Expected: 458 Actual: 457
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 173 Actual: 174
ERROR 2: deckCount is incorrect. Expected: 165 Actual: 164
ERROR 3: playedCardCount is incorrect. Expected: 410 Actual: 409
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 429 Actual: 430
ERROR 2: deckCount is incorrect. Expected: 228 Actual: 227
ERROR 3: playedCardCount is incorrect. Expected: 163 Actual: 162
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 212 Actual: 213
ERROR 2: deckCount is incorrect. Expected: 465 Actual: 464
ERROR 3: playedCardCount is incorrect. Expected: 70 Actual: 69
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 290 Actual: 291
ERROR 2: deckCount is incorrect. Expected: 94 Actual: 93
ERROR 3: playedCardCount is incorrect. Expected: 387 Actual: 386
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 389 Actual: 390
ERROR 2: deckCount is incorrect. Expected: 240 Actual: 239
ERROR 3: playedCardCount is incorrect. Expected: 124 Actual: 123
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 282 Actual: 283
ERROR 2: deckCount is incorrect. Expected: 239 Actual: 238
ERROR 3: playedCardCount is incorrect. Expected: 17 Actual: 16
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 257 Actual: 258
ERROR 2: deckCount is incorrect. Expected: 161 Actual: 160
ERROR 3: playedCardCount is incorrect. Expected: 15 Actual: 14
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 164 Actual: 165
ERROR 2: deckCount is incorrect. Expected: 390 Actual: 389
ERROR 3: playedCardCount is incorrect. Expected: 368 Actual: 367
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 194 Actual: 195
ERROR 2: deckCount is incorrect. Expected: 124 Actual: 123
ERROR 3: playedCardCount is incorrect. Expected: 276 Actual: 275
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 45 Actual: 46
ERROR 2: deckCount is incorrect. Expected: 155 Actual: 154
ERROR 3: playedCardCount is incorrect. Expected: 484 Actual: 483
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 221 Actual: 222
ERROR 2: deckCount is incorrect. Expected: 33 Actual: 32
ERROR 3: playedCardCount is incorrect. Expected: 207 Actual: 206
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 381 Actual: 382
ERROR 2: deckCount is incorrect. Expected: 334 Actual: 333
ERROR 3: playedCardCount is incorrect. Expected: 16 Actual: 15
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 40 Actual: 41
ERROR 2: deckCount is incorrect. Expected: 201 Actual: 200
ERROR 3: playedCardCount is incorrect. Expected: 90 Actual: 89
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 393 Actual: 394
ERROR 2: deckCount is incorrect. Expected: 72 Actual: 71
ERROR 3: playedCardCount is incorrect. Expected: 351 Actual: 350
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 227 Actual: 228
ERROR 2: deckCount is incorrect. Expected: 178 Actual: 177
ERROR 3: playedCardCount is incorrect. Expected: 342 Actual: 341
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 201 Actual: 202
ERROR 2: deckCount is incorrect. Expected: 81 Actual: 80
ERROR 3: playedCardCount is incorrect. Expected: 218 Actual: 217
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 103 Actual: 104
ERROR 2: deckCount is incorrect. Expected: 451 Actual: 450
ERROR 3: playedCardCount is incorrect. Expected: 139 Actual: 138
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 287 Actual: 288
ERROR 2: deckCount is incorrect. Expected: 466 Actual: 465
ERROR 3: playedCardCount is incorrect. Expected: 183 Actual: 182
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 307 Actual: 308
ERROR 2: deckCount is incorrect. Expected: 242 Actual: 241
ERROR 3: playedCardCount is incorrect. Expected: 135 Actual: 134
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 497 Actual: 498
ERROR 2: deckCount is incorrect. Expected: 334 Actual: 333
ERROR 3: playedCardCount is incorrect. Expected: 151 Actual: 150
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 103 Actual: 104
ERROR 2: deckCount is incorrect. Expected: 440 Actual: 439
ERROR 3: playedCardCount is incorrect. Expected: 314 Actual: 313
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 365 Actual: 366
ERROR 2: deckCount is incorrect. Expected: 100 Actual: 99
ERROR 3: playedCardCount is incorrect. Expected: 402 Actual: 401
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 299 Actual: 300
ERROR 2: deckCount is incorrect. Expected: 35 Actual: 34
ERROR 3: playedCardCount is incorrect. Expected: 449 Actual: 448
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 150 Actual: 151
ERROR 2: deckCount is incorrect. Expected: 228 Actual: 227
ERROR 3: playedCardCount is incorrect. Expected: 233 Actual: 232
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 32 Actual: 33
ERROR 2: deckCount is incorrect. Expected: 487 Actual: 486
ERROR 3: playedCardCount is incorrect. Expected: 271 Actual: 270
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 264 Actual: 265
ERROR 2: deckCount is incorrect. Expected: 245 Actual: 244
ERROR 3: playedCardCount is incorrect. Expected: 385 Actual: 384
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 219 Actual: 220
ERROR 2: deckCount is incorrect. Expected: 29 Actual: 28
ERROR 3: playedCardCount is incorrect. Expected: 287 Actual: 286
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 152 Actual: 153
ERROR 2: deckCount is incorrect. Expected: 235 Actual: 234
ERROR 3: playedCardCount is incorrect. Expected: 167 Actual: 166
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 415 Actual: 416
ERROR 2: deckCount is incorrect. Expected: 321 Actual: 320
ERROR 3: playedCardCount is incorrect. Expected: 179 Actual: 178
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 245 Actual: 246
ERROR 2: deckCount is incorrect. Expected: 153 Actual: 152
ERROR 3: playedCardCount is incorrect. Expected: 282 Actual: 281
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 222 Actual: 223
ERROR 2: deckCount is incorrect. Expected: 394 Actual: 393
ERROR 3: playedCardCount is incorrect. Expected: 407 Actual: 406
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 311 Actual: 312
ERROR 2: deckCount is incorrect. Expected: 135 Actual: 134
ERROR 3: playedCardCount is incorrect. Expected: 469 Actual: 468
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 372 Actual: 373
ERROR 2: deckCount is incorrect. Expected: 243 Actual: 242
ERROR 3: playedCardCount is incorrect. Expected: 119 Actual: 118
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 309 Actual: 310
ERROR 2: deckCount is incorrect. Expected: 201 Actual: 200
ERROR 3: playedCardCount is incorrect. Expected: 402 Actual: 401
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 401 Actual: 402
ERROR 2: deckCount is incorrect. Expected: 334 Actual: 333
ERROR 3: playedCardCount is incorrect. Expected: 492 Actual: 491
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 391 Actual: 392
ERROR 2: deckCount is incorrect. Expected: 44 Actual: 43
ERROR 3: playedCardCount is incorrect. Expected: 126 Actual: 125
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 184 Actual: 185
ERROR 2: deckCount is incorrect. Expected: 379 Actual: 378
ERROR 3: playedCardCount is incorrect. Expected: 94 Actual: 93
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 136 Actual: 137
ERROR 2: deckCount is incorrect. Expected: 108 Actual: 107
ERROR 3: playedCardCount is incorrect. Expected: 461 Actual: 460
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 413 Actual: 414
ERROR 2: deckCount is incorrect. Expected: 410 Actual: 409
ERROR 3: playedCardCount is incorrect. Expected: 269 Actual: 268
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 356 Actual: 357
ERROR 2: deckCount is incorrect. Expected: 338 Actual: 337
ERROR 3: playedCardCount is incorrect. Expected: 24 Actual: 23
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 65 Actual: 66
ERROR 2: deckCount is incorrect. Expected: 294 Actual: 293
ERROR 3: playedCardCount is incorrect. Expected: 453 Actual: 452
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 89 Actual: 90
ERROR 2: deckCount is incorrect. Expected: 149 Actual: 148
ERROR 3: playedCardCount is incorrect. Expected: 448 Actual: 447
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 282 Actual: 283
ERROR 2: deckCount is incorrect. Expected: 382 Actual: 381
ERROR 3: playedCardCount is incorrect. Expected: 11 Actual: 10
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 27 Actual: 28
ERROR 2: deckCount is incorrect. Expected: 453 Actual: 452
ERROR 3: playedCardCount is incorrect. Expected: 202 Actual: 201
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 244 Actual: 245
ERROR 2: deckCount is incorrect. Expected: 197 Actual: 196
ERROR 3: playedCardCount is incorrect. Expected: 316 Actual: 315
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 213 Actual: 214
ERROR 2: deckCount is incorrect. Expected: 85 Actual: 84
ERROR 3: playedCardCount is incorrect. Expected: 496 Actual: 495
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 441 Actual: 442
ERROR 2: deckCount is incorrect. Expected: 393 Actual: 392
ERROR 3: playedCardCount is incorrect. Expected: 496 Actual: 495
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 113 Actual: 114
ERROR 2: deckCount is incorrect. Expected: 42 Actual: 41
ERROR 3: playedCardCount is incorrect. Expected: 451 Actual: 450
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 38 Actual: 39
ERROR 2: deckCount is incorrect. Expected: 131 Actual: 130
ERROR 3: playedCardCount is incorrect. Expected: 239 Actual: 238
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 6 Actual: 7
ERROR 2: deckCount is incorrect. Expected: 176 Actual: 175
ERROR 3: playedCardCount is incorrect. Expected: 324 Actual: 323
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 122 Actual: 123
ERROR 2: deckCount is incorrect. Expected: 357 Actual: 356
ERROR 3: playedCardCount is incorrect. Expected: 470 Actual: 469
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 433 Actual: 434
ERROR 2: deckCount is incorrect. Expected: 83 Actual: 82
ERROR 3: playedCardCount is incorrect. Expected: 274 Actual: 273
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 265 Actual: 266
ERROR 2: deckCount is incorrect. Expected: 285 Actual: 284
ERROR 3: playedCardCount is incorrect. Expected: 193 Actual: 192
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 468 Actual: 469
ERROR 2: deckCount is incorrect. Expected: 179 Actual: 178
ERROR 3: playedCardCount is incorrect. Expected: 37 Actual: 36
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 194 Actual: 195
ERROR 2: deckCount is incorrect. Expected: 25 Actual: 24
ERROR 3: playedCardCount is incorrect. Expected: 104 Actual: 103
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 206 Actual: 207
ERROR 2: deckCount is incorrect. Expected: 197 Actual: 196
ERROR 3: playedCardCount is incorrect. Expected: 409 Actual: 408
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 331 Actual: 332
ERROR 2: deckCount is incorrect. Expected: 36 Actual: 35
ERROR 3: playedCardCount is incorrect. Expected: 153 Actual: 152
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 336 Actual: 337
ERROR 2: deckCount is incorrect. Expected: 79 Actual: 78
ERROR 3: playedCardCount is incorrect. Expected: 188 Actual: 187
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 428 Actual: 429
ERROR 2: deckCount is incorrect. Expected: 69 Actual: 68
ERROR 3: playedCardCount is incorrect. Expected: 143 Actual: 142
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 384 Actual: 385
ERROR 2: deckCount is incorrect. Expected: 65 Actual: 64
ERROR 3: playedCardCount is incorrect. Expected: 349 Actual: 348
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 371 Actual: 372
ERROR 2: deckCount is incorrect. Expected: 71 Actual: 70
ERROR 3: playedCardCount is incorrect. Expected: 23 Actual: 22
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 84 Actual: 85
ERROR 2: deckCount is incorrect. Expected: 192 Actual: 191
ERROR 3: playedCardCount is incorrect. Expected: 96 Actual: 95
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 495 Actual: 496
ERROR 2: deckCount is incorrect. Expected: 406 Actual: 405
ERROR 3: playedCardCount is incorrect. Expected: 465 Actual: 464
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 134 Actual: 135
ERROR 2: deckCount is incorrect. Expected: 430 Actual: 429
ERROR 3: playedCardCount is incorrect. Expected: 71 Actual: 70
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 389 Actual: 390
ERROR 2: deckCount is incorrect. Expected: 461 Actual: 460
ERROR 3: playedCardCount is incorrect. Expected: 352 Actual: 351
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 48 Actual: 49
ERROR 2: deckCount is incorrect. Expected: 424 Actual: 423
ERROR 3: playedCardCount is incorrect. Expected: 206 Actual: 205
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 37 Actual: 38
ERROR 2: deckCount is incorrect. Expected: 130 Actual: 129
ERROR 3: playedCardCount is incorrect. Expected: 97 Actual: 96
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 153 Actual: 154
ERROR 2: deckCount is incorrect. Expected: 275 Actual: 274
ERROR 3: playedCardCount is incorrect. Expected: 183 Actual: 182
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 179 Actual: 180
ERROR 2: deckCount is incorrect. Expected: 496 Actual: 495
ERROR 3: playedCardCount is incorrect. Expected: 222 Actual: 221
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 211 Actual: 212
ERROR 2: deckCount is incorrect. Expected: 388 Actual: 387
ERROR 3: playedCardCount is incorrect. Expected: 488 Actual: 487
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 11 Actual: 12
ERROR 2: deckCount is incorrect. Expected: 448 Actual: 447
ERROR 3: playedCardCount is incorrect. Expected: 353 Actual: 352
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 355 Actual: 356
ERROR 2: deckCount is incorrect. Expected: 477 Actual: 476
ERROR 3: playedCardCount is incorrect. Expected: 254 Actual: 253
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 153 Actual: 154
ERROR 2: deckCount is incorrect. Expected: 356 Actual: 355
ERROR 3: playedCardCount is incorrect. Expected: 283 Actual: 282
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 298 Actual: 299
ERROR 2: deckCount is incorrect. Expected: 287 Actual: 286
ERROR 3: playedCardCount is incorrect. Expected: 122 Actual: 121
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 288 Actual: 289
ERROR 2: deckCount is incorrect. Expected: 212 Actual: 211
ERROR 3: playedCardCount is incorrect. Expected: 57 Actual: 56
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 280 Actual: 281
ERROR 2: deckCount is incorrect. Expected: 398 Actual: 397
ERROR 3: playedCardCount is incorrect. Expected: 226 Actual: 225
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 473 Actual: 474
ERROR 2: deckCount is incorrect. Expected: 44 Actual: 43
ERROR 3: playedCardCount is incorrect. Expected: 235 Actual: 234
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 373 Actual: 374
ERROR 2: deckCount is incorrect. Expected: 427 Actual: 426
ERROR 3: playedCardCount is incorrect. Expected: 414 Actual: 413
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 442 Actual: 443
ERROR 2: deckCount is incorrect. Expected: 113 Actual: 112
ERROR 3: playedCardCount is incorrect. Expected: 387 Actual: 386
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 228 Actual: 229
ERROR 2: deckCount is incorrect. Expected: 481 Actual: 480
ERROR 3: playedCardCount is incorrect. Expected: 271 Actual: 270
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 372 Actual: 373
ERROR 2: deckCount is incorrect. Expected: 324 Actual: 323
ERROR 3: playedCardCount is incorrect. Expected: 133 Actual: 132
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 6 Actual: 7
ERROR 2: deckCount is incorrect. Expected: 323 Actual: 322
ERROR 3: playedCardCount is incorrect. Expected: 203 Actual: 202
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 151 Actual: 152
ERROR 2: deckCount is incorrect. Expected: 491 Actual: 490
ERROR 3: playedCardCount is incorrect. Expected: 178 Actual: 177
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 50 Actual: 51
ERROR 2: deckCount is incorrect. Expected: 88 Actual: 87
ERROR 3: playedCardCount is incorrect. Expected: 39 Actual: 38
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 376 Actual: 377
ERROR 2: deckCount is incorrect. Expected: 321 Actual: 320
ERROR 3: playedCardCount is incorrect. Expected: 289 Actual: 288
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 201 Actual: 202
ERROR 2: deckCount is incorrect. Expected: 218 Actual: 217
ERROR 3: playedCardCount is incorrect. Expected: 32 Actual: 31
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 169 Actual: 170
ERROR 2: deckCount is incorrect. Expected: 356 Actual: 355
ERROR 3: playedCardCount is incorrect. Expected: 9 Actual: 8
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 437 Actual: 438
ERROR 2: deckCount is incorrect. Expected: 221 Actual: 220
ERROR 3: playedCardCount is incorrect. Expected: 97 Actual: 96
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 92 Actual: 93
ERROR 2: deckCount is incorrect. Expected: 17 Actual: 16
ERROR 3: playedCardCount is incorrect. Expected: 393 Actual: 392
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 315 Actual: 316
ERROR 2: deckCount is incorrect. Expected: 315 Actual: 314
ERROR 3: playedCardCount is incorrect. Expected: 46 Actual: 45
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 346 Actual: 347
ERROR 2: deckCount is incorrect. Expected: 51 Actual: 50
ERROR 3: playedCardCount is incorrect. Expected: 261 Actual: 260
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 349 Actual: 350
ERROR 2: deckCount is incorrect. Expected: 377 Actual: 376
ERROR 3: playedCardCount is incorrect. Expected: 385 Actual: 384
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 223 Actual: 224
ERROR 2: deckCount is incorrect. Expected: 169 Actual: 168
ERROR 3: playedCardCount is incorrect. Expected: 68 Actual: 67
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 203 Actual: 204
ERROR 2: deckCount is incorrect. Expected: 89 Actual: 88
ERROR 3: playedCardCount is incorrect. Expected: 276 Actual: 275
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 194 Actual: 195
ERROR 2: deckCount is incorrect. Expected: 444 Actual: 443
ERROR 3: playedCardCount is incorrect. Expected: 209 Actual: 208
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 46 Actual: 47
ERROR 2: deckCount is incorrect. Expected: 224 Actual: 223
ERROR 3: playedCardCount is incorrect. Expected: 25 Actual: 24
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 230 Actual: 231
ERROR 2: deckCount is incorrect. Expected: 434 Actual: 433
ERROR 3: playedCardCount is incorrect. Expected: 18 Actual: 17
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 107 Actual: 108
ERROR 2: deckCount is incorrect. Expected: 71 Actual: 70
ERROR 3: playedCardCount is incorrect. Expected: 187 Actual: 186
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 174 Actual: 175
ERROR 2: deckCount is incorrect. Expected: 287 Actual: 286
ERROR 3: playedCardCount is incorrect. Expected: 196 Actual: 195
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 229 Actual: 230
ERROR 2: deckCount is incorrect. Expected: 100 Actual: 99
ERROR 3: playedCardCount is incorrect. Expected: 44 Actual: 43
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 481 Actual: 482
ERROR 2: deckCount is incorrect. Expected: 381 Actual: 380
ERROR 3: playedCardCount is incorrect. Expected: 290 Actual: 289
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 195 Actual: 196
ERROR 2: deckCount is incorrect. Expected: 313 Actual: 312
ERROR 3: playedCardCount is incorrect. Expected: 262 Actual: 261
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 433 Actual: 434
ERROR 2: deckCount is incorrect. Expected: 230 Actual: 229
ERROR 3: playedCardCount is incorrect. Expected: 142 Actual: 141
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 290 Actual: 291
ERROR 2: deckCount is incorrect. Expected: 201 Actual: 200
ERROR 3: playedCardCount is incorrect. Expected: 76 Actual: 75
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 345 Actual: 346
ERROR 2: deckCount is incorrect. Expected: 21 Actual: 20
ERROR 3: playedCardCount is incorrect. Expected: 185 Actual: 184
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 172 Actual: 173
ERROR 2: deckCount is incorrect. Expected: 168 Actual: 167
ERROR 3: playedCardCount is incorrect. Expected: 311 Actual: 310
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 85 Actual: 86
ERROR 2: deckCount is incorrect. Expected: 249 Actual: 248
ERROR 3: playedCardCount is incorrect. Expected: 454 Actual: 453
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 365 Actual: 366
ERROR 2: deckCount is incorrect. Expected: 239 Actual: 238
ERROR 3: playedCardCount is incorrect. Expected: 177 Actual: 176
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 301 Actual: 302
ERROR 2: deckCount is incorrect. Expected: 353 Actual: 352
ERROR 3: playedCardCount is incorrect. Expected: 315 Actual: 314
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 492 Actual: 493
ERROR 2: deckCount is incorrect. Expected: 340 Actual: 339
ERROR 3: playedCardCount is incorrect. Expected: 44 Actual: 43
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 215 Actual: 216
ERROR 2: deckCount is incorrect. Expected: 191 Actual: 190
ERROR 3: playedCardCount is incorrect. Expected: 299 Actual: 298
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 36 Actual: 37
ERROR 2: deckCount is incorrect. Expected: 228 Actual: 227
ERROR 3: playedCardCount is incorrect. Expected: 137 Actual: 136
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 18 Actual: 19
ERROR 2: deckCount is incorrect. Expected: 403 Actual: 402
ERROR 3: playedCardCount is incorrect. Expected: 32 Actual: 31
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 55 Actual: 56
ERROR 2: deckCount is incorrect. Expected: 427 Actual: 426
ERROR 3: playedCardCount is incorrect. Expected: 205 Actual: 204
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 42 Actual: 43
ERROR 2: deckCount is incorrect. Expected: 456 Actual: 455
ERROR 3: playedCardCount is incorrect. Expected: 380 Actual: 379
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 261 Actual: 262
ERROR 2: deckCount is incorrect. Expected: 355 Actual: 354
ERROR 3: playedCardCount is incorrect. Expected: 403 Actual: 402
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 326 Actual: 327
ERROR 2: deckCount is incorrect. Expected: 411 Actual: 410
ERROR 3: playedCardCount is incorrect. Expected: 273 Actual: 272
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 77 Actual: 78
ERROR 2: deckCount is incorrect. Expected: 298 Actual: 297
ERROR 3: playedCardCount is incorrect. Expected: 229 Actual: 228
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 44 Actual: 45
ERROR 2: deckCount is incorrect. Expected: 40 Actual: 39
ERROR 3: playedCardCount is incorrect. Expected: 383 Actual: 382
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 25 Actual: 26
ERROR 2: deckCount is incorrect. Expected: 11 Actual: 10
ERROR 3: playedCardCount is incorrect. Expected: 417 Actual: 416
Checking status before player buy...
ERROR 1: handCount is incorrect. Expected: 100 Actual: 101
ERROR 2: deckCount is incorrect. Expected: 217 Actual: 216
ERROR 3: playedCardCount is incorrect. Expected: 155 Actual: 154
Play Smithy Tests are concluded.

----------------- Testing card: Adventurer ----------------
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 527 After: 487
ERROR 3: Not enough treasure cards added to hand. Before: 4229216 After: 2
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 154 After: 144
ERROR 3: Not enough treasure cards added to hand. Before: 4229262 After: 50
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 344 After: 331
ERROR 3: Not enough treasure cards added to hand. Before: 4229273 After: 63
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 655 After: 629
ERROR 3: Not enough treasure cards added to hand. Before: 4229303 After: 95
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 554 After: 550
ERROR 3: Not enough treasure cards added to hand. Before: 4229355 After: 149
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 693 After: 686
ERROR 3: Not enough treasure cards added to hand. Before: 4229379 After: 175
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 298 After: 287
ERROR 3: Not enough treasure cards added to hand. Before: 4229424 After: 222
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 774 After: 762
ERROR 3: Not enough treasure cards added to hand. Before: 4229431 After: 231
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 652 After: 650
ERROR 3: Not enough treasure cards added to hand. Before: 4229442 After: 244
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 298 After: 278
ERROR 3: Not enough treasure cards added to hand. Before: 4229460 After: 264
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 631 After: 630
ERROR 3: Not enough treasure cards added to hand. Before: 4229470 After: 276
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 472 After: 465
ERROR 3: Not enough treasure cards added to hand. Before: 4229521 After: 329
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 434 After: 424
ERROR 3: Not enough treasure cards added to hand. Before: 4229521 After: 331
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 741 After: 736
ERROR 3: Not enough treasure cards added to hand. Before: 4229582 After: 394
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 619 After: 594
ERROR 3: Not enough treasure cards added to hand. Before: 4229617 After: 431
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 168 After: 164
ERROR 3: Not enough treasure cards added to hand. Before: 4229654 After: 470
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 560 After: 537
ERROR 3: Not enough treasure cards added to hand. Before: 4229670 After: 488
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 139 After: 136
ERROR 3: Not enough treasure cards added to hand. Before: 4229721 After: 541
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 272 After: 257
ERROR 3: Not enough treasure cards added to hand. Before: 4229759 After: 581
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 118 After: 111
ERROR 3: Not enough treasure cards added to hand. Before: 4229766 After: 589
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 430 After: 429
ERROR 3: Not enough treasure cards added to hand. Before: 4229774 After: 599
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 788 After: 762
ERROR 3: Not enough treasure cards added to hand. Before: 4229816 After: 643
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 824 After: 808
ERROR 3: Not enough treasure cards added to hand. Before: 4229843 After: 672
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 346 After: 322
ERROR 3: Not enough treasure cards added to hand. Before: 4229882 After: 712
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 801 After: 768
ERROR 3: Not enough treasure cards added to hand. Before: 4229920 After: 751
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 338 After: 325
ERROR 3: Not enough treasure cards added to hand. Before: 4229940 After: 773
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 583 After: 563
ERROR 3: Not enough treasure cards added to hand. Before: 4229975 After: 810
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 495 After: 488
ERROR 3: Not enough treasure cards added to hand. Before: 4229997 After: 833
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 297 After: 246
ERROR 3: Not enough treasure cards added to hand. Before: 4230045 After: 883
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 461 After: 455
ERROR 3: Not enough treasure cards added to hand. Before: 4230047 After: 886
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 505 After: 496
ERROR 3: Not enough treasure cards added to hand. Before: 4230089 After: 929
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 86 After: 70
ERROR 3: Not enough treasure cards added to hand. Before: 4230138 After: 980
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 472 After: 445
ERROR 3: Not enough treasure cards added to hand. Before: 4230139 After: 983
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 176 After: 165
ERROR 3: Not enough treasure cards added to hand. Before: 4230170 After: 1016
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 454 After: 453
ERROR 3: Not enough treasure cards added to hand. Before: 4230219 After: 1066
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 564 After: 544
ERROR 3: Not enough treasure cards added to hand. Before: 4230223 After: 1072
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 358 After: 340
ERROR 3: Not enough treasure cards added to hand. Before: 4230251 After: 1101
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 462 After: 458
ERROR 3: Not enough treasure cards added to hand. Before: 4230315 After: 1167
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 176 After: 158
ERROR 3: Not enough treasure cards added to hand. Before: 4230380 After: 1234
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 842 After: 833
ERROR 3: Not enough treasure cards added to hand. Before: 4230438 After: 1293
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 688 After: 653
ERROR 3: Not enough treasure cards added to hand. Before: 4230458 After: 1315
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 633 After: 616
ERROR 3: Not enough treasure cards added to hand. Before: 4230480 After: 1339
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 405 After: 394
ERROR 3: Not enough treasure cards added to hand. Before: 4230494 After: 1355
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 953 After: 940
ERROR 3: Not enough treasure cards added to hand. Before: 4230531 After: 1394
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 474 After: 461
ERROR 3: Not enough treasure cards added to hand. Before: 4230554 After: 1418
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 428 After: 408
ERROR 3: Not enough treasure cards added to hand. Before: 4230610 After: 1476
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 209 After: 206
ERROR 3: Not enough treasure cards added to hand. Before: 4230641 After: 1509
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 556 After: 546
ERROR 3: Not enough treasure cards added to hand. Before: 4230641 After: 1511
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 899 After: 893
ERROR 3: Not enough treasure cards added to hand. Before: 4230703 After: 1574
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 335 After: 330
ERROR 3: Not enough treasure cards added to hand. Before: 4230713 After: 1586
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 166 After: 123
ERROR 3: Not enough treasure cards added to hand. Before: 4230736 After: 1611
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 423 After: 412
ERROR 3: Not enough treasure cards added to hand. Before: 4230755 After: 1632
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 294 After: 289
ERROR 3: Not enough treasure cards added to hand. Before: 4230771 After: 1649
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 685 After: 681
ERROR 3: Not enough treasure cards added to hand. Before: 4230820 After: 1700
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 834 After: 813
ERROR 3: Not enough treasure cards added to hand. Before: 4230840 After: 1721
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 814 After: 779
ERROR 3: Not enough treasure cards added to hand. Before: 4230868 After: 1751
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 527 After: 524
ERROR 3: Not enough treasure cards added to hand. Before: 4230903 After: 1788
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 638 After: 608
ERROR 3: Not enough treasure cards added to hand. Before: 4230955 After: 1842
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 117 After: 107
ERROR 3: Not enough treasure cards added to hand. Before: 4230989 After: 1878
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 510 After: 475
ERROR 3: Not enough treasure cards added to hand. Before: 4231036 After: 1927
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 759 After: 754
ERROR 3: Not enough treasure cards added to hand. Before: 4231045 After: 1938
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 350 After: 341
ERROR 3: Not enough treasure cards added to hand. Before: 4231082 After: 1976
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 307 After: 280
ERROR 3: Not enough treasure cards added to hand. Before: 4231104 After: 2000
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 560 After: 550
ERROR 3: Not enough treasure cards added to hand. Before: 4231110 After: 2008
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 466 After: 451
ERROR 3: Not enough treasure cards added to hand. Before: 4231117 After: 2017
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 492 After: 485
ERROR 3: Not enough treasure cards added to hand. Before: 4231121 After: 2023
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 194 After: 187
ERROR 3: Not enough treasure cards added to hand. Before: 4231127 After: 2031
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 623 After: 605
ERROR 3: Not enough treasure cards added to hand. Before: 4231157 After: 2063
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 293 After: 284
ERROR 3: Not enough treasure cards added to hand. Before: 4231194 After: 2102
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 844 After: 840
ERROR 3: Not enough treasure cards added to hand. Before: 4231261 After: 2170
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 491 After: 471
ERROR 3: Not enough treasure cards added to hand. Before: 4231282 After: 2193
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 375 After: 369
ERROR 3: Not enough treasure cards added to hand. Before: 4231296 After: 2209
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 525 After: 504
ERROR 3: Not enough treasure cards added to hand. Before: 4231345 After: 2260
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 422 After: 413
ERROR 3: Not enough treasure cards added to hand. Before: 4231369 After: 2286
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 477 After: 443
ERROR 3: Not enough treasure cards added to hand. Before: 4231369 After: 2288
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 621 After: 618
ERROR 3: Not enough treasure cards added to hand. Before: 4231414 After: 2335
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 430 After: 422
ERROR 3: Not enough treasure cards added to hand. Before: 4231454 After: 2377
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 677 After: 627
ERROR 3: Not enough treasure cards added to hand. Before: 4231492 After: 2417
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 448 After: 435
ERROR 3: Not enough treasure cards added to hand. Before: 4231541 After: 2467
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 919 After: 911
ERROR 3: Not enough treasure cards added to hand. Before: 4231542 After: 2470
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 589 After: 558
ERROR 3: Not enough treasure cards added to hand. Before: 4231555 After: 2485
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 238 After: 231
ERROR 3: Not enough treasure cards added to hand. Before: 4231600 After: 2532
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 701 After: 695
ERROR 3: Not enough treasure cards added to hand. Before: 4231639 After: 2571
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 914 After: 909
ERROR 3: Not enough treasure cards added to hand. Before: 4231695 After: 2628
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 531 After: 527
ERROR 3: Not enough treasure cards added to hand. Before: 4231737 After: 2671
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 820 After: 798
ERROR 3: Not enough treasure cards added to hand. Before: 4231777 After: 2713
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 525 After: 493
ERROR 3: Not enough treasure cards added to hand. Before: 4231802 After: 2740
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 390 After: 373
ERROR 3: Not enough treasure cards added to hand. Before: 4231820 After: 2760
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 384 After: 372
ERROR 3: Not enough treasure cards added to hand. Before: 4231822 After: 2763
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 519 After: 501
ERROR 3: Not enough treasure cards added to hand. Before: 4231872 After: 2815
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 463 After: 429
ERROR 3: Not enough treasure cards added to hand. Before: 4231925 After: 2870
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 125 After: 99
ERROR 3: Not enough treasure cards added to hand. Before: 4231976 After: 2923
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 796 After: 773
ERROR 3: Not enough treasure cards added to hand. Before: 4232012 After: 2961
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 547 After: 538
ERROR 3: Not enough treasure cards added to hand. Before: 4232017 After: 2968
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 894 After: 883
ERROR 3: Not enough treasure cards added to hand. Before: 4232055 After: 3008
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 200 After: 188
ERROR 3: Not enough treasure cards added to hand. Before: 4232097 After: 3052
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 172 After: 141
ERROR 3: Not enough treasure cards added to hand. Before: 4232136 After: 3092
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 159 After: 138
ERROR 3: Not enough treasure cards added to hand. Before: 4232145 After: 3103
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 950 After: 941
ERROR 3: Not enough treasure cards added to hand. Before: 4232169 After: 3129
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 599 After: 585
ERROR 3: Not enough treasure cards added to hand. Before: 4232213 After: 3175
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 465 After: 454
ERROR 3: Not enough treasure cards added to hand. Before: 4232246 After: 3208
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 132 After: 112
ERROR 3: Not enough treasure cards added to hand. Before: 4232254 After: 3218
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 453 After: 430
ERROR 3: Not enough treasure cards added to hand. Before: 4232297 After: 3263
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 501 After: 477
ERROR 3: Not enough treasure cards added to hand. Before: 4232312 After: 3280
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 665 After: 629
ERROR 3: Not enough treasure cards added to hand. Before: 4232327 After: 3297
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 323 After: 314
ERROR 3: Not enough treasure cards added to hand. Before: 4232381 After: 3353
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 526 After: 518
ERROR 3: Not enough treasure cards added to hand. Before: 4232420 After: 3394
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 556 After: 549
ERROR 3: Not enough treasure cards added to hand. Before: 4232471 After: 3447
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 565 After: 545
ERROR 3: Not enough treasure cards added to hand. Before: 4232495 After: 3473
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 542 After: 530
ERROR 3: Not enough treasure cards added to hand. Before: 4232521 After: 3501
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 378 After: 338
ERROR 3: Not enough treasure cards added to hand. Before: 4232557 After: 3539
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 303 After: 283
ERROR 3: Not enough treasure cards added to hand. Before: 4232589 After: 3573
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 369 After: 358
ERROR 3: Not enough treasure cards added to hand. Before: 4232603 After: 3589
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 418 After: 405
ERROR 3: Not enough treasure cards added to hand. Before: 4232645 After: 3632
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 810 After: 796
ERROR 3: Not enough treasure cards added to hand. Before: 4232681 After: 3670
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 271 After: 260
ERROR 3: Not enough treasure cards added to hand. Before: 4232702 After: 3693
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 413 After: 408
ERROR 3: Not enough treasure cards added to hand. Before: 4232739 After: 3732
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 797 After: 736
ERROR 3: Not enough treasure cards added to hand. Before: 4232761 After: 3755
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 340 After: 339
ERROR 3: Not enough treasure cards added to hand. Before: 4232821 After: 3816
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 520 After: 516
ERROR 3: Not enough treasure cards added to hand. Before: 4232836 After: 3833
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 644 After: 638
ERROR 3: Not enough treasure cards added to hand. Before: 4232880 After: 3879
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 227 After: 226
ERROR 3: Not enough treasure cards added to hand. Before: 4232925 After: 3926
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 557 After: 523
ERROR 3: Not enough treasure cards added to hand. Before: 4232973 After: 3976
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 65 After: 60
ERROR 3: Not enough treasure cards added to hand. Before: 4232981 After: 3986
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 635 After: 614
ERROR 3: Not enough treasure cards added to hand. Before: 4232991 After: 3997
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 435 After: 428
ERROR 3: Not enough treasure cards added to hand. Before: 4233038 After: 4046
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 183 After: 168
ERROR 3: Not enough treasure cards added to hand. Before: 4233078 After: 4087
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 499 After: 487
ERROR 3: Not enough treasure cards added to hand. Before: 4233087 After: 4098
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 219 After: 206
ERROR 3: Not enough treasure cards added to hand. Before: 4233096 After: 4109
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 551 After: 523
ERROR 3: Not enough treasure cards added to hand. Before: 4233108 After: 4122
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 606 After: 577
ERROR 3: Not enough treasure cards added to hand. Before: 4233124 After: 4139
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 371 After: 358
ERROR 3: Not enough treasure cards added to hand. Before: 4233143 After: 4160
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 470 After: 461
ERROR 3: Not enough treasure cards added to hand. Before: 4233194 After: 4213
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 687 After: 660
ERROR 3: Not enough treasure cards added to hand. Before: 4233208 After: 4229
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 147 After: 143
ERROR 3: Not enough treasure cards added to hand. Before: 4233242 After: 4265
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 433 After: 413
ERROR 3: Not enough treasure cards added to hand. Before: 4233252 After: 4277
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 820 After: 815
ERROR 3: Not enough treasure cards added to hand. Before: 4233309 After: 4336
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 634 After: 626
ERROR 3: Not enough treasure cards added to hand. Before: 4233328 After: 4357
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 614 After: 608
ERROR 3: Not enough treasure cards added to hand. Before: 4233341 After: 4372
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 486 After: 466
ERROR 3: Not enough treasure cards added to hand. Before: 4233350 After: 4382
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 437 After: 419
ERROR 3: Not enough treasure cards added to hand. Before: 4233387 After: 4421
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 281 After: 258
ERROR 3: Not enough treasure cards added to hand. Before: 4233387 After: 4423
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 923 After: 912
ERROR 3: Not enough treasure cards added to hand. Before: 4233400 After: 4438
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 275 After: 268
ERROR 3: Not enough treasure cards added to hand. Before: 4233417 After: 4457
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 665 After: 651
ERROR 3: Not enough treasure cards added to hand. Before: 4233436 After: 4478
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 753 After: 747
ERROR 3: Not enough treasure cards added to hand. Before: 4233483 After: 4527
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 373 After: 367
ERROR 3: Not enough treasure cards added to hand. Before: 4233487 After: 4533
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 115 After: 105
ERROR 3: Not enough treasure cards added to hand. Before: 4233532 After: 4580
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 858 After: 846
ERROR 3: Not enough treasure cards added to hand. Before: 4233534 After: 4584
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 555 After: 542
ERROR 3: Not enough treasure cards added to hand. Before: 4233557 After: 4609
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 720 After: 711
ERROR 3: Not enough treasure cards added to hand. Before: 4233562 After: 4616
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 544 After: 529
ERROR 3: Not enough treasure cards added to hand. Before: 4233593 After: 4649
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 440 After: 423
ERROR 3: Not enough treasure cards added to hand. Before: 4233606 After: 4663
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 816 After: 813
ERROR 3: Not enough treasure cards added to hand. Before: 4233628 After: 4687
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 656 After: 653
ERROR 3: Not enough treasure cards added to hand. Before: 4233642 After: 4702
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 673 After: 670
ERROR 3: Not enough treasure cards added to hand. Before: 4233673 After: 4734
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 500 After: 489
ERROR 3: Not enough treasure cards added to hand. Before: 4233724 After: 4787
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 642 After: 639
ERROR 3: Not enough treasure cards added to hand. Before: 4233752 After: 4816
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 246 After: 235
ERROR 3: Not enough treasure cards added to hand. Before: 4233775 After: 4841
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 399 After: 370
ERROR 3: Not enough treasure cards added to hand. Before: 4233782 After: 4850
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 428 After: 414
ERROR 3: Not enough treasure cards added to hand. Before: 4233813 After: 4883
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 338 After: 337
ERROR 3: Not enough treasure cards added to hand. Before: 4233859 After: 4930
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 20 After: 16
ERROR 3: Not enough treasure cards added to hand. Before: 4233907 After: 4980
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 231 After: 223
ERROR 3: Not enough treasure cards added to hand. Before: 4233950 After: 5024
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 191 After: 187
ERROR 3: Not enough treasure cards added to hand. Before: 4233976 After: 5052
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 661 After: 658
ERROR 3: Not enough treasure cards added to hand. Before: 4233986 After: 5064
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 547 After: 535
ERROR 3: Not enough treasure cards added to hand. Before: 4234008 After: 5088
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 316 After: 289
ERROR 3: Not enough treasure cards added to hand. Before: 4234050 After: 5132
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 512 After: 478
ERROR 3: Not enough treasure cards added to hand. Before: 4234057 After: 5140
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 410 After: 386
ERROR 3: Not enough treasure cards added to hand. Before: 4234102 After: 5187
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 159 After: 137
ERROR 3: Not enough treasure cards added to hand. Before: 4234103 After: 5190
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 749 After: 743
ERROR 3: Not enough treasure cards added to hand. Before: 4234155 After: 5244
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 552 After: 526
ERROR 3: Not enough treasure cards added to hand. Before: 4234191 After: 5282
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 367 After: 354
ERROR 3: Not enough treasure cards added to hand. Before: 4234209 After: 5302
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 316 After: 306
ERROR 3: Not enough treasure cards added to hand. Before: 4234256 After: 5351
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 610 After: 584
ERROR 3: Not enough treasure cards added to hand. Before: 4234279 After: 5376
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 701 After: 684
ERROR 3: Not enough treasure cards added to hand. Before: 4234283 After: 5382
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 713 After: 699
ERROR 3: Not enough treasure cards added to hand. Before: 4234312 After: 5413
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 735 After: 710
ERROR 3: Not enough treasure cards added to hand. Before: 4234358 After: 5461
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 554 After: 542
ERROR 3: Not enough treasure cards added to hand. Before: 4234359 After: 5464
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 422 After: 406
ERROR 3: Not enough treasure cards added to hand. Before: 4234400 After: 5507
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 456 After: 448
ERROR 3: Not enough treasure cards added to hand. Before: 4234419 After: 5528
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 641 After: 628
ERROR 3: Not enough treasure cards added to hand. Before: 4234430 After: 5540
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 816 After: 815
ERROR 3: Not enough treasure cards added to hand. Before: 4234467 After: 5579
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 539 After: 530
ERROR 3: Not enough treasure cards added to hand. Before: 4234502 After: 5616
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 213 After: 194
ERROR 3: Not enough treasure cards added to hand. Before: 4234526 After: 5642
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 434 After: 420
ERROR 3: Not enough treasure cards added to hand. Before: 4234536 After: 5654
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 641 After: 616
ERROR 3: Not enough treasure cards added to hand. Before: 4234582 After: 5702
ERROR 3: Not enough treasure cards added to hand. Before: 4234592 After: 5713
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 719 After: 705
ERROR 3: Not enough treasure cards added to hand. Before: 4234608 After: 5731
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 623 After: 621
ERROR 3: Not enough treasure cards added to hand. Before: 4234609 After: 5734
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 359 After: 344
ERROR 3: Not enough treasure cards added to hand. Before: 4234632 After: 5759
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 750 After: 748
ERROR 3: Not enough treasure cards added to hand. Before: 4234642 After: 5771
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 550 After: 527
ERROR 3: Not enough treasure cards added to hand. Before: 4234683 After: 5814
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 560 After: 552
ERROR 3: Not enough treasure cards added to hand. Before: 4234700 After: 5833
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 465 After: 451
ERROR 3: Not enough treasure cards added to hand. Before: 4234748 After: 5883
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 468 After: 458
ERROR 3: Not enough treasure cards added to hand. Before: 4234752 After: 5889
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 547 After: 510
ERROR 3: Not enough treasure cards added to hand. Before: 4234790 After: 5929
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 795 After: 781
ERROR 3: Not enough treasure cards added to hand. Before: 4234826 After: 5967
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 339 After: 314
ERROR 3: Not enough treasure cards added to hand. Before: 4234875 After: 6018
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 415 After: 391
ERROR 3: Not enough treasure cards added to hand. Before: 4234923 After: 6068
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 475 After: 455
ERROR 3: Not enough treasure cards added to hand. Before: 4234923 After: 6070
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 694 After: 688
ERROR 3: Not enough treasure cards added to hand. Before: 4234975 After: 6124
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 190 After: 182
ERROR 3: Not enough treasure cards added to hand. Before: 4235012 After: 6163
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 419 After: 399
ERROR 3: Not enough treasure cards added to hand. Before: 4235047 After: 6200
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 491 After: 482
ERROR 3: Not enough treasure cards added to hand. Before: 4235080 After: 6235
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 606 After: 587
ERROR 3: Not enough treasure cards added to hand. Before: 4235119 After: 6276
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 452 After: 440
ERROR 3: Not enough treasure cards added to hand. Before: 4235143 After: 6301
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 523 After: 506
ERROR 3: Not enough treasure cards added to hand. Before: 4235163 After: 6323
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 833 After: 828
ERROR 3: Not enough treasure cards added to hand. Before: 4235218 After: 6380
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 297 After: 262
ERROR 3: Not enough treasure cards added to hand. Before: 4235245 After: 6409
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 370 After: 361
ERROR 3: Not enough treasure cards added to hand. Before: 4235256 After: 6422
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 346 After: 324
ERROR 3: Not enough treasure cards added to hand. Before: 4235269 After: 6435
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 88 After: 74
ERROR 3: Not enough treasure cards added to hand. Before: 4235309 After: 6477
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 587 After: 583
ERROR 3: Not enough treasure cards added to hand. Before: 4235368 After: 6538
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 572 After: 532
ERROR 3: Not enough treasure cards added to hand. Before: 4235369 After: 6541
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 463 After: 447
ERROR 3: Not enough treasure cards added to hand. Before: 4235426 After: 6600
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 506 After: 502
ERROR 3: Not enough treasure cards added to hand. Before: 4235484 After: 6659
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 512 After: 507
ERROR 3: Not enough treasure cards added to hand. Before: 4235500 After: 6677
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 564 After: 539
ERROR 3: Not enough treasure cards added to hand. Before: 4235503 After: 6681
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 534 After: 514
ERROR 3: Not enough treasure cards added to hand. Before: 4235540 After: 6720
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 383 After: 355
ERROR 3: Not enough treasure cards added to hand. Before: 4235561 After: 6742
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 760 After: 733
ERROR 3: Not enough treasure cards added to hand. Before: 4235623 After: 6806
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 545 After: 538
ERROR 3: Not enough treasure cards added to hand. Before: 4235685 After: 6869
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 136 After: 132
ERROR 3: Not enough treasure cards added to hand. Before: 4235703 After: 6889
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 468 After: 453
ERROR 3: Not enough treasure cards added to hand. Before: 4235762 After: 6949
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 504 After: 502
ERROR 3: Not enough treasure cards added to hand. Before: 4235794 After: 6983
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 637 After: 624
ERROR 3: Not enough treasure cards added to hand. Before: 4235839 After: 7030
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 644 After: 638
ERROR 3: Not enough treasure cards added to hand. Before: 4235842 After: 7034
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 637 After: 636
ERROR 3: Not enough treasure cards added to hand. Before: 4235852 After: 7046
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 693 After: 673
ERROR 3: Not enough treasure cards added to hand. Before: 4235903 After: 7099
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 237 After: 234
ERROR 3: Not enough treasure cards added to hand. Before: 4235903 After: 7101
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 708 After: 687
ERROR 3: Not enough treasure cards added to hand. Before: 4235918 After: 7118
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 887 After: 884
ERROR 3: Not enough treasure cards added to hand. Before: 4235948 After: 7150
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 487 After: 476
ERROR 3: Not enough treasure cards added to hand. Before: 4235961 After: 7165
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 592 After: 585
ERROR 3: Not enough treasure cards added to hand. Before: 4235987 After: 7193
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 574 After: 545
ERROR 3: Not enough treasure cards added to hand. Before: 4236030 After: 7238
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 507 After: 504
ERROR 3: Not enough treasure cards added to hand. Before: 4236031 After: 7241
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 116 After: 87
ERROR 3: Not enough treasure cards added to hand. Before: 4236054 After: 7266
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 632 After: 631
ERROR 3: Not enough treasure cards added to hand. Before: 4236099 After: 7313
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 495 After: 464
ERROR 3: Not enough treasure cards added to hand. Before: 4236117 After: 7333
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 829 After: 811
ERROR 3: Not enough treasure cards added to hand. Before: 4236156 After: 7374
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 644 After: 634
ERROR 3: Not enough treasure cards added to hand. Before: 4236156 After: 7376
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 696 After: 652
ERROR 3: Not enough treasure cards added to hand. Before: 4236178 After: 7400
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 226 After: 215
ERROR 3: Not enough treasure cards added to hand. Before: 4236200 After: 7423
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 451 After: 432
ERROR 3: Not enough treasure cards added to hand. Before: 4236243 After: 7468
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 376 After: 345
ERROR 3: Not enough treasure cards added to hand. Before: 4236286 After: 7513
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 247 After: 236
ERROR 3: Not enough treasure cards added to hand. Before: 4236325 After: 7554
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 375 After: 360
ERROR 3: Not enough treasure cards added to hand. Before: 4236366 After: 7596
ERROR 1: Total card count difference! Should be 2 less than before total. Before: 215 After: 208
ERROR 3: Not enough treasure cards added to hand. Before: 4236399 After: 7631
Play Adventurer Tests are concluded.

----------------- Testing Card: Village ----------------
Play Village testing concluded.

----------------- Testing Card: Council_Room ----------------
Play Council_Room testing has concluded.

File 'dominion.c'
Lines executed:36.35% of 575
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    64393:    8:int compare(const void* a, const void* b) {
    64393:    9:  if (*(int*)a > *(int*)b)
    31936:   10:    return 1;
    32457:   11:  if (*(int*)a < *(int*)b)
    16562:   12:    return -1;
    15895:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       28:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       28:   44:  SelectStream(1);
       28:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       28:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       28:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      308:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     3080:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       28:   73:  if (numPlayers == 2)
        -:   74:    {
       26:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       28:   87:  if (numPlayers == 2)
        -:   88:    {
       26:   89:      state->supplyCount[estate] = 8;
       26:   90:      state->supplyCount[duchy] = 8;
       26:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       28:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       28:  102:  state->supplyCount[silver] = 40;
       28:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      588:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     4620:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     4340:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      333:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       53:  115:		  if (numPlayers == 2){ 
       50:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        3:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      227:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      280:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     4060:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       86:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       58:  140:      state->deckCount[i] = 0;
      232:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      174:  143:	  state->deck[i][j] = estate;
      174:  144:	  state->deckCount[i]++;
        -:  145:	}
      464:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      406:  148:	  state->deck[i][j] = copper;
      406:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       86:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       58:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       86:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       58:  166:      state->handCount[i] = 0;
       58:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      784:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      756:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       28:  182:  state->outpostPlayed = 0;
       28:  183:  state->phase = 0;
       28:  184:  state->numActions = 1;
       28:  185:  state->numBuys = 1;
       28:  186:  state->playedCardCount = 0;
       28:  187:  state->whoseTurn = 0;
       28:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      168:  192:  for (it = 0; it < 5; it++){
      140:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       28:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       28:  198:  return 0;
        -:  199:}
        -:  200:
      161:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      161:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      161:  209:  if (state->deckCount[player] < 1)
        9:  210:    return -1;
      152:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    11572:  214:  while (state->deckCount[player] > 0) {
    11268:  215:    card = floor(Random() * state->deckCount[player]);
    11268:  216:    newDeck[newDeckPos] = state->deck[player][card];
    11268:  217:    newDeckPos++;
   479560:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   468292:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    11268:  221:    state->deckCount[player]--;
        -:  222:  }
    11420:  223:  for (i = 0; i < newDeckPos; i++) {
    11268:  224:    state->deck[player][i] = newDeck[i];
    11268:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      152:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       26:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       26:  326:  int count = 0;
        -:  327:
      341:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      315:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
      253:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
      227:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
       90:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
       64:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       26:  343:  return count;
        -:  344:}
        -:  345:
     2500:  346:int whoseTurn(struct gameState *state) {
     2500:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       10:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
        8:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
        8:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
        8:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
        8:  438:      if (state->discard[player][i] == province) { score = score + 6; };
        8:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        8:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       10:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
        8:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
        8:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
        8:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
        8:  449:      if (state->deck[player][i] == province) { score = score + 6; };
        8:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        8:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    19611:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    19611:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    10782:  533:    for (i = 0; i < state->discardCount[player];i++){
    10688:  534:      state->deck[player][i] = state->discard[player][i];
    10688:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       94:  538:    state->deckCount[player] = state->discardCount[player];
       94:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       94:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
       94:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       94:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       94:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
       94:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       94:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       94:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       94:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       94:  563:    state->deckCount[player]--;
       94:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    19517:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    19517:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    19517:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    19517:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    19517:  576:    state->deckCount[player]--;
    19517:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    19611:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
     2500:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int x;
        -:  651:  int index;
     2500:  652:  int currentPlayer = whoseTurn(state);
     2500:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
     2500:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
     2500:  658:  if (nextPlayer > (state->numPlayers - 1)){
      863:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
     2500:  664:  switch( card ) 
        -:  665:    {
        -:  666:    case adventurer:
    #####:  667:      return playAdventurer(state, currentPlayer);
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
    11250:  671:      for (i = 0; i < 4; i++)
        -:  672:	{
     9000:  673:	  drawCard(currentPlayer, state);
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
     2250:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
     9500:  680:      for (i = 0; i < state->numPlayers; i++)
        -:  681:	{
     7250:  682:	  if ( i != currentPlayer )
        -:  683:	    {
     5000:  684:	      drawCard(i, state);
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
     2250:  689:      discardCard(handPos, currentPlayer, state, 0);
        -:  690:			
     2250:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
    #####:  706:	if (supplyCount(choice1, state) <= 0){
    #####:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
    #####:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
    #####:  715:	  printf("That card is too expensive!\n");
        -:  716:
    #####:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
    #####:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
    #####:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      return playRemodel(state, currentPlayer, choice1, choice2, handPos);
        -:  786:		
        -:  787:    case smithy:
    #####:  788:      return playSmithy(currentPlayer, state, handPos);
        -:  789:		
        -:  790:    case village:
        -:  791:      //+1 Card
      250:  792:      drawCard(currentPlayer, state);
        -:  793:			
        -:  794:      //+2 Actions
      250:  795:      state->numActions = state->numActions + 2;
        -:  796:			
        -:  797:      //discard played card from hand
      250:  798:      discardCard(handPos, currentPlayer, state, 0);
      250:  799:      return 0;
        -:  800:		
        -:  801:    case baron:
    #####:  802:      state->numBuys++;//Increase buys by 1!
    #####:  803:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  804:	int p = 0;//Iterator for hand!
    #####:  805:	int card_not_discarded = 1;//Flag for discard set!
    #####:  806:	while(card_not_discarded){
    #####:  807:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  808:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  809:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  810:	    state->discardCount[currentPlayer]++;
    #####:  811:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  812:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  813:	    }
    #####:  814:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  815:	    state->handCount[currentPlayer]--;
    #####:  816:	    card_not_discarded = 0;//Exit the loop
        -:  817:	  }
    #####:  818:	  else if (p > state->handCount[currentPlayer]){
    #####:  819:	    if(DEBUG) {
        -:  820:	      printf("No estate cards in your hand, invalid choice\n");
        -:  821:	      printf("Must gain an estate if there are any\n");
        -:  822:	    }
    #####:  823:	    if (supplyCount(estate, state) > 0){
    #####:  824:	      gainCard(estate, state, 0, currentPlayer);
    #####:  825:	      state->supplyCount[estate]--;//Decrement estates
    #####:  826:	      if (supplyCount(estate, state) == 0){
    #####:  827:		isGameOver(state);
        -:  828:	      }
        -:  829:	    }
    #####:  830:	    card_not_discarded = 0;//Exit the loop
        -:  831:	  }
        -:  832:			    
        -:  833:	  else{
    #####:  834:	    p++;//Next card
        -:  835:	  }
        -:  836:	}
        -:  837:      }
        -:  838:			    
        -:  839:      else{
    #####:  840:	if (supplyCount(estate, state) > 0){
    #####:  841:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  842:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  843:	  if (supplyCount(estate, state) == 0){
    #####:  844:	    isGameOver(state);
        -:  845:	  }
        -:  846:	}
        -:  847:      }
        -:  848:	    
        -:  849:      
    #####:  850:      return 0;
        -:  851:		
        -:  852:    case great_hall:
        -:  853:      //+1 Card
    #####:  854:      drawCard(currentPlayer, state);
        -:  855:			
        -:  856:      //+1 Actions
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case minion:
        -:  864:      //+1 action
    #####:  865:      state->numActions++;
        -:  866:			
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
        -:  869:			
    #####:  870:      if (choice1)		//+2 coins
        -:  871:	{
    #####:  872:	  state->coins = state->coins + 2;
        -:  873:	}
        -:  874:			
    #####:  875:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  876:	{
        -:  877:	  //discard hand
    #####:  878:	  while(numHandCards(state) > 0)
        -:  879:	    {
    #####:  880:	      discardCard(handPos, currentPlayer, state, 0);
        -:  881:	    }
        -:  882:				
        -:  883:	  //draw 4
    #####:  884:	  for (i = 0; i < 4; i++)
        -:  885:	    {
    #####:  886:	      drawCard(currentPlayer, state);
        -:  887:	    }
        -:  888:				
        -:  889:	  //other players discard hand and redraw if hand size > 4
    #####:  890:	  for (i = 0; i < state->numPlayers; i++)
        -:  891:	    {
    #####:  892:	      if (i != currentPlayer)
        -:  893:		{
    #####:  894:		  if ( state->handCount[i] > 4 )
        -:  895:		    {
        -:  896:		      //discard hand
    #####:  897:		      while( state->handCount[i] > 0 )
        -:  898:			{
    #####:  899:			  discardCard(handPos, i, state, 0);
        -:  900:			}
        -:  901:							
        -:  902:		      //draw 4
    #####:  903:		      for (j = 0; j < 4; j++)
        -:  904:			{
    #####:  905:			  drawCard(i, state);
        -:  906:			}
        -:  907:		    }
        -:  908:		}
        -:  909:	    }
        -:  910:				
        -:  911:	}
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case steward:
    #####:  915:      if (choice1 == 1)
        -:  916:	{
        -:  917:	  //+2 cards
    #####:  918:	  drawCard(currentPlayer, state);
    #####:  919:	  drawCard(currentPlayer, state);
        -:  920:	}
    #####:  921:      else if (choice1 == 2)
        -:  922:	{
        -:  923:	  //+2 coins
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:      else
        -:  927:	{
        -:  928:	  //trash 2 cards in hand
    #####:  929:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  930:	  discardCard(choice3, currentPlayer, state, 1);
        -:  931:	}
        -:  932:			
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case tribute:
    #####:  938:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  939:	if (state->deckCount[nextPlayer] > 0){
    #####:  940:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	  state->deckCount[nextPlayer]--;
        -:  942:	}
    #####:  943:	else if (state->discardCount[nextPlayer] > 0){
    #####:  944:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  945:	  state->discardCount[nextPlayer]--;
        -:  946:	}
        -:  947:	else{
        -:  948:	  //No Card to Reveal
    #####:  949:	  if (DEBUG){
        -:  950:	    printf("No cards to reveal\n");
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:	    
        -:  955:      else{
    #####:  956:	if (state->deckCount[nextPlayer] == 0){
    #####:  957:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  958:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  959:	    state->deckCount[nextPlayer]++;
    #####:  960:	    state->discard[nextPlayer][i] = -1;
    #####:  961:	    state->discardCount[nextPlayer]--;
        -:  962:	  }
        -:  963:			    
    #####:  964:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  965:	} 
    #####:  966:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  968:	state->deckCount[nextPlayer]--;
    #####:  969:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
        -:  972:      }    
        -:  973:		       
    #####:  974:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  975:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  976:	state->playedCardCount++;
    #####:  977:	tributeRevealedCards[1] = -1;
        -:  978:      }
        -:  979:
    #####:  980:      for (i = 0; i <= 2; i ++){
    #####:  981:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  982:	  state->coins += 2;
        -:  983:	}
        -:  984:		    
    #####:  985:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  986:	  drawCard(currentPlayer, state);
    #####:  987:	  drawCard(currentPlayer, state);
        -:  988:	}
        -:  989:	else{//Action Card
    #####:  990:	  state->numActions = state->numActions + 2;
        -:  991:	}
        -:  992:      }
        -:  993:	    
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case ambassador:
    #####:  997:      j = 0;		//used to check if player has enough cards to discard
        -:  998:
    #####:  999:      if (choice2 > 2 || choice2 < 0)
        -: 1000:	{
    #####: 1001:	  return -1;				
        -: 1002:	}
        -: 1003:
    #####: 1004:      if (choice1 == handPos)
        -: 1005:	{
    #####: 1006:	  return -1;
        -: 1007:	}
        -: 1008:
    #####: 1009:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1010:	{
    #####: 1011:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1012:	    {
    #####: 1013:	      j++;
        -: 1014:	    }
        -: 1015:	}
    #####: 1016:      if (j < choice2)
        -: 1017:	{
    #####: 1018:	  return -1;				
        -: 1019:	}
        -: 1020:
    #####: 1021:      if (DEBUG) 
        -: 1022:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1023:
        -: 1024:      //increase supply count for choosen card by amount being discarded
    #####: 1025:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1026:			
        -: 1027:      //each other player gains a copy of revealed card
    #####: 1028:      for (i = 0; i < state->numPlayers; i++)
        -: 1029:	{
    #####: 1030:	  if (i != currentPlayer)
        -: 1031:	    {
    #####: 1032:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1033:	    }
        -: 1034:	}
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1038:
        -: 1039:      //trash copies of cards returned to supply
    #####: 1040:      for (j = 0; j < choice2; j++)
        -: 1041:	{
    #####: 1042:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1043:	    {
    #####: 1044:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1045:		{
    #####: 1046:		  discardCard(i, currentPlayer, state, 1);
    #####: 1047:		  break;
        -: 1048:		}
        -: 1049:	    }
        -: 1050:	}			
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case cutpurse:
    #####: 1055:      return playCutpurse(currentPlayer, state, handPos);
        -: 1056:		
        -: 1057:    case embargo: 
        -: 1058:      //+2 Coins
    #####: 1059:      state->coins = state->coins + 2;
        -: 1060:			
        -: 1061:      //see if selected pile is in play
    #####: 1062:      if ( state->supplyCount[choice1] == -1 )
        -: 1063:	{
    #####: 1064:	  return -1;
        -: 1065:	}
        -: 1066:			
        -: 1067:      //add embargo token to selected supply pile
    #####: 1068:      state->embargoTokens[choice1]++;
        -: 1069:			
        -: 1070:      //trash card
    #####: 1071:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case outpost:
        -: 1075:      //set outpost flag
    #####: 1076:      state->outpostPlayed++;
        -: 1077:			
        -: 1078:      //discard card
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case salvager:
        -: 1083:      //+1 buy
    #####: 1084:      state->numBuys++;
        -: 1085:			
    #####: 1086:      if (choice1)
        -: 1087:	{
        -: 1088:	  //gain coins equal to trashed card
    #####: 1089:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1090:	  //trash card
    #####: 1091:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1092:	}
        -: 1093:			
        -: 1094:      //discard card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case sea_hag:
    #####: 1099:      return playSea_Hag(state, currentPlayer);
        -: 1100:		
        -: 1101:    case treasure_map:
        -: 1102:      //search hand for another treasure_map
    #####: 1103:      index = -1;
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1107:	    {
    #####: 1108:	      index = i;
    #####: 1109:	      break;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (index > -1)
        -: 1113:	{
        -: 1114:	  //trash both treasure cards
    #####: 1115:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1116:	  discardCard(index, currentPlayer, state, 1);
        -: 1117:
        -: 1118:	  //gain 4 Gold cards
    #####: 1119:	  for (i = 0; i < 4; i++)
        -: 1120:	    {
    #####: 1121:	      gainCard(gold, state, 1, currentPlayer);
        -: 1122:	    }
        -: 1123:				
        -: 1124:	  //return success
    #####: 1125:	  return 1;
        -: 1126:	}
        -: 1127:			
        -: 1128:      //no second treasure_map found in hand
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
    #####: 1132:  return -1;
        -: 1133:}
        -: 1134:
     2750: 1135:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1136:{
        -: 1137:	
        -: 1138:  //if card is not trashed, added to Played pile 
     2750: 1139:  if (trashFlag < 1)
        -: 1140:    {
        -: 1141:      //add card to played pile
     2500: 1142:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2500: 1143:      state->playedCardCount++;
        -: 1144:    }
        -: 1145:	
        -: 1146:  //set played card to -1
     2750: 1147:  state->hand[currentPlayer][handPos] = -1;
        -: 1148:	
        -: 1149:  //remove card from player's hand
     2750: 1150:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
    #####: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
     2750: 1155:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
    #####: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
        -: 1160:  else 	
        -: 1161:    {
        -: 1162:      //replace discarded card with last card in hand
     2750: 1163:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1164:      //set last card to -1
     2750: 1165:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1166:      //reduce number of cards in hand
     2750: 1167:      state->handCount[currentPlayer]--;
        -: 1168:    }
        -: 1169:	
     2750: 1170:  return 0;
        -: 1171:}
        -: 1172:
    #####: 1173:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1174:{
        -: 1175:  //Note: supplyPos is enum of choosen card
        -: 1176:	
        -: 1177:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1178:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1179:    {
    #####: 1180:      return -1;
        -: 1181:    }
        -: 1182:	
        -: 1183:  //added card for [whoseTurn] current player:
        -: 1184:  // toFlag = 0 : add to discard
        -: 1185:  // toFlag = 1 : add to deck
        -: 1186:  // toFlag = 2 : add to hand
        -: 1187:
    #####: 1188:  if (toFlag == 1)
        -: 1189:    {
    #####: 1190:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1191:      state->deckCount[player]++;
        -: 1192:    }
    #####: 1193:  else if (toFlag == 2)
        -: 1194:    {
    #####: 1195:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1196:      state->handCount[player]++;
        -: 1197:    }
        -: 1198:  else
        -: 1199:    {
    #####: 1200:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1201:      state->discardCount[player]++;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //decrease number in supply pile
    #####: 1205:  state->supplyCount[supplyPos]--;
        -: 1206:	 
    #####: 1207:  return 0;
        -: 1208:}
        -: 1209:
       52: 1210:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1211:{
        -: 1212:  int i;
        -: 1213:	
        -: 1214:  //reset coin count
       52: 1215:  state->coins = 0;
        -: 1216:
        -: 1217:  //add coins for each Treasure card in player's hand
      312: 1218:  for (i = 0; i < state->handCount[player]; i++)
        -: 1219:    {
      260: 1220:      if (state->hand[player][i] == copper)
        -: 1221:	{
      172: 1222:	  state->coins += 1;
        -: 1223:	}
       88: 1224:      else if (state->hand[player][i] == silver)
        -: 1225:	{
       30: 1226:	  state->coins += 2;
        -: 1227:	}
       58: 1228:      else if (state->hand[player][i] == gold)
        -: 1229:	{
       30: 1230:	  state->coins += 3;
        -: 1231:	}	
        -: 1232:    }	
        -: 1233:
        -: 1234:  //add bonus
       52: 1235:  state->coins += bonus;
        -: 1236:
       52: 1237:  return 0;
        -: 1238:}
        -: 1239:
        -: 1240:/*
        -: 1241:Adventurer
        -: 1242:
        -: 1243:Reveal cards from your deck until you reveal 2 Treasure cards.
        -: 1244:Put those Treasure cards into your hand and discard the other revealed cards.
        -: 1245:*/
      250: 1246:int playAdventurer (struct gameState *state, int currentPlayer)
        -: 1247:{
        -: 1248:  int cardDrawn;
      250: 1249:  int drawntreasure = 0;
        -: 1250:  int temphand[MAX_HAND];
        -: 1251:  // this is the counter for the temp hand
      250: 1252:  int z = 0;
        -: 1253:
     4721: 1254:  while(drawntreasure<2) 
        -: 1255:  {
     4221: 1256:    if (state->deckCount[currentPlayer] <1)
        -: 1257:    {
        -: 1258:      //if the deck is empty we need to shuffle discard and add to deck
        9: 1259:      shuffle(currentPlayer, state);
        -: 1260:    }
        -: 1261:
     4221: 1262:    drawCard(currentPlayer, state);
     4221: 1263:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1264:    
     4721: 1265:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      500: 1266:      drawntreasure++;
        -: 1267:    else
        -: 1268:    {
     3721: 1269:      temphand[z]=cardDrawn;
     3721: 1270:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1271:    }
        -: 1272:  }
        -: 1273:  
      500: 1274:  while(z-1>=0)
        -: 1275:  {
    #####: 1276:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1277:    z=z-1;
        -: 1278:  }
        -: 1279:  
      250: 1280:  return 0;
        -: 1281:}
        -: 1282:
        -: 1283:/*
        -: 1284:Smithy
        -: 1285:
        -: 1286:+3 Cards
        -: 1287:*/
      250: 1288:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1289:{
        -: 1290:  int i;
        -: 1291:
        -: 1292:  //+3 Cards
     1250: 1293:  for (i = 0; i <= 3; i++)
        -: 1294:  {
     1000: 1295:    drawCard(currentPlayer, state);
        -: 1296:  }
        -: 1297:      
        -: 1298:  //discard card from hand
      250: 1299:  discardCard(handPos, currentPlayer, state, 1);
      250: 1300:  return 0;
        -: 1301:}
        -: 1302:
        -: 1303:/*
        -: 1304:Cutpurse
        -: 1305:
        -: 1306:+2 Coins
        -: 1307:Each other player discards a Copper card (or reveals a hand with no Copper).
        -: 1308:*/
    #####: 1309:int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1310:{
        -: 1311:  int i, j, k;
        -: 1312:
    #####: 1313:  updateCoins(currentPlayer, state, 2);
    #####: 1314:  for (i = 0; i < state->numPlayers - 1; i++)
        -: 1315:  {
    #####: 1316:    if (i != currentPlayer)
        -: 1317:    {
    #####: 1318:      for (j = 0; j < state->handCount[i]; j++)
        -: 1319:      {
    #####: 1320:        if (state->hand[i][j] == copper)
        -: 1321:        {
    #####: 1322:          discardCard(j, i, state, 0);
    #####: 1323:          break;
        -: 1324:        }
    #####: 1325:        if (j == state->handCount[i])
        -: 1326:        {
    #####: 1327:          for (k = 0; k < state->handCount[i]; k += 2)
        -: 1328:          {
    #####: 1329:            if (DEBUG)
        -: 1330:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1331:          } 
    #####: 1332:          break;
        -: 1333:        }   
        -: 1334:      }    
        -: 1335:    } 
        -: 1336:  }       
        -: 1337:
        -: 1338:  //discard played card from hand
    #####: 1339:  discardCard(handPos, currentPlayer, state, 0);      
        -: 1340:
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
        -: 1344:/*
        -: 1345:Remodel
        -: 1346:
        -: 1347:Trash a card from your hand.
        -: 1348:Gain a card costing up to 2 coins more than the trashed card.
        -: 1349:*/
    #####: 1350:int playRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -: 1351:{
        -: 1352:  int i, j;
        -: 1353:
    #####: 1354:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1355:
    #####: 1356:  if ( (getCost(state->hand[currentPlayer][choice2]) + 2) > getCost(choice1) )
        -: 1357:  {
    #####: 1358:    return -1;
        -: 1359:  }
        -: 1360:
    #####: 1361:  gainCard(choice2, state, 0, currentPlayer);
        -: 1362:
        -: 1363:  //discard card from hand
    #####: 1364:  discardCard(handPos, currentPlayer, state, 0);
        -: 1365:
        -: 1366:  //discard trashed card
    #####: 1367:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1368:  {
    #####: 1369:    if (state->hand[currentPlayer][i] == j)
        -: 1370:      {
    #####: 1371:        discardCard(i, currentPlayer, state, 0);      
    #####: 1372:        break;
        -: 1373:      }
        -: 1374:  }
        -: 1375:
    #####: 1376:  return 0;
        -: 1377:}
        -: 1378:
        -: 1379:/*
        -: 1380:Sea Hag
        -: 1381:
        -: 1382:Each other player discards the top card of his deck,
        -: 1383:then gains a Curse card, putting it on top of his deck.
        -: 1384:*/
    #####: 1385:int playSea_Hag(struct gameState *state, int currentPlayer)
        -: 1386:{
        -: 1387:  int i;
        -: 1388:
    #####: 1389:  for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:    {
    #####: 1393:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1394:      state->deckCount[i]++;
    #####: 1395:      state->discardCount[i]--;
    #####: 1396:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1397:    }
        -: 1398:  }
        -: 1399:  
    #####: 1400:  return 0;
        -: 1401:}
        -: 1402:
        -: 1403://end of dominion.c
File 'dominion.c'
Lines executed:36.35% of 575
Branches executed:43.88% of 417
Taken at least once:34.53% of 417
Calls executed:20.00% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 64393 returned 100% blocks executed 100%
    64393:    8:int compare(const void* a, const void* b) {
    64393:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    31936:   10:    return 1;
    32457:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
    16562:   12:    return -1;
    15895:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 28 returned 100% blocks executed 94%
       28:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       28:   44:  SelectStream(1);
call    0 returned 100%
       28:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       28:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       28:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      308:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     3080:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       28:   73:  if (numPlayers == 2)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   74:    {
       26:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       28:   87:  if (numPlayers == 2)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   88:    {
       26:   89:      state->supplyCount[estate] = 8;
       26:   90:      state->supplyCount[duchy] = 8;
       26:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       28:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       28:  102:  state->supplyCount[silver] = 40;
       28:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      588:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     4620:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     4340:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      333:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       53:  115:		  if (numPlayers == 2){ 
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
       50:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        3:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      227:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      280:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     4060:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       86:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       58:  140:      state->deckCount[i] = 0;
      232:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      174:  143:	  state->deck[i][j] = estate;
      174:  144:	  state->deckCount[i]++;
        -:  145:	}
      464:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      406:  148:	  state->deck[i][j] = copper;
      406:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       86:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       58:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       86:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       58:  166:      state->handCount[i] = 0;
       58:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      784:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      756:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       28:  182:  state->outpostPlayed = 0;
       28:  183:  state->phase = 0;
       28:  184:  state->numActions = 1;
       28:  185:  state->numBuys = 1;
       28:  186:  state->playedCardCount = 0;
       28:  187:  state->whoseTurn = 0;
       28:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      168:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      140:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       28:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       28:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 161 returned 100% blocks executed 100%
      161:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      161:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      161:  209:  if (state->deckCount[player] < 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        9:  210:    return -1;
      152:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    11572:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    11268:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    11268:  216:    newDeck[newDeckPos] = state->deck[player][card];
    11268:  217:    newDeckPos++;
   479560:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   468292:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    11268:  221:    state->deckCount[player]--;
        -:  222:  }
    11420:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    11268:  224:    state->deck[player][i] = newDeck[i];
    11268:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      152:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 26 returned 100% blocks executed 100%
       26:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       26:  326:  int count = 0;
        -:  327:
      341:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  329:    {
      315:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -:  331:    }
        -:  332:
      253:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  334:    {
      227:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -:  336:    }
        -:  337:
       90:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  339:    {
       64:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:  341:    }
        -:  342:
       26:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2500 returned 100% blocks executed 100%
     2500:  346:int whoseTurn(struct gameState *state) {
     2500:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 73%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       10:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  434:    {
        8:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        8:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        8:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        8:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
        8:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        8:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       10:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  445:    {
        8:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        8:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
        8:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        8:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        8:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        8:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 19611 returned 100% blocks executed 93%
    19611:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    19611:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    10782:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10688:  534:      state->deck[player][i] = state->discard[player][i];
    10688:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       94:  538:    state->deckCount[player] = state->discardCount[player];
       94:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       94:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
       94:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       94:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       94:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
       94:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       94:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       94:  559:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
       94:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       94:  563:    state->deckCount[player]--;
       94:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    19517:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    19517:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    19517:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    19517:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    19517:  576:    state->deckCount[player]--;
    19517:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    19611:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 2500 returned 100% blocks executed 8%
     2500:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int x;
        -:  651:  int index;
     2500:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2500:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
     2500:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
     2500:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
      863:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
     2500:  664:  switch( card ) 
branch  0 taken 0%
branch  1 taken 90%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 10%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  665:    {
        -:  666:    case adventurer:
    #####:  667:      return playAdventurer(state, currentPlayer);
call    0 never executed
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
    11250:  671:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  672:	{
     9000:  673:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
     2250:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
     9500:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  681:	{
     7250:  682:	  if ( i != currentPlayer )
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -:  683:	    {
     5000:  684:	      drawCard(i, state);
call    0 returned 100%
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
     2250:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  690:			
     2250:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
    #####:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
    #####:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
    #####:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
    #####:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      return playRemodel(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  786:		
        -:  787:    case smithy:
    #####:  788:      return playSmithy(currentPlayer, state, handPos);
call    0 never executed
        -:  789:		
        -:  790:    case village:
        -:  791:      //+1 Card
      250:  792:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  793:			
        -:  794:      //+2 Actions
      250:  795:      state->numActions = state->numActions + 2;
        -:  796:			
        -:  797:      //discard played card from hand
      250:  798:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      250:  799:      return 0;
        -:  800:		
        -:  801:    case baron:
    #####:  802:      state->numBuys++;//Increase buys by 1!
    #####:  803:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  804:	int p = 0;//Iterator for hand!
    #####:  805:	int card_not_discarded = 1;//Flag for discard set!
    #####:  806:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  807:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  808:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  809:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  810:	    state->discardCount[currentPlayer]++;
    #####:  811:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  812:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  813:	    }
    #####:  814:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  815:	    state->handCount[currentPlayer]--;
    #####:  816:	    card_not_discarded = 0;//Exit the loop
        -:  817:	  }
    #####:  818:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  819:	    if(DEBUG) {
        -:  820:	      printf("No estate cards in your hand, invalid choice\n");
        -:  821:	      printf("Must gain an estate if there are any\n");
        -:  822:	    }
    #####:  823:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  824:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  825:	      state->supplyCount[estate]--;//Decrement estates
    #####:  826:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:		isGameOver(state);
call    0 never executed
        -:  828:	      }
        -:  829:	    }
    #####:  830:	    card_not_discarded = 0;//Exit the loop
        -:  831:	  }
        -:  832:			    
        -:  833:	  else{
    #####:  834:	    p++;//Next card
        -:  835:	  }
        -:  836:	}
        -:  837:      }
        -:  838:			    
        -:  839:      else{
    #####:  840:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  841:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  842:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  843:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	    isGameOver(state);
call    0 never executed
        -:  845:	  }
        -:  846:	}
        -:  847:      }
        -:  848:	    
        -:  849:      
    #####:  850:      return 0;
        -:  851:		
        -:  852:    case great_hall:
        -:  853:      //+1 Card
    #####:  854:      drawCard(currentPlayer, state);
call    0 never executed
        -:  855:			
        -:  856:      //+1 Actions
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case minion:
        -:  864:      //+1 action
    #####:  865:      state->numActions++;
        -:  866:			
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:			
    #####:  870:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  871:	{
    #####:  872:	  state->coins = state->coins + 2;
        -:  873:	}
        -:  874:			
    #####:  875:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  876:	{
        -:  877:	  //discard hand
    #####:  878:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  879:	    {
    #####:  880:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  881:	    }
        -:  882:				
        -:  883:	  //draw 4
    #####:  884:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	    {
    #####:  886:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  887:	    }
        -:  888:				
        -:  889:	  //other players discard hand and redraw if hand size > 4
    #####:  890:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  891:	    {
    #####:  892:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  893:		{
    #####:  894:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  895:		    {
        -:  896:		      //discard hand
    #####:  897:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  898:			{
    #####:  899:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  900:			}
        -:  901:							
        -:  902:		      //draw 4
    #####:  903:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  904:			{
    #####:  905:			  drawCard(i, state);
call    0 never executed
        -:  906:			}
        -:  907:		    }
        -:  908:		}
        -:  909:	    }
        -:  910:				
        -:  911:	}
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case steward:
    #####:  915:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  916:	{
        -:  917:	  //+2 cards
    #####:  918:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  920:	}
    #####:  921:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  922:	{
        -:  923:	  //+2 coins
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:      else
        -:  927:	{
        -:  928:	  //trash 2 cards in hand
    #####:  929:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  930:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  931:	}
        -:  932:			
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case tribute:
    #####:  938:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  939:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  940:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	  state->deckCount[nextPlayer]--;
        -:  942:	}
    #####:  943:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  944:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  945:	  state->discardCount[nextPlayer]--;
        -:  946:	}
        -:  947:	else{
        -:  948:	  //No Card to Reveal
    #####:  949:	  if (DEBUG){
        -:  950:	    printf("No cards to reveal\n");
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:	    
        -:  955:      else{
    #####:  956:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  957:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  958:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  959:	    state->deckCount[nextPlayer]++;
    #####:  960:	    state->discard[nextPlayer][i] = -1;
    #####:  961:	    state->discardCount[nextPlayer]--;
        -:  962:	  }
        -:  963:			    
    #####:  964:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  965:	} 
    #####:  966:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  968:	state->deckCount[nextPlayer]--;
    #####:  969:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
        -:  972:      }    
        -:  973:		       
    #####:  974:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  975:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  976:	state->playedCardCount++;
    #####:  977:	tributeRevealedCards[1] = -1;
        -:  978:      }
        -:  979:
    #####:  980:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  981:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  982:	  state->coins += 2;
        -:  983:	}
        -:  984:		    
    #####:  985:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  986:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  988:	}
        -:  989:	else{//Action Card
    #####:  990:	  state->numActions = state->numActions + 2;
        -:  991:	}
        -:  992:      }
        -:  993:	    
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case ambassador:
    #####:  997:      j = 0;		//used to check if player has enough cards to discard
        -:  998:
    #####:  999:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1000:	{
    #####: 1001:	  return -1;				
        -: 1002:	}
        -: 1003:
    #####: 1004:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  return -1;
        -: 1007:	}
        -: 1008:
    #####: 1009:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:	{
    #####: 1011:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1012:	    {
    #####: 1013:	      j++;
        -: 1014:	    }
        -: 1015:	}
    #####: 1016:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1017:	{
    #####: 1018:	  return -1;				
        -: 1019:	}
        -: 1020:
    #####: 1021:      if (DEBUG) 
        -: 1022:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1023:
        -: 1024:      //increase supply count for choosen card by amount being discarded
    #####: 1025:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1026:			
        -: 1027:      //each other player gains a copy of revealed card
    #####: 1028:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
    #####: 1030:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1031:	    {
    #####: 1032:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1033:	    }
        -: 1034:	}
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1038:
        -: 1039:      //trash copies of cards returned to supply
    #####: 1040:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:	    {
    #####: 1044:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1045:		{
    #####: 1046:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1047:		  break;
        -: 1048:		}
        -: 1049:	    }
        -: 1050:	}			
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case cutpurse:
    #####: 1055:      return playCutpurse(currentPlayer, state, handPos);
call    0 never executed
        -: 1056:		
        -: 1057:    case embargo: 
        -: 1058:      //+2 Coins
    #####: 1059:      state->coins = state->coins + 2;
        -: 1060:			
        -: 1061:      //see if selected pile is in play
    #####: 1062:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1063:	{
    #####: 1064:	  return -1;
        -: 1065:	}
        -: 1066:			
        -: 1067:      //add embargo token to selected supply pile
    #####: 1068:      state->embargoTokens[choice1]++;
        -: 1069:			
        -: 1070:      //trash card
    #####: 1071:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case outpost:
        -: 1075:      //set outpost flag
    #####: 1076:      state->outpostPlayed++;
        -: 1077:			
        -: 1078:      //discard card
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case salvager:
        -: 1083:      //+1 buy
    #####: 1084:      state->numBuys++;
        -: 1085:			
    #####: 1086:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
        -: 1088:	  //gain coins equal to trashed card
    #####: 1089:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1090:	  //trash card
    #####: 1091:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1092:	}
        -: 1093:			
        -: 1094:      //discard card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case sea_hag:
    #####: 1099:      return playSea_Hag(state, currentPlayer);
call    0 never executed
        -: 1100:		
        -: 1101:    case treasure_map:
        -: 1102:      //search hand for another treasure_map
    #####: 1103:      index = -1;
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1107:	    {
    #####: 1108:	      index = i;
    #####: 1109:	      break;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //trash both treasure cards
    #####: 1115:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1116:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1117:
        -: 1118:	  //gain 4 Gold cards
    #####: 1119:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:	    {
    #####: 1121:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1122:	    }
        -: 1123:				
        -: 1124:	  //return success
    #####: 1125:	  return 1;
        -: 1126:	}
        -: 1127:			
        -: 1128:      //no second treasure_map found in hand
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
    #####: 1132:  return -1;
        -: 1133:}
        -: 1134:
function discardCard called 2750 returned 100% blocks executed 75%
     2750: 1135:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1136:{
        -: 1137:	
        -: 1138:  //if card is not trashed, added to Played pile 
     2750: 1139:  if (trashFlag < 1)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -: 1140:    {
        -: 1141:      //add card to played pile
     2500: 1142:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2500: 1143:      state->playedCardCount++;
        -: 1144:    }
        -: 1145:	
        -: 1146:  //set played card to -1
     2750: 1147:  state->hand[currentPlayer][handPos] = -1;
        -: 1148:	
        -: 1149:  //remove card from player's hand
     2750: 1150:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
    #####: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
     2750: 1155:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
    #####: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
        -: 1160:  else 	
        -: 1161:    {
        -: 1162:      //replace discarded card with last card in hand
     2750: 1163:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1164:      //set last card to -1
     2750: 1165:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1166:      //reduce number of cards in hand
     2750: 1167:      state->handCount[currentPlayer]--;
        -: 1168:    }
        -: 1169:	
     2750: 1170:  return 0;
        -: 1171:}
        -: 1172:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1173:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1174:{
        -: 1175:  //Note: supplyPos is enum of choosen card
        -: 1176:	
        -: 1177:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1178:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1179:    {
    #####: 1180:      return -1;
        -: 1181:    }
        -: 1182:	
        -: 1183:  //added card for [whoseTurn] current player:
        -: 1184:  // toFlag = 0 : add to discard
        -: 1185:  // toFlag = 1 : add to deck
        -: 1186:  // toFlag = 2 : add to hand
        -: 1187:
    #####: 1188:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1189:    {
    #####: 1190:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1191:      state->deckCount[player]++;
        -: 1192:    }
    #####: 1193:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1194:    {
    #####: 1195:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1196:      state->handCount[player]++;
        -: 1197:    }
        -: 1198:  else
        -: 1199:    {
    #####: 1200:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1201:      state->discardCount[player]++;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //decrease number in supply pile
    #####: 1205:  state->supplyCount[supplyPos]--;
        -: 1206:	 
    #####: 1207:  return 0;
        -: 1208:}
        -: 1209:
function updateCoins called 52 returned 100% blocks executed 100%
       52: 1210:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1211:{
        -: 1212:  int i;
        -: 1213:	
        -: 1214:  //reset coin count
       52: 1215:  state->coins = 0;
        -: 1216:
        -: 1217:  //add coins for each Treasure card in player's hand
      312: 1218:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1219:    {
      260: 1220:      if (state->hand[player][i] == copper)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 1221:	{
      172: 1222:	  state->coins += 1;
        -: 1223:	}
       88: 1224:      else if (state->hand[player][i] == silver)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1225:	{
       30: 1226:	  state->coins += 2;
        -: 1227:	}
       58: 1228:      else if (state->hand[player][i] == gold)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -: 1229:	{
       30: 1230:	  state->coins += 3;
        -: 1231:	}	
        -: 1232:    }	
        -: 1233:
        -: 1234:  //add bonus
       52: 1235:  state->coins += bonus;
        -: 1236:
       52: 1237:  return 0;
        -: 1238:}
        -: 1239:
        -: 1240:/*
        -: 1241:Adventurer
        -: 1242:
        -: 1243:Reveal cards from your deck until you reveal 2 Treasure cards.
        -: 1244:Put those Treasure cards into your hand and discard the other revealed cards.
        -: 1245:*/
function playAdventurer called 250 returned 100% blocks executed 93%
      250: 1246:int playAdventurer (struct gameState *state, int currentPlayer)
        -: 1247:{
        -: 1248:  int cardDrawn;
      250: 1249:  int drawntreasure = 0;
        -: 1250:  int temphand[MAX_HAND];
        -: 1251:  // this is the counter for the temp hand
      250: 1252:  int z = 0;
        -: 1253:
     4721: 1254:  while(drawntreasure<2) 
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -: 1255:  {
     4221: 1256:    if (state->deckCount[currentPlayer] <1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1257:    {
        -: 1258:      //if the deck is empty we need to shuffle discard and add to deck
        9: 1259:      shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1260:    }
        -: 1261:
     4221: 1262:    drawCard(currentPlayer, state);
call    0 returned 100%
     4221: 1263:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1264:    
     4721: 1265:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
      500: 1266:      drawntreasure++;
        -: 1267:    else
        -: 1268:    {
     3721: 1269:      temphand[z]=cardDrawn;
     3721: 1270:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1271:    }
        -: 1272:  }
        -: 1273:  
      500: 1274:  while(z-1>=0)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1275:  {
    #####: 1276:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1277:    z=z-1;
        -: 1278:  }
        -: 1279:  
      250: 1280:  return 0;
        -: 1281:}
        -: 1282:
        -: 1283:/*
        -: 1284:Smithy
        -: 1285:
        -: 1286:+3 Cards
        -: 1287:*/
function playSmithy called 250 returned 100% blocks executed 100%
      250: 1288:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1289:{
        -: 1290:  int i;
        -: 1291:
        -: 1292:  //+3 Cards
     1250: 1293:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1294:  {
     1000: 1295:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1296:  }
        -: 1297:      
        -: 1298:  //discard card from hand
      250: 1299:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
      250: 1300:  return 0;
        -: 1301:}
        -: 1302:
        -: 1303:/*
        -: 1304:Cutpurse
        -: 1305:
        -: 1306:+2 Coins
        -: 1307:Each other player discards a Copper card (or reveals a hand with no Copper).
        -: 1308:*/
function playCutpurse called 0 returned 0% blocks executed 0%
    #####: 1309:int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1310:{
        -: 1311:  int i, j, k;
        -: 1312:
    #####: 1313:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1314:  for (i = 0; i < state->numPlayers - 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1315:  {
    #####: 1316:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1319:      {
    #####: 1320:        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1321:        {
    #####: 1322:          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1323:          break;
        -: 1324:        }
    #####: 1325:        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1326:        {
    #####: 1327:          for (k = 0; k < state->handCount[i]; k += 2)
branch  0 never executed
branch  1 never executed
        -: 1328:          {
    #####: 1329:            if (DEBUG)
        -: 1330:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1331:          } 
    #####: 1332:          break;
        -: 1333:        }   
        -: 1334:      }    
        -: 1335:    } 
        -: 1336:  }       
        -: 1337:
        -: 1338:  //discard played card from hand
    #####: 1339:  discardCard(handPos, currentPlayer, state, 0);      
call    0 never executed
        -: 1340:
    #####: 1341:  return 0;
        -: 1342:}
        -: 1343:
        -: 1344:/*
        -: 1345:Remodel
        -: 1346:
        -: 1347:Trash a card from your hand.
        -: 1348:Gain a card costing up to 2 coins more than the trashed card.
        -: 1349:*/
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1350:int playRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -: 1351:{
        -: 1352:  int i, j;
        -: 1353:
    #####: 1354:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1355:
    #####: 1356:  if ( (getCost(state->hand[currentPlayer][choice2]) + 2) > getCost(choice1) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1357:  {
    #####: 1358:    return -1;
        -: 1359:  }
        -: 1360:
    #####: 1361:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1362:
        -: 1363:  //discard card from hand
    #####: 1364:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1365:
        -: 1366:  //discard trashed card
    #####: 1367:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1368:  {
    #####: 1369:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1370:      {
    #####: 1371:        discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####: 1372:        break;
        -: 1373:      }
        -: 1374:  }
        -: 1375:
    #####: 1376:  return 0;
        -: 1377:}
        -: 1378:
        -: 1379:/*
        -: 1380:Sea Hag
        -: 1381:
        -: 1382:Each other player discards the top card of his deck,
        -: 1383:then gains a Curse card, putting it on top of his deck.
        -: 1384:*/
function playSea_Hag called 0 returned 0% blocks executed 0%
    #####: 1385:int playSea_Hag(struct gameState *state, int currentPlayer)
        -: 1386:{
        -: 1387:  int i;
        -: 1388:
    #####: 1389:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1392:    {
    #####: 1393:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1394:      state->deckCount[i]++;
    #####: 1395:      state->discardCount[i]--;
    #####: 1396:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1397:    }
        -: 1398:  }
        -: 1399:  
    #####: 1400:  return 0;
        -: 1401:}
        -: 1402:
        -: 1403://end of dominion.c
