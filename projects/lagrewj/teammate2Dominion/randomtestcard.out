File 'dominion.c'
Lines executed:25.04% of 575
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Assignment 2, CS362-400-W16
        -:    2:// Andrew M. Calhoun
        -:    3:// calhouna@oregonstate.edu
        -:    4:// Due Date: 1/17/2016
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
        -:   13:
        -:   14:
   518247:   15:int compare(const void* a, const void* b) {
   518247:   16:  if (*(int*)a > *(int*)b)
    #####:   17:    return 1;
   518247:   18:  if (*(int*)a < *(int*)b)
    11283:   19:    return -1;
   506964:   20:  return 0;
        -:   21:}
        -:   22:
     1000:   23:struct gameState* newGame() {
     1000:   24:  struct gameState* g = malloc(sizeof(struct gameState));
     1000:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
     1000:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;
        -:   50:  //set up random number generator
     1000:   51:  SelectStream(1);
     1000:   52:  PutSeed((long)randomSeed);
        -:   53:
        -:   54:  //check number of players
     1000:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
     1000:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
    11000:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
   110000:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
   100000:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
     1000:   80:  if (numPlayers == 2)
        -:   81:    {
      418:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
      582:   84:  else if (numPlayers == 3)
        -:   85:    {
      398:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
      184:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
     1000:   94:  if (numPlayers == 2)
        -:   95:    {
      418:   96:      state->supplyCount[estate] = 8;
      418:   97:      state->supplyCount[duchy] = 8;
      418:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
      582:  102:      state->supplyCount[estate] = 12;
      582:  103:      state->supplyCount[duchy] = 12;
      582:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
     1000:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  109:  state->supplyCount[silver] = 40;
     1000:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
    21000:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
   165000:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
   155000:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
    12000:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
     2000:  122:		  if (numPlayers == 2){
      836:  123:		    state->supplyCount[i] = 8;
        -:  124:		  }
     1164:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
     8000:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
    10000:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
   145000:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply initialization complete
        -:  143:
        -:  144:  //set player decks
     3766:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
     2766:  147:      state->deckCount[i] = 0;
    11064:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
     8298:  150:	  state->deck[i][j] = estate;
     8298:  151:	  state->deckCount[i]++;
        -:  152:	}
    22128:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
    19362:  155:	  state->deck[i][j] = copper;
    19362:  156:	  state->deckCount[i]++;
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
     3766:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
     2766:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
     3766:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {
        -:  172:      //initialize hand size to zero
     2766:  173:      state->handCount[i] = 0;
     2766:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:
        -:  182:  //set embargo tokens to 0 for all supply piles
    28000:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
    27000:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
     1000:  189:  state->outpostPlayed = 0;
     1000:  190:  state->phase = 0;
     1000:  191:  state->numActions = 1;
     1000:  192:  state->numBuys = 1;
     1000:  193:  state->playedCardCount = 0;
     1000:  194:  state->whoseTurn = 0;
     1000:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  199:  for (it = 0; it < 5; it++){
     5000:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
     1000:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
     1000:  205:  return 0;
        -:  206:}
        -:  207:
     3243:  208:int shuffle(int player, struct gameState *state) {
        -:  209:
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
     3243:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
     3243:  216:  if (state->deckCount[player] < 1)
        2:  217:    return -1;
     3241:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
   153772:  221:  while (state->deckCount[player] > 0) {
   147290:  222:    card = floor(Random() * state->deckCount[player]);
   147290:  223:    newDeck[newDeckPos] = state->deck[player][card];
   147290:  224:    newDeckPos++;
 10223220:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
 10075930:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
   147290:  228:    state->deckCount[player]--;
        -:  229:  }
   150531:  230:  for (i = 0; i < newDeckPos; i++) {
   147290:  231:    state->deck[player][i] = newDeck[i];
   147290:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
     3241:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  239:{
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
    #####:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
    #####:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
    #####:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
    #####:  298:    if (DEBUG)
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
    #####:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
     1000:  353:int whoseTurn(struct gameState *state) {
     1000:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
     6000:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
     6000:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
   120107:  540:    for (i = 0; i < state->discardCount[player];i++){
   119630:  541:      state->deck[player][i] = state->discard[player][i];
   119630:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
      477:  545:    state->deckCount[player] = state->discardCount[player];
      477:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
      477:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:
      477:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:
      477:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
      477:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:
      477:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:
      477:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
      477:  566:    if (deckCounter == 0)
        2:  567:      return -1;
        -:  568:
      475:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      475:  570:    state->deckCount[player]--;
      475:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
     5523:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
     5523:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
     5523:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5523:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5523:  583:    state->deckCount[player]--;
     5523:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
     5998:  587:  return 0;
        -:  588:}
        -:  589:
        -:  590:// PLAY CARD FUNCTIONS ----------------------------------------------------------------------------------------------
        -:  591://
        -:  592:// PLAY ADVENTURER
        -:  593://
        -:  594:
    #####:  595:int playAdventurer(struct gameState *state, int currentPlayer, int cardDrawn, int drawntreasure, int temphand[], int z)
        -:  596:{
        -:  597:
    #####:  598:      while(drawntreasure<2){
    #####:  599:	if (state->deckCount[currentPlayer] <=1){//if the deck is empty we need to shuffle discard and add to deck *** REFACTOR to <= will cause additional shuffling.
    #####:  600:	  shuffle(currentPlayer, state);
        -:  601:	}
    #####:  602:	drawCard(currentPlayer, state);
    #####:  603:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  604:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  605:	  drawntreasure+=2; // The adventurer should not make off with your treasure. Originally had this put as --, but it actually caused the game to freeze. Opted to give the player more coins. Changes seeded outcomes.
        -:  606:	else{
    #####:  607:	  temphand[z]=cardDrawn;
    #####:  608:	  state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
    #####:  609:	  z++;
        -:  610:	}
        -:  611:      }
    #####:  612:      while(z-1>=0){
    #####:  613:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  614:	z=z-1;
        -:  615:      }
    #####:  616:      return 0;
        -:  617:}
        -:  618:
        -:  619://---------------------
        -:  620:// PLAY COUNCIL HALL
        -:  621://---------------------
    #####:  622:int playCouncRoom(struct gameState *state, int currentPlayer, int handPos)
        -:  623:{
        -:  624:    int i; // Needed to be declared under C99 standards, otherwise program breaks.
        -:  625:
        -:  626:    //+4 Cards ** REFACTORED TO 3 because of introduced bug.
    #####:  627:    for (i = 0; i < 4; ++i)
        -:  628:	{
    #####:  629:	  drawCard(currentPlayer, state);
        -:  630:	}
        -:  631:
        -:  632:      //+1 Buy
    #####:  633:      state->numBuys++;
        -:  634:
        -:  635:      //Each other player draws a card
    #####:  636:      for (i = 0; i < state->numPlayers; i++)
        -:  637:	{
    #####:  638:	  if ( i != currentPlayer )
        -:  639:	    {
    #####:  640:	      drawCard(i, state);
        -:  641:	    }
        -:  642:	}
        -:  643:
        -:  644:      //put played card in played card pile
    #####:  645:    discardCard(handPos, currentPlayer, state, 0);
        -:  646:
    #####:  647:    return 0;
        -:  648:}
        -:  649:
        -:  650://-------------------------------
        -:  651:// PLAY MINION
        -:  652://-------------------------------
        -:  653:
    #####:  654:int playMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  655:{
        -:  656:
        -:  657:    int i, j;
        -:  658:
        -:  659:
        -:  660:      //+1 action
    #####:  661:      state->numActions--;
        -:  662:
        -:  663:      //discard card from hand
    #####:  664:      discardCard(handPos, currentPlayer, state, 0);
        -:  665:
    #####:  666:      if (choice1)		//+2 coins *** REFACTORED: -2 coins.
        -:  667:	{
    #####:  668:	  state->coins = state->coins - 2;
        -:  669:	}
        -:  670:
    #####:  671:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  672:	{
        -:  673:
        -:  674://	  //discard hand ** COMMENTED OUT FOR REFACTORING
        -:  675://	  while(numHandCards(state) > 0)
        -:  676://	    {
        -:  677://	      discardCard(handPos, currentPlayer, state, 0);
        -:  678://	    }
        -:  679:
        -:  680:	  //draw 4 *** REFACTORED TO DRAW 3
    #####:  681:	  for (i = 0; i < 3; i++)
        -:  682:	    {
    #####:  683:	      drawCard(currentPlayer, state);
        -:  684:	    }
        -:  685:
        -:  686:	  //other players discard hand and redraw if hand size > 4 *** REFACTOR: They not only get to keep their cards, they get 3 MORE!
    #####:  687:	  for (i = 0; i < state->numPlayers; i++)
        -:  688:	    {
    #####:  689:	      if (i != currentPlayer)
        -:  690:		{
    #####:  691:		  if ( state->handCount[i] > 4 )
        -:  692:		    {
        -:  693:		    //  //discard hand
        -:  694:		    //  while( state->handCount[i] > 0 )
        -:  695:			// {
        -:  696:			//  discardCard(handPos, i, state, 0);
        -:  697:			// }
        -:  698:
        -:  699:		      //draw 4 ** REFACTOR: 3
    #####:  700:		      for (j = 0; j < 3; j++)
        -:  701:			{
    #####:  702:			  drawCard(i, state);
        -:  703:			}
        -:  704:		    }
        -:  705:		}
        -:  706:	    }
        -:  707:
        -:  708:	}
    #####:  709:      return 0;
        -:  710:
        -:  711:}
        -:  712:
        -:  713://-------------------------------
        -:  714:// PLAY SMITHY
        -:  715://-------------------------------
        -:  716:
    #####:  717:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  718:{
        -:  719:
        -:  720:    int i;
        -:  721:
        -:  722://+3 Cards  *** REFACTOR changes i++ to ++i, breaks the intent of the card.
    #####:  723:      for (i = 0; i < 3; ++i)
        -:  724:	{
    #####:  725:	  drawCard(currentPlayer, state);
        -:  726:	}
        -:  727:      //discard card from hand
    #####:  728:      discardCard(handPos, currentPlayer, state, 0);
    #####:  729:      return 0;
        -:  730:}
        -:  731:
        -:  732:
        -:  733://-------------------------------
        -:  734:// VILLAGE
        -:  735://-------------------------------
        -:  736:
    #####:  737:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  738:{
        -:  739:      //+1 Card
    #####:  740:      drawCard(currentPlayer, state);
        -:  741:
        -:  742:      //+2 Actions
    #####:  743:      state->numActions = state->numActions + 2;
        -:  744:
        -:  745:      //discard played card from hand
        -:  746:      // discardCard(handPos, currentPlayer, state, 0);
    #####:  747:      return 0;
        -:  748:
        -:  749:}
        -:  750:
        -:  751://---------------------------------
        -:  752:
    #####:  753:int getCost(int cardNumber)
        -:  754:{
    #####:  755:  switch( cardNumber )
        -:  756:    {
        -:  757:    case curse:
    #####:  758:      return 0;
        -:  759:    case estate:
    #####:  760:      return 2;
        -:  761:    case duchy:
    #####:  762:      return 5;
        -:  763:    case province:
    #####:  764:      return 8;
        -:  765:    case copper:
    #####:  766:      return 0;
        -:  767:    case silver:
    #####:  768:      return 3;
        -:  769:    case gold:
    #####:  770:      return 6;
        -:  771:    case adventurer:
    #####:  772:      return 6;
        -:  773:    case council_room:
    #####:  774:      return 5;
        -:  775:    case feast:
    #####:  776:      return 4;
        -:  777:    case gardens:
    #####:  778:      return 4;
        -:  779:    case mine:
    #####:  780:      return 5;
        -:  781:    case remodel:
    #####:  782:      return 4;
        -:  783:    case smithy:
    #####:  784:      return 4;
        -:  785:    case village:
    #####:  786:      return 3;
        -:  787:    case baron:
    #####:  788:      return 4;
        -:  789:    case great_hall:
    #####:  790:      return 3;
        -:  791:    case minion:
    #####:  792:      return 5;
        -:  793:    case steward:
    #####:  794:      return 3;
        -:  795:    case tribute:
    #####:  796:      return 5;
        -:  797:    case ambassador:
    #####:  798:      return 3;
        -:  799:    case cutpurse:
    #####:  800:      return 4;
        -:  801:    case embargo:
    #####:  802:      return 2;
        -:  803:    case outpost:
    #####:  804:      return 5;
        -:  805:    case salvager:
    #####:  806:      return 4;
        -:  807:    case sea_hag:
    #####:  808:      return 4;
        -:  809:    case treasure_map:
    #####:  810:      return 4;
        -:  811:    }
        -:  812:
    #####:  813:  return -1;
        -:  814:}
        -:  815:
     1000:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:{
        -:  818:  int i;
        -:  819:  int j;
        -:  820:  int k;
        -:  821:  int x;
        -:  822:  int index;
     1000:  823:  int currentPlayer = whoseTurn(state);
     1000:  824:  int nextPlayer = currentPlayer + 1;
        -:  825:
     1000:  826:  int tributeRevealedCards[2] = {-1, -1};
        -:  827:  int temphand[MAX_HAND];// moved above the if statement
     1000:  828:  int drawntreasure=0;
        -:  829:  int cardDrawn;
     1000:  830:  int z = 0;// this is the counter for the temp hand
     1000:  831:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  832:    nextPlayer = 0;
        -:  833:  }
        -:  834:
        -:  835:
     1000:  836:switch(card)
        -:  837:{
        -:  838://------------------------------------------------------------------------------
        -:  839:// Refactored cards/card function calls.
        -:  840:
        -:  841://----------------------------
        -:  842:// ADVENTURER
        -:  843:    case adventurer:
    #####:  844:        playAdventurer(state, currentPlayer, cardDrawn, drawntreasure, temphand, z);
    #####:  845:        break;
        -:  846://----------------------------
        -:  847:
        -:  848:
        -:  849://--------------------------------
        -:  850:// COUNCIL ROOM
        -:  851:    case council_room:
    #####:  852:        playCouncRoom(state, currentPlayer, handPos);
    #####:  853:        break;
        -:  854://---------------------------------
        -:  855:
        -:  856://---------------------------
        -:  857:// MINION
        -:  858://---------------------------
        -:  859:
        -:  860:    case minion:
    #####:  861:        playMinion(state, choice1, choice2, currentPlayer, handPos);
    #####:  862:        break;
        -:  863://--------------------------------
        -:  864:
        -:  865://-------------------------
        -:  866:// SMITHY
        -:  867://-------------------------
        -:  868:
        -:  869:case smithy:
    #####:  870:      playSmithy(state, currentPlayer, handPos);
    #####:  871:      break;
        -:  872:
        -:  873://-------------------------
        -:  874:
        -:  875://-------------------------
        -:  876:// VILLAGE
        -:  877://-------------------------
        -:  878:
        -:  879:case village:
    #####:  880:    playVillage(state, currentPlayer, handPos);
    #####:  881:    break;
        -:  882:
        -:  883://-------------------------
        -:  884:    case feast:
        -:  885:      //gain card with cost up to 5
        -:  886:      //Backup hand
    #####:  887:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  888:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  889:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  890:      }
        -:  891:      //Backup hand
        -:  892:
        -:  893:      //Update Coins for Buy
    #####:  894:      updateCoins(currentPlayer, state, 5);
    #####:  895:      x = 1;//Condition to loop on
    #####:  896:      while( x == 1) {//Buy one card
    #####:  897:	if (supplyCount(choice1, state) <= 0){
    #####:  898:	  if (DEBUG)
        -:  899:	    printf("None of that card left, sorry!\n");
        -:  900:
    #####:  901:	  if (DEBUG){
        -:  902:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  903:	  }
        -:  904:	}
    #####:  905:	else if (state->coins < getCost(choice1)){
    #####:  906:	  printf("That card is too expensive!\n");
        -:  907:
    #####:  908:	  if (DEBUG){
        -:  909:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  910:	  }
        -:  911:	}
        -:  912:	else{
        -:  913:
    #####:  914:	  if (DEBUG){
        -:  915:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  916:	  }
        -:  917:
    #####:  918:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  919:	  x = 0;//No more buying cards
        -:  920:
    #####:  921:	  if (DEBUG){
        -:  922:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  923:	  }
        -:  924:
        -:  925:	}
        -:  926:      }
        -:  927:
        -:  928:      //Reset Hand
    #####:  929:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  930:	state->hand[currentPlayer][i] = temphand[i];
    #####:  931:	temphand[i] = -1;
        -:  932:      }
        -:  933:      //Reset Hand
        -:  934:
    #####:  935:      return 0;
        -:  936:
        -:  937:    case gardens:
    #####:  938:      return -1;
        -:  939:
        -:  940:    case mine:
    #####:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
    #####:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice2 > treasure_map || choice2 < curse)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      gainCard(choice2, state, 2, currentPlayer);
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:
        -:  963:      //discard trashed card
    #####:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	{
    #####:  966:	  if (state->hand[currentPlayer][i] == j)
        -:  967:	    {
    #####:  968:	      discardCard(i, currentPlayer, state, 0);
    #####:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:
    #####:  973:      return 0;
        -:  974:
        -:  975:    case remodel:
    #####:  976:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  977:
    #####:  978:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      gainCard(choice2, state, 0, currentPlayer);
        -:  984:
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
        -:  987:
        -:  988:      //discard trashed card
    #####:  989:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  990:	{
    #####:  991:	  if (state->hand[currentPlayer][i] == j)
        -:  992:	    {
    #####:  993:	      discardCard(i, currentPlayer, state, 0);
    #####:  994:	      break;
        -:  995:	    }
        -:  996:	}
        -:  997:
        -:  998:
    #####:  999:      return 0;
        -: 1000:
        -: 1001: case baron:
    #####: 1002:      state->numBuys++;//Increase buys by 1!
    #####: 1003:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1004:	int p = 0;//Iterator for hand!
    #####: 1005:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1006:	while(card_not_discarded){
    #####: 1007:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1008:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1009:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1010:	    state->discardCount[currentPlayer]++;
    #####: 1011:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1012:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1013:	    }
    #####: 1014:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1015:	    state->handCount[currentPlayer]--;
    #####: 1016:	    card_not_discarded = 0;//Exit the loop
        -: 1017:	  }
    #####: 1018:	  else if (p > state->handCount[currentPlayer]){
    #####: 1019:	    if(DEBUG) {
        -: 1020:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1021:	      printf("Must gain an estate if there are any\n");
        -: 1022:	    }
    #####: 1023:	    if (supplyCount(estate, state) > 0){
    #####: 1024:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1025:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1026:	      if (supplyCount(estate, state) == 0){
    #####: 1027:		isGameOver(state);
        -: 1028:	      }
        -: 1029:	    }
    #####: 1030:	    card_not_discarded = 0;//Exit the loop
        -: 1031:	  }
        -: 1032:
        -: 1033:	  else{
    #####: 1034:	    p++;//Next card
        -: 1035:	  }
        -: 1036:	}
        -: 1037:      }
        -: 1038:
        -: 1039:      else{
    #####: 1040:	if (supplyCount(estate, state) > 0){
    #####: 1041:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1042:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1043:	  if (supplyCount(estate, state) == 0){
    #####: 1044:	    isGameOver(state);
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:
        -: 1053:
        -: 1054:    case great_hall:
        -: 1055:      //+1 Card
     1000: 1056:      drawCard(currentPlayer, state);
        -: 1057:
        -: 1058:      //+1 Actions
     1000: 1059:      state->numActions++;
        -: 1060:
        -: 1061:      //discard card from hand
     1000: 1062:      discardCard(handPos, currentPlayer, state, 0);
     1000: 1063:      return 0;
        -: 1064:
        -: 1065:    case steward:
    #####: 1066:      if (choice1 == 1)
        -: 1067:	{
        -: 1068:	  //+2 cards
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
    #####: 1072:      else if (choice1 == 2)
        -: 1073:	{
        -: 1074:	  //+2 coins
    #####: 1075:	  state->coins = state->coins + 2;
        -: 1076:	}
        -: 1077:      else
        -: 1078:	{
        -: 1079:	  //trash 2 cards in hand
    #####: 1080:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1081:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1082:	}
        -: 1083:
        -: 1084:      //discard card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case tribute:
    #####: 1089:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1090:	if (state->deckCount[nextPlayer] > 0){
    #####: 1091:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1092:	  state->deckCount[nextPlayer]--;
        -: 1093:	}
    #####: 1094:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1095:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1096:	  state->discardCount[nextPlayer]--;
        -: 1097:	}
        -: 1098:	else{
        -: 1099:	  //No Card to Reveal
    #####: 1100:	  if (DEBUG){
        -: 1101:	    printf("No cards to reveal\n");
        -: 1102:	  }
        -: 1103:	}
        -: 1104:      }
        -: 1105:
        -: 1106:      else{
    #####: 1107:	if (state->deckCount[nextPlayer] == 0){
    #####: 1108:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1109:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1110:	    state->deckCount[nextPlayer]++;
    #####: 1111:	    state->discard[nextPlayer][i] = -1;
    #####: 1112:	    state->discardCount[nextPlayer]--;
        -: 1113:	  }
        -: 1114:
    #####: 1115:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1116:	}
    #####: 1117:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1119:	state->deckCount[nextPlayer]--;
    #####: 1120:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1121:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1122:	state->deckCount[nextPlayer]--;
        -: 1123:      }
        -: 1124:
    #####: 1125:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1126:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1127:	state->playedCardCount++;
    #####: 1128:	tributeRevealedCards[1] = -1;
        -: 1129:      }
        -: 1130:
    #####: 1131:      for (i = 0; i <= 2; i ++){
    #####: 1132:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1133:	  state->coins += 2;
        -: 1134:	}
        -: 1135:
    #####: 1136:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1137:	  drawCard(currentPlayer, state);
    #####: 1138:	  drawCard(currentPlayer, state);
        -: 1139:	}
        -: 1140:	else{//Action Card
    #####: 1141:	  state->numActions = state->numActions + 2;
        -: 1142:	}
        -: 1143:      }
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:    case ambassador:
    #####: 1148:      j = 0;		//used to check if player has enough cards to discard
        -: 1149:
    #####: 1150:      if (choice2 > 2 || choice2 < 0)
        -: 1151:	{
    #####: 1152:	  return -1;
        -: 1153:	}
        -: 1154:
    #####: 1155:      if (choice1 == handPos)
        -: 1156:	{
    #####: 1157:	  return -1;
        -: 1158:	}
        -: 1159:
    #####: 1160:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	{
    #####: 1162:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1163:	    {
    #####: 1164:	      j++;
        -: 1165:	    }
        -: 1166:	}
    #####: 1167:      if (j < choice2)
        -: 1168:	{
    #####: 1169:	  return -1;
        -: 1170:	}
        -: 1171:
    #####: 1172:      if (DEBUG)
        -: 1173:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1174:
        -: 1175:      //increase supply count for choosen card by amount being discarded
    #####: 1176:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1177:
        -: 1178:      //each other player gains a copy of revealed card
    #####: 1179:      for (i = 0; i < state->numPlayers; i++)
        -: 1180:	{
    #####: 1181:	  if (i != currentPlayer)
        -: 1182:	    {
    #####: 1183:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1184:	    }
        -: 1185:	}
        -: 1186:
        -: 1187:      //discard played card from hand
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
        -: 1189:
        -: 1190:      //trash copies of cards returned to supply
    #####: 1191:      for (j = 0; j < choice2; j++)
        -: 1192:	{
    #####: 1193:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1194:	    {
    #####: 1195:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1196:		{
    #####: 1197:		  discardCard(i, currentPlayer, state, 1);
    #####: 1198:		  break;
        -: 1199:		}
        -: 1200:	    }
        -: 1201:	}
        -: 1202:
    #####: 1203:      return 0;
        -: 1204:
        -: 1205:    case cutpurse:
        -: 1206:
    #####: 1207:      updateCoins(currentPlayer, state, 2);
    #####: 1208:      for (i = 0; i < state->numPlayers; i++)
        -: 1209:	{
    #####: 1210:	  if (i != currentPlayer)
        -: 1211:	    {
    #####: 1212:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1213:		{
    #####: 1214:		  if (state->hand[i][j] == copper)
        -: 1215:		    {
    #####: 1216:		      discardCard(j, i, state, 0);
    #####: 1217:		      break;
        -: 1218:		    }
    #####: 1219:		  if (j == state->handCount[i])
        -: 1220:		    {
    #####: 1221:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1222:			{
    #####: 1223:			  if (DEBUG)
        -: 1224:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1225:			}
    #####: 1226:		      break;
        -: 1227:		    }
        -: 1228:		}
        -: 1229:
        -: 1230:	    }
        -: 1231:
        -: 1232:	}
        -: 1233:
        -: 1234:      //discard played card from hand
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
        -: 1236:
    #####: 1237:      return 0;
        -: 1238:
        -: 1239:
        -: 1240:    case embargo:
        -: 1241:      //+2 Coins
    #####: 1242:      state->coins = state->coins + 2;
        -: 1243:
        -: 1244:      //see if selected pile is in play
    #####: 1245:      if ( state->supplyCount[choice1] == -1 )
        -: 1246:	{
    #####: 1247:	  return -1;
        -: 1248:	}
        -: 1249:
        -: 1250:      //add embargo token to selected supply pile
    #####: 1251:      state->embargoTokens[choice1]++;
        -: 1252:
        -: 1253:      //trash card
    #####: 1254:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1255:      return 0;
        -: 1256:
        -: 1257:    case outpost:
        -: 1258:      //set outpost flag
    #####: 1259:      state->outpostPlayed++;
        -: 1260:
        -: 1261:      //discard card
    #####: 1262:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:    case salvager:
        -: 1266:      //+1 buy
    #####: 1267:      state->numBuys++;
        -: 1268:
    #####: 1269:      if (choice1)
        -: 1270:	{
        -: 1271:	  //gain coins equal to trashed card
    #####: 1272:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1273:	  //trash card
    #####: 1274:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1275:	}
        -: 1276:
        -: 1277:      //discard card
    #####: 1278:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1279:      return 0;
        -: 1280:
        -: 1281:    case sea_hag:
    #####: 1282:      for (i = 0; i < state->numPlayers; i++){
    #####: 1283:	if (i != currentPlayer){
    #####: 1284:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1285:	  state->discardCount[i]++;
    #####: 1286:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1287:	}
        -: 1288:      }
    #####: 1289:      return 0;
        -: 1290:
        -: 1291:    case treasure_map:
        -: 1292:      //search hand for another treasure_map
    #####: 1293:      index = -1;
    #####: 1294:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1295:	{
    #####: 1296:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1297:	    {
    #####: 1298:	      index = i;
    #####: 1299:	      break;
        -: 1300:	    }
        -: 1301:	}
    #####: 1302:      if (index > -1)
        -: 1303:	{
        -: 1304:	  //trash both treasure cards
    #####: 1305:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1306:	  discardCard(index, currentPlayer, state, 1);
        -: 1307:
        -: 1308:	  //gain 4 Gold cards
    #####: 1309:	  for (i = 0; i < 4; i++)
        -: 1310:	    {
    #####: 1311:	      gainCard(gold, state, 1, currentPlayer);
        -: 1312:	    }
        -: 1313:
        -: 1314:	  //return success
    #####: 1315:	  return 1;
        -: 1316:	}
        -: 1317:
        -: 1318:      //no second treasure_map found in hand
    #####: 1319:      return -1;
        -: 1320:    }
        -: 1321:
    #####: 1322:  return -1;
        -: 1323:}
        -: 1324:
     1000: 1325:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1326:{
        -: 1327:
        -: 1328:  //if card is not trashed, added to Played pile
     1000: 1329:  if (trashFlag < 1)
        -: 1330:    {
        -: 1331:      //add card to played pile
     1000: 1332:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1000: 1333:      state->playedCardCount++;
        -: 1334:    }
        -: 1335:
        -: 1336:  //set played card to -1
     1000: 1337:  state->hand[currentPlayer][handPos] = -1;
        -: 1338:
        -: 1339:  //remove card from player's hand
     1000: 1340:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1341:    {
        -: 1342:      //reduce number of cards in hand
        3: 1343:      state->handCount[currentPlayer]--;
        -: 1344:    }
      997: 1345:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1346:    {
        -: 1347:      //reduce number of cards in hand
        2: 1348:      state->handCount[currentPlayer]--;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
        -: 1352:      //replace discarded card with last card in hand
      995: 1353:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1354:      //set last card to -1
      995: 1355:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1356:      //reduce number of cards in hand
      995: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:
     1000: 1360:  return 0;
        -: 1361:}
        -: 1362:
    #####: 1363:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1364:{
        -: 1365:  //Note: supplyPos is enum of choosen card
        -: 1366:
        -: 1367:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1368:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1369:    {
    #####: 1370:      return -1;
        -: 1371:    }
        -: 1372:
        -: 1373:  //added card for [whoseTurn] current player:
        -: 1374:  // toFlag = 0 : add to discard
        -: 1375:  // toFlag = 1 : add to deck
        -: 1376:  // toFlag = 2 : add to hand
        -: 1377:
    #####: 1378:  if (toFlag == 1)
        -: 1379:    {
    #####: 1380:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1381:      state->deckCount[player]++;
        -: 1382:    }
    #####: 1383:  else if (toFlag == 2)
        -: 1384:    {
    #####: 1385:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1386:      state->handCount[player]++;
        -: 1387:    }
        -: 1388:  else
        -: 1389:    {
    #####: 1390:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1391:      state->discardCount[player]++;
        -: 1392:    }
        -: 1393:
        -: 1394:  //decrease number in supply pile
    #####: 1395:  state->supplyCount[supplyPos]--;
        -: 1396:
    #####: 1397:  return 0;
        -: 1398:}
        -: 1399:
     1000: 1400:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1401:{
        -: 1402:  int i;
        -: 1403:
        -: 1404:  //reset coin count
     1000: 1405:  state->coins = 0;
        -: 1406:
        -: 1407:  //add coins for each Treasure card in player's hand
     6000: 1408:  for (i = 0; i < state->handCount[player]; i++)
        -: 1409:    {
     5000: 1410:      if (state->hand[player][i] == copper)
        -: 1411:	{
     3509: 1412:	  state->coins += 1;
        -: 1413:	}
     1491: 1414:      else if (state->hand[player][i] == silver)
        -: 1415:	{
    #####: 1416:	  state->coins += 2;
        -: 1417:	}
     1491: 1418:      else if (state->hand[player][i] == gold)
        -: 1419:	{
    #####: 1420:	  state->coins += 3;
        -: 1421:	}
        -: 1422:    }
        -: 1423:
        -: 1424:  //add bonus
     1000: 1425:  state->coins += bonus;
        -: 1426:
     1000: 1427:  return 0;
        -: 1428:}
        -: 1429:
        -: 1430:
        -: 1431://end of dominion.c
        -: 1432:
File 'dominion.c'
Lines executed:25.04% of 575
Branches executed:24.46% of 413
Taken at least once:17.43% of 413
Calls executed:12.09% of 91
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Assignment 2, CS362-400-W16
        -:    2:// Andrew M. Calhoun
        -:    3:// calhouna@oregonstate.edu
        -:    4:// Due Date: 1/17/2016
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
        -:   13:
        -:   14:
function compare called 518247 returned 100% blocks executed 83%
   518247:   15:int compare(const void* a, const void* b) {
   518247:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   17:    return 1;
   518247:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
    11283:   19:    return -1;
   506964:   20:  return 0;
        -:   21:}
        -:   22:
function newGame called 1000 returned 100% blocks executed 100%
     1000:   23:struct gameState* newGame() {
     1000:   24:  struct gameState* g = malloc(sizeof(struct gameState));
     1000:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;
        -:   50:  //set up random number generator
     1000:   51:  SelectStream(1);
call    0 returned 100%
     1000:   52:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   53:
        -:   54:  //check number of players
     1000:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
     1000:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
    11000:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:    {
   110000:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   67:        {
   100000:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
     1000:   80:  if (numPlayers == 2)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -:   81:    {
      418:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
      582:   84:  else if (numPlayers == 3)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -:   85:    {
      398:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
      184:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
     1000:   94:  if (numPlayers == 2)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -:   95:    {
      418:   96:      state->supplyCount[estate] = 8;
      418:   97:      state->supplyCount[duchy] = 8;
      418:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
      582:  102:      state->supplyCount[estate] = 12;
      582:  103:      state->supplyCount[duchy] = 12;
      582:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
     1000:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  109:  state->supplyCount[silver] = 40;
     1000:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
    21000:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  114:    {
   165000:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  116:	{
   155000:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
    12000:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  121:		{
     2000:  122:		  if (numPlayers == 2){
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
      836:  123:		    state->supplyCount[i] = 8;
        -:  124:		  }
     1164:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
     8000:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
    10000:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
   145000:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply initialization complete
        -:  143:
        -:  144:  //set player decks
     3766:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  146:    {
     2766:  147:      state->deckCount[i] = 0;
    11064:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  149:	{
     8298:  150:	  state->deck[i][j] = estate;
     8298:  151:	  state->deckCount[i]++;
        -:  152:	}
    22128:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  154:	{
    19362:  155:	  state->deck[i][j] = copper;
    19362:  156:	  state->deckCount[i]++;
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
     3766:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  162:    {
     2766:  163:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
     3766:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  171:    {
        -:  172:      //initialize hand size to zero
     2766:  173:      state->handCount[i] = 0;
     2766:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:
        -:  182:  //set embargo tokens to 0 for all supply piles
    28000:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  184:    {
    27000:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
     1000:  189:  state->outpostPlayed = 0;
     1000:  190:  state->phase = 0;
     1000:  191:  state->numActions = 1;
     1000:  192:  state->numBuys = 1;
     1000:  193:  state->playedCardCount = 0;
     1000:  194:  state->whoseTurn = 0;
     1000:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
     1000:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
     1000:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 3243 returned 100% blocks executed 100%
     3243:  208:int shuffle(int player, struct gameState *state) {
        -:  209:
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
     3243:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
     3243:  216:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:  217:    return -1;
     3241:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
   153772:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   147290:  222:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   147290:  223:    newDeck[newDeckPos] = state->deck[player][card];
   147290:  224:    newDeckPos++;
 10223220:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 10075930:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
   147290:  228:    state->deckCount[player]--;
        -:  229:  }
   150531:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   147290:  231:    state->deck[player][i] = newDeck[i];
   147290:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
     3241:  235:  return 0;
        -:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  239:{
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
call    0 never executed
        -:  257:
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  275:
    #####:  276:  return 0;
        -:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
    #####:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  298:    if (DEBUG)
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  305:
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  307:    state->numBuys--;
    #####:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:
    #####:  315:  return 0;
        -:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  320:}
        -:  321:
function handCard called 0 returned 0% blocks executed 0%
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 1000 returned 100% blocks executed 100%
     1000:  353:int whoseTurn(struct gameState *state) {
     1000:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  361:
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 6000 returned 100% blocks executed 100%
     6000:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
     6000:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  536:
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
   120107:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   119630:  541:      state->deck[player][i] = state->discard[player][i];
   119630:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
      477:  545:    state->deckCount[player] = state->discardCount[player];
      477:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
      477:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  550:
      477:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:
      477:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
      477:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:
      477:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:
      477:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
      477:  566:    if (deckCounter == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:  567:      return -1;
        -:  568:
      475:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      475:  570:    state->deckCount[player]--;
      475:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
     5523:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
     5523:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
     5523:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5523:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5523:  583:    state->deckCount[player]--;
     5523:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
     5998:  587:  return 0;
        -:  588:}
        -:  589:
        -:  590:// PLAY CARD FUNCTIONS ----------------------------------------------------------------------------------------------
        -:  591://
        -:  592:// PLAY ADVENTURER
        -:  593://
        -:  594:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####:  595:int playAdventurer(struct gameState *state, int currentPlayer, int cardDrawn, int drawntreasure, int temphand[], int z)
        -:  596:{
        -:  597:
    #####:  598:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  599:	if (state->deckCount[currentPlayer] <=1){//if the deck is empty we need to shuffle discard and add to deck *** REFACTOR to <= will cause additional shuffling.
branch  0 never executed
branch  1 never executed
    #####:  600:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  601:	}
    #####:  602:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  603:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  604:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  605:	  drawntreasure+=2; // The adventurer should not make off with your treasure. Originally had this put as --, but it actually caused the game to freeze. Opted to give the player more coins. Changes seeded outcomes.
        -:  606:	else{
    #####:  607:	  temphand[z]=cardDrawn;
    #####:  608:	  state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
    #####:  609:	  z++;
        -:  610:	}
        -:  611:      }
    #####:  612:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  613:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  614:	z=z-1;
        -:  615:      }
    #####:  616:      return 0;
        -:  617:}
        -:  618:
        -:  619://---------------------
        -:  620:// PLAY COUNCIL HALL
        -:  621://---------------------
function playCouncRoom called 0 returned 0% blocks executed 0%
    #####:  622:int playCouncRoom(struct gameState *state, int currentPlayer, int handPos)
        -:  623:{
        -:  624:    int i; // Needed to be declared under C99 standards, otherwise program breaks.
        -:  625:
        -:  626:    //+4 Cards ** REFACTORED TO 3 because of introduced bug.
    #####:  627:    for (i = 0; i < 4; ++i)
branch  0 never executed
branch  1 never executed
        -:  628:	{
    #####:  629:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  630:	}
        -:  631:
        -:  632:      //+1 Buy
    #####:  633:      state->numBuys++;
        -:  634:
        -:  635:      //Each other player draws a card
    #####:  636:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  637:	{
    #####:  638:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  639:	    {
    #####:  640:	      drawCard(i, state);
call    0 never executed
        -:  641:	    }
        -:  642:	}
        -:  643:
        -:  644:      //put played card in played card pile
    #####:  645:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  646:
    #####:  647:    return 0;
        -:  648:}
        -:  649:
        -:  650://-------------------------------
        -:  651:// PLAY MINION
        -:  652://-------------------------------
        -:  653:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  654:int playMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  655:{
        -:  656:
        -:  657:    int i, j;
        -:  658:
        -:  659:
        -:  660:      //+1 action
    #####:  661:      state->numActions--;
        -:  662:
        -:  663:      //discard card from hand
    #####:  664:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  665:
    #####:  666:      if (choice1)		//+2 coins *** REFACTORED: -2 coins.
branch  0 never executed
branch  1 never executed
        -:  667:	{
    #####:  668:	  state->coins = state->coins - 2;
        -:  669:	}
        -:  670:
    #####:  671:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  672:	{
        -:  673:
        -:  674://	  //discard hand ** COMMENTED OUT FOR REFACTORING
        -:  675://	  while(numHandCards(state) > 0)
        -:  676://	    {
        -:  677://	      discardCard(handPos, currentPlayer, state, 0);
        -:  678://	    }
        -:  679:
        -:  680:	  //draw 4 *** REFACTORED TO DRAW 3
    #####:  681:	  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  682:	    {
    #####:  683:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  684:	    }
        -:  685:
        -:  686:	  //other players discard hand and redraw if hand size > 4 *** REFACTOR: They not only get to keep their cards, they get 3 MORE!
    #####:  687:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  690:		{
    #####:  691:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  692:		    {
        -:  693:		    //  //discard hand
        -:  694:		    //  while( state->handCount[i] > 0 )
        -:  695:			// {
        -:  696:			//  discardCard(handPos, i, state, 0);
        -:  697:			// }
        -:  698:
        -:  699:		      //draw 4 ** REFACTOR: 3
    #####:  700:		      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  701:			{
    #####:  702:			  drawCard(i, state);
call    0 never executed
        -:  703:			}
        -:  704:		    }
        -:  705:		}
        -:  706:	    }
        -:  707:
        -:  708:	}
    #####:  709:      return 0;
        -:  710:
        -:  711:}
        -:  712:
        -:  713://-------------------------------
        -:  714:// PLAY SMITHY
        -:  715://-------------------------------
        -:  716:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:  717:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  718:{
        -:  719:
        -:  720:    int i;
        -:  721:
        -:  722://+3 Cards  *** REFACTOR changes i++ to ++i, breaks the intent of the card.
    #####:  723:      for (i = 0; i < 3; ++i)
branch  0 never executed
branch  1 never executed
        -:  724:	{
    #####:  725:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  726:	}
        -:  727:      //discard card from hand
    #####:  728:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  729:      return 0;
        -:  730:}
        -:  731:
        -:  732:
        -:  733://-------------------------------
        -:  734:// VILLAGE
        -:  735://-------------------------------
        -:  736:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  737:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  738:{
        -:  739:      //+1 Card
    #####:  740:      drawCard(currentPlayer, state);
call    0 never executed
        -:  741:
        -:  742:      //+2 Actions
    #####:  743:      state->numActions = state->numActions + 2;
        -:  744:
        -:  745:      //discard played card from hand
        -:  746:      // discardCard(handPos, currentPlayer, state, 0);
    #####:  747:      return 0;
        -:  748:
        -:  749:}
        -:  750:
        -:  751://---------------------------------
        -:  752:
function getCost called 0 returned 0% blocks executed 0%
    #####:  753:int getCost(int cardNumber)
        -:  754:{
    #####:  755:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  756:    {
        -:  757:    case curse:
    #####:  758:      return 0;
        -:  759:    case estate:
    #####:  760:      return 2;
        -:  761:    case duchy:
    #####:  762:      return 5;
        -:  763:    case province:
    #####:  764:      return 8;
        -:  765:    case copper:
    #####:  766:      return 0;
        -:  767:    case silver:
    #####:  768:      return 3;
        -:  769:    case gold:
    #####:  770:      return 6;
        -:  771:    case adventurer:
    #####:  772:      return 6;
        -:  773:    case council_room:
    #####:  774:      return 5;
        -:  775:    case feast:
    #####:  776:      return 4;
        -:  777:    case gardens:
    #####:  778:      return 4;
        -:  779:    case mine:
    #####:  780:      return 5;
        -:  781:    case remodel:
    #####:  782:      return 4;
        -:  783:    case smithy:
    #####:  784:      return 4;
        -:  785:    case village:
    #####:  786:      return 3;
        -:  787:    case baron:
    #####:  788:      return 4;
        -:  789:    case great_hall:
    #####:  790:      return 3;
        -:  791:    case minion:
    #####:  792:      return 5;
        -:  793:    case steward:
    #####:  794:      return 3;
        -:  795:    case tribute:
    #####:  796:      return 5;
        -:  797:    case ambassador:
    #####:  798:      return 3;
        -:  799:    case cutpurse:
    #####:  800:      return 4;
        -:  801:    case embargo:
    #####:  802:      return 2;
        -:  803:    case outpost:
    #####:  804:      return 5;
        -:  805:    case salvager:
    #####:  806:      return 4;
        -:  807:    case sea_hag:
    #####:  808:      return 4;
        -:  809:    case treasure_map:
    #####:  810:      return 4;
        -:  811:    }
        -:  812:
    #####:  813:  return -1;
        -:  814:}
        -:  815:
function cardEffect called 1000 returned 100% blocks executed 3%
     1000:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:{
        -:  818:  int i;
        -:  819:  int j;
        -:  820:  int k;
        -:  821:  int x;
        -:  822:  int index;
     1000:  823:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1000:  824:  int nextPlayer = currentPlayer + 1;
        -:  825:
     1000:  826:  int tributeRevealedCards[2] = {-1, -1};
        -:  827:  int temphand[MAX_HAND];// moved above the if statement
     1000:  828:  int drawntreasure=0;
        -:  829:  int cardDrawn;
     1000:  830:  int z = 0;// this is the counter for the temp hand
     1000:  831:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  832:    nextPlayer = 0;
        -:  833:  }
        -:  834:
        -:  835:
     1000:  836:switch(card)
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 100%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  837:{
        -:  838://------------------------------------------------------------------------------
        -:  839:// Refactored cards/card function calls.
        -:  840:
        -:  841://----------------------------
        -:  842:// ADVENTURER
        -:  843:    case adventurer:
    #####:  844:        playAdventurer(state, currentPlayer, cardDrawn, drawntreasure, temphand, z);
call    0 never executed
    #####:  845:        break;
        -:  846://----------------------------
        -:  847:
        -:  848:
        -:  849://--------------------------------
        -:  850:// COUNCIL ROOM
        -:  851:    case council_room:
    #####:  852:        playCouncRoom(state, currentPlayer, handPos);
call    0 never executed
    #####:  853:        break;
        -:  854://---------------------------------
        -:  855:
        -:  856://---------------------------
        -:  857:// MINION
        -:  858://---------------------------
        -:  859:
        -:  860:    case minion:
    #####:  861:        playMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  862:        break;
        -:  863://--------------------------------
        -:  864:
        -:  865://-------------------------
        -:  866:// SMITHY
        -:  867://-------------------------
        -:  868:
        -:  869:case smithy:
    #####:  870:      playSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  871:      break;
        -:  872:
        -:  873://-------------------------
        -:  874:
        -:  875://-------------------------
        -:  876:// VILLAGE
        -:  877://-------------------------
        -:  878:
        -:  879:case village:
    #####:  880:    playVillage(state, currentPlayer, handPos);
call    0 never executed
    #####:  881:    break;
        -:  882:
        -:  883://-------------------------
        -:  884:    case feast:
        -:  885:      //gain card with cost up to 5
        -:  886:      //Backup hand
    #####:  887:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  888:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  889:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  890:      }
        -:  891:      //Backup hand
        -:  892:
        -:  893:      //Update Coins for Buy
    #####:  894:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  895:      x = 1;//Condition to loop on
    #####:  896:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  897:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  898:	  if (DEBUG)
        -:  899:	    printf("None of that card left, sorry!\n");
        -:  900:
    #####:  901:	  if (DEBUG){
        -:  902:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  903:	  }
        -:  904:	}
    #####:  905:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  907:
    #####:  908:	  if (DEBUG){
        -:  909:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  910:	  }
        -:  911:	}
        -:  912:	else{
        -:  913:
    #####:  914:	  if (DEBUG){
        -:  915:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  916:	  }
        -:  917:
    #####:  918:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  919:	  x = 0;//No more buying cards
        -:  920:
    #####:  921:	  if (DEBUG){
        -:  922:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  923:	  }
        -:  924:
        -:  925:	}
        -:  926:      }
        -:  927:
        -:  928:      //Reset Hand
    #####:  929:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  930:	state->hand[currentPlayer][i] = temphand[i];
    #####:  931:	temphand[i] = -1;
        -:  932:      }
        -:  933:      //Reset Hand
        -:  934:
    #####:  935:      return 0;
        -:  936:
        -:  937:    case gardens:
    #####:  938:      return -1;
        -:  939:
        -:  940:    case mine:
    #####:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
    #####:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:
        -:  963:      //discard trashed card
    #####:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  965:	{
    #####:  966:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:
    #####:  973:      return 0;
        -:  974:
        -:  975:    case remodel:
    #####:  976:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  977:
    #####:  978:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  984:
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  987:
        -:  988:      //discard trashed card
    #####:  989:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  990:	{
    #####:  991:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  992:	    {
    #####:  993:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  994:	      break;
        -:  995:	    }
        -:  996:	}
        -:  997:
        -:  998:
    #####:  999:      return 0;
        -: 1000:
        -: 1001: case baron:
    #####: 1002:      state->numBuys++;//Increase buys by 1!
    #####: 1003:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1004:	int p = 0;//Iterator for hand!
    #####: 1005:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1006:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1007:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1008:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1009:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1010:	    state->discardCount[currentPlayer]++;
    #####: 1011:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1012:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1013:	    }
    #####: 1014:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1015:	    state->handCount[currentPlayer]--;
    #####: 1016:	    card_not_discarded = 0;//Exit the loop
        -: 1017:	  }
    #####: 1018:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####: 1019:	    if(DEBUG) {
        -: 1020:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1021:	      printf("Must gain an estate if there are any\n");
        -: 1022:	    }
    #####: 1023:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1025:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1026:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:		isGameOver(state);
call    0 never executed
        -: 1028:	      }
        -: 1029:	    }
    #####: 1030:	    card_not_discarded = 0;//Exit the loop
        -: 1031:	  }
        -: 1032:
        -: 1033:	  else{
    #####: 1034:	    p++;//Next card
        -: 1035:	  }
        -: 1036:	}
        -: 1037:      }
        -: 1038:
        -: 1039:      else{
    #####: 1040:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1041:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1042:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1043:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1044:	    isGameOver(state);
call    0 never executed
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:
        -: 1053:
        -: 1054:    case great_hall:
        -: 1055:      //+1 Card
     1000: 1056:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1057:
        -: 1058:      //+1 Actions
     1000: 1059:      state->numActions++;
        -: 1060:
        -: 1061:      //discard card from hand
     1000: 1062:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000: 1063:      return 0;
        -: 1064:
        -: 1065:    case steward:
    #####: 1066:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1067:	{
        -: 1068:	  //+2 cards
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1071:	}
    #####: 1072:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1073:	{
        -: 1074:	  //+2 coins
    #####: 1075:	  state->coins = state->coins + 2;
        -: 1076:	}
        -: 1077:      else
        -: 1078:	{
        -: 1079:	  //trash 2 cards in hand
    #####: 1080:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1081:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1082:	}
        -: 1083:
        -: 1084:      //discard card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case tribute:
    #####: 1089:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1090:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1091:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1092:	  state->deckCount[nextPlayer]--;
        -: 1093:	}
    #####: 1094:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1095:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1096:	  state->discardCount[nextPlayer]--;
        -: 1097:	}
        -: 1098:	else{
        -: 1099:	  //No Card to Reveal
    #####: 1100:	  if (DEBUG){
        -: 1101:	    printf("No cards to reveal\n");
        -: 1102:	  }
        -: 1103:	}
        -: 1104:      }
        -: 1105:
        -: 1106:      else{
    #####: 1107:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1108:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1109:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1110:	    state->deckCount[nextPlayer]++;
    #####: 1111:	    state->discard[nextPlayer][i] = -1;
    #####: 1112:	    state->discardCount[nextPlayer]--;
        -: 1113:	  }
        -: 1114:
    #####: 1115:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1116:	}
    #####: 1117:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1119:	state->deckCount[nextPlayer]--;
    #####: 1120:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1121:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1122:	state->deckCount[nextPlayer]--;
        -: 1123:      }
        -: 1124:
    #####: 1125:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1126:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1127:	state->playedCardCount++;
    #####: 1128:	tributeRevealedCards[1] = -1;
        -: 1129:      }
        -: 1130:
    #####: 1131:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1132:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1133:	  state->coins += 2;
        -: 1134:	}
        -: 1135:
    #####: 1136:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1137:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1138:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1139:	}
        -: 1140:	else{//Action Card
    #####: 1141:	  state->numActions = state->numActions + 2;
        -: 1142:	}
        -: 1143:      }
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:    case ambassador:
    #####: 1148:      j = 0;		//used to check if player has enough cards to discard
        -: 1149:
    #####: 1150:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1151:	{
    #####: 1152:	  return -1;
        -: 1153:	}
        -: 1154:
    #####: 1155:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  return -1;
        -: 1158:	}
        -: 1159:
    #####: 1160:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1161:	{
    #####: 1162:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1163:	    {
    #####: 1164:	      j++;
        -: 1165:	    }
        -: 1166:	}
    #####: 1167:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1168:	{
    #####: 1169:	  return -1;
        -: 1170:	}
        -: 1171:
    #####: 1172:      if (DEBUG)
        -: 1173:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1174:
        -: 1175:      //increase supply count for choosen card by amount being discarded
    #####: 1176:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1177:
        -: 1178:      //each other player gains a copy of revealed card
    #####: 1179:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1182:	    {
    #####: 1183:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1184:	    }
        -: 1185:	}
        -: 1186:
        -: 1187:      //discard played card from hand
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1189:
        -: 1190:      //trash copies of cards returned to supply
    #####: 1191:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1192:	{
    #####: 1193:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1194:	    {
    #####: 1195:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1196:		{
    #####: 1197:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1198:		  break;
        -: 1199:		}
        -: 1200:	    }
        -: 1201:	}
        -: 1202:
    #####: 1203:      return 0;
        -: 1204:
        -: 1205:    case cutpurse:
        -: 1206:
    #####: 1207:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1208:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1209:	{
    #####: 1210:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1211:	    {
    #####: 1212:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1213:		{
    #####: 1214:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1215:		    {
    #####: 1216:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1217:		      break;
        -: 1218:		    }
    #####: 1219:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1220:		    {
    #####: 1221:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1222:			{
    #####: 1223:			  if (DEBUG)
        -: 1224:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1225:			}
    #####: 1226:		      break;
        -: 1227:		    }
        -: 1228:		}
        -: 1229:
        -: 1230:	    }
        -: 1231:
        -: 1232:	}
        -: 1233:
        -: 1234:      //discard played card from hand
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1236:
    #####: 1237:      return 0;
        -: 1238:
        -: 1239:
        -: 1240:    case embargo:
        -: 1241:      //+2 Coins
    #####: 1242:      state->coins = state->coins + 2;
        -: 1243:
        -: 1244:      //see if selected pile is in play
    #####: 1245:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  return -1;
        -: 1248:	}
        -: 1249:
        -: 1250:      //add embargo token to selected supply pile
    #####: 1251:      state->embargoTokens[choice1]++;
        -: 1252:
        -: 1253:      //trash card
    #####: 1254:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1255:      return 0;
        -: 1256:
        -: 1257:    case outpost:
        -: 1258:      //set outpost flag
    #####: 1259:      state->outpostPlayed++;
        -: 1260:
        -: 1261:      //discard card
    #####: 1262:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:    case salvager:
        -: 1266:      //+1 buy
    #####: 1267:      state->numBuys++;
        -: 1268:
    #####: 1269:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1270:	{
        -: 1271:	  //gain coins equal to trashed card
    #####: 1272:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1273:	  //trash card
    #####: 1274:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1275:	}
        -: 1276:
        -: 1277:      //discard card
    #####: 1278:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1279:      return 0;
        -: 1280:
        -: 1281:    case sea_hag:
    #####: 1282:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1283:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1284:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1285:	  state->discardCount[i]++;
    #####: 1286:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1287:	}
        -: 1288:      }
    #####: 1289:      return 0;
        -: 1290:
        -: 1291:    case treasure_map:
        -: 1292:      //search hand for another treasure_map
    #####: 1293:      index = -1;
    #####: 1294:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1295:	{
    #####: 1296:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1297:	    {
    #####: 1298:	      index = i;
    #####: 1299:	      break;
        -: 1300:	    }
        -: 1301:	}
    #####: 1302:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
        -: 1304:	  //trash both treasure cards
    #####: 1305:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1306:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1307:
        -: 1308:	  //gain 4 Gold cards
    #####: 1309:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1310:	    {
    #####: 1311:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1312:	    }
        -: 1313:
        -: 1314:	  //return success
    #####: 1315:	  return 1;
        -: 1316:	}
        -: 1317:
        -: 1318:      //no second treasure_map found in hand
    #####: 1319:      return -1;
        -: 1320:    }
        -: 1321:
    #####: 1322:  return -1;
        -: 1323:}
        -: 1324:
function discardCard called 1000 returned 100% blocks executed 100%
     1000: 1325:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1326:{
        -: 1327:
        -: 1328:  //if card is not trashed, added to Played pile
     1000: 1329:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1330:    {
        -: 1331:      //add card to played pile
     1000: 1332:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1000: 1333:      state->playedCardCount++;
        -: 1334:    }
        -: 1335:
        -: 1336:  //set played card to -1
     1000: 1337:  state->hand[currentPlayer][handPos] = -1;
        -: 1338:
        -: 1339:  //remove card from player's hand
     1000: 1340:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1341:    {
        -: 1342:      //reduce number of cards in hand
        3: 1343:      state->handCount[currentPlayer]--;
        -: 1344:    }
      997: 1345:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1346:    {
        -: 1347:      //reduce number of cards in hand
        2: 1348:      state->handCount[currentPlayer]--;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
        -: 1352:      //replace discarded card with last card in hand
      995: 1353:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1354:      //set last card to -1
      995: 1355:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1356:      //reduce number of cards in hand
      995: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:
     1000: 1360:  return 0;
        -: 1361:}
        -: 1362:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1363:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1364:{
        -: 1365:  //Note: supplyPos is enum of choosen card
        -: 1366:
        -: 1367:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1368:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1369:    {
    #####: 1370:      return -1;
        -: 1371:    }
        -: 1372:
        -: 1373:  //added card for [whoseTurn] current player:
        -: 1374:  // toFlag = 0 : add to discard
        -: 1375:  // toFlag = 1 : add to deck
        -: 1376:  // toFlag = 2 : add to hand
        -: 1377:
    #####: 1378:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1379:    {
    #####: 1380:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1381:      state->deckCount[player]++;
        -: 1382:    }
    #####: 1383:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1384:    {
    #####: 1385:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1386:      state->handCount[player]++;
        -: 1387:    }
        -: 1388:  else
        -: 1389:    {
    #####: 1390:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1391:      state->discardCount[player]++;
        -: 1392:    }
        -: 1393:
        -: 1394:  //decrease number in supply pile
    #####: 1395:  state->supplyCount[supplyPos]--;
        -: 1396:
    #####: 1397:  return 0;
        -: 1398:}
        -: 1399:
function updateCoins called 1000 returned 100% blocks executed 80%
     1000: 1400:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1401:{
        -: 1402:  int i;
        -: 1403:
        -: 1404:  //reset coin count
     1000: 1405:  state->coins = 0;
        -: 1406:
        -: 1407:  //add coins for each Treasure card in player's hand
     6000: 1408:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1409:    {
     5000: 1410:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1411:	{
     3509: 1412:	  state->coins += 1;
        -: 1413:	}
     1491: 1414:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1415:	{
    #####: 1416:	  state->coins += 2;
        -: 1417:	}
     1491: 1418:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1419:	{
    #####: 1420:	  state->coins += 3;
        -: 1421:	}
        -: 1422:    }
        -: 1423:
        -: 1424:  //add bonus
     1000: 1425:  state->coins += bonus;
        -: 1426:
     1000: 1427:  return 0;
        -: 1428:}
        -: 1429:
        -: 1430:
        -: 1431://end of dominion.c
        -: 1432:
Testing great_hall.

discard count = 121		G->discardCount = 0
discard count = 48		G->discardCount = 48
discard count = 418		G->discardCount = 0
discard count = 433		G->discardCount = 433
discard count = 363		G->discardCount = 0
discard count = 295		G->discardCount = 0
discard count = 347		G->discardCount = 347
discard count = 363		G->discardCount = 363
discard count = 325		G->discardCount = 325
discard count = 117		G->discardCount = 0
discard count = 460		G->discardCount = 460
discard count = 271		G->discardCount = 0
discard count = 39		G->discardCount = 0
discard count = 431		G->discardCount = 431
discard count = 40		G->discardCount = 40
discard count = 92		G->discardCount = 0
discard count = 358		G->discardCount = 0
discard count = 240		G->discardCount = 240
discard count = 235		G->discardCount = 235
discard count = 193		G->discardCount = 0
discard count = 435		G->discardCount = 435
discard count = 153		G->discardCount = 153
discard count = 374		G->discardCount = 0
discard count = 360		G->discardCount = 360
discard count = 431		G->discardCount = 431
discard count = 63		G->discardCount = 63
discard count = 403		G->discardCount = 403
discard count = 247		G->discardCount = 247
discard count = 346		G->discardCount = 346
discard count = 454		G->discardCount = 454
discard count = 328		G->discardCount = 0
discard count = 299		G->discardCount = 299
discard count = 361		G->discardCount = 0
discard count = 257		G->discardCount = 0
discard count = 442		G->discardCount = 442
discard count = 274		G->discardCount = 0
discard count = 282		G->discardCount = 0
discard count = 206		G->discardCount = 0
discard count = 450		G->discardCount = 0
discard count = 364		G->discardCount = 0
discard count = 254		G->discardCount = 0
discard count = 416		G->discardCount = 0
discard count = 307		G->discardCount = 307
discard count = 465		G->discardCount = 465
discard count = 227		G->discardCount = 0
discard count = 321		G->discardCount = 321
discard count = 140		G->discardCount = 0
discard count = 102		G->discardCount = 0
discard count = 17		G->discardCount = 0
discard count = 37		G->discardCount = 37
discard count = 362		G->discardCount = 0
discard count = 251		G->discardCount = 251
discard count = 244		G->discardCount = 244
discard count = 486		G->discardCount = 486
discard count = 446		G->discardCount = 0
discard count = 413		G->discardCount = 0
discard count = 414		G->discardCount = 0
discard count = 380		G->discardCount = 380
discard count = 492		G->discardCount = 0
discard count = 247		G->discardCount = 0
discard count = 268		G->discardCount = 268
discard count = 16		G->discardCount = 0
discard count = 87		G->discardCount = 0
discard count = 43		G->discardCount = 0
discard count = 302		G->discardCount = 302
discard count = 345		G->discardCount = 345
discard count = 22		G->discardCount = 0
discard count = 486		G->discardCount = 0
discard count = 107		G->discardCount = 107
discard count = 96		G->discardCount = 96
discard count = 117		G->discardCount = 0
discard count = 231		G->discardCount = 0
discard count = 160		G->discardCount = 0
discard count = 144		G->discardCount = 144
discard count = 498		G->discardCount = 0
discard count = 367		G->discardCount = 0
discard count = 29		G->discardCount = 0
discard count = 319		G->discardCount = 0
discard count = 288		G->discardCount = 288
discard count = 68		G->discardCount = 68
discard count = 195		G->discardCount = 0
discard count = 310		G->discardCount = 310
discard count = 421		G->discardCount = 0
discard count = 470		G->discardCount = 0
discard count = 96		G->discardCount = 0
discard count = 349		G->discardCount = 0
discard count = 476		G->discardCount = 0
discard count = 229		G->discardCount = 0
discard count = 374		G->discardCount = 374
discard count = 438		G->discardCount = 438
discard count = 50		G->discardCount = 50
discard count = 4		G->discardCount = 4
discard count = 232		G->discardCount = 0
discard count = 321		G->discardCount = 0
discard count = 368		G->discardCount = 0
discard count = 491		G->discardCount = 0
discard count = 154		G->discardCount = 154
discard count = 13		G->discardCount = 0
discard count = 110		G->discardCount = 0
discard count = 154		G->discardCount = 0
discard count = 148		G->discardCount = 148
discard count = 62		G->discardCount = 0
discard count = 499		G->discardCount = 499
discard count = 424		G->discardCount = 0
discard count = 378		G->discardCount = 0
discard count = 163		G->discardCount = 163
discard count = 432		G->discardCount = 0
discard count = 405		G->discardCount = 0
discard count = 432		G->discardCount = 0
discard count = 58		G->discardCount = 58
discard count = 313		G->discardCount = 0
discard count = 53		G->discardCount = 53
discard count = 35		G->discardCount = 0
discard count = 177		G->discardCount = 177
discard count = 15		G->discardCount = 15
discard count = 100		G->discardCount = 0
discard count = 311		G->discardCount = 311
discard count = 446		G->discardCount = 446
discard count = 165		G->discardCount = 165
discard count = 150		G->discardCount = 0
discard count = 497		G->discardCount = 0
discard count = 194		G->discardCount = 0
discard count = 366		G->discardCount = 366
discard count = 71		G->discardCount = 71
discard count = 3		G->discardCount = 3
discard count = 45		G->discardCount = 45
discard count = 476		G->discardCount = 476
discard count = 72		G->discardCount = 72
discard count = 49		G->discardCount = 49
discard count = 392		G->discardCount = 0
discard count = 95		G->discardCount = 0
discard count = 376		G->discardCount = 0
discard count = 308		G->discardCount = 0
discard count = 170		G->discardCount = 170
discard count = 156		G->discardCount = 156
discard count = 133		G->discardCount = 133
discard count = 468		G->discardCount = 468
discard count = 301		G->discardCount = 0
discard count = 272		G->discardCount = 272
discard count = 338		G->discardCount = 338
discard count = 498		G->discardCount = 0
discard count = 250		G->discardCount = 250
discard count = 224		G->discardCount = 224
discard count = 175		G->discardCount = 175
discard count = 489		G->discardCount = 489
discard count = 140		G->discardCount = 0
discard count = 194		G->discardCount = 0
discard count = 151		G->discardCount = 0
discard count = 260		G->discardCount = 0
discard count = 281		G->discardCount = 0
discard count = 300		G->discardCount = 0
discard count = 430		G->discardCount = 430
discard count = 135		G->discardCount = 0
discard count = 22		G->discardCount = 0
discard count = 212		G->discardCount = 0
discard count = 435		G->discardCount = 435
discard count = 266		G->discardCount = 0
discard count = 428		G->discardCount = 0
discard count = 243		G->discardCount = 243
discard count = 383		G->discardCount = 383
discard count = 257		G->discardCount = 257
discard count = 164		G->discardCount = 164
discard count = 51		G->discardCount = 51
discard count = 67		G->discardCount = 0
discard count = 353		G->discardCount = 0
discard count = 321		G->discardCount = 321
discard count = 304		G->discardCount = 304
discard count = 60		G->discardCount = 60
discard count = 14		G->discardCount = 14
discard count = 157		G->discardCount = 0
discard count = 246		G->discardCount = 246
discard count = 110		G->discardCount = 0
discard count = 301		G->discardCount = 301
discard count = 170		G->discardCount = 0
discard count = 308		G->discardCount = 308
discard count = 215		G->discardCount = 0
discard count = 497		G->discardCount = 497
discard count = 227		G->discardCount = 227
discard count = 453		G->discardCount = 0
discard count = 214		G->discardCount = 0
discard count = 402		G->discardCount = 0
discard count = 461		G->discardCount = 461
discard count = 136		G->discardCount = 136
discard count = 135		G->discardCount = 0
discard count = 49		G->discardCount = 49
discard count = 406		G->discardCount = 406
discard count = 281		G->discardCount = 281
discard count = 234		G->discardCount = 234
discard count = 425		G->discardCount = 425
discard count = 424		G->discardCount = 424
discard count = 163		G->discardCount = 163
discard count = 86		G->discardCount = 86
discard count = 433		G->discardCount = 433
discard count = 140		G->discardCount = 0
discard count = 123		G->discardCount = 123
discard count = 234		G->discardCount = 0
discard count = 253		G->discardCount = 0
discard count = 412		G->discardCount = 0
discard count = 364		G->discardCount = 364
discard count = 179		G->discardCount = 179
discard count = 32		G->discardCount = 0
discard count = 239		G->discardCount = 239
discard count = 152		G->discardCount = 0
discard count = 0		G->discardCount = 0
discard count = 484		G->discardCount = 484
discard count = 77		G->discardCount = 77
discard count = 460		G->discardCount = 0
discard count = 12		G->discardCount = 0
discard count = 134		G->discardCount = 0
discard count = 67		G->discardCount = 0
discard count = 327		G->discardCount = 327
discard count = 255		G->discardCount = 255
discard count = 369		G->discardCount = 0
discard count = 255		G->discardCount = 0
discard count = 201		G->discardCount = 201
discard count = 217		G->discardCount = 217
discard count = 354		G->discardCount = 354
discard count = 197		G->discardCount = 0
discard count = 477		G->discardCount = 477
discard count = 61		G->discardCount = 61
discard count = 449		G->discardCount = 0
discard count = 24		G->discardCount = 24
discard count = 54		G->discardCount = 54
discard count = 186		G->discardCount = 186
discard count = 6		G->discardCount = 6
discard count = 148		G->discardCount = 0
discard count = 302		G->discardCount = 0
discard count = 212		G->discardCount = 0
discard count = 58		G->discardCount = 58
discard count = 257		G->discardCount = 257
discard count = 415		G->discardCount = 0
discard count = 263		G->discardCount = 0
discard count = 15		G->discardCount = 0
discard count = 325		G->discardCount = 0
discard count = 152		G->discardCount = 0
discard count = 256		G->discardCount = 256
discard count = 396		G->discardCount = 0
discard count = 162		G->discardCount = 162
discard count = 463		G->discardCount = 463
discard count = 259		G->discardCount = 259
discard count = 2		G->discardCount = 0
discard count = 297		G->discardCount = 0
discard count = 362		G->discardCount = 362
discard count = 354		G->discardCount = 0
discard count = 210		G->discardCount = 210
discard count = 339		G->discardCount = 0
discard count = 224		G->discardCount = 224
discard count = 194		G->discardCount = 194
discard count = 5		G->discardCount = 0
discard count = 490		G->discardCount = 490
discard count = 410		G->discardCount = 0
discard count = 35		G->discardCount = 35
discard count = 50		G->discardCount = 0
discard count = 30		G->discardCount = 30
discard count = 353		G->discardCount = 353
discard count = 232		G->discardCount = 0
discard count = 459		G->discardCount = 0
discard count = 55		G->discardCount = 0
discard count = 17		G->discardCount = 0
discard count = 13		G->discardCount = 0
discard count = 115		G->discardCount = 0
discard count = 212		G->discardCount = 212
discard count = 490		G->discardCount = 490
discard count = 380		G->discardCount = 380
discard count = 437		G->discardCount = 437
discard count = 119		G->discardCount = 0
discard count = 377		G->discardCount = 0
discard count = 62		G->discardCount = 62
discard count = 136		G->discardCount = 136
discard count = 72		G->discardCount = 0
discard count = 232		G->discardCount = 0
discard count = 244		G->discardCount = 244
discard count = 79		G->discardCount = 79
discard count = 127		G->discardCount = 127
discard count = 488		G->discardCount = 0
discard count = 348		G->discardCount = 348
discard count = 462		G->discardCount = 462
discard count = 138		G->discardCount = 138
discard count = 274		G->discardCount = 274
discard count = 252		G->discardCount = 0
discard count = 248		G->discardCount = 248
discard count = 345		G->discardCount = 345
discard count = 235		G->discardCount = 235
discard count = 301		G->discardCount = 301
discard count = 35		G->discardCount = 0
discard count = 430		G->discardCount = 430
discard count = 415		G->discardCount = 415
discard count = 342		G->discardCount = 342
discard count = 17		G->discardCount = 0
discard count = 430		G->discardCount = 0
discard count = 361		G->discardCount = 0
discard count = 29		G->discardCount = 0
discard count = 493		G->discardCount = 493
discard count = 405		G->discardCount = 405
discard count = 214		G->discardCount = 214
discard count = 275		G->discardCount = 275
discard count = 36		G->discardCount = 0
discard count = 309		G->discardCount = 0
discard count = 24		G->discardCount = 0
discard count = 154		G->discardCount = 154
discard count = 65		G->discardCount = 65
discard count = 201		G->discardCount = 0
discard count = 28		G->discardCount = 0
discard count = 448		G->discardCount = 0
discard count = 98		G->discardCount = 98
discard count = 469		G->discardCount = 0
discard count = 477		G->discardCount = 0
discard count = 370		G->discardCount = 0
discard count = 44		G->discardCount = 0
discard count = 458		G->discardCount = 0
discard count = 412		G->discardCount = 0
discard count = 237		G->discardCount = 237
discard count = 241		G->discardCount = 0
discard count = 191		G->discardCount = 191
discard count = 334		G->discardCount = 334
discard count = 176		G->discardCount = 176
discard count = 235		G->discardCount = 235
discard count = 148		G->discardCount = 148
discard count = 492		G->discardCount = 492
discard count = 295		G->discardCount = 0
discard count = 358		G->discardCount = 0
discard count = 209		G->discardCount = 0
discard count = 159		G->discardCount = 159
discard count = 74		G->discardCount = 0
discard count = 216		G->discardCount = 216
discard count = 267		G->discardCount = 0
discard count = 498		G->discardCount = 498
discard count = 125		G->discardCount = 0
discard count = 285		G->discardCount = 285
discard count = 420		G->discardCount = 0
discard count = 34		G->discardCount = 0
discard count = 131		G->discardCount = 0
discard count = 6		G->discardCount = 6
discard count = 286		G->discardCount = 0
discard count = 287		G->discardCount = 0
discard count = 471		G->discardCount = 0
discard count = 331		G->discardCount = 331
discard count = 73		G->discardCount = 73
discard count = 126		G->discardCount = 0
discard count = 241		G->discardCount = 0
discard count = 38		G->discardCount = 38
discard count = 391		G->discardCount = 391
discard count = 77		G->discardCount = 0
discard count = 488		G->discardCount = 488
discard count = 410		G->discardCount = 410
discard count = 459		G->discardCount = 459
discard count = 174		G->discardCount = 0
discard count = 16		G->discardCount = 16
discard count = 271		G->discardCount = 271
discard count = 271		G->discardCount = 0
discard count = 361		G->discardCount = 361
discard count = 403		G->discardCount = 0
discard count = 102		G->discardCount = 0
discard count = 167		G->discardCount = 0
discard count = 268		G->discardCount = 268
discard count = 228		G->discardCount = 228
discard count = 314		G->discardCount = 0
discard count = 464		G->discardCount = 0
discard count = 475		G->discardCount = 475
discard count = 277		G->discardCount = 0
discard count = 412		G->discardCount = 412
discard count = 346		G->discardCount = 0
discard count = 92		G->discardCount = 92
discard count = 331		G->discardCount = 0
discard count = 145		G->discardCount = 145
discard count = 127		G->discardCount = 127
discard count = 197		G->discardCount = 0
discard count = 360		G->discardCount = 0
discard count = 437		G->discardCount = 0
discard count = 366		G->discardCount = 366
discard count = 77		G->discardCount = 0
discard count = 65		G->discardCount = 65
discard count = 233		G->discardCount = 0
discard count = 160		G->discardCount = 160
discard count = 80		G->discardCount = 0
discard count = 92		G->discardCount = 0
discard count = 424		G->discardCount = 424
discard count = 258		G->discardCount = 258
discard count = 196		G->discardCount = 196
discard count = 386		G->discardCount = 386
discard count = 0		G->discardCount = 0
discard count = 479		G->discardCount = 479
discard count = 279		G->discardCount = 279
discard count = 358		G->discardCount = 358
discard count = 436		G->discardCount = 0
discard count = 245		G->discardCount = 0
discard count = 178		G->discardCount = 178
discard count = 168		G->discardCount = 0
discard count = 137		G->discardCount = 137
discard count = 40		G->discardCount = 40
discard count = 47		G->discardCount = 47
discard count = 197		G->discardCount = 197
discard count = 209		G->discardCount = 209
discard count = 475		G->discardCount = 0
discard count = 34		G->discardCount = 34
discard count = 331		G->discardCount = 331
discard count = 234		G->discardCount = 234
discard count = 191		G->discardCount = 0
discard count = 294		G->discardCount = 0
discard count = 171		G->discardCount = 171
discard count = 296		G->discardCount = 0
discard count = 149		G->discardCount = 0
discard count = 269		G->discardCount = 0
discard count = 330		G->discardCount = 330
discard count = 394		G->discardCount = 394
discard count = 13		G->discardCount = 0
discard count = 477		G->discardCount = 0
discard count = 496		G->discardCount = 496
discard count = 327		G->discardCount = 327
discard count = 111		G->discardCount = 111
discard count = 108		G->discardCount = 108
discard count = 239		G->discardCount = 0
discard count = 189		G->discardCount = 189
discard count = 310		G->discardCount = 0
discard count = 303		G->discardCount = 303
discard count = 166		G->discardCount = 0
discard count = 183		G->discardCount = 183
discard count = 404		G->discardCount = 404
discard count = 176		G->discardCount = 0
discard count = 430		G->discardCount = 0
discard count = 35		G->discardCount = 0
discard count = 190		G->discardCount = 190
discard count = 224		G->discardCount = 0
discard count = 247		G->discardCount = 247
discard count = 232		G->discardCount = 0
discard count = 181		G->discardCount = 181
discard count = 14		G->discardCount = 14
discard count = 444		G->discardCount = 444
discard count = 247		G->discardCount = 247
discard count = 77		G->discardCount = 0
discard count = 255		G->discardCount = 255
discard count = 67		G->discardCount = 0
discard count = 75		G->discardCount = 0
discard count = 227		G->discardCount = 227
discard count = 58		G->discardCount = 58
discard count = 260		G->discardCount = 260
discard count = 140		G->discardCount = 140
discard count = 10		G->discardCount = 10
discard count = 384		G->discardCount = 0
discard count = 164		G->discardCount = 164
discard count = 174		G->discardCount = 174
discard count = 403		G->discardCount = 0
discard count = 316		G->discardCount = 0
discard count = 304		G->discardCount = 0
discard count = 461		G->discardCount = 0
discard count = 490		G->discardCount = 490
discard count = 252		G->discardCount = 0
discard count = 79		G->discardCount = 79
discard count = 419		G->discardCount = 419
discard count = 321		G->discardCount = 0
discard count = 0		G->discardCount = 0
discard count = 124		G->discardCount = 0
discard count = 267		G->discardCount = 0
discard count = 253		G->discardCount = 0
discard count = 410		G->discardCount = 0
discard count = 42		G->discardCount = 0
discard count = 414		G->discardCount = 414
discard count = 294		G->discardCount = 294
discard count = 380		G->discardCount = 0
discard count = 365		G->discardCount = 0
discard count = 346		G->discardCount = 0
discard count = 24		G->discardCount = 24
discard count = 33		G->discardCount = 33
discard count = 124		G->discardCount = 0
discard count = 162		G->discardCount = 0
discard count = 208		G->discardCount = 0
discard count = 225		G->discardCount = 0
discard count = 350		G->discardCount = 350
discard count = 48		G->discardCount = 48
discard count = 485		G->discardCount = 485
discard count = 232		G->discardCount = 232
discard count = 415		G->discardCount = 0
discard count = 223		G->discardCount = 223
discard count = 41		G->discardCount = 41
discard count = 452		G->discardCount = 0
discard count = 384		G->discardCount = 384
discard count = 459		G->discardCount = 459
discard count = 180		G->discardCount = 180
discard count = 124		G->discardCount = 0
discard count = 216		G->discardCount = 216
discard count = 139		G->discardCount = 0
discard count = 43		G->discardCount = 43
discard count = 447		G->discardCount = 0
discard count = 162		G->discardCount = 0
discard count = 244		G->discardCount = 0
discard count = 416		G->discardCount = 416
discard count = 268		G->discardCount = 268
discard count = 156		G->discardCount = 156
discard count = 146		G->discardCount = 146
discard count = 457		G->discardCount = 0
discard count = 200		G->discardCount = 200
discard count = 103		G->discardCount = 103
discard count = 450		G->discardCount = 0
discard count = 455		G->discardCount = 0
discard count = 236		G->discardCount = 236
discard count = 152		G->discardCount = 152
discard count = 76		G->discardCount = 76
discard count = 260		G->discardCount = 0
discard count = 405		G->discardCount = 0
discard count = 259		G->discardCount = 259
discard count = 270		G->discardCount = 270
discard count = 479		G->discardCount = 479
discard count = 8		G->discardCount = 8
discard count = 66		G->discardCount = 66
discard count = 291		G->discardCount = 291
discard count = 410		G->discardCount = 0
discard count = 206		G->discardCount = 0
discard count = 315		G->discardCount = 0
discard count = 418		G->discardCount = 418
discard count = 205		G->discardCount = 205
discard count = 492		G->discardCount = 0
discard count = 113		G->discardCount = 0
discard count = 499		G->discardCount = 0
discard count = 219		G->discardCount = 0
discard count = 249		G->discardCount = 0
discard count = 133		G->discardCount = 133
discard count = 60		G->discardCount = 0
discard count = 342		G->discardCount = 0
discard count = 149		G->discardCount = 0
discard count = 481		G->discardCount = 0
discard count = 387		G->discardCount = 387
discard count = 345		G->discardCount = 345
discard count = 371		G->discardCount = 371
discard count = 414		G->discardCount = 414
discard count = 307		G->discardCount = 0
discard count = 253		G->discardCount = 253
discard count = 128		G->discardCount = 128
discard count = 422		G->discardCount = 422
discard count = 27		G->discardCount = 27
discard count = 232		G->discardCount = 232
discard count = 347		G->discardCount = 347
discard count = 11		G->discardCount = 11
discard count = 143		G->discardCount = 143
discard count = 305		G->discardCount = 0
discard count = 322		G->discardCount = 322
discard count = 487		G->discardCount = 0
discard count = 365		G->discardCount = 365
discard count = 457		G->discardCount = 457
discard count = 56		G->discardCount = 56
discard count = 219		G->discardCount = 0
discard count = 350		G->discardCount = 350
discard count = 473		G->discardCount = 0
discard count = 118		G->discardCount = 118
discard count = 259		G->discardCount = 0
discard count = 111		G->discardCount = 0
discard count = 7		G->discardCount = 0
discard count = 138		G->discardCount = 0
discard count = 401		G->discardCount = 401
discard count = 297		G->discardCount = 297
discard count = 453		G->discardCount = 453
discard count = 464		G->discardCount = 464
discard count = 162		G->discardCount = 0
discard count = 294		G->discardCount = 294
discard count = 46		G->discardCount = 46
discard count = 223		G->discardCount = 223
discard count = 59		G->discardCount = 0
discard count = 259		G->discardCount = 259
discard count = 218		G->discardCount = 0
discard count = 13		G->discardCount = 0
discard count = 231		G->discardCount = 231
discard count = 89		G->discardCount = 0
discard count = 179		G->discardCount = 0
discard count = 166		G->discardCount = 166
discard count = 263		G->discardCount = 0
discard count = 434		G->discardCount = 434
discard count = 273		G->discardCount = 0
discard count = 452		G->discardCount = 452
discard count = 429		G->discardCount = 429
discard count = 222		G->discardCount = 222
discard count = 162		G->discardCount = 162
discard count = 125		G->discardCount = 0
discard count = 214		G->discardCount = 0
discard count = 403		G->discardCount = 403
discard count = 285		G->discardCount = 285
discard count = 378		G->discardCount = 378
discard count = 294		G->discardCount = 294
discard count = 382		G->discardCount = 0
discard count = 343		G->discardCount = 343
discard count = 94		G->discardCount = 0
discard count = 278		G->discardCount = 278
discard count = 324		G->discardCount = 0
discard count = 194		G->discardCount = 0
discard count = 453		G->discardCount = 0
discard count = 211		G->discardCount = 211
discard count = 488		G->discardCount = 0
discard count = 122		G->discardCount = 0
discard count = 98		G->discardCount = 98
discard count = 220		G->discardCount = 0
discard count = 31		G->discardCount = 31
discard count = 257		G->discardCount = 257
discard count = 491		G->discardCount = 491
discard count = 18		G->discardCount = 18
discard count = 45		G->discardCount = 45
discard count = 328		G->discardCount = 0
discard count = 319		G->discardCount = 319
discard count = 169		G->discardCount = 0
discard count = 50		G->discardCount = 50
discard count = 464		G->discardCount = 464
discard count = 247		G->discardCount = 247
discard count = 381		G->discardCount = 381
discard count = 332		G->discardCount = 0
discard count = 78		G->discardCount = 0
discard count = 481		G->discardCount = 0
discard count = 356		G->discardCount = 356
discard count = 143		G->discardCount = 0
discard count = 494		G->discardCount = 494
discard count = 484		G->discardCount = 484
discard count = 199		G->discardCount = 199
discard count = 209		G->discardCount = 209
discard count = 443		G->discardCount = 0
discard count = 57		G->discardCount = 57
discard count = 101		G->discardCount = 0
discard count = 243		G->discardCount = 243
discard count = 10		G->discardCount = 10
discard count = 144		G->discardCount = 144
discard count = 152		G->discardCount = 0
discard count = 259		G->discardCount = 259
discard count = 45		G->discardCount = 0
discard count = 152		G->discardCount = 152
discard count = 326		G->discardCount = 0
discard count = 344		G->discardCount = 0
discard count = 384		G->discardCount = 384
discard count = 99		G->discardCount = 0
discard count = 98		G->discardCount = 0
discard count = 385		G->discardCount = 385
discard count = 385		G->discardCount = 0
discard count = 185		G->discardCount = 185
discard count = 465		G->discardCount = 465
discard count = 258		G->discardCount = 258
discard count = 421		G->discardCount = 421
discard count = 497		G->discardCount = 0
discard count = 204		G->discardCount = 204
discard count = 88		G->discardCount = 0
discard count = 235		G->discardCount = 0
discard count = 490		G->discardCount = 0
discard count = 156		G->discardCount = 156
discard count = 356		G->discardCount = 0
discard count = 198		G->discardCount = 198
discard count = 206		G->discardCount = 0
discard count = 465		G->discardCount = 0
discard count = 152		G->discardCount = 152
discard count = 292		G->discardCount = 292
discard count = 270		G->discardCount = 0
discard count = 371		G->discardCount = 371
discard count = 489		G->discardCount = 0
discard count = 159		G->discardCount = 159
discard count = 18		G->discardCount = 0
discard count = 291		G->discardCount = 0
discard count = 407		G->discardCount = 407
discard count = 493		G->discardCount = 493
discard count = 401		G->discardCount = 401
discard count = 148		G->discardCount = 0
discard count = 408		G->discardCount = 0
discard count = 254		G->discardCount = 254
discard count = 189		G->discardCount = 0
discard count = 193		G->discardCount = 0
discard count = 443		G->discardCount = 0
discard count = 82		G->discardCount = 0
discard count = 374		G->discardCount = 374
discard count = 40		G->discardCount = 40
discard count = 483		G->discardCount = 483
discard count = 6		G->discardCount = 0
discard count = 331		G->discardCount = 0
discard count = 54		G->discardCount = 54
discard count = 31		G->discardCount = 31
discard count = 422		G->discardCount = 0
discard count = 180		G->discardCount = 180
discard count = 385		G->discardCount = 385
discard count = 202		G->discardCount = 0
discard count = 40		G->discardCount = 0
discard count = 439		G->discardCount = 439
discard count = 444		G->discardCount = 444
discard count = 338		G->discardCount = 0
discard count = 481		G->discardCount = 481
discard count = 130		G->discardCount = 130
discard count = 258		G->discardCount = 258
discard count = 457		G->discardCount = 0
discard count = 323		G->discardCount = 0
discard count = 49		G->discardCount = 49
discard count = 232		G->discardCount = 232
discard count = 108		G->discardCount = 0
discard count = 328		G->discardCount = 0
discard count = 15		G->discardCount = 0
discard count = 9		G->discardCount = 0
discard count = 337		G->discardCount = 337
discard count = 261		G->discardCount = 261
discard count = 84		G->discardCount = 84
discard count = 429		G->discardCount = 429
discard count = 317		G->discardCount = 0
discard count = 301		G->discardCount = 301
discard count = 156		G->discardCount = 156
discard count = 371		G->discardCount = 0
discard count = 66		G->discardCount = 66
discard count = 348		G->discardCount = 0
discard count = 280		G->discardCount = 280
discard count = 340		G->discardCount = 340
discard count = 469		G->discardCount = 469
discard count = 274		G->discardCount = 274
discard count = 259		G->discardCount = 259
discard count = 34		G->discardCount = 34
discard count = 172		G->discardCount = 172
discard count = 415		G->discardCount = 415
discard count = 426		G->discardCount = 426
discard count = 196		G->discardCount = 196
discard count = 381		G->discardCount = 0
discard count = 171		G->discardCount = 171
discard count = 223		G->discardCount = 223
discard count = 327		G->discardCount = 327
discard count = 264		G->discardCount = 0
discard count = 371		G->discardCount = 0
discard count = 208		G->discardCount = 208
discard count = 212		G->discardCount = 212
discard count = 301		G->discardCount = 0
discard count = 37		G->discardCount = 0
discard count = 268		G->discardCount = 0
discard count = 222		G->discardCount = 0
discard count = 68		G->discardCount = 68
discard count = 126		G->discardCount = 126
discard count = 288		G->discardCount = 288
discard count = 356		G->discardCount = 0
discard count = 370		G->discardCount = 0
discard count = 16		G->discardCount = 0
discard count = 459		G->discardCount = 0
discard count = 71		G->discardCount = 0
discard count = 133		G->discardCount = 133
discard count = 141		G->discardCount = 141
discard count = 472		G->discardCount = 472
discard count = 214		G->discardCount = 0
discard count = 454		G->discardCount = 454
discard count = 142		G->discardCount = 142
discard count = 140		G->discardCount = 0
discard count = 222		G->discardCount = 0
discard count = 56		G->discardCount = 0
discard count = 118		G->discardCount = 118
discard count = 241		G->discardCount = 0
discard count = 316		G->discardCount = 316
discard count = 495		G->discardCount = 495
discard count = 368		G->discardCount = 0
discard count = 397		G->discardCount = 0
discard count = 57		G->discardCount = 0
discard count = 64		G->discardCount = 64
discard count = 404		G->discardCount = 0
discard count = 176		G->discardCount = 176
discard count = 73		G->discardCount = 73
discard count = 480		G->discardCount = 0
discard count = 449		G->discardCount = 449
discard count = 370		G->discardCount = 370
discard count = 234		G->discardCount = 234
discard count = 26		G->discardCount = 26
discard count = 220		G->discardCount = 220
discard count = 45		G->discardCount = 45
discard count = 264		G->discardCount = 264
discard count = 467		G->discardCount = 467
discard count = 67		G->discardCount = 67
discard count = 35		G->discardCount = 0
discard count = 368		G->discardCount = 0
discard count = 446		G->discardCount = 446
discard count = 66		G->discardCount = 0
discard count = 3		G->discardCount = 0
discard count = 336		G->discardCount = 336
discard count = 295		G->discardCount = 295
discard count = 181		G->discardCount = 0
discard count = 430		G->discardCount = 0
discard count = 447		G->discardCount = 447
discard count = 444		G->discardCount = 0
discard count = 376		G->discardCount = 0
discard count = 6		G->discardCount = 6
discard count = 308		G->discardCount = 0
discard count = 95		G->discardCount = 95
discard count = 135		G->discardCount = 0
discard count = 171		G->discardCount = 171
discard count = 6		G->discardCount = 0
discard count = 369		G->discardCount = 0
discard count = 84		G->discardCount = 84
discard count = 120		G->discardCount = 120
discard count = 294		G->discardCount = 0
discard count = 243		G->discardCount = 0
discard count = 43		G->discardCount = 43
discard count = 64		G->discardCount = 64
discard count = 485		G->discardCount = 485
discard count = 381		G->discardCount = 0
discard count = 335		G->discardCount = 0
discard count = 379		G->discardCount = 0
discard count = 306		G->discardCount = 0
discard count = 479		G->discardCount = 479
discard count = 334		G->discardCount = 334
discard count = 162		G->discardCount = 0
discard count = 292		G->discardCount = 0
discard count = 111		G->discardCount = 111
discard count = 475		G->discardCount = 475
discard count = 288		G->discardCount = 288
discard count = 167		G->discardCount = 0
discard count = 351		G->discardCount = 351
discard count = 277		G->discardCount = 0
discard count = 264		G->discardCount = 0
discard count = 493		G->discardCount = 0
discard count = 103		G->discardCount = 0
discard count = 410		G->discardCount = 0
discard count = 189		G->discardCount = 189
discard count = 46		G->discardCount = 0
discard count = 376		G->discardCount = 376
discard count = 440		G->discardCount = 0
discard count = 57		G->discardCount = 57
discard count = 303		G->discardCount = 0
discard count = 201		G->discardCount = 0
discard count = 160		G->discardCount = 160
discard count = 29		G->discardCount = 0
discard count = 404		G->discardCount = 404
discard count = 324		G->discardCount = 0
discard count = 432		G->discardCount = 432
discard count = 12		G->discardCount = 12
discard count = 312		G->discardCount = 0
discard count = 115		G->discardCount = 115
discard count = 144		G->discardCount = 0
discard count = 217		G->discardCount = 0
discard count = 220		G->discardCount = 220
discard count = 25		G->discardCount = 25
discard count = 78		G->discardCount = 78
discard count = 288		G->discardCount = 288
discard count = 454		G->discardCount = 454
discard count = 119		G->discardCount = 0
discard count = 404		G->discardCount = 0
discard count = 202		G->discardCount = 0
discard count = 123		G->discardCount = 123
discard count = 383		G->discardCount = 0
discard count = 171		G->discardCount = 171
discard count = 331		G->discardCount = 331
discard count = 88		G->discardCount = 0
discard count = 56		G->discardCount = 56
discard count = 101		G->discardCount = 0
discard count = 114		G->discardCount = 114
discard count = 33		G->discardCount = 33
discard count = 328		G->discardCount = 0
discard count = 470		G->discardCount = 470
discard count = 406		G->discardCount = 0
discard count = 117		G->discardCount = 0
discard count = 473		G->discardCount = 473
discard count = 307		G->discardCount = 0
discard count = 117		G->discardCount = 0
discard count = 496		G->discardCount = 0
discard count = 7		G->discardCount = 0
discard count = 281		G->discardCount = 0
discard count = 357		G->discardCount = 357
discard count = 272		G->discardCount = 272
discard count = 74		G->discardCount = 0
discard count = 467		G->discardCount = 467
discard count = 20		G->discardCount = 20
discard count = 92		G->discardCount = 0
discard count = 79		G->discardCount = 79
discard count = 103		G->discardCount = 0
discard count = 202		G->discardCount = 202
discard count = 311		G->discardCount = 0
discard count = 333		G->discardCount = 333
discard count = 264		G->discardCount = 264
discard count = 398		G->discardCount = 398
discard count = 0		G->discardCount = 0
discard count = 160		G->discardCount = 0
discard count = 393		G->discardCount = 393
discard count = 375		G->discardCount = 0
discard count = 475		G->discardCount = 0
discard count = 186		G->discardCount = 0
discard count = 319		G->discardCount = 319
discard count = 300		G->discardCount = 0
discard count = 108		G->discardCount = 0
discard count = 496		G->discardCount = 496
discard count = 482		G->discardCount = 482
discard count = 174		G->discardCount = 174
discard count = 38		G->discardCount = 0
discard count = 319		G->discardCount = 319
discard count = 407		G->discardCount = 0
discard count = 161		G->discardCount = 161
discard count = 24		G->discardCount = 0
discard count = 137		G->discardCount = 0
discard count = 83		G->discardCount = 0
discard count = 137		G->discardCount = 0
discard count = 346		G->discardCount = 346
discard count = 452		G->discardCount = 0
discard count = 279		G->discardCount = 279
discard count = 300		G->discardCount = 300
discard count = 276		G->discardCount = 0
discard count = 403		G->discardCount = 403
discard count = 430		G->discardCount = 0
discard count = 480		G->discardCount = 0
discard count = 376		G->discardCount = 0
discard count = 423		G->discardCount = 423
discard count = 189		G->discardCount = 189
discard count = 462		G->discardCount = 462
discard count = 175		G->discardCount = 175
discard count = 14		G->discardCount = 14
discard count = 245		G->discardCount = 0
discard count = 228		G->discardCount = 0
discard count = 329		G->discardCount = 329
discard count = 189		G->discardCount = 189
discard count = 456		G->discardCount = 0
discard count = 437		G->discardCount = 0
discard count = 141		G->discardCount = 0
discard count = 168		G->discardCount = 168
discard count = 37		G->discardCount = 0
discard count = 216		G->discardCount = 216
discard count = 396		G->discardCount = 0
discard count = 345		G->discardCount = 0
discard count = 51		G->discardCount = 51
discard count = 142		G->discardCount = 0
discard count = 26		G->discardCount = 26
discard count = 242		G->discardCount = 242
discard count = 155		G->discardCount = 0
discard count = 430		G->discardCount = 0
discard count = 167		G->discardCount = 0
discard count = 360		G->discardCount = 0
discard count = 5		G->discardCount = 0
discard count = 357		G->discardCount = 0
discard count = 283		G->discardCount = 0
discard count = 101		G->discardCount = 101
discard count = 170		G->discardCount = 0
discard count = 192		G->discardCount = 192
discard count = 250		G->discardCount = 250
discard count = 417		G->discardCount = 417
discard count = 244		G->discardCount = 244
discard count = 172		G->discardCount = 172
discard count = 229		G->discardCount = 229
discard count = 281		G->discardCount = 0
discard count = 421		G->discardCount = 421
discard count = 111		G->discardCount = 111
discard count = 27		G->discardCount = 27
discard count = 61		G->discardCount = 0
discard count = 95		G->discardCount = 95
discard count = 3		G->discardCount = 0
discard count = 116		G->discardCount = 116
discard count = 77		G->discardCount = 77
discard count = 35		G->discardCount = 0
discard count = 443		G->discardCount = 443
discard count = 318		G->discardCount = 318
discard count = 471		G->discardCount = 0
discard count = 84		G->discardCount = 84
discard count = 331		G->discardCount = 331
discard count = 164		G->discardCount = 164
discard count = 157		G->discardCount = 157
discard count = 45		G->discardCount = 0
discard count = 273		G->discardCount = 273
discard count = 132		G->discardCount = 0
discard count = 208		G->discardCount = 0
discard count = 118		G->discardCount = 118
discard count = 183		G->discardCount = 183
discard count = 480		G->discardCount = 480
discard count = 157		G->discardCount = 0
discard count = 157		G->discardCount = 0
discard count = 470		G->discardCount = 0
discard count = 299		G->discardCount = 0
discard count = 404		G->discardCount = 0
discard count = 452		G->discardCount = 0
discard count = 162		G->discardCount = 0
discard count = 482		G->discardCount = 0
discard count = 124		G->discardCount = 0
discard count = 334		G->discardCount = 0
discard count = 166		G->discardCount = 166
discard count = 67		G->discardCount = 67
discard count = 135		G->discardCount = 0
discard count = 71		G->discardCount = 71
discard count = 116		G->discardCount = 0
discard count = 108		G->discardCount = 0
discard count = 55		G->discardCount = 55
discard count = 255		G->discardCount = 0
discard count = 164		G->discardCount = 164
discard count = 486		G->discardCount = 0
discard count = 344		G->discardCount = 344
discard count = 65		G->discardCount = 65
discard count = 383		G->discardCount = 383
discard count = 328		G->discardCount = 0
discard count = 270		G->discardCount = 0
discard count = 237		G->discardCount = 237
discard count = 166		G->discardCount = 166
discard count = 201		G->discardCount = 201
discard count = 55		G->discardCount = 0
discard count = 25		G->discardCount = 25
discard count = 4		G->discardCount = 4
discard count = 339		G->discardCount = 0
discard count = 349		G->discardCount = 0
discard count = 385		G->discardCount = 0
discard count = 270		G->discardCount = 0
discard count = 261		G->discardCount = 261
discard count = 477		G->discardCount = 0
discard count = 413		G->discardCount = 0
discard count = 216		G->discardCount = 216
discard count = 182		G->discardCount = 0
discard count = 498		G->discardCount = 0
discard count = 410		G->discardCount = 410
discard count = 180		G->discardCount = 0
discard count = 136		G->discardCount = 136
discard count = 194		G->discardCount = 194
discard count = 416		G->discardCount = 416
discard count = 261		G->discardCount = 261
discard count = 491		G->discardCount = 491
discard count = 195		G->discardCount = 195
discard count = 44		G->discardCount = 0
discard count = 62		G->discardCount = 0
discard count = 214		G->discardCount = 0
discard count = 151		G->discardCount = 151
discard count = 347		G->discardCount = 0
discard count = 342		G->discardCount = 342
discard count = 447		G->discardCount = 447
**Test complete.
