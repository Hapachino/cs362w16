        -:    0:Source:cardTest1.c
        -:    0:Graph:cardTest1.gcno
        -:    0:Data:cardTest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Unit test for Smithy Card
        -:    3: *
        -:    4: * Business Rules:
        -:    5: *  1.	Current player should receive exactly 3 cards
        -:    6: *	2.	3 cards should come from his own pile
        -:    7: *	3.	No state change should occur
        -:    8: *	4.	Current card should be discarded
        -:    9: *
        -:   10: * cardTest1: cardTest1.c dominion.o rngs.o
        -:   11: *      gcc -o cardTest1 -g cardTest1.c dominion.o rngs.o $(FLAGS)
        -:   12: *
        -:   13: */
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:
        -:   22://set NOISY_TEST to 0 to remove prinftf's from output
        -:   23:#define NOISY_TEST 1
        -:   24:
        1:   25:int main() {
        1:   26:    int i = 0, p = 0;
        1:   27:    int handPos = 0;
        1:   28:    int seed = 1000;
        1:   29:    int numPlayer = 2;
        -:   30:    int new_game;
        -:   31:    int hand_count, deck_count, player_turn, smithy_count;
        -:   32:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        1:   33:                 remodel, smithy, village, baron, great_hall};
        -:   34:    struct gameState G;
        -:   35:
        1:   36:    printf("TESTING Smithy Card\n");
        -:   37:
        -:   38:    //clear the game state
        1:   39:    memset(&G, 23, sizeof(struct gameState));
        -:   40:    //initialize a new game
        1:   41:    new_game = initializeGame(numPlayer, k, seed, &G);
        -:   42:
        1:   43:    hand_count = G.handCount[p];
        1:   44:    deck_count = G.deckCount[p];
        1:   45:    player_turn = G.whoseTurn;
        1:   46:    smithy_count = G.supplyCount[smithy];
        1:   47:    int estate_count = G.supplyCount[estate];
        1:   48:    int duchy_count = G.supplyCount[duchy];
        1:   49:    int province_count = G.supplyCount[province];
        1:   50:    int great_hall_count = G.supplyCount[great_hall];
        1:   51:    int gardens_count = G.supplyCount[gardens];
        -:   52:
        -:   53:    //play smithy card
        1:   54:    playSmithy(&G, handPos);
        -:   55:#if (NOISY_TEST == 1)
        -:   56:    //hand should have +2 cards
        1:   57:    if(G.handCount[p] == hand_count + 2)
        1:   58:        printf("TEST PASSED\n");
        -:   59:    else
    #####:   60:        printf("TEST FAILED\n");
        -:   61:    //deck should have -3 cards
        1:   62:    if(G.deckCount[p] == deck_count - 3)
        1:   63:        printf("TEST PASSED\n");
        -:   64:    else
    #####:   65:        printf("TEST FAILED\n");
        -:   66:    //player's turn should not change
        1:   67:    if(G.whoseTurn == player_turn)
        1:   68:        printf("TEST PASSED\n");
        -:   69:    else
    #####:   70:        printf("TEST FAILED\n");
        -:   71:    //victory cards should be unchanged
        2:   72:    if(G.supplyCount[estate] == estate_count && G.supplyCount[duchy] == duchy_count && G.supplyCount[province] == province_count)
        1:   73:        printf("TEST PASSED\n");
        -:   74:    else
    #####:   75:        printf("TEST FAILED\n");
        -:   76:    //kingdom cards should be unchanged
        2:   77:    if(G.supplyCount[great_hall] == great_hall_count && G.supplyCount[gardens] == gardens_count)
        1:   78:        printf("TEST PASSED\n");
        -:   79:    else
    #####:   80:        printf("TEST FAILED\n");
        -:   81:#endif
        -:   82:
        1:   83:    hand_count = G.handCount[p];
        1:   84:    deck_count = G.deckCount[p];
        1:   85:    player_turn = G.whoseTurn;
        -:   86:
        1:   87:    printf("\nAll tests passed: Smithy Card\n");
        -:   88:
        1:   89:    return 0;
        -:   90:}
