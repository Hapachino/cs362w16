
**********
randomtestadventurer

Testing Adventurer card:
*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=13, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=6
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=6
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=13, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=1, deck count=13, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=15, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=3, player=2, deck count=15, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=16, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=6
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=6
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=21, hand count=11
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=14, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=2, deck count=22, hand count=20
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=3, player=2, deck count=22, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=18, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=17, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=3, deck count=15, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=6
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=3, player=2, deck count=21, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=2, deck count=22, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=2, player=1, deck count=15, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=6
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=13, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=22, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=14, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=16, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=2, deck count=18, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=2, player=1, deck count=19, hand count=6
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=21, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=12, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=17, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=16, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=2, deck count=24, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=11, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=16, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=17, hand count=6
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=12, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=12, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=18, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=3, player=1, deck count=21, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=20, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=2, deck count=18, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=12, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=3, deck count=21, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=12, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=2, deck count=11, hand count=10
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=19, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=17, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=2, player=1, deck count=21, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=7
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=11, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=19, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=8
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=2, player=0, deck count=10, hand count=6
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
params: numPlayers=3, player=1, deck count=29, hand count=9
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=1, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=4, player=3, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: player hand count is incorrect.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************

*************** FAILURE ***************.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
problem: Player has gained or lost cards.
params: numPlayers=3, player=2, deck count=10, hand count=5
***************************************



1000 test cases
347 test cases failed.

**********

File 'dominion.c'
Lines executed:26.05% of 526
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  1481676:    8:int compare( const void* a, const void* b )
        -:    9:{
  1481676:   10:	if (*(int*) a > *(int*) b)
   672682:   11:		return 1;
   808994:   12:	if (*(int*) a < *(int*) b)
   305830:   13:		return -1;
   503164:   14:	return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame()
        -:   18:{
    #####:   19:	struct gameState* g = malloc( sizeof(struct gameState) );
    #####:   20:	return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards( int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10 )
        -:   24:{
    #####:   25:	int* k = malloc( 10 * sizeof(int) );
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
     1000:   39:int initializeGame( int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state )
        -:   40:{
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
     1000:   46:	SelectStream( 1 );
     1000:   47:	PutSeed( (long) randomSeed );
        -:   48:
        -:   49:	//check number of players
     1000:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
    #####:   51:		return -1;
        -:   52:	}
        -:   53:
        -:   54:	//set number of players
     1000:   55:	state->numPlayers = numPlayers;
        -:   56:
        -:   57:	//check selected kingdom cards are different
    11000:   58:	for (i = 0; i < 10; i++) {
   110000:   59:		for (j = 0; j < 10; j++) {
   100000:   60:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
    #####:   61:				return -1;
        -:   62:			}
        -:   63:		}
        -:   64:	}
        -:   65:
        -:   66:	//initialize supply
        -:   67:	///////////////////////////////
        -:   68:
        -:   69:	//set number of Curse cards
     1000:   70:	if (numPlayers == 2) {
      331:   71:		state->supplyCount[curse] = 10;
      669:   72:	} else if (numPlayers == 3) {
      323:   73:		state->supplyCount[curse] = 20;
        -:   74:	} else {
      346:   75:		state->supplyCount[curse] = 30;
        -:   76:	}
        -:   77:
        -:   78:	//set number of Victory cards
     1000:   79:	if (numPlayers == 2) {
      331:   80:		state->supplyCount[estate] = 8;
      331:   81:		state->supplyCount[duchy] = 8;
      331:   82:		state->supplyCount[province] = 8;
        -:   83:	} else {
      669:   84:		state->supplyCount[estate] = 12;
      669:   85:		state->supplyCount[duchy] = 12;
      669:   86:		state->supplyCount[province] = 12;
        -:   87:	}
        -:   88:
        -:   89:	//set number of Treasure cards
     1000:   90:	state->supplyCount[copper] = 60 - ( 7 * numPlayers );
     1000:   91:	state->supplyCount[silver] = 40;
     1000:   92:	state->supplyCount[gold] = 30;
        -:   93:
        -:   94:	//set number of Kingdom cards
    21000:   95:	for (i = adventurer; i <= treasure_map; i++)    //loop all cards
        -:   96:			{
   165000:   97:		for (j = 0; j < 10; j++)    //loop chosen cards
        -:   98:				{
   155000:   99:			if (kingdomCards[j] == i) {
        -:  100:				//check if card is a 'Victory' Kingdom card
    10000:  101:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
     2140:  102:					if (numPlayers == 2) {
      351:  103:						state->supplyCount[i] = 8;
        -:  104:					} else {
      719:  105:						state->supplyCount[i] = 12;
        -:  106:					}
        -:  107:				} else {
     8930:  108:					state->supplyCount[i] = 10;
        -:  109:				}
    10000:  110:				break;
        -:  111:			} else    //card is not in the set choosen for the game
        -:  112:			{
   145000:  113:				state->supplyCount[i] = -1;
        -:  114:			}
        -:  115:		}
        -:  116:
        -:  117:	}
        -:  118:
        -:  119:	////////////////////////
        -:  120:	//supply intilization complete
        -:  121:
        -:  122:	//set player decks
     4015:  123:	for (i = 0; i < numPlayers; i++) {
     3015:  124:		state->deckCount[i] = 0;
    12060:  125:		for (j = 0; j < 3; j++) {
     9045:  126:			state->deck[i][j] = estate;
     9045:  127:			state->deckCount[i]++;
        -:  128:		}
    24120:  129:		for (j = 3; j < 10; j++) {
    21105:  130:			state->deck[i][j] = copper;
    21105:  131:			state->deckCount[i]++;
        -:  132:		}
        -:  133:	}
        -:  134:
        -:  135:	//shuffle player decks
     4015:  136:	for (i = 0; i < numPlayers; i++) {
     3015:  137:		if (shuffle( i, state ) < 0) {
    #####:  138:			return -1;
        -:  139:		}
        -:  140:	}
        -:  141:
        -:  142:	//draw player hands
     4015:  143:	for (i = 0; i < numPlayers; i++) {
        -:  144:		//initialize hand size to zero
     3015:  145:		state->handCount[i] = 0;
     3015:  146:		state->discardCount[i] = 0;
        -:  147:		//draw 5 cards
        -:  148:		// for (j = 0; j < 5; j++)
        -:  149:		//	{
        -:  150:		//	  drawCard(i, state);
        -:  151:		//	}
        -:  152:	}
        -:  153:
        -:  154:	//set embargo tokens to 0 for all supply piles
    28000:  155:	for (i = 0; i <= treasure_map; i++) {
    27000:  156:		state->embargoTokens[i] = 0;
        -:  157:	}
        -:  158:
        -:  159:	//initialize first player's turn
     1000:  160:	state->outpostPlayed = 0;
     1000:  161:	state->phase = 0;
     1000:  162:	state->numActions = 1;
     1000:  163:	state->numBuys = 1;
     1000:  164:	state->playedCardCount = 0;
     1000:  165:	state->whoseTurn = 0;
     1000:  166:	state->handCount[state->whoseTurn] = 0;
        -:  167:	//int it; move to top
        -:  168:
        -:  169:	//Moved draw cards to here, only drawing at the start of a turn
     6000:  170:	for (it = 0; it < 5; it++) {
     5000:  171:		drawCard( state->whoseTurn, state );
        -:  172:	}
        -:  173:
     1000:  174:	updateCoins( state->whoseTurn, state, 0 );
        -:  175:
     1000:  176:	return 0;
        -:  177:}
        -:  178:
     3981:  179:int shuffle( int player, struct gameState *state )
        -:  180:{
        -:  181:
        -:  182:	int newDeck[MAX_DECK];
     3981:  183:	int newDeckPos = 0;
        -:  184:	int card;
        -:  185:	int i;
        -:  186:
     3981:  187:	if (state->deckCount[player] < 1)
      619:  188:		return -1;
     3362:  189:	qsort( (void*) ( state->deck[player] ), state->deckCount[player], sizeof(int), compare );
        -:  190:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  191:
    38609:  192:	while ( state->deckCount[player] > 0 ) {
    31885:  193:		card = floor( Random() * state->deckCount[player] );
    31885:  194:		newDeck[newDeckPos] = state->deck[player][card];
    31885:  195:		newDeckPos++;
    96048:  196:		for (i = card; i < state->deckCount[player] - 1; i++) {
    64163:  197:			state->deck[player][i] = state->deck[player][i + 1];
        -:  198:		}
    31885:  199:		state->deckCount[player]--;
        -:  200:	}
    35247:  201:	for (i = 0; i < newDeckPos; i++) {
    31885:  202:		state->deck[player][i] = newDeck[i];
    31885:  203:		state->deckCount[player]++;
        -:  204:	}
        -:  205:
     3362:  206:	return 0;
        -:  207:}
        -:  208:
    #####:  209:int playCard( int handPos, int choice1, int choice2, int choice3, struct gameState *state )
        -:  210:{
        -:  211:	int card;
    #####:  212:	int coin_bonus = 0;    //tracks coins gain from actions
        -:  213:
        -:  214:	//check if it is the right phase
    #####:  215:	if (state->phase != 0) {
    #####:  216:		return -1;
        -:  217:	}
        -:  218:
        -:  219:	//check if player has enough actions
    #####:  220:	if (state->numActions < 1) {
    #####:  221:		return -1;
        -:  222:	}
        -:  223:
        -:  224:	//get card played
    #####:  225:	card = handCard( handPos, state );
        -:  226:
        -:  227:	//check if selected card is an action
    #####:  228:	if (card < adventurer || card > treasure_map) {
    #####:  229:		return -1;
        -:  230:	}
        -:  231:
        -:  232:	//play card
    #####:  233:	if (cardEffect( card, choice1, choice2, choice3, state, handPos, &coin_bonus ) < 0) {
    #####:  234:		return -1;
        -:  235:	}
        -:  236:
        -:  237:	//reduce number of actions
    #####:  238:	state->numActions--;
        -:  239:
        -:  240:	//update coins (Treasure cards may be added with card draws)
    #####:  241:	updateCoins( state->whoseTurn, state, coin_bonus );
        -:  242:
    #####:  243:	return 0;
        -:  244:}
        -:  245:
        -:  246:// apparently, supplyPos is the enum value of the card being bought
    #####:  247:int buyCard( int supplyPos, struct gameState *state )
        -:  248:{
        -:  249:	int who;
        -:  250:	if (DEBUG) {
        -:  251:		printf( "Entering buyCard...\n" );
        -:  252:	}
        -:  253:
        -:  254:	// I don't know what to do about the phase thing.
        -:  255:
    #####:  256:	who = state->whoseTurn;
        -:  257:
    #####:  258:	if (state->numBuys < 1) {
        -:  259:		if (DEBUG)
        -:  260:			printf( "You do not have any buys left\n" );
    #####:  261:		return -1;
    #####:  262:	} else if (supplyCount( supplyPos, state ) < 1) {
        -:  263:		if (DEBUG)
        -:  264:			printf( "There are not any of that type of card left\n" );
    #####:  265:		return -1;
    #####:  266:	} else if (state->coins < getCost( supplyPos )) {
        -:  267:		if (DEBUG)
        -:  268:			printf( "You do not have enough money to buy that. You have %d coins.\n",
        -:  269:					state->coins );
    #####:  270:		return -1;
        -:  271:	} else {
    #####:  272:		state->phase = 1;
        -:  273:		//state->supplyCount[supplyPos]--;
    #####:  274:		gainCard( supplyPos, state, 0, who );   //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  275:
    #####:  276:		state->coins = ( state->coins ) - ( getCost( supplyPos ) );
    #####:  277:		state->numBuys--;
        -:  278:		if (DEBUG)
        -:  279:			printf( "You bought card number %d for %d coins. You now have %d buys and %d coins.\n",
        -:  280:					supplyPos, getCost( supplyPos ), state->numBuys, state->coins );
        -:  281:	}
        -:  282:
        -:  283:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  284:	//state->discardCount[who]++;
        -:  285:
    #####:  286:	return 0;
        -:  287:}
        -:  288:
    #####:  289:int numHandCards( struct gameState *state )
        -:  290:{
    #####:  291:	return state->handCount[whoseTurn( state )];
        -:  292:}
        -:  293:
    #####:  294:int handCard( int handPos, struct gameState *state )
        -:  295:{
    #####:  296:	int currentPlayer = whoseTurn( state );
    #####:  297:	return state->hand[currentPlayer][handPos];
        -:  298:}
        -:  299:
    #####:  300:int supplyCount( int card, struct gameState *state )
        -:  301:{
    #####:  302:	return state->supplyCount[card];
        -:  303:}
        -:  304:
    #####:  305:int fullDeckCount( int player, int card, struct gameState *state )
        -:  306:{
        -:  307:	int i;
    #####:  308:	int count = 0;
        -:  309:
    #####:  310:	for (i = 0; i < state->deckCount[player]; i++) {
    #####:  311:		if (state->deck[player][i] == card)
    #####:  312:			count++;
        -:  313:	}
        -:  314:
    #####:  315:	for (i = 0; i < state->handCount[player]; i++) {
    #####:  316:		if (state->hand[player][i] == card)
    #####:  317:			count++;
        -:  318:	}
        -:  319:
    #####:  320:	for (i = 0; i < state->discardCount[player]; i++) {
    #####:  321:		if (state->discard[player][i] == card)
    #####:  322:			count++;
        -:  323:	}
        -:  324:
    #####:  325:	return count;
        -:  326:}
        -:  327:
     4062:  328:int whoseTurn( struct gameState *state )
        -:  329:{
     4062:  330:	return state->whoseTurn;
        -:  331:}
        -:  332:
     4062:  333:int endTurn( struct gameState *state )
        -:  334:{
        -:  335:	int k;
        -:  336:	int i;
     4062:  337:	int currentPlayer = whoseTurn( state );
        -:  338:
        -:  339:	//Discard hand
    24372:  340:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    40620:  341:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    20310:  342:				state->hand[currentPlayer][i];    //Discard
    20310:  343:		state->hand[currentPlayer][i] = -1;    //Set card to -1
        -:  344:	}
     4062:  345:	state->handCount[currentPlayer] = 0;    //Reset hand count
        -:  346:
        -:  347:	//Code for determining the player
     4062:  348:	if (currentPlayer < ( state->numPlayers - 1 )) {
     3062:  349:		state->whoseTurn = currentPlayer + 1;    //Still safe to increment
        -:  350:	} else {
     1000:  351:		state->whoseTurn = 0;    //Max player has been reached, loop back around to player 1
        -:  352:	}
        -:  353:
     4062:  354:	state->outpostPlayed = 0;
     4062:  355:	state->phase = 0;
     4062:  356:	state->numActions = 1;
     4062:  357:	state->coins = 0;
     4062:  358:	state->numBuys = 1;
     4062:  359:	state->playedCardCount = 0;
     4062:  360:	state->handCount[state->whoseTurn] = 0;
        -:  361:
        -:  362:	//int k; move to top
        -:  363:	//Next player draws hand
    24372:  364:	for (k = 0; k < 5; k++) {
    20310:  365:		drawCard( state->whoseTurn, state );    //Draw a card
        -:  366:	}
        -:  367:
        -:  368:	//Update money
     4062:  369:	updateCoins( state->whoseTurn, state, 0 );
        -:  370:
     4062:  371:	return 0;
        -:  372:}
        -:  373:
    #####:  374:int isGameOver( struct gameState *state )
        -:  375:{
        -:  376:	int i;
        -:  377:	int j;
        -:  378:
        -:  379:	//if stack of Province cards is empty, the game ends
    #####:  380:	if (state->supplyCount[province] == 0) {
    #####:  381:		return 1;
        -:  382:	}
        -:  383:
        -:  384:	//if three supply pile are at 0, the game ends
    #####:  385:	j = 0;
    #####:  386:	for (i = 0; i < 25; i++) {
    #####:  387:		if (state->supplyCount[i] == 0) {
    #####:  388:			j++;
        -:  389:		}
        -:  390:	}
    #####:  391:	if (j >= 3) {
    #####:  392:		return 1;
        -:  393:	}
        -:  394:
    #####:  395:	return 0;
        -:  396:}
        -:  397:
    #####:  398:int scoreFor( int player, struct gameState *state )
        -:  399:{
    #####:  400:	int totalCards = 0;
    #####:  401:	int gardensCards = 0;
        -:  402:	int i;
    #####:  403:	int score = 0;
        -:  404:	//score from hand
    #####:  405:	for (i = 0; i < state->handCount[player]; i++) {
    #####:  406:		if (state->hand[player][i] == curse) {
    #####:  407:			score = score - 1;
        -:  408:		};
    #####:  409:		if (state->hand[player][i] == estate) {
    #####:  410:			score = score + 1;
        -:  411:		};
    #####:  412:		if (state->hand[player][i] == duchy) {
    #####:  413:			score = score + 3;
        -:  414:		};
    #####:  415:		if (state->hand[player][i] == province) {
    #####:  416:			score = score + 6;
        -:  417:		};
    #####:  418:		if (state->hand[player][i] == great_hall) {
    #####:  419:			score = score + 1;
        -:  420:		};
    #####:  421:		if (state->hand[player][i] == gardens) {
    #####:  422:			gardensCards++;
        -:  423:			//score = score + ( fullDeckCount( player, 0, state ) / 10 );
        -:  424:		};
    #####:  425:		totalCards++;
        -:  426:	}
        -:  427:
        -:  428:	//score from discard
    #####:  429:	for (i = 0; i < state->discardCount[player]; i++) {
    #####:  430:		if (state->discard[player][i] == curse) {
    #####:  431:			score = score - 1;
        -:  432:		};
    #####:  433:		if (state->discard[player][i] == estate) {
    #####:  434:			score = score + 1;
        -:  435:		};
    #####:  436:		if (state->discard[player][i] == duchy) {
    #####:  437:			score = score + 3;
        -:  438:		};
    #####:  439:		if (state->discard[player][i] == province) {
    #####:  440:			score = score + 6;
        -:  441:		};
    #####:  442:		if (state->discard[player][i] == great_hall) {
        -:  443:			//score = score + 1;
    #####:  444:			score = score + 0;
        -:  445:		};
    #####:  446:		if (state->discard[player][i] == gardens) {
    #####:  447:			gardensCards++;
        -:  448:			//score = score + ( fullDeckCount( player, 0, state ) / 10 );
        -:  449:		};
    #####:  450:		totalCards++;
        -:  451:	}
        -:  452:
        -:  453:	//score from deck
    #####:  454:	for (i = 0; i < state->deckCount[player]; i++) {
    #####:  455:		if (state->deck[player][i] == curse) {
    #####:  456:			score = score - 1;
        -:  457:		};
    #####:  458:		if (state->deck[player][i] == estate) {
    #####:  459:			score = score + 1;
        -:  460:		};
    #####:  461:		if (state->deck[player][i] == duchy) {
    #####:  462:			score = score + 3;
        -:  463:		};
    #####:  464:		if (state->deck[player][i] == province) {
    #####:  465:			score = score + 6;
        -:  466:		};
    #####:  467:		if (state->deck[player][i] == great_hall) {
    #####:  468:			score = score + 1;
        -:  469:		};
    #####:  470:		if (state->deck[player][i] == gardens) {
    #####:  471:			gardensCards++;
        -:  472:			//score = score + ( fullDeckCount( player, 0, state ) / 10 );
        -:  473:		};
    #####:  474:		totalCards++;
        -:  475:	}
        -:  476:
    #####:  477:	for (i = 0; i < gardensCards; i++) {
    #####:  478:		score += totalCards / 10;
        -:  479:	}
        -:  480:
    #####:  481:	return score;
        -:  482:}
        -:  483:
    #####:  484:int getWinners( int players[MAX_PLAYERS], struct gameState *state )
        -:  485:{
        -:  486:	int i;
        -:  487:	int j;
        -:  488:	int highScore;
        -:  489:	int currentPlayer;
        -:  490:
        -:  491:	//get score for each player
    #####:  492:	for (i = 0; i < MAX_PLAYERS; i++) {
        -:  493:		//set unused player scores to -9999
    #####:  494:		if (i >= state->numPlayers) {
    #####:  495:			players[i] = -9999;
        -:  496:		} else {
    #####:  497:			players[i] = scoreFor( i, state );
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  504:		if (players[i] > players[j]) {
    #####:  505:			j = i;
        -:  506:		}
        -:  507:	}
    #####:  508:	highScore = players[j];
        -:  509:
        -:  510:	//add 1 to players who had less turns
    #####:  511:	currentPlayer = whoseTurn( state );
    #####:  512:	for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  513:		if (players[i] == highScore && i > currentPlayer) {
    #####:  514:			players[i]++;
        -:  515:		}
        -:  516:	}
        -:  517:
        -:  518:	//find new highest score
    #####:  519:	j = 0;
    #####:  520:	for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  521:		if (players[i] > players[j]) {
    #####:  522:			j = i;
        -:  523:		}
        -:  524:	}
    #####:  525:	highScore = players[j];
        -:  526:
        -:  527:	//set winners in array to 1 and rest to 0
    #####:  528:	for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  529:		if (players[i] == highScore) {
    #####:  530:			players[i] = 1;
        -:  531:		} else {
    #####:  532:			players[i] = 0;
        -:  533:		}
        -:  534:	}
        -:  535:
    #####:  536:	return 0;
        -:  537:}
        -:  538:
    37542:  539:int drawCard( int player, struct gameState *state )
        -:  540:{
        -:  541:	int count;
        -:  542:	int deckCounter;
    37542:  543:	if (state->deckCount[player] <= 0) {    //Deck is empty
        -:  544:
        -:  545:		//Step 1 Shuffle the discard pile back into a deck
        -:  546:		int i;
        -:  547:		//Move discard to deck
     2218:  548:		for (i = 0; i < state->discardCount[player]; i++) {
     1735:  549:			state->deck[player][i] = state->discard[player][i];
     1735:  550:			state->discard[player][i] = -1;
        -:  551:		}
        -:  552:
      483:  553:		state->deckCount[player] = state->discardCount[player];
      483:  554:		state->discardCount[player] = 0;    //Reset discard
        -:  555:
        -:  556:		//Shufffle the deck
      483:  557:		shuffle( player, state );    //Shuffle the deck up and make it so that we can draw
        -:  558:
        -:  559:		if (DEBUG) {    //Debug statements
        -:  560:			printf( "Deck count now: %d\n", state->deckCount[player] );
        -:  561:		}
        -:  562:
      483:  563:		state->discardCount[player] = 0;
        -:  564:
        -:  565:		//Step 2 Draw Card
      483:  566:		count = state->handCount[player];    //Get current player's hand count
        -:  567:
        -:  568:		if (DEBUG) {    //Debug statements
        -:  569:			printf( "Current hand count: %d\n", count );
        -:  570:		}
        -:  571:
      483:  572:		deckCounter = state->deckCount[player];    //Create a holder for the deck count
        -:  573:
      483:  574:		if (deckCounter == 0)
      136:  575:			return -1;
        -:  576:
      347:  577:		state->hand[player][count] = state->deck[player][deckCounter - 1];    //Add card to hand
      347:  578:		state->deckCount[player]--;
      347:  579:		state->handCount[player]++;    //Increment hand count
        -:  580:	}
        -:  581:
        -:  582:	else {
    37059:  583:		int count = state->handCount[player];    //Get current hand count for player
        -:  584:		int deckCounter;
        -:  585:		if (DEBUG) {    //Debug statements
        -:  586:			printf( "Current hand count: %d\n", count );
        -:  587:		}
        -:  588:
    37059:  589:		deckCounter = state->deckCount[player];    //Create holder for the deck count
    37059:  590:		state->hand[player][count] = state->deck[player][deckCounter - 1];    //Add card to the hand
    37059:  591:		state->deckCount[player]--;
    37059:  592:		state->handCount[player]++;    //Increment hand count
        -:  593:	}
        -:  594:
    37406:  595:	return 0;
        -:  596:}
        -:  597:
    #####:  598:int getCost( int cardNumber )
        -:  599:{
    #####:  600:	switch ( cardNumber ) {
        -:  601:	case curse:
    #####:  602:		return 0;
        -:  603:	case estate:
    #####:  604:		return 2;
        -:  605:	case duchy:
    #####:  606:		return 5;
        -:  607:	case province:
    #####:  608:		return 8;
        -:  609:	case copper:
    #####:  610:		return 0;
        -:  611:	case silver:
    #####:  612:		return 3;
        -:  613:	case gold:
    #####:  614:		return 6;
        -:  615:	case adventurer:
    #####:  616:		return 6;
        -:  617:	case council_room:
    #####:  618:		return 5;
        -:  619:	case feast:
    #####:  620:		return 4;
        -:  621:	case gardens:
    #####:  622:		return 4;
        -:  623:	case mine:
    #####:  624:		return 5;
        -:  625:	case remodel:
    #####:  626:		return 4;
        -:  627:	case smithy:
    #####:  628:		return 4;
        -:  629:	case village:
    #####:  630:		return 3;
        -:  631:	case baron:
    #####:  632:		return 4;
        -:  633:	case great_hall:
    #####:  634:		return 3;
        -:  635:	case minion:
    #####:  636:		return 5;
        -:  637:	case steward:
    #####:  638:		return 3;
        -:  639:	case tribute:
    #####:  640:		return 5;
        -:  641:	case ambassador:
    #####:  642:		return 3;
        -:  643:	case cutpurse:
    #####:  644:		return 4;
        -:  645:	case embargo:
    #####:  646:		return 2;
        -:  647:	case outpost:
    #####:  648:		return 5;
        -:  649:	case salvager:
    #####:  650:		return 4;
        -:  651:	case sea_hag:
    #####:  652:		return 4;
        -:  653:	case treasure_map:
    #####:  654:		return 4;
        -:  655:	}
        -:  656:
    #####:  657:	return -1;
        -:  658:}
        -:  659:
    #####:  660:int cardEffect( int card, int choice1, int choice2, int choice3, struct gameState *state,
        -:  661:		int handPos, int *bonus )
        -:  662:{
        -:  663:	int i;
        -:  664:	int j;
        -:  665:	int k;
        -:  666:	int x;
        -:  667:	int index;
    #####:  668:	int currentPlayer = whoseTurn( state );
    #####:  669:	int nextPlayer = currentPlayer + 1;
        -:  670:
    #####:  671:	int tributeRevealedCards[2] = { -1, -1 };
        -:  672:	int temphand[MAX_HAND];    // moved above the if statement
    #####:  673:	int drawntreasure = 0;
        -:  674:	int cardDrawn;
    #####:  675:	int z = 0;    // this is the counter for the temp hand
    #####:  676:	if (nextPlayer > ( state->numPlayers - 1 )) {
    #####:  677:		nextPlayer = 0;
        -:  678:	}
        -:  679:
        -:  680:	//uses switch to select card and perform actions
    #####:  681:	switch ( card ) {
        -:  682:	case adventurer:
        -:  683:		//keep drawing cards until 2 treasure cards are drawn
        -:  684:		/*
        -:  685:		 while ( drawntreasure < 2 )
        -:  686:		 {
        -:  687:		 //if the deck is empty we need to shuffle discard and add to deck
        -:  688:		 if (state->deckCount[currentPlayer] < 1)
        -:  689:		 {
        -:  690:		 shuffle( currentPlayer, state );
        -:  691:		 }
        -:  692:		 drawCard( currentPlayer, state );
        -:  693:
        -:  694:		 //top card of hand is most recently drawn card.
        -:  695:		 cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -:  696:		 if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  697:		 drawntreasure++;
        -:  698:		 else
        -:  699:		 {
        -:  700:		 temphand[z] = cardDrawn;
        -:  701:		 //remove the top card
        -:  702:		 state->handCount[currentPlayer]--;
        -:  703:		 z++;
        -:  704:		 }
        -:  705:		 }
        -:  706:		 while ( z - 1 >= 0 )
        -:  707:		 {
        -:  708:		 //discard all cards in play that have been drawn
        -:  709:		 state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
        -:  710:		 z = z - 1;
        -:  711:		 }
        -:  712:		 return 0;
        -:  713:		 */
        -:  714:
    #####:  715:		playAdventurer( currentPlayer, state );
    #####:  716:		return 0;
        -:  717:	case council_room:
        -:  718:		//+4 Cards
    #####:  719:		for (i = 0; i < 4; i++) {
    #####:  720:			drawCard( currentPlayer, state );
        -:  721:		}
        -:  722:
        -:  723:		//+1 Buy
    #####:  724:		state->numBuys++;
        -:  725:
        -:  726:		//Each other player draws a card
    #####:  727:		for (i = 0; i < state->numPlayers; i++) {
    #####:  728:			if (i != currentPlayer) {
    #####:  729:				drawCard( i, state );
        -:  730:			}
        -:  731:		}
        -:  732:
        -:  733:		//put played card in played card pile
    #####:  734:		discardCard( handPos, currentPlayer, state, 0 );
        -:  735:
    #####:  736:		return 0;
        -:  737:
        -:  738:	case feast:
        -:  739:		//gain card with cost up to 5
        -:  740:		//Backup hand
    #####:  741:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  742:			temphand[i] = state->hand[currentPlayer][i];    //Backup card
    #####:  743:			state->hand[currentPlayer][i] = -1;    //Set to nothing
        -:  744:		}
        -:  745:		//Backup hand
        -:  746:
        -:  747:		//Update Coins for Buy
    #####:  748:		updateCoins( currentPlayer, state, 5 );
    #####:  749:		x = 1;    //Condition to loop on
    #####:  750:		while ( x == 1 ) {    //Buy one card
    #####:  751:			if (supplyCount( choice1, state ) <= 0) {
        -:  752:				if (DEBUG)
        -:  753:					printf( "None of that card left, sorry!\n" );
        -:  754:
        -:  755:				if (DEBUG) {
        -:  756:					printf( "Cards Left: %d\n", supplyCount( choice1, state ) );
        -:  757:				}
    #####:  758:			} else if (state->coins < getCost( choice1 )) {
    #####:  759:				printf( "That card is too expensive!\n" );
        -:  760:
        -:  761:				if (DEBUG) {
        -:  762:					printf( "Coins: %d < %d\n", state->coins, getCost( choice1 ) );
        -:  763:				}
        -:  764:			} else {
        -:  765:
        -:  766:				if (DEBUG) {
        -:  767:					printf( "Deck Count: %d\n",
        -:  768:							state->handCount[currentPlayer] + state->deckCount[currentPlayer]
        -:  769:									+ state->discardCount[currentPlayer] );
        -:  770:				}
        -:  771:
    #####:  772:				gainCard( choice1, state, 0, currentPlayer );    //Gain the card
    #####:  773:				x = 0;    //No more buying cards
        -:  774:
        -:  775:				if (DEBUG) {
        -:  776:					printf( "Deck Count: %d\n",
        -:  777:							state->handCount[currentPlayer] + state->deckCount[currentPlayer]
        -:  778:									+ state->discardCount[currentPlayer] );
        -:  779:				}
        -:  780:
        -:  781:			}
        -:  782:		}
        -:  783:
        -:  784:		//Reset Hand
    #####:  785:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  786:			state->hand[currentPlayer][i] = temphand[i];
    #####:  787:			temphand[i] = -1;
        -:  788:		}
        -:  789:		//Reset Hand
        -:  790:
    #####:  791:		return 0;
        -:  792:
        -:  793:	case gardens:
    #####:  794:		return -1;
        -:  795:
        -:  796:	case mine:
        -:  797:		/*
        -:  798:		 j = state->hand[currentPlayer][choice1];    //store card we will trash
        -:  799:
        -:  800:		 if (state->hand[currentPlayer][choice1] < copper
        -:  801:		 || state->hand[currentPlayer][choice1] > gold)
        -:  802:		 {
        -:  803:		 return -1;
        -:  804:		 }
        -:  805:
        -:  806:		 if (choice2 > treasure_map || choice2 < curse)
        -:  807:		 {
        -:  808:		 return -1;
        -:  809:		 }
        -:  810:
        -:  811:		 if (( getCost( state->hand[currentPlayer][choice1] ) + 3 ) > getCost( choice2 ))
        -:  812:		 {
        -:  813:		 return -1;
        -:  814:		 }
        -:  815:
        -:  816:		 gainCard( choice2, state, 2, currentPlayer );
        -:  817:
        -:  818:		 //discard card from hand
        -:  819:		 discardCard( handPos, currentPlayer, state, 0 );
        -:  820:
        -:  821:		 //discard trashed card
        -:  822:		 for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  823:		 {
        -:  824:		 if (state->hand[currentPlayer][i] == j)
        -:  825:		 {
        -:  826:		 discardCard( i, currentPlayer, state, 0 );
        -:  827:		 break;
        -:  828:		 }
        -:  829:		 }
        -:  830:
        -:  831:		 return 0;
        -:  832:		 */
    #####:  833:		return playMine( currentPlayer, state, handPos, choice1, choice2 );
        -:  834:
        -:  835:	case remodel:
    #####:  836:		j = state->hand[currentPlayer][choice1];    //store card we will trash
        -:  837:
    #####:  838:		if (( getCost( state->hand[currentPlayer][choice1] ) + 2 ) > getCost( choice2 )) {
    #####:  839:			return -1;
        -:  840:		}
        -:  841:
    #####:  842:		gainCard( choice2, state, 0, currentPlayer );
        -:  843:
        -:  844:		//discard card from hand
    #####:  845:		discardCard( handPos, currentPlayer, state, 0 );
        -:  846:
        -:  847:		//discard trashed card
    #####:  848:		for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  849:			if (state->hand[currentPlayer][i] == j) {
    #####:  850:				discardCard( i, currentPlayer, state, 0 );
    #####:  851:				break;
        -:  852:			}
        -:  853:		}
        -:  854:
    #####:  855:		return 0;
        -:  856:
        -:  857:	case smithy:
        -:  858:		//+3 Cards
        -:  859:		/*
        -:  860:		 for (i = 0; i < 3; i++)
        -:  861:		 {
        -:  862:		 drawCard( currentPlayer, state );
        -:  863:		 }
        -:  864:
        -:  865:		 //discard card from hand
        -:  866:		 discardCard( handPos, currentPlayer, state, 0 );
        -:  867:		 return 0;
        -:  868:		 */
    #####:  869:		playSmithy( currentPlayer, state, 0 );
    #####:  870:		return 0;
        -:  871:
        -:  872:	case village:
        -:  873:		//+1 Card
    #####:  874:		drawCard( currentPlayer, state );
        -:  875:
        -:  876:		//+2 Actions
    #####:  877:		state->numActions = state->numActions + 2;
        -:  878:
        -:  879:		//discard played card from hand
    #####:  880:		discardCard( handPos, currentPlayer, state, 0 );
    #####:  881:		return 0;
        -:  882:
        -:  883:	case baron:
        -:  884:		/*
        -:  885:		 state->numBuys++;    //Increase buys by 1!
        -:  886:		 if (choice1 > 0)
        -:  887:		 {    //Boolean true or going to discard an estate
        -:  888:		 int p = 0;    //Iterator for hand!
        -:  889:		 int card_not_discarded = 1;    //Flag for discard set!
        -:  890:		 while ( card_not_discarded )
        -:  891:		 {
        -:  892:		 if (state->hand[currentPlayer][p] == estate)
        -:  893:		 {    //Found an estate card!
        -:  894:		 state->coins += 4;    //Add 4 coins to the amount of coins
        -:  895:		 state->discard[currentPlayer][state->discardCount[currentPlayer]] =
        -:  896:		 state->hand[currentPlayer][p];
        -:  897:		 state->discardCount[currentPlayer]++;
        -:  898:		 for (; p < state->handCount[currentPlayer]; p++)
        -:  899:		 {
        -:  900:		 state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  901:		 }
        -:  902:		 state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  903:		 state->handCount[currentPlayer]--;
        -:  904:		 card_not_discarded = 0;    //Exit the loop
        -:  905:		 } else if (p > state->handCount[currentPlayer])
        -:  906:		 {
        -:  907:		 if (DEBUG)
        -:  908:		 {
        -:  909:		 printf( "No estate cards in your hand, invalid choice\n" );
        -:  910:		 printf( "Must gain an estate if there are any\n" );
        -:  911:		 }
        -:  912:		 if (supplyCount( estate, state ) > 0)
        -:  913:		 {
        -:  914:		 gainCard( estate, state, 0, currentPlayer );
        -:  915:		 state->supplyCount[estate]--;    //Decrement estates
        -:  916:		 if (supplyCount( estate, state ) == 0)
        -:  917:		 {
        -:  918:		 isGameOver( state );
        -:  919:		 }
        -:  920:		 }
        -:  921:		 card_not_discarded = 0;    //Exit the loop
        -:  922:		 }
        -:  923:
        -:  924:		 else
        -:  925:		 {
        -:  926:		 p++;    //Next card
        -:  927:		 }
        -:  928:		 }
        -:  929:		 }
        -:  930:
        -:  931:		 else
        -:  932:		 {
        -:  933:		 if (supplyCount( estate, state ) > 0)
        -:  934:		 {
        -:  935:		 gainCard( estate, state, 0, currentPlayer );    //Gain an estate
        -:  936:		 state->supplyCount[estate]--;    //Decrement Estates
        -:  937:		 if (supplyCount( estate, state ) == 0)
        -:  938:		 {
        -:  939:		 isGameOver( state );
        -:  940:		 }
        -:  941:		 }
        -:  942:		 }
        -:  943:
        -:  944:		 return 0;
        -:  945:		 */
    #####:  946:		playBaron( currentPlayer, state, choice1 );
    #####:  947:		return 0;
        -:  948:
        -:  949:	case great_hall:
        -:  950:		//+1 Card
    #####:  951:		drawCard( currentPlayer, state );
        -:  952:
        -:  953:		//+1 Actions
    #####:  954:		state->numActions++;
        -:  955:
        -:  956:		//discard card from hand
    #####:  957:		discardCard( handPos, currentPlayer, state, 0 );
    #####:  958:		return 0;
        -:  959:
        -:  960:	case minion:
        -:  961:		//+1 action
    #####:  962:		state->numActions++;
        -:  963:
        -:  964:		//discard card from hand
    #####:  965:		discardCard( handPos, currentPlayer, state, 0 );
        -:  966:
    #####:  967:		if (choice1)    //+2 coins
        -:  968:		{
    #####:  969:			state->coins = state->coins + 2;
        -:  970:		}
        -:  971:
    #####:  972:		else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  973:		{
        -:  974:			//discard hand
    #####:  975:			while ( numHandCards( state ) > 0 ) {
    #####:  976:				discardCard( handPos, currentPlayer, state, 0 );
        -:  977:			}
        -:  978:
        -:  979:			//draw 4
    #####:  980:			for (i = 0; i < 4; i++) {
    #####:  981:				drawCard( currentPlayer, state );
        -:  982:			}
        -:  983:
        -:  984:			//other players discard hand and redraw if hand size > 4
    #####:  985:			for (i = 0; i < state->numPlayers; i++) {
    #####:  986:				if (i != currentPlayer) {
    #####:  987:					if (state->handCount[i] > 4) {
        -:  988:						//discard hand
    #####:  989:						while ( state->handCount[i] > 0 ) {
    #####:  990:							discardCard( handPos, i, state, 0 );
        -:  991:						}
        -:  992:
        -:  993:						//draw 4
    #####:  994:						for (j = 0; j < 4; j++) {
    #####:  995:							drawCard( i, state );
        -:  996:						}
        -:  997:					}
        -:  998:				}
        -:  999:			}
        -: 1000:
        -: 1001:		}
    #####: 1002:		return 0;
        -: 1003:
        -: 1004:	case steward:
        -: 1005:		/*
        -: 1006:		 if (choice1 == 1)
        -: 1007:		 {
        -: 1008:		 //+2 cards
        -: 1009:		 drawCard( currentPlayer, state );
        -: 1010:		 drawCard( currentPlayer, state );
        -: 1011:		 } else if (choice1 == 2)
        -: 1012:		 {
        -: 1013:		 //+2 coins
        -: 1014:		 state->coins = state->coins + 2;
        -: 1015:		 } else
        -: 1016:		 {
        -: 1017:		 //trash 2 cards in hand
        -: 1018:		 discardCard( choice2, currentPlayer, state, 1 );
        -: 1019:		 discardCard( choice3, currentPlayer, state, 1 );
        -: 1020:		 }
        -: 1021:
        -: 1022:		 //discard card from hand
        -: 1023:		 discardCard( handPos, currentPlayer, state, 0 );
        -: 1024:		 return 0;
        -: 1025:		 */
    #####: 1026:		playSteward( currentPlayer, state, handPos, choice1, choice2, choice3 );
    #####: 1027:		return 0;
        -: 1028:	case tribute:
    #####: 1029:		if (( state->discardCount[nextPlayer] + state->deckCount[nextPlayer] ) <= 1) {
    #####: 1030:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1031:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1032:				state->deckCount[nextPlayer]--;
    #####: 1033:			} else if (state->discardCount[nextPlayer] > 0) {
    #####: 1034:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]
    #####: 1035:						- 1];
    #####: 1036:				state->discardCount[nextPlayer]--;
        -: 1037:			} else {
        -: 1038:				//No Card to Reveal
        -: 1039:				if (DEBUG) {
        -: 1040:					printf( "No cards to reveal\n" );
        -: 1041:				}
        -: 1042:			}
        -: 1043:		}
        -: 1044:
        -: 1045:		else {
    #####: 1046:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1047:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1048:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];    //Move to deck
    #####: 1049:					state->deckCount[nextPlayer]++;
    #####: 1050:					state->discard[nextPlayer][i] = -1;
    #####: 1051:					state->discardCount[nextPlayer]--;
        -: 1052:				}
        -: 1053:
    #####: 1054:				shuffle( nextPlayer, state );    //Shuffle the deck
        -: 1055:			}
    #####: 1056:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1057:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:			state->deckCount[nextPlayer]--;
    #####: 1059:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1060:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1061:			state->deckCount[nextPlayer]--;
        -: 1062:		}
        -: 1063:
    #####: 1064:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {   //If we have a duplicate card, just drop one
    #####: 1065:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1066:			state->playedCardCount++;
    #####: 1067:			tributeRevealedCards[1] = -1;
        -: 1068:		}
        -: 1069:
    #####: 1070:		for (i = 0; i <= 2; i++) {
    #####: 1071:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver
    #####: 1072:					|| tributeRevealedCards[i] == gold) {    //Treasure cards
    #####: 1073:				state->coins += 2;
        -: 1074:			}
        -: 1075:
    #####: 1076:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy
    #####: 1077:					|| tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens
    #####: 1078:					|| tributeRevealedCards[i] == great_hall) {    //Victory Card Found
    #####: 1079:				drawCard( currentPlayer, state );
    #####: 1080:				drawCard( currentPlayer, state );
        -: 1081:			} else {    //Action Card
    #####: 1082:				state->numActions = state->numActions + 2;
        -: 1083:			}
        -: 1084:		}
        -: 1085:
    #####: 1086:		return 0;
        -: 1087:
        -: 1088:	case ambassador:
    #####: 1089:		j = 0;    //used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:		if (choice2 > 2 || choice2 < 0) {
    #####: 1092:			return -1;
        -: 1093:		}
        -: 1094:
    #####: 1095:		if (choice1 == handPos) {
    #####: 1096:			return -1;
        -: 1097:		}
        -: 1098:
    #####: 1099:		for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1100:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
    #####: 1101:				j++;
        -: 1102:			}
        -: 1103:		}
    #####: 1104:		if (j < choice2) {
    #####: 1105:			return -1;
        -: 1106:		}
        -: 1107:
        -: 1108:		if (DEBUG)
        -: 1109:			printf( "Player %d reveals card number: %d\n", currentPlayer,
        -: 1110:					state->hand[currentPlayer][choice1] );
        -: 1111:
        -: 1112:		//increase supply count for choosen card by amount being discarded
    #####: 1113:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1114:
        -: 1115:		//each other player gains a copy of revealed card
    #####: 1116:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1117:			if (i != currentPlayer) {
    #####: 1118:				gainCard( state->hand[currentPlayer][choice1], state, 0, i );
        -: 1119:			}
        -: 1120:		}
        -: 1121:
        -: 1122:		//discard played card from hand
    #####: 1123:		discardCard( handPos, currentPlayer, state, 0 );
        -: 1124:
        -: 1125:		//trash copies of cards returned to supply
    #####: 1126:		for (j = 0; j < choice2; j++) {
    #####: 1127:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1128:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
    #####: 1129:					discardCard( i, currentPlayer, state, 1 );
    #####: 1130:					break;
        -: 1131:				}
        -: 1132:			}
        -: 1133:		}
        -: 1134:
    #####: 1135:		return 0;
        -: 1136:
        -: 1137:	case cutpurse:
        -: 1138:
    #####: 1139:		updateCoins( currentPlayer, state, 2 );
    #####: 1140:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1141:			if (i != currentPlayer) {
    #####: 1142:				for (j = 0; j < state->handCount[i]; j++) {
    #####: 1143:					if (state->hand[i][j] == copper) {
    #####: 1144:						discardCard( j, i, state, 0 );
    #####: 1145:						break;
        -: 1146:					}
    #####: 1147:					if (j == state->handCount[i]) {
    #####: 1148:						for (k = 0; k < state->handCount[i]; k++) {
        -: 1149:							if (DEBUG)
        -: 1150:								printf( "Player %d reveals card number %d\n", i,
        -: 1151:										state->hand[i][k] );
        -: 1152:						}
    #####: 1153:						break;
        -: 1154:					}
        -: 1155:				}
        -: 1156:
        -: 1157:			}
        -: 1158:
        -: 1159:		}
        -: 1160:
        -: 1161:		//discard played card from hand
    #####: 1162:		discardCard( handPos, currentPlayer, state, 0 );
        -: 1163:
    #####: 1164:		return 0;
        -: 1165:
        -: 1166:	case embargo:
        -: 1167:		//+2 Coins
    #####: 1168:		state->coins = state->coins + 2;
        -: 1169:
        -: 1170:		//see if selected pile is in play
    #####: 1171:		if (state->supplyCount[choice1] == -1) {
    #####: 1172:			return -1;
        -: 1173:		}
        -: 1174:
        -: 1175:		//add embargo token to selected supply pile
    #####: 1176:		state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:		//trash card
    #####: 1179:		discardCard( handPos, currentPlayer, state, 1 );
    #####: 1180:		return 0;
        -: 1181:
        -: 1182:	case outpost:
        -: 1183:		//set outpost flag
    #####: 1184:		state->outpostPlayed++;
        -: 1185:
        -: 1186:		//discard card
    #####: 1187:		discardCard( handPos, currentPlayer, state, 0 );
    #####: 1188:		return 0;
        -: 1189:
        -: 1190:	case salvager:
        -: 1191:		//+1 buy
    #####: 1192:		state->numBuys++;
        -: 1193:
    #####: 1194:		if (choice1) {
        -: 1195:			//gain coins equal to trashed card
    #####: 1196:			state->coins = state->coins + getCost( handCard( choice1, state ) );
        -: 1197:			//trash card
    #####: 1198:			discardCard( choice1, currentPlayer, state, 1 );
        -: 1199:		}
        -: 1200:
        -: 1201:		//discard card
    #####: 1202:		discardCard( handPos, currentPlayer, state, 0 );
    #####: 1203:		return 0;
        -: 1204:
        -: 1205:	case sea_hag:
    #####: 1206:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:			if (i != currentPlayer) {
    #####: 1208:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1209:				state->deckCount[i]--;
    #####: 1210:				state->discardCount[i]++;
    #####: 1211:				state->deck[i][state->deckCount[i]--] = curse;    //Top card now a curse
        -: 1212:			}
        -: 1213:		}
    #####: 1214:		return 0;
        -: 1215:
        -: 1216:	case treasure_map:
        -: 1217:		//search hand for another treasure_map
    #####: 1218:		index = -1;
    #####: 1219:		for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1220:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
    #####: 1221:				index = i;
    #####: 1222:				break;
        -: 1223:			}
        -: 1224:		}
    #####: 1225:		if (index > -1) {
        -: 1226:			//trash both treasure cards
    #####: 1227:			discardCard( handPos, currentPlayer, state, 1 );
    #####: 1228:			discardCard( index, currentPlayer, state, 1 );
        -: 1229:
        -: 1230:			//gain 4 Gold cards
    #####: 1231:			for (i = 0; i < 4; i++) {
    #####: 1232:				gainCard( gold, state, 1, currentPlayer );
        -: 1233:			}
        -: 1234:
        -: 1235:			//return success
    #####: 1236:			return 1;
        -: 1237:		}
        -: 1238:
        -: 1239:		//no second treasure_map found in hand
    #####: 1240:		return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:	return -1;
        -: 1244:}
        -: 1245:
    #####: 1246:int discardCard( int handPos, int currentPlayer, struct gameState *state, int trashFlag )
        -: 1247:{
        -: 1248:
        -: 1249:	//if card is not trashed, added to Played pile
    #####: 1250:	if (trashFlag < 1) {
        -: 1251:		//add card to played pile
    #####: 1252:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1253:		state->playedCardCount++;
        -: 1254:
        -: 1255:		// I think this was missing before
    #####: 1256:		state->discard[currentPlayer][state->discardCount[currentPlayer]] =
    #####: 1257:				state->hand[currentPlayer][handPos];
    #####: 1258:		state->discardCount[currentPlayer]++;
        -: 1259:
        -: 1260:	}
        -: 1261:
        -: 1262:	//set played card to -1
    #####: 1263:	state->hand[currentPlayer][handPos] = -1;
        -: 1264:
        -: 1265:	//remove card from player's hand
    #####: 1266:	if (handPos == ( state->handCount[currentPlayer] - 1 ))    //last card in hand array is played
        -: 1267:			{
        -: 1268:		//reduce number of cards in hand
    #####: 1269:		state->handCount[currentPlayer]--;
    #####: 1270:	} else if (state->handCount[currentPlayer] == 1)    //only one card in hand
        -: 1271:			{
        -: 1272:		//reduce number of cards in hand
    #####: 1273:		state->handCount[currentPlayer]--;
        -: 1274:	} else {
        -: 1275:		//replace discarded card with last card in hand
    #####: 1276:		state->hand[currentPlayer][handPos] =
    #####: 1277:				state->hand[currentPlayer][( state->handCount[currentPlayer] - 1 )];
        -: 1278:		//set last card to -1
    #####: 1279:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1280:		//reduce number of cards in hand
    #####: 1281:		state->handCount[currentPlayer]--;
        -: 1282:	}
        -: 1283:
    #####: 1284:	return 0;
        -: 1285:}
        -: 1286:
    #####: 1287:int gainCard( int supplyPos, struct gameState *state, int toFlag, int player )
        -: 1288:{
        -: 1289:	//Note: supplyPos is enum of choosen card
        -: 1290:
        -: 1291:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1292:	if (supplyCount( supplyPos, state ) < 1) {
    #####: 1293:		return -1;
        -: 1294:	}
        -: 1295:
        -: 1296:	//added card for [whoseTurn] current player:
        -: 1297:	// toFlag = 0 : add to discard
        -: 1298:	// toFlag = 1 : add to deck
        -: 1299:	// toFlag = 2 : add to hand
        -: 1300:
    #####: 1301:	if (toFlag == 1) {
    #####: 1302:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1303:		state->deckCount[player]++;
    #####: 1304:	} else if (toFlag == 2) {
    #####: 1305:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1306:		state->handCount[player]++;
        -: 1307:	} else {
    #####: 1308:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1309:		state->discardCount[player]++;
        -: 1310:	}
        -: 1311:
        -: 1312:	//decrease number in supply pile
    #####: 1313:	state->supplyCount[supplyPos]--;
        -: 1314:
    #####: 1315:	return 0;
        -: 1316:}
        -: 1317:
     5062: 1318:int updateCoins( int player, struct gameState *state, int bonus )
        -: 1319:{
        -: 1320:	int i;
        -: 1321:
        -: 1322:	//reset coin count
     5062: 1323:	state->coins = 0;
        -: 1324:
        -: 1325:	//add coins for each Treasure card in player's hand
    30372: 1326:	for (i = 0; i < state->handCount[player]; i++) {
    25310: 1327:		if (state->hand[player][i] == copper) {
    11843: 1328:			state->coins += 1;
    13467: 1329:		} else if (state->hand[player][i] == silver) {
      472: 1330:			state->coins += 2;
    12995: 1331:		} else if (state->hand[player][i] == gold) {
      436: 1332:			state->coins += 3;
        -: 1333:		}
        -: 1334:	}
        -: 1335:
        -: 1336:	//add bonus
     5062: 1337:	state->coins += bonus;
        -: 1338:
     5062: 1339:	return 0;
        -: 1340:}
        -: 1341:
        -: 1342://end of dominion.c
        -: 1343:
File 'dominion.c'
Lines executed:26.05% of 526
Branches executed:21.14% of 369
Taken at least once:20.05% of 369
Calls executed:15.71% of 70
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1481676 returned 100% blocks executed 100%
  1481676:    8:int compare( const void* a, const void* b )
        -:    9:{
  1481676:   10:	if (*(int*) a > *(int*) b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
   672682:   11:		return 1;
   808994:   12:	if (*(int*) a < *(int*) b)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
   305830:   13:		return -1;
   503164:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame()
        -:   18:{
    #####:   19:	struct gameState* g = malloc( sizeof(struct gameState) );
    #####:   20:	return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards( int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10 )
        -:   24:{
    #####:   25:	int* k = malloc( 10 * sizeof(int) );
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   39:int initializeGame( int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state )
        -:   40:{
        -:   41:
        -:   42:	int i;
        -:   43:	int j;
        -:   44:	int it;
        -:   45:	//set up random number generator
     1000:   46:	SelectStream( 1 );
call    0 returned 100%
     1000:   47:	PutSeed( (long) randomSeed );
call    0 returned 100%
        -:   48:
        -:   49:	//check number of players
     1000:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   51:		return -1;
        -:   52:	}
        -:   53:
        -:   54:	//set number of players
     1000:   55:	state->numPlayers = numPlayers;
        -:   56:
        -:   57:	//check selected kingdom cards are different
    11000:   58:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   110000:   59:		for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   100000:   60:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   61:				return -1;
        -:   62:			}
        -:   63:		}
        -:   64:	}
        -:   65:
        -:   66:	//initialize supply
        -:   67:	///////////////////////////////
        -:   68:
        -:   69:	//set number of Curse cards
     1000:   70:	if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
      331:   71:		state->supplyCount[curse] = 10;
      669:   72:	} else if (numPlayers == 3) {
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
      323:   73:		state->supplyCount[curse] = 20;
        -:   74:	} else {
      346:   75:		state->supplyCount[curse] = 30;
        -:   76:	}
        -:   77:
        -:   78:	//set number of Victory cards
     1000:   79:	if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
      331:   80:		state->supplyCount[estate] = 8;
      331:   81:		state->supplyCount[duchy] = 8;
      331:   82:		state->supplyCount[province] = 8;
        -:   83:	} else {
      669:   84:		state->supplyCount[estate] = 12;
      669:   85:		state->supplyCount[duchy] = 12;
      669:   86:		state->supplyCount[province] = 12;
        -:   87:	}
        -:   88:
        -:   89:	//set number of Treasure cards
     1000:   90:	state->supplyCount[copper] = 60 - ( 7 * numPlayers );
     1000:   91:	state->supplyCount[silver] = 40;
     1000:   92:	state->supplyCount[gold] = 30;
        -:   93:
        -:   94:	//set number of Kingdom cards
    21000:   95:	for (i = adventurer; i <= treasure_map; i++)    //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   96:			{
   165000:   97:		for (j = 0; j < 10; j++)    //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   98:				{
   155000:   99:			if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  100:				//check if card is a 'Victory' Kingdom card
    10000:  101:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     2140:  102:					if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
      351:  103:						state->supplyCount[i] = 8;
        -:  104:					} else {
      719:  105:						state->supplyCount[i] = 12;
        -:  106:					}
        -:  107:				} else {
     8930:  108:					state->supplyCount[i] = 10;
        -:  109:				}
    10000:  110:				break;
        -:  111:			} else    //card is not in the set choosen for the game
        -:  112:			{
   145000:  113:				state->supplyCount[i] = -1;
        -:  114:			}
        -:  115:		}
        -:  116:
        -:  117:	}
        -:  118:
        -:  119:	////////////////////////
        -:  120:	//supply intilization complete
        -:  121:
        -:  122:	//set player decks
     4015:  123:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     3015:  124:		state->deckCount[i] = 0;
    12060:  125:		for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     9045:  126:			state->deck[i][j] = estate;
     9045:  127:			state->deckCount[i]++;
        -:  128:		}
    24120:  129:		for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
    21105:  130:			state->deck[i][j] = copper;
    21105:  131:			state->deckCount[i]++;
        -:  132:		}
        -:  133:	}
        -:  134:
        -:  135:	//shuffle player decks
     4015:  136:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     3015:  137:		if (shuffle( i, state ) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  138:			return -1;
        -:  139:		}
        -:  140:	}
        -:  141:
        -:  142:	//draw player hands
     4015:  143:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:		//initialize hand size to zero
     3015:  145:		state->handCount[i] = 0;
     3015:  146:		state->discardCount[i] = 0;
        -:  147:		//draw 5 cards
        -:  148:		// for (j = 0; j < 5; j++)
        -:  149:		//	{
        -:  150:		//	  drawCard(i, state);
        -:  151:		//	}
        -:  152:	}
        -:  153:
        -:  154:	//set embargo tokens to 0 for all supply piles
    28000:  155:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    27000:  156:		state->embargoTokens[i] = 0;
        -:  157:	}
        -:  158:
        -:  159:	//initialize first player's turn
     1000:  160:	state->outpostPlayed = 0;
     1000:  161:	state->phase = 0;
     1000:  162:	state->numActions = 1;
     1000:  163:	state->numBuys = 1;
     1000:  164:	state->playedCardCount = 0;
     1000:  165:	state->whoseTurn = 0;
     1000:  166:	state->handCount[state->whoseTurn] = 0;
        -:  167:	//int it; move to top
        -:  168:
        -:  169:	//Moved draw cards to here, only drawing at the start of a turn
     6000:  170:	for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5000:  171:		drawCard( state->whoseTurn, state );
call    0 returned 100%
        -:  172:	}
        -:  173:
     1000:  174:	updateCoins( state->whoseTurn, state, 0 );
call    0 returned 100%
        -:  175:
     1000:  176:	return 0;
        -:  177:}
        -:  178:
function shuffle called 3981 returned 100% blocks executed 100%
     3981:  179:int shuffle( int player, struct gameState *state )
        -:  180:{
        -:  181:
        -:  182:	int newDeck[MAX_DECK];
     3981:  183:	int newDeckPos = 0;
        -:  184:	int card;
        -:  185:	int i;
        -:  186:
     3981:  187:	if (state->deckCount[player] < 1)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      619:  188:		return -1;
     3362:  189:	qsort( (void*) ( state->deck[player] ), state->deckCount[player], sizeof(int), compare );
call    0 returned 100%
        -:  190:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  191:
    38609:  192:	while ( state->deckCount[player] > 0 ) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
    31885:  193:		card = floor( Random() * state->deckCount[player] );
call    0 returned 100%
    31885:  194:		newDeck[newDeckPos] = state->deck[player][card];
    31885:  195:		newDeckPos++;
    96048:  196:		for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
    64163:  197:			state->deck[player][i] = state->deck[player][i + 1];
        -:  198:		}
    31885:  199:		state->deckCount[player]--;
        -:  200:	}
    35247:  201:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
    31885:  202:		state->deck[player][i] = newDeck[i];
    31885:  203:		state->deckCount[player]++;
        -:  204:	}
        -:  205:
     3362:  206:	return 0;
        -:  207:}
        -:  208:
function playCard called 0 returned 0% blocks executed 0%
    #####:  209:int playCard( int handPos, int choice1, int choice2, int choice3, struct gameState *state )
        -:  210:{
        -:  211:	int card;
    #####:  212:	int coin_bonus = 0;    //tracks coins gain from actions
        -:  213:
        -:  214:	//check if it is the right phase
    #####:  215:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  216:		return -1;
        -:  217:	}
        -:  218:
        -:  219:	//check if player has enough actions
    #####:  220:	if (state->numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  221:		return -1;
        -:  222:	}
        -:  223:
        -:  224:	//get card played
    #####:  225:	card = handCard( handPos, state );
call    0 never executed
        -:  226:
        -:  227:	//check if selected card is an action
    #####:  228:	if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  229:		return -1;
        -:  230:	}
        -:  231:
        -:  232:	//play card
    #####:  233:	if (cardEffect( card, choice1, choice2, choice3, state, handPos, &coin_bonus ) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  234:		return -1;
        -:  235:	}
        -:  236:
        -:  237:	//reduce number of actions
    #####:  238:	state->numActions--;
        -:  239:
        -:  240:	//update coins (Treasure cards may be added with card draws)
    #####:  241:	updateCoins( state->whoseTurn, state, coin_bonus );
call    0 never executed
        -:  242:
    #####:  243:	return 0;
        -:  244:}
        -:  245:
        -:  246:// apparently, supplyPos is the enum value of the card being bought
function buyCard called 0 returned 0% blocks executed 0%
    #####:  247:int buyCard( int supplyPos, struct gameState *state )
        -:  248:{
        -:  249:	int who;
        -:  250:	if (DEBUG) {
        -:  251:		printf( "Entering buyCard...\n" );
        -:  252:	}
        -:  253:
        -:  254:	// I don't know what to do about the phase thing.
        -:  255:
    #####:  256:	who = state->whoseTurn;
        -:  257:
    #####:  258:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  259:		if (DEBUG)
        -:  260:			printf( "You do not have any buys left\n" );
    #####:  261:		return -1;
    #####:  262:	} else if (supplyCount( supplyPos, state ) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  263:		if (DEBUG)
        -:  264:			printf( "There are not any of that type of card left\n" );
    #####:  265:		return -1;
    #####:  266:	} else if (state->coins < getCost( supplyPos )) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  267:		if (DEBUG)
        -:  268:			printf( "You do not have enough money to buy that. You have %d coins.\n",
        -:  269:					state->coins );
    #####:  270:		return -1;
        -:  271:	} else {
    #####:  272:		state->phase = 1;
        -:  273:		//state->supplyCount[supplyPos]--;
    #####:  274:		gainCard( supplyPos, state, 0, who );   //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  275:
    #####:  276:		state->coins = ( state->coins ) - ( getCost( supplyPos ) );
call    0 never executed
    #####:  277:		state->numBuys--;
        -:  278:		if (DEBUG)
        -:  279:			printf( "You bought card number %d for %d coins. You now have %d buys and %d coins.\n",
        -:  280:					supplyPos, getCost( supplyPos ), state->numBuys, state->coins );
        -:  281:	}
        -:  282:
        -:  283:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  284:	//state->discardCount[who]++;
        -:  285:
    #####:  286:	return 0;
        -:  287:}
        -:  288:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  289:int numHandCards( struct gameState *state )
        -:  290:{
    #####:  291:	return state->handCount[whoseTurn( state )];
call    0 never executed
        -:  292:}
        -:  293:
function handCard called 0 returned 0% blocks executed 0%
    #####:  294:int handCard( int handPos, struct gameState *state )
        -:  295:{
    #####:  296:	int currentPlayer = whoseTurn( state );
call    0 never executed
    #####:  297:	return state->hand[currentPlayer][handPos];
        -:  298:}
        -:  299:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  300:int supplyCount( int card, struct gameState *state )
        -:  301:{
    #####:  302:	return state->supplyCount[card];
        -:  303:}
        -:  304:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  305:int fullDeckCount( int player, int card, struct gameState *state )
        -:  306:{
        -:  307:	int i;
    #####:  308:	int count = 0;
        -:  309:
    #####:  310:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  311:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  312:			count++;
        -:  313:	}
        -:  314:
    #####:  315:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  316:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  317:			count++;
        -:  318:	}
        -:  319:
    #####:  320:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  321:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  322:			count++;
        -:  323:	}
        -:  324:
    #####:  325:	return count;
        -:  326:}
        -:  327:
function whoseTurn called 4062 returned 100% blocks executed 100%
     4062:  328:int whoseTurn( struct gameState *state )
        -:  329:{
     4062:  330:	return state->whoseTurn;
        -:  331:}
        -:  332:
function endTurn called 4062 returned 100% blocks executed 100%
     4062:  333:int endTurn( struct gameState *state )
        -:  334:{
        -:  335:	int k;
        -:  336:	int i;
     4062:  337:	int currentPlayer = whoseTurn( state );
call    0 returned 100%
        -:  338:
        -:  339:	//Discard hand
    24372:  340:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    40620:  341:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    20310:  342:				state->hand[currentPlayer][i];    //Discard
    20310:  343:		state->hand[currentPlayer][i] = -1;    //Set card to -1
        -:  344:	}
     4062:  345:	state->handCount[currentPlayer] = 0;    //Reset hand count
        -:  346:
        -:  347:	//Code for determining the player
     4062:  348:	if (currentPlayer < ( state->numPlayers - 1 )) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
     3062:  349:		state->whoseTurn = currentPlayer + 1;    //Still safe to increment
        -:  350:	} else {
     1000:  351:		state->whoseTurn = 0;    //Max player has been reached, loop back around to player 1
        -:  352:	}
        -:  353:
     4062:  354:	state->outpostPlayed = 0;
     4062:  355:	state->phase = 0;
     4062:  356:	state->numActions = 1;
     4062:  357:	state->coins = 0;
     4062:  358:	state->numBuys = 1;
     4062:  359:	state->playedCardCount = 0;
     4062:  360:	state->handCount[state->whoseTurn] = 0;
        -:  361:
        -:  362:	//int k; move to top
        -:  363:	//Next player draws hand
    24372:  364:	for (k = 0; k < 5; k++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    20310:  365:		drawCard( state->whoseTurn, state );    //Draw a card
call    0 returned 100%
        -:  366:	}
        -:  367:
        -:  368:	//Update money
     4062:  369:	updateCoins( state->whoseTurn, state, 0 );
call    0 returned 100%
        -:  370:
     4062:  371:	return 0;
        -:  372:}
        -:  373:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  374:int isGameOver( struct gameState *state )
        -:  375:{
        -:  376:	int i;
        -:  377:	int j;
        -:  378:
        -:  379:	//if stack of Province cards is empty, the game ends
    #####:  380:	if (state->supplyCount[province] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  381:		return 1;
        -:  382:	}
        -:  383:
        -:  384:	//if three supply pile are at 0, the game ends
    #####:  385:	j = 0;
    #####:  386:	for (i = 0; i < 25; i++) {
branch  0 never executed
branch  1 never executed
    #####:  387:		if (state->supplyCount[i] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  388:			j++;
        -:  389:		}
        -:  390:	}
    #####:  391:	if (j >= 3) {
branch  0 never executed
branch  1 never executed
    #####:  392:		return 1;
        -:  393:	}
        -:  394:
    #####:  395:	return 0;
        -:  396:}
        -:  397:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  398:int scoreFor( int player, struct gameState *state )
        -:  399:{
    #####:  400:	int totalCards = 0;
    #####:  401:	int gardensCards = 0;
        -:  402:	int i;
    #####:  403:	int score = 0;
        -:  404:	//score from hand
    #####:  405:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  407:			score = score - 1;
        -:  408:		};
    #####:  409:		if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  410:			score = score + 1;
        -:  411:		};
    #####:  412:		if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  413:			score = score + 3;
        -:  414:		};
    #####:  415:		if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  416:			score = score + 6;
        -:  417:		};
    #####:  418:		if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  419:			score = score + 1;
        -:  420:		};
    #####:  421:		if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  422:			gardensCards++;
        -:  423:			//score = score + ( fullDeckCount( player, 0, state ) / 10 );
        -:  424:		};
    #####:  425:		totalCards++;
        -:  426:	}
        -:  427:
        -:  428:	//score from discard
    #####:  429:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  430:		if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  431:			score = score - 1;
        -:  432:		};
    #####:  433:		if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  434:			score = score + 1;
        -:  435:		};
    #####:  436:		if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  437:			score = score + 3;
        -:  438:		};
    #####:  439:		if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  440:			score = score + 6;
        -:  441:		};
    #####:  442:		if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
        -:  443:			//score = score + 1;
    #####:  444:			score = score + 0;
        -:  445:		};
    #####:  446:		if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  447:			gardensCards++;
        -:  448:			//score = score + ( fullDeckCount( player, 0, state ) / 10 );
        -:  449:		};
    #####:  450:		totalCards++;
        -:  451:	}
        -:  452:
        -:  453:	//score from deck
    #####:  454:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  455:		if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  456:			score = score - 1;
        -:  457:		};
    #####:  458:		if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  459:			score = score + 1;
        -:  460:		};
    #####:  461:		if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  462:			score = score + 3;
        -:  463:		};
    #####:  464:		if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  465:			score = score + 6;
        -:  466:		};
    #####:  467:		if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  468:			score = score + 1;
        -:  469:		};
    #####:  470:		if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  471:			gardensCards++;
        -:  472:			//score = score + ( fullDeckCount( player, 0, state ) / 10 );
        -:  473:		};
    #####:  474:		totalCards++;
        -:  475:	}
        -:  476:
    #####:  477:	for (i = 0; i < gardensCards; i++) {
branch  0 never executed
branch  1 never executed
    #####:  478:		score += totalCards / 10;
        -:  479:	}
        -:  480:
    #####:  481:	return score;
        -:  482:}
        -:  483:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  484:int getWinners( int players[MAX_PLAYERS], struct gameState *state )
        -:  485:{
        -:  486:	int i;
        -:  487:	int j;
        -:  488:	int highScore;
        -:  489:	int currentPlayer;
        -:  490:
        -:  491:	//get score for each player
    #####:  492:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  493:		//set unused player scores to -9999
    #####:  494:		if (i >= state->numPlayers) {
branch  0 never executed
branch  1 never executed
    #####:  495:			players[i] = -9999;
        -:  496:		} else {
    #####:  497:			players[i] = scoreFor( i, state );
call    0 never executed
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  504:		if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  505:			j = i;
        -:  506:		}
        -:  507:	}
    #####:  508:	highScore = players[j];
        -:  509:
        -:  510:	//add 1 to players who had less turns
    #####:  511:	currentPlayer = whoseTurn( state );
call    0 never executed
    #####:  512:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  513:		if (players[i] == highScore && i > currentPlayer) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  514:			players[i]++;
        -:  515:		}
        -:  516:	}
        -:  517:
        -:  518:	//find new highest score
    #####:  519:	j = 0;
    #####:  520:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  521:		if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  522:			j = i;
        -:  523:		}
        -:  524:	}
    #####:  525:	highScore = players[j];
        -:  526:
        -:  527:	//set winners in array to 1 and rest to 0
    #####:  528:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  529:		if (players[i] == highScore) {
branch  0 never executed
branch  1 never executed
    #####:  530:			players[i] = 1;
        -:  531:		} else {
    #####:  532:			players[i] = 0;
        -:  533:		}
        -:  534:	}
        -:  535:
    #####:  536:	return 0;
        -:  537:}
        -:  538:
function drawCard called 37542 returned 100% blocks executed 100%
    37542:  539:int drawCard( int player, struct gameState *state )
        -:  540:{
        -:  541:	int count;
        -:  542:	int deckCounter;
    37542:  543:	if (state->deckCount[player] <= 0) {    //Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  544:
        -:  545:		//Step 1 Shuffle the discard pile back into a deck
        -:  546:		int i;
        -:  547:		//Move discard to deck
     2218:  548:		for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
     1735:  549:			state->deck[player][i] = state->discard[player][i];
     1735:  550:			state->discard[player][i] = -1;
        -:  551:		}
        -:  552:
      483:  553:		state->deckCount[player] = state->discardCount[player];
      483:  554:		state->discardCount[player] = 0;    //Reset discard
        -:  555:
        -:  556:		//Shufffle the deck
      483:  557:		shuffle( player, state );    //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  558:
        -:  559:		if (DEBUG) {    //Debug statements
        -:  560:			printf( "Deck count now: %d\n", state->deckCount[player] );
        -:  561:		}
        -:  562:
      483:  563:		state->discardCount[player] = 0;
        -:  564:
        -:  565:		//Step 2 Draw Card
      483:  566:		count = state->handCount[player];    //Get current player's hand count
        -:  567:
        -:  568:		if (DEBUG) {    //Debug statements
        -:  569:			printf( "Current hand count: %d\n", count );
        -:  570:		}
        -:  571:
      483:  572:		deckCounter = state->deckCount[player];    //Create a holder for the deck count
        -:  573:
      483:  574:		if (deckCounter == 0)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
      136:  575:			return -1;
        -:  576:
      347:  577:		state->hand[player][count] = state->deck[player][deckCounter - 1];    //Add card to hand
      347:  578:		state->deckCount[player]--;
      347:  579:		state->handCount[player]++;    //Increment hand count
        -:  580:	}
        -:  581:
        -:  582:	else {
    37059:  583:		int count = state->handCount[player];    //Get current hand count for player
        -:  584:		int deckCounter;
        -:  585:		if (DEBUG) {    //Debug statements
        -:  586:			printf( "Current hand count: %d\n", count );
        -:  587:		}
        -:  588:
    37059:  589:		deckCounter = state->deckCount[player];    //Create holder for the deck count
    37059:  590:		state->hand[player][count] = state->deck[player][deckCounter - 1];    //Add card to the hand
    37059:  591:		state->deckCount[player]--;
    37059:  592:		state->handCount[player]++;    //Increment hand count
        -:  593:	}
        -:  594:
    37406:  595:	return 0;
        -:  596:}
        -:  597:
function getCost called 0 returned 0% blocks executed 0%
    #####:  598:int getCost( int cardNumber )
        -:  599:{
    #####:  600:	switch ( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  601:	case curse:
    #####:  602:		return 0;
        -:  603:	case estate:
    #####:  604:		return 2;
        -:  605:	case duchy:
    #####:  606:		return 5;
        -:  607:	case province:
    #####:  608:		return 8;
        -:  609:	case copper:
    #####:  610:		return 0;
        -:  611:	case silver:
    #####:  612:		return 3;
        -:  613:	case gold:
    #####:  614:		return 6;
        -:  615:	case adventurer:
    #####:  616:		return 6;
        -:  617:	case council_room:
    #####:  618:		return 5;
        -:  619:	case feast:
    #####:  620:		return 4;
        -:  621:	case gardens:
    #####:  622:		return 4;
        -:  623:	case mine:
    #####:  624:		return 5;
        -:  625:	case remodel:
    #####:  626:		return 4;
        -:  627:	case smithy:
    #####:  628:		return 4;
        -:  629:	case village:
    #####:  630:		return 3;
        -:  631:	case baron:
    #####:  632:		return 4;
        -:  633:	case great_hall:
    #####:  634:		return 3;
        -:  635:	case minion:
    #####:  636:		return 5;
        -:  637:	case steward:
    #####:  638:		return 3;
        -:  639:	case tribute:
    #####:  640:		return 5;
        -:  641:	case ambassador:
    #####:  642:		return 3;
        -:  643:	case cutpurse:
    #####:  644:		return 4;
        -:  645:	case embargo:
    #####:  646:		return 2;
        -:  647:	case outpost:
    #####:  648:		return 5;
        -:  649:	case salvager:
    #####:  650:		return 4;
        -:  651:	case sea_hag:
    #####:  652:		return 4;
        -:  653:	case treasure_map:
    #####:  654:		return 4;
        -:  655:	}
        -:  656:
    #####:  657:	return -1;
        -:  658:}
        -:  659:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  660:int cardEffect( int card, int choice1, int choice2, int choice3, struct gameState *state,
        -:  661:		int handPos, int *bonus )
        -:  662:{
        -:  663:	int i;
        -:  664:	int j;
        -:  665:	int k;
        -:  666:	int x;
        -:  667:	int index;
    #####:  668:	int currentPlayer = whoseTurn( state );
call    0 never executed
    #####:  669:	int nextPlayer = currentPlayer + 1;
        -:  670:
    #####:  671:	int tributeRevealedCards[2] = { -1, -1 };
        -:  672:	int temphand[MAX_HAND];    // moved above the if statement
    #####:  673:	int drawntreasure = 0;
        -:  674:	int cardDrawn;
    #####:  675:	int z = 0;    // this is the counter for the temp hand
    #####:  676:	if (nextPlayer > ( state->numPlayers - 1 )) {
branch  0 never executed
branch  1 never executed
    #####:  677:		nextPlayer = 0;
        -:  678:	}
        -:  679:
        -:  680:	//uses switch to select card and perform actions
    #####:  681:	switch ( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  682:	case adventurer:
        -:  683:		//keep drawing cards until 2 treasure cards are drawn
        -:  684:		/*
        -:  685:		 while ( drawntreasure < 2 )
        -:  686:		 {
        -:  687:		 //if the deck is empty we need to shuffle discard and add to deck
        -:  688:		 if (state->deckCount[currentPlayer] < 1)
        -:  689:		 {
        -:  690:		 shuffle( currentPlayer, state );
        -:  691:		 }
        -:  692:		 drawCard( currentPlayer, state );
        -:  693:
        -:  694:		 //top card of hand is most recently drawn card.
        -:  695:		 cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -:  696:		 if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  697:		 drawntreasure++;
        -:  698:		 else
        -:  699:		 {
        -:  700:		 temphand[z] = cardDrawn;
        -:  701:		 //remove the top card
        -:  702:		 state->handCount[currentPlayer]--;
        -:  703:		 z++;
        -:  704:		 }
        -:  705:		 }
        -:  706:		 while ( z - 1 >= 0 )
        -:  707:		 {
        -:  708:		 //discard all cards in play that have been drawn
        -:  709:		 state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
        -:  710:		 z = z - 1;
        -:  711:		 }
        -:  712:		 return 0;
        -:  713:		 */
        -:  714:
    #####:  715:		playAdventurer( currentPlayer, state );
call    0 never executed
    #####:  716:		return 0;
        -:  717:	case council_room:
        -:  718:		//+4 Cards
    #####:  719:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  720:			drawCard( currentPlayer, state );
call    0 never executed
        -:  721:		}
        -:  722:
        -:  723:		//+1 Buy
    #####:  724:		state->numBuys++;
        -:  725:
        -:  726:		//Each other player draws a card
    #####:  727:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  728:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  729:				drawCard( i, state );
call    0 never executed
        -:  730:			}
        -:  731:		}
        -:  732:
        -:  733:		//put played card in played card pile
    #####:  734:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
        -:  735:
    #####:  736:		return 0;
        -:  737:
        -:  738:	case feast:
        -:  739:		//gain card with cost up to 5
        -:  740:		//Backup hand
    #####:  741:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  742:			temphand[i] = state->hand[currentPlayer][i];    //Backup card
    #####:  743:			state->hand[currentPlayer][i] = -1;    //Set to nothing
        -:  744:		}
        -:  745:		//Backup hand
        -:  746:
        -:  747:		//Update Coins for Buy
    #####:  748:		updateCoins( currentPlayer, state, 5 );
call    0 never executed
    #####:  749:		x = 1;    //Condition to loop on
    #####:  750:		while ( x == 1 ) {    //Buy one card
branch  0 never executed
branch  1 never executed
    #####:  751:			if (supplyCount( choice1, state ) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  752:				if (DEBUG)
        -:  753:					printf( "None of that card left, sorry!\n" );
        -:  754:
        -:  755:				if (DEBUG) {
        -:  756:					printf( "Cards Left: %d\n", supplyCount( choice1, state ) );
        -:  757:				}
    #####:  758:			} else if (state->coins < getCost( choice1 )) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  759:				printf( "That card is too expensive!\n" );
call    0 never executed
        -:  760:
        -:  761:				if (DEBUG) {
        -:  762:					printf( "Coins: %d < %d\n", state->coins, getCost( choice1 ) );
        -:  763:				}
        -:  764:			} else {
        -:  765:
        -:  766:				if (DEBUG) {
        -:  767:					printf( "Deck Count: %d\n",
        -:  768:							state->handCount[currentPlayer] + state->deckCount[currentPlayer]
        -:  769:									+ state->discardCount[currentPlayer] );
        -:  770:				}
        -:  771:
    #####:  772:				gainCard( choice1, state, 0, currentPlayer );    //Gain the card
call    0 never executed
    #####:  773:				x = 0;    //No more buying cards
        -:  774:
        -:  775:				if (DEBUG) {
        -:  776:					printf( "Deck Count: %d\n",
        -:  777:							state->handCount[currentPlayer] + state->deckCount[currentPlayer]
        -:  778:									+ state->discardCount[currentPlayer] );
        -:  779:				}
        -:  780:
        -:  781:			}
        -:  782:		}
        -:  783:
        -:  784:		//Reset Hand
    #####:  785:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  786:			state->hand[currentPlayer][i] = temphand[i];
    #####:  787:			temphand[i] = -1;
        -:  788:		}
        -:  789:		//Reset Hand
        -:  790:
    #####:  791:		return 0;
        -:  792:
        -:  793:	case gardens:
    #####:  794:		return -1;
        -:  795:
        -:  796:	case mine:
        -:  797:		/*
        -:  798:		 j = state->hand[currentPlayer][choice1];    //store card we will trash
        -:  799:
        -:  800:		 if (state->hand[currentPlayer][choice1] < copper
        -:  801:		 || state->hand[currentPlayer][choice1] > gold)
        -:  802:		 {
        -:  803:		 return -1;
        -:  804:		 }
        -:  805:
        -:  806:		 if (choice2 > treasure_map || choice2 < curse)
        -:  807:		 {
        -:  808:		 return -1;
        -:  809:		 }
        -:  810:
        -:  811:		 if (( getCost( state->hand[currentPlayer][choice1] ) + 3 ) > getCost( choice2 ))
        -:  812:		 {
        -:  813:		 return -1;
        -:  814:		 }
        -:  815:
        -:  816:		 gainCard( choice2, state, 2, currentPlayer );
        -:  817:
        -:  818:		 //discard card from hand
        -:  819:		 discardCard( handPos, currentPlayer, state, 0 );
        -:  820:
        -:  821:		 //discard trashed card
        -:  822:		 for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  823:		 {
        -:  824:		 if (state->hand[currentPlayer][i] == j)
        -:  825:		 {
        -:  826:		 discardCard( i, currentPlayer, state, 0 );
        -:  827:		 break;
        -:  828:		 }
        -:  829:		 }
        -:  830:
        -:  831:		 return 0;
        -:  832:		 */
    #####:  833:		return playMine( currentPlayer, state, handPos, choice1, choice2 );
call    0 never executed
        -:  834:
        -:  835:	case remodel:
    #####:  836:		j = state->hand[currentPlayer][choice1];    //store card we will trash
        -:  837:
    #####:  838:		if (( getCost( state->hand[currentPlayer][choice1] ) + 2 ) > getCost( choice2 )) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  839:			return -1;
        -:  840:		}
        -:  841:
    #####:  842:		gainCard( choice2, state, 0, currentPlayer );
call    0 never executed
        -:  843:
        -:  844:		//discard card from hand
    #####:  845:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
        -:  846:
        -:  847:		//discard trashed card
    #####:  848:		for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  849:			if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  850:				discardCard( i, currentPlayer, state, 0 );
call    0 never executed
    #####:  851:				break;
        -:  852:			}
        -:  853:		}
        -:  854:
    #####:  855:		return 0;
        -:  856:
        -:  857:	case smithy:
        -:  858:		//+3 Cards
        -:  859:		/*
        -:  860:		 for (i = 0; i < 3; i++)
        -:  861:		 {
        -:  862:		 drawCard( currentPlayer, state );
        -:  863:		 }
        -:  864:
        -:  865:		 //discard card from hand
        -:  866:		 discardCard( handPos, currentPlayer, state, 0 );
        -:  867:		 return 0;
        -:  868:		 */
    #####:  869:		playSmithy( currentPlayer, state, 0 );
call    0 never executed
    #####:  870:		return 0;
        -:  871:
        -:  872:	case village:
        -:  873:		//+1 Card
    #####:  874:		drawCard( currentPlayer, state );
call    0 never executed
        -:  875:
        -:  876:		//+2 Actions
    #####:  877:		state->numActions = state->numActions + 2;
        -:  878:
        -:  879:		//discard played card from hand
    #####:  880:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
    #####:  881:		return 0;
        -:  882:
        -:  883:	case baron:
        -:  884:		/*
        -:  885:		 state->numBuys++;    //Increase buys by 1!
        -:  886:		 if (choice1 > 0)
        -:  887:		 {    //Boolean true or going to discard an estate
        -:  888:		 int p = 0;    //Iterator for hand!
        -:  889:		 int card_not_discarded = 1;    //Flag for discard set!
        -:  890:		 while ( card_not_discarded )
        -:  891:		 {
        -:  892:		 if (state->hand[currentPlayer][p] == estate)
        -:  893:		 {    //Found an estate card!
        -:  894:		 state->coins += 4;    //Add 4 coins to the amount of coins
        -:  895:		 state->discard[currentPlayer][state->discardCount[currentPlayer]] =
        -:  896:		 state->hand[currentPlayer][p];
        -:  897:		 state->discardCount[currentPlayer]++;
        -:  898:		 for (; p < state->handCount[currentPlayer]; p++)
        -:  899:		 {
        -:  900:		 state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  901:		 }
        -:  902:		 state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  903:		 state->handCount[currentPlayer]--;
        -:  904:		 card_not_discarded = 0;    //Exit the loop
        -:  905:		 } else if (p > state->handCount[currentPlayer])
        -:  906:		 {
        -:  907:		 if (DEBUG)
        -:  908:		 {
        -:  909:		 printf( "No estate cards in your hand, invalid choice\n" );
        -:  910:		 printf( "Must gain an estate if there are any\n" );
        -:  911:		 }
        -:  912:		 if (supplyCount( estate, state ) > 0)
        -:  913:		 {
        -:  914:		 gainCard( estate, state, 0, currentPlayer );
        -:  915:		 state->supplyCount[estate]--;    //Decrement estates
        -:  916:		 if (supplyCount( estate, state ) == 0)
        -:  917:		 {
        -:  918:		 isGameOver( state );
        -:  919:		 }
        -:  920:		 }
        -:  921:		 card_not_discarded = 0;    //Exit the loop
        -:  922:		 }
        -:  923:
        -:  924:		 else
        -:  925:		 {
        -:  926:		 p++;    //Next card
        -:  927:		 }
        -:  928:		 }
        -:  929:		 }
        -:  930:
        -:  931:		 else
        -:  932:		 {
        -:  933:		 if (supplyCount( estate, state ) > 0)
        -:  934:		 {
        -:  935:		 gainCard( estate, state, 0, currentPlayer );    //Gain an estate
        -:  936:		 state->supplyCount[estate]--;    //Decrement Estates
        -:  937:		 if (supplyCount( estate, state ) == 0)
        -:  938:		 {
        -:  939:		 isGameOver( state );
        -:  940:		 }
        -:  941:		 }
        -:  942:		 }
        -:  943:
        -:  944:		 return 0;
        -:  945:		 */
    #####:  946:		playBaron( currentPlayer, state, choice1 );
call    0 never executed
    #####:  947:		return 0;
        -:  948:
        -:  949:	case great_hall:
        -:  950:		//+1 Card
    #####:  951:		drawCard( currentPlayer, state );
call    0 never executed
        -:  952:
        -:  953:		//+1 Actions
    #####:  954:		state->numActions++;
        -:  955:
        -:  956:		//discard card from hand
    #####:  957:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
    #####:  958:		return 0;
        -:  959:
        -:  960:	case minion:
        -:  961:		//+1 action
    #####:  962:		state->numActions++;
        -:  963:
        -:  964:		//discard card from hand
    #####:  965:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
        -:  966:
    #####:  967:		if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -:  968:		{
    #####:  969:			state->coins = state->coins + 2;
        -:  970:		}
        -:  971:
    #####:  972:		else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  973:		{
        -:  974:			//discard hand
    #####:  975:			while ( numHandCards( state ) > 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:				discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
        -:  977:			}
        -:  978:
        -:  979:			//draw 4
    #####:  980:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  981:				drawCard( currentPlayer, state );
call    0 never executed
        -:  982:			}
        -:  983:
        -:  984:			//other players discard hand and redraw if hand size > 4
    #####:  985:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  986:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  987:					if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -:  988:						//discard hand
    #####:  989:						while ( state->handCount[i] > 0 ) {
branch  0 never executed
branch  1 never executed
    #####:  990:							discardCard( handPos, i, state, 0 );
call    0 never executed
        -:  991:						}
        -:  992:
        -:  993:						//draw 4
    #####:  994:						for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####:  995:							drawCard( i, state );
call    0 never executed
        -:  996:						}
        -:  997:					}
        -:  998:				}
        -:  999:			}
        -: 1000:
        -: 1001:		}
    #####: 1002:		return 0;
        -: 1003:
        -: 1004:	case steward:
        -: 1005:		/*
        -: 1006:		 if (choice1 == 1)
        -: 1007:		 {
        -: 1008:		 //+2 cards
        -: 1009:		 drawCard( currentPlayer, state );
        -: 1010:		 drawCard( currentPlayer, state );
        -: 1011:		 } else if (choice1 == 2)
        -: 1012:		 {
        -: 1013:		 //+2 coins
        -: 1014:		 state->coins = state->coins + 2;
        -: 1015:		 } else
        -: 1016:		 {
        -: 1017:		 //trash 2 cards in hand
        -: 1018:		 discardCard( choice2, currentPlayer, state, 1 );
        -: 1019:		 discardCard( choice3, currentPlayer, state, 1 );
        -: 1020:		 }
        -: 1021:
        -: 1022:		 //discard card from hand
        -: 1023:		 discardCard( handPos, currentPlayer, state, 0 );
        -: 1024:		 return 0;
        -: 1025:		 */
    #####: 1026:		playSteward( currentPlayer, state, handPos, choice1, choice2, choice3 );
call    0 never executed
    #####: 1027:		return 0;
        -: 1028:	case tribute:
    #####: 1029:		if (( state->discardCount[nextPlayer] + state->deckCount[nextPlayer] ) <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 1030:			if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1031:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1032:				state->deckCount[nextPlayer]--;
    #####: 1033:			} else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1034:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]
    #####: 1035:						- 1];
    #####: 1036:				state->discardCount[nextPlayer]--;
        -: 1037:			} else {
        -: 1038:				//No Card to Reveal
        -: 1039:				if (DEBUG) {
        -: 1040:					printf( "No cards to reveal\n" );
        -: 1041:				}
        -: 1042:			}
        -: 1043:		}
        -: 1044:
        -: 1045:		else {
    #####: 1046:			if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1047:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1048:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];    //Move to deck
    #####: 1049:					state->deckCount[nextPlayer]++;
    #####: 1050:					state->discard[nextPlayer][i] = -1;
    #####: 1051:					state->discardCount[nextPlayer]--;
        -: 1052:				}
        -: 1053:
    #####: 1054:				shuffle( nextPlayer, state );    //Shuffle the deck
call    0 never executed
        -: 1055:			}
    #####: 1056:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1057:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:			state->deckCount[nextPlayer]--;
    #####: 1059:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1060:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1061:			state->deckCount[nextPlayer]--;
        -: 1062:		}
        -: 1063:
    #####: 1064:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {   //If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1065:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1066:			state->playedCardCount++;
    #####: 1067:			tributeRevealedCards[1] = -1;
        -: 1068:		}
        -: 1069:
    #####: 1070:		for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1071:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1072:					|| tributeRevealedCards[i] == gold) {    //Treasure cards
branch  0 never executed
branch  1 never executed
    #####: 1073:				state->coins += 2;
        -: 1074:			}
        -: 1075:
    #####: 1076:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1077:					|| tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1078:					|| tributeRevealedCards[i] == great_hall) {    //Victory Card Found
branch  0 never executed
branch  1 never executed
    #####: 1079:				drawCard( currentPlayer, state );
call    0 never executed
    #####: 1080:				drawCard( currentPlayer, state );
call    0 never executed
        -: 1081:			} else {    //Action Card
    #####: 1082:				state->numActions = state->numActions + 2;
        -: 1083:			}
        -: 1084:		}
        -: 1085:
    #####: 1086:		return 0;
        -: 1087:
        -: 1088:	case ambassador:
    #####: 1089:		j = 0;    //used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:		if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1092:			return -1;
        -: 1093:		}
        -: 1094:
    #####: 1095:		if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####: 1096:			return -1;
        -: 1097:		}
        -: 1098:
    #####: 1099:		for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1100:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1101:				j++;
        -: 1102:			}
        -: 1103:		}
    #####: 1104:		if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####: 1105:			return -1;
        -: 1106:		}
        -: 1107:
        -: 1108:		if (DEBUG)
        -: 1109:			printf( "Player %d reveals card number: %d\n", currentPlayer,
        -: 1110:					state->hand[currentPlayer][choice1] );
        -: 1111:
        -: 1112:		//increase supply count for choosen card by amount being discarded
    #####: 1113:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1114:
        -: 1115:		//each other player gains a copy of revealed card
    #####: 1116:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1117:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1118:				gainCard( state->hand[currentPlayer][choice1], state, 0, i );
call    0 never executed
        -: 1119:			}
        -: 1120:		}
        -: 1121:
        -: 1122:		//discard played card from hand
    #####: 1123:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
        -: 1124:
        -: 1125:		//trash copies of cards returned to supply
    #####: 1126:		for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1127:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1128:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1129:					discardCard( i, currentPlayer, state, 1 );
call    0 never executed
    #####: 1130:					break;
        -: 1131:				}
        -: 1132:			}
        -: 1133:		}
        -: 1134:
    #####: 1135:		return 0;
        -: 1136:
        -: 1137:	case cutpurse:
        -: 1138:
    #####: 1139:		updateCoins( currentPlayer, state, 2 );
call    0 never executed
    #####: 1140:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1141:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1142:				for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1143:					if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1144:						discardCard( j, i, state, 0 );
call    0 never executed
    #####: 1145:						break;
        -: 1146:					}
    #####: 1147:					if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1148:						for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1149:							if (DEBUG)
        -: 1150:								printf( "Player %d reveals card number %d\n", i,
        -: 1151:										state->hand[i][k] );
        -: 1152:						}
    #####: 1153:						break;
        -: 1154:					}
        -: 1155:				}
        -: 1156:
        -: 1157:			}
        -: 1158:
        -: 1159:		}
        -: 1160:
        -: 1161:		//discard played card from hand
    #####: 1162:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
        -: 1163:
    #####: 1164:		return 0;
        -: 1165:
        -: 1166:	case embargo:
        -: 1167:		//+2 Coins
    #####: 1168:		state->coins = state->coins + 2;
        -: 1169:
        -: 1170:		//see if selected pile is in play
    #####: 1171:		if (state->supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1172:			return -1;
        -: 1173:		}
        -: 1174:
        -: 1175:		//add embargo token to selected supply pile
    #####: 1176:		state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:		//trash card
    #####: 1179:		discardCard( handPos, currentPlayer, state, 1 );
call    0 never executed
    #####: 1180:		return 0;
        -: 1181:
        -: 1182:	case outpost:
        -: 1183:		//set outpost flag
    #####: 1184:		state->outpostPlayed++;
        -: 1185:
        -: 1186:		//discard card
    #####: 1187:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
    #####: 1188:		return 0;
        -: 1189:
        -: 1190:	case salvager:
        -: 1191:		//+1 buy
    #####: 1192:		state->numBuys++;
        -: 1193:
    #####: 1194:		if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1195:			//gain coins equal to trashed card
    #####: 1196:			state->coins = state->coins + getCost( handCard( choice1, state ) );
call    0 never executed
call    1 never executed
        -: 1197:			//trash card
    #####: 1198:			discardCard( choice1, currentPlayer, state, 1 );
call    0 never executed
        -: 1199:		}
        -: 1200:
        -: 1201:		//discard card
    #####: 1202:		discardCard( handPos, currentPlayer, state, 0 );
call    0 never executed
    #####: 1203:		return 0;
        -: 1204:
        -: 1205:	case sea_hag:
    #####: 1206:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1207:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1208:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1209:				state->deckCount[i]--;
    #####: 1210:				state->discardCount[i]++;
    #####: 1211:				state->deck[i][state->deckCount[i]--] = curse;    //Top card now a curse
        -: 1212:			}
        -: 1213:		}
    #####: 1214:		return 0;
        -: 1215:
        -: 1216:	case treasure_map:
        -: 1217:		//search hand for another treasure_map
    #####: 1218:		index = -1;
    #####: 1219:		for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1220:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1221:				index = i;
    #####: 1222:				break;
        -: 1223:			}
        -: 1224:		}
    #####: 1225:		if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1226:			//trash both treasure cards
    #####: 1227:			discardCard( handPos, currentPlayer, state, 1 );
call    0 never executed
    #####: 1228:			discardCard( index, currentPlayer, state, 1 );
call    0 never executed
        -: 1229:
        -: 1230:			//gain 4 Gold cards
    #####: 1231:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1232:				gainCard( gold, state, 1, currentPlayer );
call    0 never executed
        -: 1233:			}
        -: 1234:
        -: 1235:			//return success
    #####: 1236:			return 1;
        -: 1237:		}
        -: 1238:
        -: 1239:		//no second treasure_map found in hand
    #####: 1240:		return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:	return -1;
        -: 1244:}
        -: 1245:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1246:int discardCard( int handPos, int currentPlayer, struct gameState *state, int trashFlag )
        -: 1247:{
        -: 1248:
        -: 1249:	//if card is not trashed, added to Played pile
    #####: 1250:	if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1251:		//add card to played pile
    #####: 1252:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1253:		state->playedCardCount++;
        -: 1254:
        -: 1255:		// I think this was missing before
    #####: 1256:		state->discard[currentPlayer][state->discardCount[currentPlayer]] =
    #####: 1257:				state->hand[currentPlayer][handPos];
    #####: 1258:		state->discardCount[currentPlayer]++;
        -: 1259:
        -: 1260:	}
        -: 1261:
        -: 1262:	//set played card to -1
    #####: 1263:	state->hand[currentPlayer][handPos] = -1;
        -: 1264:
        -: 1265:	//remove card from player's hand
    #####: 1266:	if (handPos == ( state->handCount[currentPlayer] - 1 ))    //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1267:			{
        -: 1268:		//reduce number of cards in hand
    #####: 1269:		state->handCount[currentPlayer]--;
    #####: 1270:	} else if (state->handCount[currentPlayer] == 1)    //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1271:			{
        -: 1272:		//reduce number of cards in hand
    #####: 1273:		state->handCount[currentPlayer]--;
        -: 1274:	} else {
        -: 1275:		//replace discarded card with last card in hand
    #####: 1276:		state->hand[currentPlayer][handPos] =
    #####: 1277:				state->hand[currentPlayer][( state->handCount[currentPlayer] - 1 )];
        -: 1278:		//set last card to -1
    #####: 1279:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1280:		//reduce number of cards in hand
    #####: 1281:		state->handCount[currentPlayer]--;
        -: 1282:	}
        -: 1283:
    #####: 1284:	return 0;
        -: 1285:}
        -: 1286:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1287:int gainCard( int supplyPos, struct gameState *state, int toFlag, int player )
        -: 1288:{
        -: 1289:	//Note: supplyPos is enum of choosen card
        -: 1290:
        -: 1291:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1292:	if (supplyCount( supplyPos, state ) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1293:		return -1;
        -: 1294:	}
        -: 1295:
        -: 1296:	//added card for [whoseTurn] current player:
        -: 1297:	// toFlag = 0 : add to discard
        -: 1298:	// toFlag = 1 : add to deck
        -: 1299:	// toFlag = 2 : add to hand
        -: 1300:
    #####: 1301:	if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1302:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1303:		state->deckCount[player]++;
    #####: 1304:	} else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1305:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1306:		state->handCount[player]++;
        -: 1307:	} else {
    #####: 1308:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1309:		state->discardCount[player]++;
        -: 1310:	}
        -: 1311:
        -: 1312:	//decrease number in supply pile
    #####: 1313:	state->supplyCount[supplyPos]--;
        -: 1314:
    #####: 1315:	return 0;
        -: 1316:}
        -: 1317:
function updateCoins called 5062 returned 100% blocks executed 100%
     5062: 1318:int updateCoins( int player, struct gameState *state, int bonus )
        -: 1319:{
        -: 1320:	int i;
        -: 1321:
        -: 1322:	//reset coin count
     5062: 1323:	state->coins = 0;
        -: 1324:
        -: 1325:	//add coins for each Treasure card in player's hand
    30372: 1326:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    25310: 1327:		if (state->hand[player][i] == copper) {
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
    11843: 1328:			state->coins += 1;
    13467: 1329:		} else if (state->hand[player][i] == silver) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
      472: 1330:			state->coins += 2;
    12995: 1331:		} else if (state->hand[player][i] == gold) {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
      436: 1332:			state->coins += 3;
        -: 1333:		}
        -: 1334:	}
        -: 1335:
        -: 1336:	//add bonus
     5062: 1337:	state->coins += bonus;
        -: 1338:
     5062: 1339:	return 0;
        -: 1340:}
        -: 1341:
        -: 1342://end of dominion.c
        -: 1343:
