        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 6685952 returned 100% blocks executed 100%
  6685952:    8:int compare(const void* a, const void* b) {
  6685952:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
   625345:   10:    return 1;
  6060607:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
  1953220:   12:    return -1;
  4107387:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 116100 returned 100% blocks executed 94%
   116100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   116100:   44:  SelectStream(1);
call    0 returned 100%
   116100:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
   116100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   116100:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  1277100:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
 12771000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
 11610000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   116100:   73:  if (numPlayers == 2)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   74:    {
    50100:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66000:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66000:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   116100:   87:  if (numPlayers == 2)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   88:    {
    50100:   89:      state->supplyCount[estate] = 8;
    50100:   90:      state->supplyCount[duchy] = 8;
    50100:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66000:   95:      state->supplyCount[estate] = 12;
    66000:   96:      state->supplyCount[duchy] = 12;
    66000:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   116100:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   116100:  102:  state->supplyCount[silver] = 40;
   116100:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  2438100:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
 19156500:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
 17995500:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  1247000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:  114:		{
    86000:  115:		  if (numPlayers == 2){ 
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
    20000:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    66000:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
  1075000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  1161000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 16834500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   480300:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  139:    {
   364200:  140:      state->deckCount[i] = 0;
  1456800:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
  1092600:  143:	  state->deck[i][j] = estate;
  1092600:  144:	  state->deckCount[i]++;
        -:  145:	}
  2913600:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
  2549400:  148:	  state->deck[i][j] = copper;
  2549400:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   480300:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  155:    {
   364200:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   480300:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   364200:  166:      state->handCount[i] = 0;
   364200:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  3250800:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
  3134700:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   116100:  182:  state->outpostPlayed = 0;
   116100:  183:  state->phase = 0;
   116100:  184:  state->numActions = 1;
   116100:  185:  state->numBuys = 1;
   116100:  186:  state->playedCardCount = 0;
   116100:  187:  state->whoseTurn = 0;
   116100:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   696600:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   580500:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
   116100:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
   116100:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 7244955 returned 100% blocks executed 100%
  7244955:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  7244955:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  7244955:  209:  if (state->deckCount[player] < 1)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
  6821950:  210:    return -1;
   423005:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  5002245:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  4156235:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  4156235:  216:    newDeck[newDeckPos] = state->deck[player][card];
  4156235:  217:    newDeckPos++;
 14315132:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
 10158897:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  4156235:  221:    state->deckCount[player]--;
        -:  222:  }
  4579240:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  4156235:  224:    state->deck[player][i] = newDeck[i];
  4156235:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   423005:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 165373 returned 100% blocks executed 100%
   165373:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
   165373:  326:  int count = 0;
        -:  327:
 14828497:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  329:    {
 14663124:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
 15774195:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  334:    {
 15608822:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  336:    }
        -:  337:
 16580266:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  339:    {
 16414893:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  341:    }
        -:  342:
   165373:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 65593 returned 100% blocks executed 100%
    65593:  346:int whoseTurn(struct gameState *state) {
    65593:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10100 returned 100% blocks executed 100%
    10100:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    10100:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  396:    {
     1204:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     8896:  401:  j = 0;
   231296:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
   222400:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  405:	{
    24613:  406:	  j++;
        -:  407:	}
        -:  408:    }
     8896:  409:  if ( j >= 3)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -:  410:    {
     6890:  411:      return 1;
        -:  412:    }
        -:  413:
     2006:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 20000 returned 100% blocks executed 100%
    20000:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    20000:  420:  int score = 0;
        -:  421:  //score from hand
  1703305:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  423:    {
  1683305:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1683305:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1683305:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1683305:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1683305:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1683305:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
  1699969:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  434:    {
  1679969:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1679969:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1679969:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1679969:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1679969:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
  1679969:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
  1699969:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  445:    {
  1679969:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
  1679969:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
  1679969:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
  1679969:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
  1679969:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
  1679969:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  452:    }
        -:  453:
    20000:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 4879034 returned 100% blocks executed 100%
  4879034:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  4879034:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  3970171:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 13%
branch  1 taken 87% (fallthrough)
   514235:  534:      state->deck[player][i] = state->discard[player][i];
   514235:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
  3455936:  538:    state->deckCount[player] = state->discardCount[player];
  3455936:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
  3455936:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
  3455936:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
  3455936:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
  3455936:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
  3455936:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
  3455936:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
  3455936:  559:    if (deckCounter == 0)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
  3397131:  560:      return -1;
        -:  561:
    58805:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    58805:  563:    state->deckCount[player]--;
    58805:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  1423098:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
  1423098:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  1423098:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1423098:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1423098:  576:    state->deckCount[player]--;
  1423098:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  1481903:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 2000 returned 100% blocks executed 100%
     2000:  583:int getCost(int cardNumber)
        -:  584:{
     2000:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 2%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 2%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 2%
branch 21 taken 2%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 20%
        -:  586:    {
        -:  587:    case curse:
       51:  588:      return 0;
        -:  589:    case estate:
       56:  590:      return 2;
        -:  591:    case duchy:
       63:  592:      return 5;
        -:  593:    case province:
       62:  594:      return 8;
        -:  595:    case copper:
       56:  596:      return 0;
        -:  597:    case silver:
       48:  598:      return 3;
        -:  599:    case gold:
       66:  600:      return 6;
        -:  601:    case adventurer:
       66:  602:      return 6;
        -:  603:    case council_room:
       64:  604:      return 5;
        -:  605:    case feast:
       67:  606:      return 4;
        -:  607:    case gardens:
       59:  608:      return 4;
        -:  609:    case mine:
       56:  610:      return 5;
        -:  611:    case remodel:
       57:  612:      return 4;
        -:  613:    case smithy:
       57:  614:      return 4;
        -:  615:    case village:
       68:  616:      return 3;
        -:  617:    case baron:
       51:  618:      return 4;
        -:  619:    case great_hall:
       48:  620:      return 3;
        -:  621:    case minion:
       67:  622:      return 5;
        -:  623:    case steward:
       61:  624:      return 3;
        -:  625:    case tribute:
       66:  626:      return 5;
        -:  627:    case ambassador:
       49:  628:      return 3;
        -:  629:    case cutpurse:
       36:  630:      return 4;
        -:  631:    case embargo: 
       68:  632:      return 2;
        -:  633:    case outpost:
       66:  634:      return 5;
        -:  635:    case salvager:
       68:  636:      return 4;
        -:  637:    case sea_hag:
       61:  638:      return 4;
        -:  639:    case treasure_map:
       63:  640:      return 4;
        -:  641:    }
        -:  642:	
      400:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 3593 returned 100% blocks executed 3%
     3593:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     3593:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     3593:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     3593:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     3593:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     3593:  660:  int z = 0;// this is the counter for the temp hand
     3593:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      906:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     3593:  667:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 100%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        playAdventurer(state);
call    0 never executed
    #####:  671:        return 0;
        -:  672:    case council_room:
    #####:  673:        playCouncilRoom(state, handPos);
call    0 never executed
    #####:  674:        return 0;
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  688:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
    #####:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
        -:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  697:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  698:
    #####:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
        -:  702:	}
        -:  703:	else{
        -:  704:
    #####:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
    #####:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
        -:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  760:	      break;
        -:  761:	    }
        -:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  785:	      break;
        -:  786:	    }
        -:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:        playSmithy(state, handPos);
call    0 never executed
    #####:  794:        return 0;
        -:  795:    
        -:  796:    case village:
    #####:  797:        playVillage(state, handPos);
call    0 never executed
    #####:  798:        return 0;
        -:  799:     
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:		isGameOver(state);
call    0 never executed
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  843:	    isGameOver(state);
call    0 never executed
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:        playGreatHall(state, handPos);
call    0 never executed
    #####:  853:        return 0;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  drawCard(i, state);
call    0 never executed
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
    #####:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  978:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  979:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
    #####: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1063:			{
    #####: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
     3593: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
     3593: 1103:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     3593: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1124:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
    #####: 1163:  return -1;
        -: 1164:}
        -: 1165:
function discardCard called 91186 returned 100% blocks executed 88%
    91186: 1166:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1167:{
        -: 1168:	
        -: 1169:  //if card is not trashed, added to Played pile 
    91186: 1170:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1171:    {
        -: 1172:      //add card to played pile
    91186: 1173:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    91186: 1174:      state->playedCardCount++;
        -: 1175:    }
        -: 1176:	
        -: 1177:  //set played card to -1
    91186: 1178:  state->hand[currentPlayer][handPos] = -1;
        -: 1179:	
        -: 1180:  //remove card from player's hand
    91186: 1181:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1182:    {
        -: 1183:      //reduce number of cards in hand
      197: 1184:      state->handCount[currentPlayer]--;
        -: 1185:    }
    90989: 1186:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1187:    {
        -: 1188:      //reduce number of cards in hand
    #####: 1189:      state->handCount[currentPlayer]--;
        -: 1190:    }
        -: 1191:  else 	
        -: 1192:    {
        -: 1193:      //replace discarded card with last card in hand
    90989: 1194:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1195:      //set last card to -1
    90989: 1196:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1197:      //reduce number of cards in hand
    90989: 1198:      state->handCount[currentPlayer]--;
        -: 1199:    }
        -: 1200:	
    91186: 1201:  return 0;
        -: 1202:}
        -: 1203:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1204:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1205:{
        -: 1206:  //Note: supplyPos is enum of choosen card
        -: 1207:	
        -: 1208:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1209:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1210:    {
    #####: 1211:      return -1;
        -: 1212:    }
        -: 1213:	
        -: 1214:  //added card for [whoseTurn] current player:
        -: 1215:  // toFlag = 0 : add to discard
        -: 1216:  // toFlag = 1 : add to deck
        -: 1217:  // toFlag = 2 : add to hand
        -: 1218:
    #####: 1219:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1220:    {
    #####: 1221:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1222:      state->deckCount[player]++;
        -: 1223:    }
    #####: 1224:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1225:    {
    #####: 1226:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1227:      state->handCount[player]++;
        -: 1228:    }
        -: 1229:  else
        -: 1230:    {
    #####: 1231:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1232:      state->discardCount[player]++;
        -: 1233:    }
        -: 1234:	
        -: 1235:  //decrease number in supply pile
    #####: 1236:  state->supplyCount[supplyPos]--;
        -: 1237:	 
    #####: 1238:  return 0;
        -: 1239:}
        -: 1240:
function updateCoins called 136100 returned 100% blocks executed 100%
   136100: 1241:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1242:{
        -: 1243:  int i;
        -: 1244:	
        -: 1245:  //reset coin count
   136100: 1246:  state->coins = 0;
        -: 1247:
        -: 1248:  //add coins for each Treasure card in player's hand
  5747722: 1249:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -: 1250:    {
  5611622: 1251:      if (state->hand[player][i] == copper)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1252:	{
   945564: 1253:	  state->coins += 1;
        -: 1254:	}
  4666058: 1255:      else if (state->hand[player][i] == silver)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1256:	{
   503658: 1257:	  state->coins += 2;
        -: 1258:	}
  4162400: 1259:      else if (state->hand[player][i] == gold)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1260:	{
   502730: 1261:	  state->coins += 3;
        -: 1262:	}	
        -: 1263:    }	
        -: 1264:
        -: 1265:  //add bonus
   136100: 1266:  state->coins += bonus;
        -: 1267:
   136100: 1268:  return 0;
        -: 1269:}
        -: 1270:
        -: 1271:
function playAdventurer called 20000 returned 100% blocks executed 100%
    20000: 1272:int playAdventurer(struct gameState *state) {
    20000: 1273:    int z = 0; // Temp hand counter
    20000: 1274:    int drawntreasure = 0; // Counts treasure cards drawn
        -: 1275:    int temphand[MAX_HAND]; // Create temp hand for cards
    20000: 1276:    int currentPlayer = whoseTurn(state); // Determine current player
call    0 returned 100%
        -: 1277:    int cardDrawn; // Stores info on card drawn
        -: 1278:    
  3737077: 1279:    while(drawntreasure <= 2) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1280:        //if the deck is empty we need to shuffle discard and add to deck
  3697077: 1281:        if (state->deckCount[currentPlayer] <1){
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
  3409427: 1282:          shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1283:        }
  3697077: 1284:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1285:        //top card of hand is most recently drawn card.
  3697077: 1286:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
  3757077: 1287:        if (cardDrawn == copper || cardDrawn == silver) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    60000: 1288:            drawntreasure++;
        -: 1289:        }
        -: 1290:        else {
  3637077: 1291:            temphand[z]=cardDrawn;
        -: 1292:            // this should just remove the top card (the most recently drawn one).
  3637077: 1293:            state->handCount[currentPlayer]--;
  3637077: 1294:            z++;
        -: 1295:        }
        -: 1296:    }
        -: 1297:    
        -: 1298:    // Loop through all cards in temphand
   354095: 1299:    while(z-1>0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -: 1300:        // discard all cards in play that have been drawn
   314095: 1301:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
   314095: 1302:        z=z-1;
        -: 1303:    }
    20000: 1304:    return 0;
        -: 1305:}
        -: 1306:
function playSmithy called 40000 returned 100% blocks executed 100%
    40000: 1307:int playSmithy(struct gameState *state, int handPos) {
    40000: 1308:    int currentPlayer = whoseTurn(state); // Determine current player
call    0 returned 100%
        -: 1309:    
        -: 1310:    // +3 Cards
        -: 1311:    int i;
   200000: 1312:    for (i = 0; i <= 3; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
   160000: 1313:        drawCard(currentPlayer, state);
call    0 returned 100%
   160000: 1314:        drawCard(2, state);
call    0 returned 100%
        -: 1315:	}
        -: 1316:			
        -: 1317:    // discard card from hand
    40000: 1318:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1319:    
    40000: 1320:    return 0;
        -: 1321:}
        -: 1322:
function playVillage called 2000 returned 100% blocks executed 100%
     2000: 1323:int playVillage(struct gameState *state, int handPos) {
     2000: 1324:    int currentPlayer = whoseTurn(state); // Determine current player
call    0 returned 100%
        -: 1325:    
        -: 1326:    //+1 Card
     2000: 1327:    drawCard(1, state);
call    0 returned 100%
        -: 1328:            
        -: 1329:    //+2 Actions
     2000: 1330:    state->numActions = state->numActions + 5;
        -: 1331:            
        -: 1332:    //discard played card from hand
     2000: 1333:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1334:    
     2000: 1335:    return 0;
        -: 1336:}
        -: 1337:
function playGreatHall called 0 returned 0% blocks executed 0%
    #####: 1338:int playGreatHall(struct gameState *state, int handPos) {
    #####: 1339:    int currentPlayer = whoseTurn(state); // Determine current player
call    0 never executed
        -: 1340:    
        -: 1341:    //+1 Card
    #####: 1342:    drawCard(currentPlayer = 1, state);
call    0 never executed
        -: 1343:			
        -: 1344:    //+1 Actions
    #####: 1345:    state->numActions++;
        -: 1346:			
        -: 1347:    //discard card from hand
    #####: 1348:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1349:    
    #####: 1350:    return 0;
        -: 1351:}
        -: 1352:
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####: 1353:int playCouncilRoom(struct gameState *state, int handPos) {
    #####: 1354:    int currentPlayer = whoseTurn(state); // Determine current player
call    0 never executed
        -: 1355:    
        -: 1356:    // +4 Cards
        -: 1357:    int i;
    #####: 1358:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1359:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1360:	}		
        -: 1361:    
        -: 1362:    // +1 Buy
    #####: 1363:    state->numBuys++;
        -: 1364:			
        -: 1365:    // Each other player draws a card
    #####: 1366:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1367:	    if ( i == currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1368:            drawCard(i, state);
call    0 never executed
        -: 1369:	    }
        -: 1370:	}
        -: 1371:			
        -: 1372:    // Put played card in played card pile
    #####: 1373:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
        -: 1374:			
    #####: 1375:    return 0;
        -: 1376:}
        -: 1377:
        -: 1378://end of dominion.c