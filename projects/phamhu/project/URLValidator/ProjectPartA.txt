CS362 Final project - Part a
Jeremy Fischman
Huy Pham
Xisheng Wang

1) Explain testIsValid Function of UrlValidator test code. 
	a.	The function call UrlValidator constructor to initiate an instance urlVal.
	b. Use asserTrue method to test two correct urls to make sure UrlValidator up running.
	c. A url is built in the for loop within the do-while loop.  During building the url, whether it is valid or invalid is save in a Boolean variable: expected.
	d. The method isValid() is called to test if the url is valid. Result is saved in Boolean variable result. If it is valid, the url will be printed out.
	e. assertEquals() is called to compare if testing result from calling the method isValid() is the same as built in in tester. 
	f. In the building of url,  do-while iterates all the possible combinations of five parts of url to be used for testing. 
	In summary, the testIsValid function generate a url with known valid status. The isValid() method from UrlValidator class is called to test this url. It’s result is compared with the original status to decide if the UrlValidator is doing the right validation. 
 
2) How many total number of urls it is testing. 
Five parts of url are used to make url: testUrlScheme, testUrlAuthority, testUrlPort, testPath, testUrlQuery with possible 9, 19, 7, 10, 3 choices respectively. Therefore, the total number of urls tested are: 9*19*7*10*3 = 35910.

3) Explain how it is building all the urls. 
Url are built from five parts: Scheme, Authority, Port, Path, Query. Each part has multiple choices for testing: Scheme 9, Authority 19, Port 17, Path 10, Query 3. Each individual parts is saved in object instance ResultPair which has fields as item and valid. The item is the string of url part, such as http://. The valid is the boolean status for this part of url such as true or false. All the url part choices that belong to the same part of url are saved in the ResultPair array, such as ResultPair[] testUrlScheme which has size of 9. All five arraies are saved in the Object array: Object[] testUrlParts.  testPartIndex is the array to hold the number of ResultsPair in each item in Object[] array testUrlParts. 

To build a url, do-while loop iterates all the possible combination of different parts of url to make all possible url. Each individual url is built in for loop. The statement, expected &= part[index].valid, makes sure that if any part of url is invalid, expected will have value, false.  The condition statement for the do-while loop, incrementTestPartsIndex(testPartsIndex, testObjects), increments urls part from Query. The resulting url will be the sequence like: {0,0,0,0,1}, {0,0,0,0,2},{0,0,0,0,3},{0,0,0,1,0}, {0,0,0,1,1}, {0,0,0,1,2}, {0,0,0,2,0}, {0,0,0,2,1}, {0,0,0,2,2},……… 

3) Give an example of valid url being tested and an invalid url being tested by testIsValid() method. 
Testing  valid url:  http://www.google.com:80/test1?action=view
In for loop: 
1st iteration:  1)testPartsIndexIndex = 0.  2)first part of url:  testObjects[0] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 0, 0}. Here index = 0. 4)part[0].item =” http:// “ is appended to the string. expected &= part[index].valid, return true as part[0].valid = “true”. The testBuffer is http://
2nd iteration: 1)testPartsIndexIndex = 1.  2)second part of url:  testObjects[1] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 0, 0}. Here index = 0. 4)part[0].item =” "www.google.com “ is appended to the string. expected &= part[index].valid, return true as part[0].valid = “true”.  The testBuffer is http://www.google.com
3rd iteration: 1)testPartsIndexIndex = 2.  2)third part of url:  testObjects[2] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 0, 0}. Here index = 0. 4)part[0].item =” :80 “ is appended to the string. expected &= part[index].valid, return true as part[0].valid = “true”.  The testBuffer is http://www.google.com:80
4th  iteration: 1)testPartsIndexIndex = 3.  2)fourth part of url:  testObjects[3] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 0, 0}. Here index = 0. 4)part[0].item =” /test1 “ is appended to the string. expected &= part[index].valid, return true as part[0].valid = “true”.  The testBuffer is http://www.google.com:80/test1
5th  iteration: 1)testPartsIndexIndex = 4.  2)fifth part of url:  testObjects[4] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 0, 0}. Here index = 0. 4)part[0].item =” ?action=view “ is appended to the string. expected &= part[index].valid, return true as part[0].valid = “true”.  The testBuffer is http://www.google.com:80/test1?action=view
isValid() is called to test the above string, result is returned as true. expected and result are equal. The url is valid and tested.

Testing  invalid url:  http:// www.google.com:80/..//file?action=view
In for loop: 
1st iteration:  1)testPartsIndexIndex = 0.  2)first part of url:  testObjects[0] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 8, 0}. Here index = 0. 4)part[0].item =” http:// “ is appended to the string. expected &= part[index].valid, return true as part[0].valid = “true”. The testBuffer is http://
2nd iteration: 1)testPartsIndexIndex = 1.  2)second part of url:  testObjects[1] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 8, 0}. Here index = 0. 4)part[1].item =” "www.google.com “ is appended to the string. expected &= part[index].valid, return true as part[1].valid = “true”.  The testBuffer is http://www.google.com 
3rd iteration: 1)testPartsIndexIndex = 2.  2)third part of url:  testObjects[2] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 8, 0}. Here index = 0. 4)part[0].item =” :80 “ is appended to the string. expected &= part[index].valid, return true as part[0].valid = “true”.  The testBuffer is http://www.google.com:80 
4th  iteration: 1)testPartsIndexIndex = 3.  2)fourth part of url:  testObjects[3] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 8, 0}. Here index = 0. 4)part[8].item =” /..//file “ is appended to the string. expected &= part[index].valid, return false as part[8].valid = “false”.  The testBuffer is http://www.google.com:80 /..//file 
5th  iteration: 1)testPartsIndexIndex = 4.  2)fifth part of url:  testObjects[4] is assigned to temperate holder ResultPair part.  3)index to access the individual url is assigned based on testPartsIndex {0, 0, 0, 8, 0}. Here index = 0. 4)part[0].item =” ?action=view “ is appended to the string. expected &= part[index].valid, return false as original expected value is false.  The testBuffer is http://www.google.com:80 /..//file?action=view
isValid() is called to test the above string, result is returned as false.  expected and result are equal. The url is invalid and tested.

5) Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. Submit a file called ProjectPartA.txt with your writeup. You can submit the file under the folder URLValidator within on ONID directory. (How to setup this folder will be explained soon.)

We think the concepts are the same. Basically, in both cases a reference is generated in tester and function to be tested is called. We expect the outcome from calling tested function is same as the reference. But testIsValid is much more complex than the unit test we wrote.  Because URL Validator is testing a lots of different forms of urls, testing function need to test all this possibilities. 
