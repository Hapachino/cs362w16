Testing updateCoins.
ALL TESTS OK FOR UPDATECOINS

Testing gainCard.
ALL TESTS OK FOR GAINCARD

Testing DISCARDCARD.
ALL TESTS OK FOR DISCARDCARD

Testing isGameOver.
ALL TESTS OK FOR ISGAMEOVER 

Testing CARD SMITHY.
ALL TESTS OK FOR SMITHY 

Testing CARD ADVENTURER.
ALL TESTS OK FOR ADVENTURER 

Testing CARD councilRoom.
ALL TESTS OK FOR councilRoom 

Testing CARD remodel.
ALL TESTS OK FOR remodel 

File 'dominion.c'
Lines executed:22.58% of 713
Branches executed:22.57% of 443
Taken at least once:15.58% of 443
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 26 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
       26:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 58%
branch  1 taken 42%
       15:   10:  return 1;
       11:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 100%
branch  1 taken 0%
       11:   12:  return -1;
    #####:   13:  return 0;
       26:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
        -:   37:  int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:    struct gameState *state) {
        -:   39:
        -:   40:      int i;
        -:   41:      int j;
        -:   42:      int it;
        -:   43:      //set up random number generator
    #####:   44:      SelectStream(1);
    #####:   45:      PutSeed((long)randomSeed);
        -:   46:
        -:   47:      //check number of players
    #####:   48:      if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:      {
    #####:   50:        return -1;
        -:   51:      }
        -:   52:
        -:   53:      //set number of players
    #####:   54:      state->numPlayers = numPlayers;
        -:   55:
        -:   56:      //check selected kingdom cards are different
    #####:   57:      for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:      {
    #####:   59:        for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
    #####:   65:        }
    #####:   66:      }
        -:   67:
        -:   68:
        -:   69:      //initialize supply
        -:   70:      ///////////////////////////////
        -:   71:
        -:   72:      //set number of Curse cards
    #####:   73:      if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:      {
    #####:   75:        state->supplyCount[curse] = 10;
    #####:   76:      }
    #####:   77:      else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:      {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:      }
        -:   81:      else
        -:   82:      {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:      }
        -:   85:
        -:   86:      //set number of Victory cards
    #####:   87:      if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:      {
    #####:   89:        state->supplyCount[estate] = 8;
    #####:   90:        state->supplyCount[duchy] = 8;
    #####:   91:        state->supplyCount[province] = 8;
    #####:   92:      }
        -:   93:      else
        -:   94:      {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:      }
        -:   99:
        -:  100:      //set number of Treasure cards
    #####:  101:      state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:      state->supplyCount[silver] = 40;
    #####:  103:      state->supplyCount[gold] = 30;
        -:  104:
        -:  105:      //set number of Kingdom cards
    #####:  106:      for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:      {
    #####:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:        {
    #####:  110:          if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:          {
        -:  112:            //check if card is a 'Victory' Kingdom card
    #####:  113:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:            {
    #####:  115:              if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:                state->supplyCount[i] = 8;
    #####:  117:              }
    #####:  118:              else{ state->supplyCount[i] = 12; }
    #####:  119:            }
        -:  120:            else
        -:  121:            {
    #####:  122:              state->supplyCount[i] = 10;
        -:  123:            }
    #####:  124:            break;
        -:  125:          }
        -:  126:          else    //card is not in the set choosen for the game
        -:  127:          {
    #####:  128:            state->supplyCount[i] = -1;
        -:  129:          }
    #####:  130:        }
        -:  131:
    #####:  132:      }
        -:  133:
        -:  134:      ////////////////////////
        -:  135:      //supply intilization complete
        -:  136:
        -:  137:      //set player decks
    #####:  138:      for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:      {
    #####:  140:        state->deckCount[i] = 0;
    #####:  141:        for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:        {
    #####:  143:          state->deck[i][j] = estate;
    #####:  144:          state->deckCount[i]++;
    #####:  145:        }
    #####:  146:        for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:        {
    #####:  148:          state->deck[i][j] = copper;
    #####:  149:          state->deckCount[i]++;
    #####:  150:        }
    #####:  151:      }
        -:  152:
        -:  153:      //shuffle player decks
    #####:  154:      for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:      {
    #####:  156:        if ( shuffle(i, state) < 0 )
branch  0 never executed
branch  1 never executed
        -:  157:        {
    #####:  158:          return -1;
        -:  159:        }
    #####:  160:      }
        -:  161:
        -:  162:      //draw player hands
    #####:  163:      for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:      {
        -:  165:        //initialize hand size to zero
    #####:  166:        state->handCount[i] = 0;
    #####:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
    #####:  173:      }
        -:  174:
        -:  175:      //set embargo tokens to 0 for all supply piles
    #####:  176:      for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:      {
    #####:  178:        state->embargoTokens[i] = 0;
    #####:  179:      }
        -:  180:
        -:  181:      //initialize first player's turn
    #####:  182:      state->outpostPlayed = 0;
    #####:  183:      state->phase = 0;
    #####:  184:      state->numActions = 1;
    #####:  185:      state->numBuys = 1;
    #####:  186:      state->playedCardCount = 0;
    #####:  187:      state->whoseTurn = 0;
    #####:  188:      state->handCount[state->whoseTurn] = 0;
        -:  189:      //int it; move to top
        -:  190:
        -:  191:      //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:      for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:        drawCard(state->whoseTurn, state);
    #####:  194:      }
        -:  195:
    #####:  196:      updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:      return 0;
    #####:  199:    }
        -:  200:
function shuffle called 12 returned 100% blocks executed 100%
        -:  201:    int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:      int newDeck[MAX_DECK];
       12:  205:      int newDeckPos = 0;
        -:  206:      int card;
        -:  207:      int i;
        -:  208:
       12:  209:      if (state->deckCount[player] < 1)
branch  0 taken 92%
branch  1 taken 8%
       11:  210:      return -1;
        1:  211:      qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:      /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       22:  214:      while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       10:  215:        card = floor(Random() * state->deckCount[player]);
       10:  216:        newDeck[newDeckPos] = state->deck[player][card];
       10:  217:        newDeckPos++;
       70:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       25:  219:          state->deck[player][i] = state->deck[player][i+1];
       25:  220:        }
       10:  221:        state->deckCount[player]--;
        -:  222:      }
       22:  223:      for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       10:  224:        state->deck[player][i] = newDeck[i];
       10:  225:        state->deckCount[player]++;
       10:  226:      }
        -:  227:
        1:  228:      return 0;
       12:  229:    }
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:    int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:    {
        -:  233:      int card;
    #####:  234:      int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:      //check if it is the right phase
    #####:  237:      if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:      {
    #####:  239:        return -1;
        -:  240:      }
        -:  241:
        -:  242:      //check if player has enough actions
    #####:  243:      if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:      {
    #####:  245:        return -1;
        -:  246:      }
        -:  247:
        -:  248:      //get card played
    #####:  249:      card = handCard(handPos, state);
        -:  250:
        -:  251:      //check if selected card is an action
    #####:  252:      if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:      {
    #####:  254:        return -1;
        -:  255:      }
        -:  256:
        -:  257:      //play card
    #####:  258:      if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:      {
    #####:  260:        return -1;
        -:  261:      }
        -:  262:
        -:  263:      //reduce number of actions
    #####:  264:      state->numActions--;
        -:  265:
        -:  266:      //update coins (Treasure cards may be added with card draws)
    #####:  267:      updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:      return 0;
    #####:  270:    }
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:    int buyCard(int supplyPos, struct gameState *state) {
        -:  273:      int who;
        -:  274:      if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:      }
        -:  277:
        -:  278:      // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:      who = state->whoseTurn;
        -:  281:
    #####:  282:      if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:        if (DEBUG)
        -:  284:        printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:      } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:        if (DEBUG)
        -:  288:        printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:      } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:        if (DEBUG)
        -:  292:        printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:      } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:      }
        -:  304:
        -:  305:      //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:      //state->discardCount[who]++;
        -:  307:
    #####:  308:      return 0;
    #####:  309:    }
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:    int numHandCards(struct gameState *state) {
    #####:  312:      return state->handCount[ whoseTurn(state) ];
        -:  313:    }
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:    int handCard(int handPos, struct gameState *state) {
    #####:  316:      int currentPlayer = whoseTurn(state);
    #####:  317:      return state->hand[currentPlayer][handPos];
        -:  318:    }
        -:  319:
function supplyCount called 5 returned 100% blocks executed 100%
        -:  320:    int supplyCount(int card, struct gameState *state) {
        5:  321:      return state->supplyCount[card];
        -:  322:    }
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:    int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:      int i;
    #####:  326:      int count = 0;
        -:  327:
    #####:  328:      for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:      {
    #####:  330:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:      }
        -:  332:
    #####:  333:      for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:      }
        -:  337:
    #####:  338:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:      {
    #####:  340:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:      }
        -:  342:
    #####:  343:      return count;
        -:  344:    }
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        -:  346:    int whoseTurn(struct gameState *state) {
        5:  347:      return state->whoseTurn;
        -:  348:    }
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:    int endTurn(struct gameState *state) {
        -:  351:      int k;
        -:  352:      int i;
    #####:  353:      int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:      //Discard hand
    #####:  356:      for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:      }
    #####:  360:      state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:      //Code for determining the player
    #####:  363:      if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:      }
        -:  366:      else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:      }
        -:  369:
    #####:  370:      state->outpostPlayed = 0;
    #####:  371:      state->phase = 0;
    #####:  372:      state->numActions = 1;
    #####:  373:      state->coins = 0;
    #####:  374:      state->numBuys = 1;
    #####:  375:      state->playedCardCount = 0;
    #####:  376:      state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:      //int k; move to top
        -:  379:      //Next player draws hand
    #####:  380:      for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:      }
        -:  383:
        -:  384:      //Update money
    #####:  385:      updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:      return 0;
        -:  388:    }
        -:  389:
function isGameOver called 3 returned 100% blocks executed 100%
        -:  390:    int isGameOver(struct gameState *state) {
        -:  391:      int i;
        -:  392:      int j;
        -:  393:
        -:  394:      //if stack of Province cards is empty, the game ends
        3:  395:      if (state->supplyCount[province] == 0)
branch  0 taken 33%
branch  1 taken 67%
        -:  396:      {
        1:  397:        return 1;
        -:  398:      }
        -:  399:
        -:  400:      //if three supply pile are at 0, the game ends
        2:  401:      j = 0;
      104:  402:      for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:      {
       50:  404:        if (state->supplyCount[i] == 0)
branch  0 taken 10%
branch  1 taken 90%
        -:  405:        {
        5:  406:          j++;
        5:  407:        }
       50:  408:      }
        2:  409:      if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  410:      {
        1:  411:        return 1;
        -:  412:      }
        -:  413:
        1:  414:      return 0;
        3:  415:    }
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:    int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:      int i;
    #####:  420:      int score = 0;
        -:  421:      //score from hand
    #####:  422:      for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:      {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:      }
        -:  431:
        -:  432:      //score from discard
    #####:  433:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:      }
        -:  442:
        -:  443:      //score from deck
    #####:  444:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:      {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:      }
        -:  453:
    #####:  454:      return score;
        -:  455:    }
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:    int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:      int i;
        -:  459:      int j;
        -:  460:      int highScore;
        -:  461:      int currentPlayer;
        -:  462:
        -:  463:      //get score for each player
    #####:  464:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:      {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:        {
    #####:  469:          players[i] = -9999;
    #####:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:          players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:      }
        -:  476:
        -:  477:      //find highest score
    #####:  478:      j = 0;
    #####:  479:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:      {
    #####:  481:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:        {
    #####:  483:          j = i;
    #####:  484:        }
    #####:  485:      }
    #####:  486:      highScore = players[j];
        -:  487:
        -:  488:      //add 1 to players who had less turns
    #####:  489:      currentPlayer = whoseTurn(state);
    #####:  490:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:      {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:        {
    #####:  494:          players[i]++;
    #####:  495:        }
    #####:  496:      }
        -:  497:
        -:  498:      //find new highest score
    #####:  499:      j = 0;
    #####:  500:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:      {
    #####:  502:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:        {
    #####:  504:          j = i;
    #####:  505:        }
    #####:  506:      }
    #####:  507:      highScore = players[j];
        -:  508:
        -:  509:      //set winners in array to 1 and rest to 0
    #####:  510:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:      {
    #####:  512:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:        {
    #####:  514:          players[i] = 1;
    #####:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:          players[i] = 0;
        -:  519:        }
    #####:  520:      }
        -:  521:
    #####:  522:      return 0;
        -:  523:    }
        -:  524:
function drawCard called 63 returned 100% blocks executed 100%
        -:  525:    int drawCard(int player, struct gameState *state)
        -:  526:    {	int count;
        -:  527:      int deckCounter;
       63:  528:      if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 10%
branch  1 taken 90%
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
       32:  533:        for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 63%
branch  1 taken 38%
       10:  534:          state->deck[player][i] = state->discard[player][i];
       10:  535:          state->discard[player][i] = -1;
       10:  536:        }
        -:  537:
        6:  538:        state->deckCount[player] = state->discardCount[player];
        6:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
        6:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:          printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
        6:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
        6:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:          printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
        6:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        6:  559:        if (deckCounter == 0)
branch  0 taken 83%
branch  1 taken 17%
        5:  560:        return -1;
        -:  561:
        1:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:        state->deckCount[player]--;
        1:  564:        state->handCount[player]++;//Increment hand count
        1:  565:      }
        -:  566:
        -:  567:      else{
       57:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:          printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       57:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       57:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       57:  576:        state->deckCount[player]--;
       57:  577:        state->handCount[player]++;//Increment hand count
        -:  578:      }
        -:  579:
       58:  580:      return 0;
       63:  581:    }
        -:  582:
function getCost called 8 returned 100% blocks executed 19%
        -:  583:    int getCost(int cardNumber)
        -:  584:    {
        8:  585:      switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 25%
branch  4 taken 0%
branch  5 taken 63%
branch  6 taken 0%
branch  7 taken 13%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:      {
        -:  587:        case curse:
    #####:  588:        return 0;
        -:  589:        case estate:
    #####:  590:        return 2;
        -:  591:        case duchy:
    #####:  592:        return 5;
        -:  593:        case province:
        2:  594:        return 8;
        -:  595:        case copper:
    #####:  596:        return 0;
        -:  597:        case silver:
        5:  598:        return 3;
        -:  599:        case gold:
    #####:  600:        return 6;
        -:  601:        case adventurer:
        1:  602:        return 6;
        -:  603:        case council_room:
    #####:  604:        return 5;
        -:  605:        case feast:
    #####:  606:        return 4;
        -:  607:        case gardens:
    #####:  608:        return 4;
        -:  609:        case mine:
    #####:  610:        return 5;
        -:  611:        case remodel:
    #####:  612:        return 4;
        -:  613:        case smithy:
    #####:  614:        return 4;
        -:  615:        case village:
    #####:  616:        return 3;
        -:  617:        case baron:
    #####:  618:        return 4;
        -:  619:        case great_hall:
    #####:  620:        return 3;
        -:  621:        case minion:
    #####:  622:        return 5;
        -:  623:        case steward:
    #####:  624:        return 3;
        -:  625:        case tribute:
    #####:  626:        return 5;
        -:  627:        case ambassador:
    #####:  628:        return 3;
        -:  629:        case cutpurse:
    #####:  630:        return 4;
        -:  631:        case embargo:
    #####:  632:        return 2;
        -:  633:        case outpost:
    #####:  634:        return 5;
        -:  635:        case salvager:
    #####:  636:        return 4;
        -:  637:        case sea_hag:
    #####:  638:        return 4;
        -:  639:        case treasure_map:
    #####:  640:        return 4;
        -:  641:      }
        -:  642:
    #####:  643:      return -1;
        8:  644:    }
function _goodAdventurer called 1 returned 100% blocks executed 100%
        -:  645:    int _goodAdventurer(struct gameState *state)
        -:  646:    {
        1:  647:      int z=0;
        1:  648:      int drawntreasure = 0;
        -:  649:      int cardDrawn;
        1:  650:      int currentPlayer = whoseTurn(state);
        1:  651:      int nextPlayer = currentPlayer + 1;
        -:  652:      int temphand[MAX_HAND];// moved above the if statement
        -:  653:
      112:  654:      while(drawntreasure<2)
branch  0 taken 98%
branch  1 taken 2%
        -:  655:      {
       55:  656:        if (state->deckCount[currentPlayer] <1)
branch  0 taken 11%
branch  1 taken 89%
        -:  657:        {//if the deck is empty we need to shuffle discard and add to deck
        6:  658:          shuffle(currentPlayer, state);
        6:  659:        }
       55:  660:        drawCard(currentPlayer, state);
       55:  661:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  662:
      165:  663:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 4%
branch  5 taken 96%
        -:  664:        {
        2:  665:          drawntreasure++;
        2:  666:        }
        -:  667:        else
        -:  668:        {
       53:  669:          temphand[z]=cardDrawn;
       53:  670:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       53:  671:          z++;
        -:  672:        }
        -:  673:      }
      108:  674:      while(z-1>=0)
branch  0 taken 98%
branch  1 taken 2%
        -:  675:      {
       53:  676:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       53:  677:        z=z-1;
        -:  678:      }
        1:  679:      return 0;
        -:  680:    }
        -:  681:
function _adventurer called 0 returned 0% blocks executed 0%
        -:  682:    int _adventurer(struct gameState *state)
        -:  683:    {
        -:  684:      int i;
        -:  685:      int j;
        -:  686:      int k;
        -:  687:      int x;
        -:  688:      int index;
    #####:  689:      int currentPlayer = whoseTurn(state);
    #####:  690:      int nextPlayer = currentPlayer + 1;
        -:  691:
    #####:  692:      int tributeRevealedCards[2] = {-1, -1};
        -:  693:      int temphand[MAX_HAND];// moved above the if statement
    #####:  694:      int drawntreasure=0;
        -:  695:      int cardDrawn;
    #####:  696:      int z = 0;// this is the counter for the temp hand
    #####:  697:      if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  698:        nextPlayer = 0;
    #####:  699:      }
        -:  700:
    #####:  701:      while( drawntreasure < 2 )  //ok
branch  0 never executed
branch  1 never executed
        -:  702:      {
    #####:  703:        if (state->deckCount[currentPlayer] <1)
branch  0 never executed
branch  1 never executed
        -:  704:        {//if the deck is empty we need to shuffle discard and add to deck
    #####:  705:          shuffle(currentPlayer - 1, state);
    #####:  706:        }
    #####:  707:        drawCard(currentPlayer, state);
    #####:  708:        cardDrawn = state->hand[currentPlayer - 1 ][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  709:        if (cardDrawn == copper && cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  710:        drawntreasure++;
        -:  711:        else
        -:  712:        {
    #####:  713:          temphand[z]=cardDrawn;
    #####:  714:          state->handCount[currentPlayer]; //this should just remove the top card (the most recently drawn one).
    #####:  715:          z++;
        -:  716:        }
        -:  717:      }
    #####:  718:      while(z-1<=0)
branch  0 never executed
branch  1 never executed
        -:  719:      {
    #####:  720:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  721:        z=z-1;
        -:  722:      }
    #####:  723:      return 0;
        -:  724:    }
function _goodCouncilRoom called 1 returned 100% blocks executed 100%
        -:  725:    int _goodCouncilRoom(struct gameState *state, int handPos)
        -:  726:    {
        1:  727:      int currentPlayer = whoseTurn(state);
        1:  728:      int nextPlayer = currentPlayer + 1;
        -:  729:      int i;
        -:  730:
        -:  731:      //+4 Cards
       10:  732:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  733:      {
        4:  734:        drawCard(currentPlayer, state);
        4:  735:      }
        -:  736:
        -:  737:      //+1 Buy
        1:  738:      state->numBuys++;
        -:  739:
        -:  740:      //Each other player draws a card
        6:  741:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  742:      {
        2:  743:        if ( i != currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  744:          {
        1:  745:            drawCard(i, state);
        1:  746:          }
        2:  747:      }
        -:  748:
        -:  749:      //put played card in played card pile
        1:  750:      discardCard(handPos, currentPlayer, state, 0);
        1:  751:      return 0;
        -:  752:    }
function _councilRoom called 0 returned 0% blocks executed 0%
        -:  753:    int _councilRoom(struct gameState *state, int handPos)
        -:  754:    {
    #####:  755:      int currentPlayer = whoseTurn(state);
    #####:  756:      int nextPlayer = currentPlayer + 1;
        -:  757:      int i;
        -:  758:
        -:  759:      //+4 Cards
    #####:  760:      for (i = 4; i > 0; i++)
branch  0 never executed
branch  1 never executed
        -:  761:      {
    #####:  762:        drawCard(currentPlayer, state);
    #####:  763:      }
        -:  764:
        -:  765:      //+1 Buy
    #####:  766:      state->numBuys++;
        -:  767:
        -:  768:      //Each other player draws a card
    #####:  769:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  770:      {
    #####:  771:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  772:        {
    #####:  773:          drawCard(i, state);
    #####:  774:          drawCard(i, state);
    #####:  775:        }
    #####:  776:      }
        -:  777:
        -:  778:      //put played card in played card pile
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
    #####:  780:      return 0;
        -:  781:    }
        -:  782:
function _goodSmithy called 1 returned 100% blocks executed 100%
        -:  783:    int _goodSmithy( struct gameState *state, int handPos)
        -:  784:    {
        1:  785:      int currentPlayer = whoseTurn(state);
        8:  786:      for (int i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  787:      {
        3:  788:        drawCard(currentPlayer, state);
        3:  789:      }
        -:  790:      //
        -:  791:      // //discard card from hand
        1:  792:      discardCard(handPos, currentPlayer, state, 0);
        1:  793:      return 0;
        -:  794:    }
function _smithy called 0 returned 0% blocks executed 0%
        -:  795:    int _smithy(struct gameState *state, int handPos)
        -:  796:    {
        -:  797:      /* Buggy Smithy */
        -:  798:      //+3 Cards
        -:  799:      int i;
    #####:  800:      int currentPlayer = whoseTurn(state);
        -:  801:
    #####:  802:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  803:      {
    #####:  804:        drawCard(currentPlayer - 1, state);
    #####:  805:      }
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 1);
    #####:  809:      return 0;
        -:  810:    }
function _feast called 0 returned 0% blocks executed 0%
        -:  811:    int _feast(struct gameState *state, int handPos, int choice1)
        -:  812:    {
        -:  813:      int i;
        -:  814:      int j;
        -:  815:      int k;
        -:  816:      int x;
        -:  817:      int index;
    #####:  818:      int currentPlayer = whoseTurn(state);
    #####:  819:      int nextPlayer = currentPlayer + 1;
        -:  820:
    #####:  821:      int tributeRevealedCards[2] = {-1, -1};
        -:  822:      int temphand[MAX_HAND];// moved above the if statement
    #####:  823:      int drawntreasure=0;
        -:  824:      int cardDrawn;
    #####:  825:      int z = 0;// this is the counter for the temp hand
    #####:  826:      if (nextPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  827:      {
    #####:  828:        nextPlayer = 0;
    #####:  829:      }
        -:  830:      //gain card with cost up to 5
        -:  831:      //Backup hand
    #####:  832:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  833:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  834:      }
        -:  835:      //Backup hand
        -:  836:
        -:  837:      //Update Coins for Buy
    #####:  838:      updateCoins(currentPlayer, state, 5);
    #####:  839:      x = 1;//Condition to loop on
    #####:  840:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  841:        if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  842:          if (DEBUG)
        -:  843:          printf("None of that card left, sorry!\n");
        -:  844:
        -:  845:          if (DEBUG){
        -:  846:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  847:          }
    #####:  848:        }
    #####:  849:        else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  850:          printf("That card is too expensive!\n");
        -:  851:
        -:  852:          if (DEBUG){
        -:  853:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  854:          }
    #####:  855:        }
        -:  856:        else{
        -:  857:
        -:  858:          if (DEBUG){
        -:  859:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  860:          }
        -:  861:
    #####:  862:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  863:          x = 0;//No more buying cards
        -:  864:
        -:  865:          if (DEBUG){
        -:  866:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  867:          }
        -:  868:
        -:  869:        }
        -:  870:      }
        -:  871:
        -:  872:      //Reset Hand
    #####:  873:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  874:        state->hand[currentPlayer][i] = temphand[i];
    #####:  875:        temphand[i] = -1;
    #####:  876:      }
        -:  877:      //Reset Hand
    #####:  878:      return 0;
        -:  879:    }
function _gardens called 0 returned 0% blocks executed 0%
        -:  880:    int _gardens()
        -:  881:    {
    #####:  882:      return -1 ? -1 : 0;
        -:  883:    }
function _remodel called 2 returned 100% blocks executed 81%
        -:  884:    int _remodel( struct gameState *state, int handPos, int choice1, int choice2)
        -:  885:    {
        2:  886:      int currentPlayer = whoseTurn(state);
        -:  887:      int j;
        2:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
        2:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 taken 50%
branch  1 taken 50%
        -:  891:      {
        1:  892:        return -1;
        -:  893:      }
        -:  894:
        1:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
        1:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
        2:  901:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  902:      {
        1:  903:        if (state->hand[currentPlayer][i] == j)
branch  0 taken 100%
branch  1 taken 0%
        -:  904:        {
        1:  905:          discardCard(i, currentPlayer, state, 0);
        1:  906:          break;
        -:  907:        }
    #####:  908:      }
        -:  909:
        -:  910:
        1:  911:      return 0;
        2:  912:    }
function _mine called 0 returned 0% blocks executed 0%
        -:  913:    int _mine(struct gameState *state, int handPos, int choice1, int choice2)
        -:  914:    {
        -:  915:      int j, i;
    #####:  916:      int currentPlayer = whoseTurn(state);
    #####:  917:      int nextPlayer = currentPlayer + 1;
    #####:  918:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  919:      if (state->hand[currentPlayer][choice1] < gold || state->hand[currentPlayer][choice1] > copper)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  920:      {
    #####:  921:        return -1;
        -:  922:      }
        -:  923:
    #####:  924:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:      {
    #####:  926:        return -1;
        -:  927:      }
        -:  928:
    #####:  929:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  930:      {
    #####:  931:        return -1;
        -:  932:      }
        -:  933:
    #####:  934:      gainCard(choice2, state, 2, currentPlayer);
        -:  935:
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:
        -:  939:      //discard trashed card
    #####:  940:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  941:      {
    #####:  942:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  943:        {
    #####:  944:          discardCard(i, currentPlayer, state, 0);
    #####:  945:          break;
        -:  946:        }
    #####:  947:      }
    #####:  948:      return 0;
    #####:  949:    }
function cardEffect called 0 returned 0% blocks executed 0%
        -:  950:    int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  951:    {
        -:  952:      int i;
        -:  953:      int j;
        -:  954:      int k;
        -:  955:      int x;
        -:  956:      int index;
    #####:  957:      int currentPlayer = whoseTurn(state);
    #####:  958:      int nextPlayer = currentPlayer + 1;
        -:  959:
    #####:  960:      int tributeRevealedCards[2] = {-1, -1};
        -:  961:      int temphand[MAX_HAND];// moved above the if statement
    #####:  962:      int drawntreasure=0;
        -:  963:      int cardDrawn;
    #####:  964:      int z = 0;// this is the counter for the temp hand
    #####:  965:      if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  966:        nextPlayer = 0;
    #####:  967:      }
        -:  968:
        -:  969:
        -:  970:      //uses switch to select card and perform actions
    #####:  971:      switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  972:      {
        -:  973:        case adventurer:
    #####:  974:          return _adventurer(state);
        -:  975:        case council_room:
    #####:  976:          return _councilRoom(state, handPos);
        -:  977:        case feast:
    #####:  978:          return _feast(state, handPos, choice1);
        -:  979:        case gardens:
    #####:  980:          return _gardens();
        -:  981:        case mine:
    #####:  982:          return _mine(state, handPos, choice1, choice2);
        -:  983:
        -:  984:        case remodel:
    #####:  985:          return _remodel( state, handPos, choice1, choice2);
        -:  986:
        -:  987:        case smithy:
        -:  988:          //return _smithy(state, handPos); // buggy smithy
        -:  989:          /* Good smithy */
    #####:  990:          for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  991:          {
    #####:  992:            drawCard(currentPlayer, state);
    #####:  993:          }
        -:  994:
        -:  995:          //discard card from hand
    #####:  996:          discardCard(handPos, currentPlayer, state, 0);
    #####:  997:          return 0;
        -:  998:
        -:  999:        case village:
        -: 1000:        //+1 Card
    #####: 1001:        drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:        //+2 Actions
    #####: 1004:        state->numActions = state->numActions + 2;
        -: 1005:
        -: 1006:        //discard played card from hand
    #####: 1007:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1008:        return 0;
        -: 1009:
        -: 1010:        case baron:
    #####: 1011:        state->numBuys++;//Increase buys by 1!
    #####: 1012:        if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1013:          int p = 0;//Iterator for hand!
    #####: 1014:          int card_not_discarded = 1;//Flag for discard set!
    #####: 1015:          while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1016:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1017:              state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1018:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1019:              state->discardCount[currentPlayer]++;
    #####: 1020:              for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1021:                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1022:              }
    #####: 1023:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1024:              state->handCount[currentPlayer]--;
    #####: 1025:              card_not_discarded = 0;//Exit the loop
    #####: 1026:            }
    #####: 1027:            else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1028:              if(DEBUG) {
        -: 1029:                printf("No estate cards in your hand, invalid choice\n");
        -: 1030:                printf("Must gain an estate if there are any\n");
        -: 1031:              }
    #####: 1032:              if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####: 1033:                gainCard(estate, state, 0, currentPlayer);
    #####: 1034:                state->supplyCount[estate]--;//Decrement estates
    #####: 1035:                if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:                  isGameOver(state);
    #####: 1037:                }
    #####: 1038:              }
    #####: 1039:              card_not_discarded = 0;//Exit the loop
    #####: 1040:            }
        -: 1041:
        -: 1042:            else{
    #####: 1043:              p++;//Next card
        -: 1044:            }
        -: 1045:          }
    #####: 1046:        }
        -: 1047:
        -: 1048:        else{
    #####: 1049:          if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####: 1050:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1051:            state->supplyCount[estate]--;//Decrement Estates
    #####: 1052:            if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:              isGameOver(state);
    #####: 1054:            }
    #####: 1055:          }
        -: 1056:        }
        -: 1057:
        -: 1058:
    #####: 1059:        return 0;
        -: 1060:
        -: 1061:        case great_hall:
        -: 1062:        //+1 Card
    #####: 1063:        drawCard(currentPlayer, state);
        -: 1064:
        -: 1065:        //+1 Actions
    #####: 1066:        state->numActions++;
        -: 1067:
        -: 1068:        //discard card from hand
    #####: 1069:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1070:        return 0;
        -: 1071:
        -: 1072:        case minion:
        -: 1073:        //+1 action
    #####: 1074:        state->numActions++;
        -: 1075:
        -: 1076:        //discard card from hand
    #####: 1077:        discardCard(handPos, currentPlayer, state, 0);
        -: 1078:
    #####: 1079:        if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1080:        {
    #####: 1081:          state->coins = state->coins + 2;
    #####: 1082:        }
        -: 1083:
    #####: 1084:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1085:        {
        -: 1086:          //discard hand
    #####: 1087:          while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1088:          {
    #####: 1089:            discardCard(handPos, currentPlayer, state, 0);
        -: 1090:          }
        -: 1091:
        -: 1092:          //draw 4
    #####: 1093:          for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1094:          {
    #####: 1095:            drawCard(currentPlayer, state);
    #####: 1096:          }
        -: 1097:
        -: 1098:          //other players discard hand and redraw if hand size > 4
    #####: 1099:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1100:          {
    #####: 1101:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1102:            {
    #####: 1103:              if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1104:              {
        -: 1105:                //discard hand
    #####: 1106:                while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1107:                {
    #####: 1108:                  discardCard(handPos, i, state, 0);
        -: 1109:                }
        -: 1110:
        -: 1111:                //draw 4
    #####: 1112:                for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:                {
    #####: 1114:                  drawCard(i, state);
    #####: 1115:                }
    #####: 1116:              }
    #####: 1117:            }
    #####: 1118:          }
        -: 1119:
    #####: 1120:        }
    #####: 1121:        return 0;
        -: 1122:
        -: 1123:        case steward:
    #####: 1124:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1125:        {
        -: 1126:          //+2 cards
    #####: 1127:          drawCard(currentPlayer, state);
    #####: 1128:          drawCard(currentPlayer, state);
    #####: 1129:        }
    #####: 1130:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1131:        {
        -: 1132:          //+2 coins
    #####: 1133:          state->coins = state->coins + 2;
    #####: 1134:        }
        -: 1135:        else
        -: 1136:        {
        -: 1137:          //trash 2 cards in hand
    #####: 1138:          discardCard(choice2, currentPlayer, state, 1);
    #####: 1139:          discardCard(choice3, currentPlayer, state, 1);
        -: 1140:        }
        -: 1141:
        -: 1142:        //discard card from hand
    #####: 1143:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1144:        return 0;
        -: 1145:
        -: 1146:        case tribute:
    #####: 1147:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1148:          if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1149:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:            state->deckCount[nextPlayer]--;
    #####: 1151:          }
    #####: 1152:          else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1153:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1154:            state->discardCount[nextPlayer]--;
    #####: 1155:          }
        -: 1156:          else{
        -: 1157:            //No Card to Reveal
        -: 1158:            if (DEBUG){
        -: 1159:              printf("No cards to reveal\n");
        -: 1160:            }
        -: 1161:          }
    #####: 1162:        }
        -: 1163:
        -: 1164:        else{
    #####: 1165:          if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1166:            for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1167:              state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1168:              state->deckCount[nextPlayer]++;
    #####: 1169:              state->discard[nextPlayer][i] = -1;
    #####: 1170:              state->discardCount[nextPlayer]--;
    #####: 1171:            }
        -: 1172:
    #####: 1173:            shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1174:          }
    #####: 1175:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1176:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1177:          state->deckCount[nextPlayer]--;
    #####: 1178:          tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1179:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1180:          state->deckCount[nextPlayer]--;
        -: 1181:        }
        -: 1182:
    #####: 1183:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1184:          state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1185:          state->playedCardCount++;
    #####: 1186:          tributeRevealedCards[1] = -1;
    #####: 1187:        }
        -: 1188:
    #####: 1189:        for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1190:          if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1191:            state->coins += 2;
    #####: 1192:          }
        -: 1193:
    #####: 1194:          else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1195:            drawCard(currentPlayer, state);
    #####: 1196:            drawCard(currentPlayer, state);
    #####: 1197:          }
        -: 1198:          else{//Action Card
    #####: 1199:            state->numActions = state->numActions + 2;
        -: 1200:          }
    #####: 1201:        }
        -: 1202:
    #####: 1203:        return 0;
        -: 1204:
        -: 1205:        case ambassador:
    #####: 1206:        j = 0;		//used to check if player has enough cards to discard
        -: 1207:
    #####: 1208:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1209:        {
    #####: 1210:          return -1;
        -: 1211:        }
        -: 1212:
    #####: 1213:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1214:        {
    #####: 1215:          return -1;
        -: 1216:        }
        -: 1217:
    #####: 1218:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:        {
    #####: 1220:          if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1221:          {
    #####: 1222:            j++;
    #####: 1223:          }
    #####: 1224:        }
    #####: 1225:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1226:        {
    #####: 1227:          return -1;
        -: 1228:        }
        -: 1229:
        -: 1230:        if (DEBUG)
        -: 1231:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1232:
        -: 1233:        //increase supply count for choosen card by amount being discarded
    #####: 1234:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1235:
        -: 1236:        //each other player gains a copy of revealed card
    #####: 1237:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:        {
    #####: 1239:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1240:          {
    #####: 1241:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1242:          }
    #####: 1243:        }
        -: 1244:
        -: 1245:        //discard played card from hand
    #####: 1246:        discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:        //trash copies of cards returned to supply
    #####: 1249:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1250:        {
    #####: 1251:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1252:          {
    #####: 1253:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1254:            {
    #####: 1255:              discardCard(i, currentPlayer, state, 1);
    #####: 1256:              break;
        -: 1257:            }
    #####: 1258:          }
    #####: 1259:        }
        -: 1260:
    #####: 1261:        return 0;
        -: 1262:
        -: 1263:        case cutpurse:
        -: 1264:
    #####: 1265:        updateCoins(currentPlayer, state, 2);
    #####: 1266:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1267:        {
    #####: 1268:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1269:          {
    #####: 1270:            for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1271:            {
    #####: 1272:              if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1273:              {
    #####: 1274:                discardCard(j, i, state, 0);
    #####: 1275:                break;
        -: 1276:              }
    #####: 1277:              if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1278:              {
    #####: 1279:                for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1280:                {
        -: 1281:                  if (DEBUG)
        -: 1282:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1283:                }
    #####: 1284:                break;
        -: 1285:              }
    #####: 1286:            }
        -: 1287:
    #####: 1288:          }
        -: 1289:
    #####: 1290:        }
        -: 1291:
        -: 1292:        //discard played card from hand
    #####: 1293:        discardCard(handPos, currentPlayer, state, 0);
        -: 1294:
    #####: 1295:        return 0;
        -: 1296:
        -: 1297:
        -: 1298:        case embargo:
        -: 1299:        //+2 Coins
    #####: 1300:        state->coins = state->coins + 2;
        -: 1301:
        -: 1302:        //see if selected pile is in play
    #####: 1303:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1304:        {
    #####: 1305:          return -1;
        -: 1306:        }
        -: 1307:
        -: 1308:        //add embargo token to selected supply pile
    #####: 1309:        state->embargoTokens[choice1]++;
        -: 1310:
        -: 1311:        //trash card
    #####: 1312:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1313:        return 0;
        -: 1314:
        -: 1315:        case outpost:
        -: 1316:        //set outpost flag
    #####: 1317:        state->outpostPlayed++;
        -: 1318:
        -: 1319:        //discard card
    #####: 1320:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1321:        return 0;
        -: 1322:
        -: 1323:        case salvager:
        -: 1324:        //+1 buy
    #####: 1325:        state->numBuys++;
        -: 1326:
    #####: 1327:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1328:        {
        -: 1329:          //gain coins equal to trashed card
    #####: 1330:          state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1331:          //trash card
    #####: 1332:          discardCard(choice1, currentPlayer, state, 1);
    #####: 1333:        }
        -: 1334:
        -: 1335:        //discard card
    #####: 1336:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1337:        return 0;
        -: 1338:
        -: 1339:        case sea_hag:
    #####: 1340:        for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1341:          if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1342:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1343:            state->discardCount[i]++;
    #####: 1344:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1345:          }
    #####: 1346:        }
    #####: 1347:        return 0;
        -: 1348:
        -: 1349:        case treasure_map:
        -: 1350:        //search hand for another treasure_map
    #####: 1351:        index = -1;
    #####: 1352:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1353:        {
    #####: 1354:          if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1355:          {
    #####: 1356:            index = i;
    #####: 1357:            break;
        -: 1358:          }
    #####: 1359:        }
    #####: 1360:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1361:        {
        -: 1362:          //trash both treasure cards
    #####: 1363:          discardCard(handPos, currentPlayer, state, 1);
    #####: 1364:          discardCard(index, currentPlayer, state, 1);
        -: 1365:
        -: 1366:          //gain 4 Gold cards
    #####: 1367:          for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1368:          {
    #####: 1369:            gainCard(gold, state, 1, currentPlayer);
    #####: 1370:          }
        -: 1371:
        -: 1372:          //return success
    #####: 1373:          return 1;
        -: 1374:        }
        -: 1375:
        -: 1376:        //no second treasure_map found in hand
    #####: 1377:        return -1;
        -: 1378:      }
        -: 1379:
    #####: 1380:      return -1;
    #####: 1381:    }
        -: 1382:
function discardCard called 7 returned 100% blocks executed 100%
        -: 1383:    int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1384:    {
        -: 1385:
        -: 1386:      //if card is not trashed, added to Played pile
        7: 1387:      if (trashFlag < 1)
branch  0 taken 71%
branch  1 taken 29%
        -: 1388:      {
        -: 1389:        //add card to played pile
        5: 1390:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        5: 1391:        state->playedCardCount++;
        5: 1392:      }
        -: 1393:
        -: 1394:      //set played card to -1
        7: 1395:      state->hand[currentPlayer][handPos] = -1;
        -: 1396:
        -: 1397:      //remove card from player's hand
        7: 1398:      if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 14%
branch  1 taken 86%
        -: 1399:      {
        -: 1400:        //reduce number of cards in hand
        1: 1401:        state->handCount[currentPlayer]--;
        1: 1402:      }
        6: 1403:      else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 17%
branch  1 taken 83%
        -: 1404:      {
        -: 1405:        //reduce number of cards in hand
        1: 1406:        state->handCount[currentPlayer]--;
        1: 1407:      }
        -: 1408:      else
        -: 1409:      {
        -: 1410:        //replace discarded card with last card in hand
        5: 1411:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1412:        //set last card to -1
        5: 1413:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1414:        //reduce number of cards in hand
        5: 1415:        state->handCount[currentPlayer]--;
        -: 1416:      }
        -: 1417:
        7: 1418:      return 0;
        -: 1419:    }
        -: 1420:
function gainCard called 5 returned 100% blocks executed 100%
        -: 1421:    int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1422:    {
        -: 1423:      //Note: supplyPos is enum of choosen card
        -: 1424:
        -: 1425:      //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1426:      if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1427:      {
        2: 1428:        return -1;
        -: 1429:      }
        -: 1430:
        -: 1431:      //added card for [whoseTurn] current player:
        -: 1432:      // toFlag = 0 : add to discard
        -: 1433:      // toFlag = 1 : add to deck
        -: 1434:      // toFlag = 2 : add to hand
        -: 1435:
        3: 1436:      if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1437:      {
        1: 1438:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1439:        state->deckCount[player]++;
        1: 1440:      }
        2: 1441:      else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1442:      {
        1: 1443:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1444:        state->handCount[player]++;
        1: 1445:      }
        -: 1446:      else
        -: 1447:      {
        1: 1448:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1449:        state->discardCount[player]++;
        -: 1450:      }
        -: 1451:
        -: 1452:      //decrease number in supply pile
        3: 1453:      state->supplyCount[supplyPos]--;
        -: 1454:
        3: 1455:      return 0;
        5: 1456:    }
        -: 1457:
function updateCoins called 1000 returned 100% blocks executed 100%
        -: 1458:    int updateCoins(int player, struct gameState *state, int bonus)
        -: 1459:    {
        -: 1460:      int i;
        -: 1461:
        -: 1462:      //reset coin count
     1000: 1463:      state->coins = 0;
        -: 1464:
        -: 1465:      //add coins for each Treasure card in player's hand
   488596: 1466:      for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1%
        -: 1467:      {
   243298: 1468:        if (state->hand[player][i] == copper)
branch  0 taken 33%
branch  1 taken 67%
        -: 1469:        {
    80978: 1470:          state->coins += 1;
    80978: 1471:        }
   162320: 1472:        else if (state->hand[player][i] == silver)
branch  0 taken 50%
branch  1 taken 50%
        -: 1473:        {
    81265: 1474:          state->coins += 2;
    81265: 1475:        }
    81055: 1476:        else if (state->hand[player][i] == gold)
branch  0 taken 100%
branch  1 taken 0%
        -: 1477:        {
    81055: 1478:          state->coins += 3;
    81055: 1479:        }
   243298: 1480:      }
        -: 1481:
        -: 1482:      //add bonus
     1000: 1483:      state->coins += bonus;
        -: 1484:
     1000: 1485:      return 0;
        -: 1486:    }
        -: 1487:
        -: 1488:
        -: 1489:    //end of dominion.c
