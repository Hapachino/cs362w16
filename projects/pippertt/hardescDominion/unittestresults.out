*** TESTING FUNCTION: isGameOver ***

Test 1: Province is empty, should the be game over?: 
Passed. Expected 1, Returned 1

Test 2: Three empty supply decks end the game: 
Passed. Expected 1, Returned 1

Test 3: Two empty supply decks should not end game: 
Passed. Expected 0, Returned 0

Test 4: Three non-empty supply decks should not end game: 
Passed. Expected 0, Returned 0

Test 5: Test supply counts for treasure that should have been distributed: 
Passed. Supply counts for treasure cards are the same
*** TESTING FUNCTION: gainCard ***

Test 1: Cannot gain a card which is out of stock: 
Passed. Expected -1, Returned -1

Test 2: Cannot gain a card which is not in current game: 
Passed. Expected -1, Returned -1

Test 3a: Card is added to players deck: 
Passed. Expected 6, Returned 6

Test 3b: Card is not in opponent's deck: 

Test 4a: Card is added to players hand: 
Passed. Expected 6, Returned 6

Test 4b: Card is not in opponent's hand: 

Test 5: Card is discarded: 
Passed. Expected 1, Returned 1

Test 5b: Ensure card didn't go in opponent's deck

Test 6: Supply count is decreased: 
Passed. Expected 9, Returned 9

Test 7: Ensure Victory Points do not change: 
 Passed. Supply counts for curses and victory cards are the same

Test 8: Test supply counts for treasure that should have been distributed: 
Passed. Supply counts for treasure cards are the same
*** TESTING FUNCTION: updateCoins ***

Test 1: Copper increases coins by 1: 
Passed. Expected 1, Returned 1

Test 1b: Other player gained nothing to deck: 
Passed. Expected other user's deck to remain 10, is now: 10
Test 2: Silver increases coins by 2: 
Passed. Expected 2, Returned 2

Test 2b: Other player gained nothing to deck: 
Passed. Expected other user's deck to remain 10, is now: 10
Test 3: Gold increases coins by 3: 
Passed. Expected 3, Returned 3

Test 3b: Other player gained nothing to deck: 
Passed. Expected other user's deck to remain 10, is now: 10
Test 4: Bonus produces incease equivalent to input (coins + 1): 
Passed. Expected 4, Returned 4

Test 4b: Other player gained nothing to deck: 
Passed. Expected other user's deck to remain 10, is now: 10
Test 5: Bonus produces increase equivalent to input (coins + 3): 
Passed. Expected 6, Returned 6

Test 5b: Other player gained nothing to deck: 
Passed. Expected other user's deck to remain 10, is now: 10

Test 6: : Test supply counts for points and curses that should not have been distributed: 
 Passed. Supply counts for curses and victory cards are the same

Test 7: Test supply counts for treasure that should have been distributed: 
Passed. Supply counts for treasure cards are the same
*** TESTING FUNCTION: discardCard ***


Test 1: Card added to played pile if w/trash flag 0: 
Passed. Expected 1, Returned 1
Test 1b: Other player didn't gain card in hand: 
Passed. Expected other user's hand to remain 0, is now: 0
Test 1c: Other player didn't gain card in deck: 
Passed. Expected other user's deck to remain 10, is now: 10

Test 2: Card not added to played pile if trash flag set: 
Passed. Expected 0, Returned 0
Test 2b: Other player didn't gain card in hand: 
Passed. Expected other user's hand to remain 0, is now: 0
Test 2c: Other player didn't gain card in deck: 
Passed. Expected other user's deck to remain 10, is now: 10

Test 3a: Card is removed from hand when discarded: 
Passed. Card not found in hand.
Test 3b: Other player didn't gain card in hand: 
Passed. Expected other user's hand to remain 0, is now: 0
Test 3c: Other player didn't gain card in deck: 
Passed. Expected other user's deck to remain 10, is now: 10

Test 4a: Card is removed from hand when trashed: 
Passed. Expected 4, Returned 4
Test 4b: Other player didn't gain card in hand: 
Passed. Expected other user's hand to remain 0, is now: 0
Test 4c: Other player didn't gain card in deck: 
Passed. Expected other user's deck to remain 10, is now: 10

Test 5: One card in hand, will reduce to 0: 
Passed. Expected 0, Returned 0
Test 5b: Other player didn't gain card in hand: 
Passed. Expected other user's hand to remain 0, is now: 0
Test 4c: Other player didn't gain card in deck: 
Passed. Expected other user's deck to remain 10, is now: 10

Test 6a: Makes sure if more cards available, last card set: 
Passed. Expected -1, Returned -1
Test 6b: Other player didn't gain card in hand: 
Passed. Expected other user's hand to remain 0, is now: 0
Test 6c: Other player didn't gain card in deck: 
Passed. Expected other user's deck to remain 10, is now: 10

Test 7: Ensure Victory Points do not change: 
 Passed. Supply counts for curses and victory cards are the same

Test 8: Test supply counts for treasure that should have been distributed: 
FAILED. Silver Count Mismatch. Expected: 40, Received: 40
Passed. Supply counts for treasure cards are the same
*** TESTING CARD: Smithy ***


Test 1: Play Smithy and gain 3 cards:
Passed. Expected hand count: 7, Hand count finish: 7

Test 2a: Opponent's deck size unchanged when Smithy is drawn:
Passed. Deck size start: 10, Deck size finish: 10

Test 2b: Other player's hand size unchanged when smithy is drawn:
Passed. Hand size start: 0, Hand size finish: 0

Test 3: Player is drawing from own deck:
Passed. Expected: 2, Deck size finish: 2

Test 4: Smithy card added to played pile after use:
Passed. Expected increase in played pile: 1, Played pile: 1

Test 5: Supply of Victory Points unchanged: 
 Passed. Land points unchanged.

Test 6: Changes in Coins: 
Passed. Coin counts for all treasure card types unchanged.
*** TESTING CARD: adventurer ***

 
Test 1: Play Adventurer, draw cards until two coins are drawn:
Passed. Coin card count expected: 2, count finish: 2
Coin cards found: silver, copper, 
Test 1b: Acquired cards, coin value unchanged before use:
Passed. Coin amount is the same.

Test 1c: Test 1 with gold drawn:
Passed. Coin card count expected: 2, count finish: 2
Coin cards found: gold, copper, 
Test 2: Make sure all cards were discarded that were not coins:
FAILED. Expected discard amount: 1, Discarded finish: 0

Test 3a: Opponent's deck size unchanged when Adventurer is drawn:
Passed. Deck size start: 10, Deck size finish: 10

Test 3b: Other player's hand size unchanged when smithy is drawn:
Passed. Hand size start: 0, Hand size finish: 0

Test 4: Player is drawing and keeping only two cards from own pile:
Passed. Expected: 2, Deck size finish: 2

Test 5: Adventurer card added to played pile after use:
FAILED. Expected increase in played pile: 1, Played pile: 0

Test 6: Supply of Victory Points unchanged: 
 Passed. Land points unchanged.

Test 7: Changes in Coins: 
Passed. Coin counts for all treasure card types unchanged.
*** TESTING CARD: Village ***

 
Test 1: Play Village and gain 1 card:
Passed. Expected hand count: 5   Hand count finish: 5

Test 2: Play Village and gain 2 numActions:
Passed. Expected Action count: 2   Action finish: 2

Test 3a: Opponent's deck size unchanged when Adventurer is drawn:
Passed. Deck size start: 10, Deck size finish: 10

Test 3b: Other player's hand size unchanged when smithy is drawn:
Passed. Hand size start: 0, Hand size finish: 0

Test 4: Player is drawing from own pile:
Passed. Expected: 4, Deck size finish: 4

Test 5: Village card added to played pile after use:
FAILED. Expected increase in played pile: 1, Played pile: 0

Test 6: Supply of Victory Points unchanged: 
 Passed. Land points unchanged.

Test 7: Changes in Coins: 
Passed. Coin counts for all treasure card types unchanged.
*** TESTING CARD: Steward ***

 *** TESTING CHOICE ONE: +2 Cards ***

Test 1 Choice 1: Play Steward and gain two cards:
Passed. Expected hand count: 6, Hand count finish: 6

Test 2 Choice 1: Play Steward, choice1, make sure no numActions are given:
Passed. Expected gained actions: 0, Gained Actions finish: 0

Test 3 Choice 1: Play Steward to gain cards, but make sure no coins are given:
Passed. Expected coins gained: 0   Coins gained finish: 0

Test 4 Choice 1: none

Test 5 Choice 1: none

Test 6a: Opponent's deck size unchanged when Adventurer is drawn:
Passed. Deck size start: 10, Deck size finish: 10

Test 6b: Other player's hand size unchanged when smithy is drawn:
Passed. Hand size start: 0, Hand size finish: 0

Test 7: Player is drawing and keeping only two cards from own pile:
Passed. Expected: 3, Deck size finish: 3

Test 8: Steward card added to played pile after use:
Passed. Expected increase in played pile: 1, Played pile: 1

Test 9: Supply of Victory Points unchanged: 
 Passed. Land points unchanged.

Test 10: Changes in Coins: 
Passed. Coin counts for all treasure card types unchanged.
*** TESTING CHOICE TWO: +2 Coins ***

Test 1 Choice 2: Play Steward gains no cards:
Passed. Expected hand count: 4, Hand count finish: 4

Test 2 Choice 2: Since player received coins, make sure no numActions are given:
Passed. Expected Actions: 1, Actions gained finish: 0

Test 3 Choice 2: Receive 2 coins:
FAILED. Expected coin count: 4, Coin count finish: 6

Test 4 Choice 2: none

Test 5 Choice 2: none

Test 6a: Opponent's deck size unchanged when Adventurer is drawn:
Passed. Deck size start: 10, Deck size finish: 10

Test 6b: Other player's hand size unchanged when smithy is drawn:
Passed. Hand size start: 0, Hand size finish: 0

Test 7: Player is drawing and keeping only two cards from own pile:
FAILED. Expected: 3, Deck size finish: 5

Test 8: Steward card added to played pile after use:
Passed. Expected increase in played pile: 1, Played pile: 1

Test 9: Supply of Victory Points unchanged: 
 Passed. Land points unchanged.

Test 10: Changes in Coins: 
Passed. Coin counts for all treasure card types unchanged.
*** TESTING CHOICE THREE: -2 Cards ***

Test 1 Choice 3: Play Steward and ensure two cards are discarded:
Passed. Expected hand count: 2, Hand count finish: 2

Test 2 Choice 3: Play Steward and trash 2 cards, but make sure no numActions are given:
Passed. Expected Actions gained: 0, Actions gained finish: 0

Test 3: Play Steward, since 2 cards left no coins are given:
Passed. Expected coins gained: 0, coins gained finish: 0

Test 4 Choice 3: Make sure the removed cards are no longer in hand:
Passed. Removed cards no longer in hand

Test 5a choice 3: Make sure the removed cards are not in the deck:
Passed. Removed cards not in deck

Test5b Choice 3: Discard count should not be incremented if trashed: 
FAILED. Removed cards not trashed.

Test 6a: Opponent's deck size unchanged when Adventurer is drawn:
Passed. Deck size start: 10, Deck size finish: 10

Test 6b: Other player's hand size unchanged when smithy is drawn:
Passed. Hand size start: 0, Hand size finish: 0

Test 7: Player is drawing and keeping only two cards from own pile:
FAILED. Expected: 3, Deck size finish: 5

Test 8: Steward card added to played pile after use:
Passed. Expected increase in played pile: 1, Played pile: 1

Test 9: Supply of Victory Points unchanged: 
 Passed. Land points unchanged.

Test 10: Changes in Coins: 
Passed. Coin counts for all treasure card types unchanged.
File 'dominion.c'
Lines executed:32.46% of 613
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     6895:    8:int compare(const void* a, const void* b) {
     6895:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
     3854:   11:  if (*(int*)a < *(int*)b)
     3194:   12:    return -1;
      660:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       30:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       30:   44:  SelectStream(1);
       30:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       30:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       30:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      330:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     3300:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     3000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       30:   73:  if (numPlayers == 2)
        -:   74:    {
       30:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       30:   87:  if (numPlayers == 2)
        -:   88:    {
       30:   89:      state->supplyCount[estate] = 8;
       30:   90:      state->supplyCount[duchy] = 8;
       30:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       30:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       30:  102:  state->supplyCount[silver] = 40;
       30:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      630:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     5075:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     4760:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      345:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       60:  115:		  if (numPlayers == 2){ 
       60:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      225:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      285:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     4475:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       90:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       60:  140:      state->deckCount[i] = 0;
      240:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      180:  143:	  state->deck[i][j] = estate;
      180:  144:	  state->deckCount[i]++;
        -:  145:	}
      480:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      420:  148:	  state->deck[i][j] = copper;
      420:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       90:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       60:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       90:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       60:  166:      state->handCount[i] = 0;
       60:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      840:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      810:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       30:  182:  state->outpostPlayed = 0;
       30:  183:  state->phase = 0;
       30:  184:  state->numActions = 1;
       30:  185:  state->numBuys = 1;
       30:  186:  state->playedCardCount = 0;
       30:  187:  state->whoseTurn = 0;
       30:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      180:  192:  for (it = 0; it < 5; it++){
      150:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       30:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       30:  198:  return 0;
        -:  199:}
        -:  200:
       62:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       62:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       62:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       62:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1533:  214:  while (state->deckCount[player] > 0) {
     1409:  215:    card = floor(Random() * state->deckCount[player]);
     1409:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1409:  217:    newDeckPos++;
    83822:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    82413:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1409:  221:    state->deckCount[player]--;
        -:  222:  }
     1471:  223:  for (i = 0; i < newDeckPos; i++) {
     1409:  224:    state->deck[player][i] = newDeck[i];
     1409:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       62:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        6:  320:int supplyCount(int card, struct gameState *state) {
        6:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       13:  346:int whoseTurn(struct gameState *state) {
       13:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        5:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     2163:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2163:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      811:  533:    for (i = 0; i < state->discardCount[player];i++){
      809:  534:      state->deck[player][i] = state->discard[player][i];
      809:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        2:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        2:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     2161:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
     2161:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2161:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2161:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2161:  576:    state->deckCount[player]--;
     2161:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2163:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int refactoredGreatHall(struct gameState *state, int handPos) {
        -:  648:
    #####:  649:   int currentPlayer = whoseTurn(state);
        -:  650:
        -:  651:      //+1 Card
    #####:  652:      drawCard(currentPlayer, state);
        -:  653:			
        -:  654:      //+1 Actions
    #####:  655:      state->numActions++;
        -:  656:			
        -:  657:      //discard card from hand
    #####:  658:      discardCard(handPos + 1, currentPlayer, state, 0);//WRONG HANDPOS
    #####:  659:      return 0;
        -:  660:	
        -:  661:}
        -:  662:
    #####:  663:int refactoredGardens(){
    #####:  664:  return -1;
        -:  665:}
        -:  666:
        1:  667:int refactoredSmithy(struct gameState *state, int handPos) {
        -:  668:
        -:  669:   int i;
        1:  670:   int currentPlayer = whoseTurn(state);
        -:  671:
        -:  672:      //+3 Cards
        4:  673:      for (i = 0; i < 3; i++)
        -:  674:	{
        3:  675:	  drawCard(currentPlayer, state);
        -:  676:	}
        -:  677:			
        -:  678:      //discard card from hand
        1:  679:      discardCard(handPos + 1, currentPlayer, state, 0);//DISCARDS WRONG CARD
        1:  680:      return 0;
        -:  681:}
        -:  682:
        1:  683:int refactoredVillage(struct gameState *state, int handPos) {
        -:  684:		
        1:  685:      int currentPlayer = whoseTurn(state);
        -:  686:
        -:  687:      //+1 Card
        1:  688:      drawCard(currentPlayer, state);
        -:  689:			
        -:  690:      //+2 Actions
        1:  691:      state->numActions = state->numActions + 2;
        -:  692:			
        -:  693:      //discard played card from hand
        1:  694:      discardCard(handPos, currentPlayer, state, 1);//TRASHES CARD
        1:  695:      return 0;
        -:  696:}
        -:  697:	
        3:  698:int refactoredAdventurer(struct gameState *state, int handpos) {
        -:  699:
        3:  700:  int currentPlayer = whoseTurn(state);
        -:  701:
        -:  702:  int temphand[MAX_HAND];// moved above the if statement
        3:  703:  int drawntreasure=0;
        -:  704:  int cardDrawn;
        3:  705:  int z = 0;// this is the counter for the temp hand
        -:  706:      
        -:  707:
       13:  708:      while(drawntreasure<2){
        7:  709:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  710:	  shuffle(currentPlayer, state);
        -:  711:	}
        7:  712:	drawCard(currentPlayer, state);
        7:  713:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       13:  714:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        6:  715:	  drawntreasure++;
        -:  716:	else{
        1:  717:	  temphand[z]=cardDrawn;
        1:  718:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  719:	  z++;
        -:  720:	}
        -:  721:      }
        6:  722:      while(z-1>0){//SHOULD BE (z-1>=0)
    #####:  723:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:	z=z-1;
        -:  725:      }
        3:  726:      return 0;
        -:  727:}
        -:  728:
        -:  729:
        8:  730:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  731:{
        -:  732:  int i;
        -:  733:  int j;
        -:  734:  int k;
        -:  735:  int x;
        -:  736:  int index;
        8:  737:  int currentPlayer = whoseTurn(state);
        8:  738:  int nextPlayer = currentPlayer + 1;
        -:  739:
        8:  740:  int tributeRevealedCards[2] = {-1, -1};
        -:  741:  int temphand[MAX_HAND];// moved above the if statement
        8:  742:  int drawntreasure=0;
        -:  743:  int cardDrawn;
        8:  744:  int z = 0;// this is the counter for the temp hand
        8:  745:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  746:    nextPlayer = 0;
        -:  747:  }
        -:  748:  
        8:  749:  if (card == adventurer) {
        3:  750:     return refactoredAdventurer(state, handPos);
        -:  751:  }
        5:  752:  else if (card == smithy) {
        1:  753:     return refactoredSmithy(state, handPos);
        -:  754:  }
        4:  755:  else if (card == gardens) {
    #####:  756:     return refactoredGardens();
        -:  757:  }
        4:  758:  else if (card == village) {
        1:  759:     return refactoredVillage(state, handPos);
        -:  760:  }
        3:  761:  else if (card == great_hall) {
    #####:  762:     return refactoredGreatHall(state, handPos);
        -:  763:  }
        -:  764: 
        -:  765:	
        -:  766:  //uses switch to select card and perform actions
        3:  767:  switch( card ) 
        -:  768:    {
        -:  769:    case adventurer:
    #####:  770:      while(drawntreasure<2){
    #####:  771:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  772:	  shuffle(currentPlayer, state);
        -:  773:	}
    #####:  774:	drawCard(currentPlayer, state);
    #####:  775:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  776:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  777:	  drawntreasure++;
        -:  778:	else{
    #####:  779:	  temphand[z]=cardDrawn;
    #####:  780:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  781:	  z++;
        -:  782:	}
        -:  783:      }
    #####:  784:      while(z-1>=0){
    #####:  785:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  786:	z=z-1;
        -:  787:      }
    #####:  788:      return 0;
        -:  789:			
        -:  790:    case council_room:
        -:  791:      //+4 Cards
    #####:  792:      for (i = 0; i < 4; i++)
        -:  793:	{
    #####:  794:	  drawCard(currentPlayer, state);
        -:  795:	}
        -:  796:			
        -:  797:      //+1 Buy
    #####:  798:      state->numBuys++;
        -:  799:			
        -:  800:      //Each other player draws a card
    #####:  801:      for (i = 0; i < state->numPlayers; i++)
        -:  802:	{
    #####:  803:	  if ( i != currentPlayer )
        -:  804:	    {
    #####:  805:	      drawCard(i, state);
        -:  806:	    }
        -:  807:	}
        -:  808:			
        -:  809:      //put played card in played card pile
    #####:  810:      discardCard(handPos, currentPlayer, state, 0);
        -:  811:			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case feast:
        -:  815:      //gain card with cost up to 5
        -:  816:      //Backup hand
    #####:  817:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  818:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  819:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  820:      }
        -:  821:      //Backup hand
        -:  822:
        -:  823:      //Update Coins for Buy
    #####:  824:      updateCoins(currentPlayer, state, 5);
    #####:  825:      x = 1;//Condition to loop on
    #####:  826:      while( x == 1) {//Buy one card
    #####:  827:	if (supplyCount(choice1, state) <= 0){
    #####:  828:	  if (DEBUG)
        -:  829:	    printf("None of that card left, sorry!\n");
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  833:	  }
        -:  834:	}
    #####:  835:	else if (state->coins < getCost(choice1)){
    #####:  836:	  printf("That card is too expensive!\n");
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  840:	  }
        -:  841:	}
        -:  842:	else{
        -:  843:
    #####:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
    #####:  848:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  849:	  x = 0;//No more buying cards
        -:  850:
    #####:  851:	  if (DEBUG){
        -:  852:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  853:	  }
        -:  854:
        -:  855:	}
        -:  856:      }     
        -:  857:
        -:  858:      //Reset Hand
    #####:  859:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  860:	state->hand[currentPlayer][i] = temphand[i];
    #####:  861:	temphand[i] = -1;
        -:  862:      }
        -:  863:      //Reset Hand
        -:  864:      			
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case gardens:
    #####:  868:      return -1;
        -:  869:			
        -:  870:    case mine:
    #####:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
    #####:  873:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:		
    #####:  878:      if (choice2 > treasure_map || choice2 < curse)
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
    #####:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  884:	{
    #####:  885:	  return -1;
        -:  886:	}
        -:  887:
    #####:  888:      gainCard(choice2, state, 2, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
    #####:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
    #####:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
    #####:  898:	      discardCard(i, currentPlayer, state, 0);			
    #####:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:			
    #####:  903:      return 0;
        -:  904:			
        -:  905:    case remodel:
    #####:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 0, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:
        -:  928:
    #####:  929:      return 0;
        -:  930:		
        -:  931:    case smithy:
        -:  932:      //+3 Cards
    #####:  933:      for (i = 0; i < 3; i++)
        -:  934:	{
    #####:  935:	  drawCard(currentPlayer, state);
        -:  936:	}
        -:  937:			
        -:  938:      //discard card from hand
    #####:  939:      discardCard(handPos, currentPlayer, state, 0);
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case village:
        -:  943:      //+1 Card
    #####:  944:      drawCard(currentPlayer, state);
        -:  945:			
        -:  946:      //+2 Actions
    #####:  947:      state->numActions = state->numActions + 2;
        -:  948:			
        -:  949:      //discard played card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
    #####:  951:      return 0;
        -:  952:		
        -:  953:    case baron:
    #####:  954:      state->numBuys++;//Increase buys by 1!
    #####:  955:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  956:	int p = 0;//Iterator for hand!
    #####:  957:	int card_not_discarded = 1;//Flag for discard set!
    #####:  958:	while(card_not_discarded){
    #####:  959:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  960:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  961:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  962:	    state->discardCount[currentPlayer]++;
    #####:  963:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  964:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  965:	    }
    #####:  966:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  967:	    state->handCount[currentPlayer]--;
    #####:  968:	    card_not_discarded = 0;//Exit the loop
        -:  969:	  }
    #####:  970:	  else if (p > state->handCount[currentPlayer]){
    #####:  971:	    if(DEBUG) {
        -:  972:	      printf("No estate cards in your hand, invalid choice\n");
        -:  973:	      printf("Must gain an estate if there are any\n");
        -:  974:	    }
    #####:  975:	    if (supplyCount(estate, state) > 0){
    #####:  976:	      gainCard(estate, state, 0, currentPlayer);
    #####:  977:	      state->supplyCount[estate]--;//Decrement estates
    #####:  978:	      if (supplyCount(estate, state) == 0){
    #####:  979:		isGameOver(state);
        -:  980:	      }
        -:  981:	    }
    #####:  982:	    card_not_discarded = 0;//Exit the loop
        -:  983:	  }
        -:  984:			    
        -:  985:	  else{
    #####:  986:	    p++;//Next card
        -:  987:	  }
        -:  988:	}
        -:  989:      }
        -:  990:			    
        -:  991:      else{
    #####:  992:	if (supplyCount(estate, state) > 0){
    #####:  993:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  994:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  995:	  if (supplyCount(estate, state) == 0){
    #####:  996:	    isGameOver(state);
        -:  997:	  }
        -:  998:	}
        -:  999:      }
        -: 1000:	    
        -: 1001:      
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case great_hall:
        -: 1005:      //+1 Card
    #####: 1006:      drawCard(currentPlayer, state);
        -: 1007:			
        -: 1008:      //+1 Actions
    #####: 1009:      state->numActions++;
        -: 1010:			
        -: 1011:      //discard card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case minion:
        -: 1016:      //+1 action
    #####: 1017:      state->numActions++;
        -: 1018:			
        -: 1019:      //discard card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);
        -: 1021:			
    #####: 1022:      if (choice1)		//+2 coins
        -: 1023:	{
    #####: 1024:	  state->coins = state->coins + 2;
        -: 1025:	}
        -: 1026:			
    #####: 1027:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1028:	{
        -: 1029:	  //discard hand
    #####: 1030:	  while(numHandCards(state) > 0)
        -: 1031:	    {
    #####: 1032:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1033:	    }
        -: 1034:				
        -: 1035:	  //draw 4
    #####: 1036:	  for (i = 0; i < 4; i++)
        -: 1037:	    {
    #####: 1038:	      drawCard(currentPlayer, state);
        -: 1039:	    }
        -: 1040:				
        -: 1041:	  //other players discard hand and redraw if hand size > 4
    #####: 1042:	  for (i = 0; i < state->numPlayers; i++)
        -: 1043:	    {
    #####: 1044:	      if (i != currentPlayer)
        -: 1045:		{
    #####: 1046:		  if ( state->handCount[i] > 4 )
        -: 1047:		    {
        -: 1048:		      //discard hand
    #####: 1049:		      while( state->handCount[i] > 0 )
        -: 1050:			{
    #####: 1051:			  discardCard(handPos, i, state, 0);
        -: 1052:			}
        -: 1053:							
        -: 1054:		      //draw 4
    #####: 1055:		      for (j = 0; j < 4; j++)
        -: 1056:			{
    #####: 1057:			  drawCard(i, state);
        -: 1058:			}
        -: 1059:		    }
        -: 1060:		}
        -: 1061:	    }
        -: 1062:				
        -: 1063:	}
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case steward:
        3: 1067:      if (choice1 == 1)
        -: 1068:	{
        -: 1069:	  //+2 cards
        1: 1070:	  drawCard(currentPlayer, state);
        1: 1071:	  drawCard(currentPlayer, state);
        -: 1072:	}
        2: 1073:      else if (choice1 == 2)
        -: 1074:	{
        -: 1075:	  //+2 coins
        1: 1076:	  state->coins = state->coins + 2;
        -: 1077:	}
        -: 1078:      else
        -: 1079:	{
        -: 1080:	  //trash 2 cards in hand
        1: 1081:	  discardCard(choice2, currentPlayer, state, 1);
        1: 1082:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1083:	}
        -: 1084:			
        -: 1085:      //discard card from hand
        3: 1086:      discardCard(handPos, currentPlayer, state, 0);
        3: 1087:      return 0;
        -: 1088:		
        -: 1089:    case tribute:
    #####: 1090:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1091:	if (state->deckCount[nextPlayer] > 0){
    #####: 1092:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	  state->deckCount[nextPlayer]--;
        -: 1094:	}
    #####: 1095:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1096:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1097:	  state->discardCount[nextPlayer]--;
        -: 1098:	}
        -: 1099:	else{
        -: 1100:	  //No Card to Reveal
    #####: 1101:	  if (DEBUG){
        -: 1102:	    printf("No cards to reveal\n");
        -: 1103:	  }
        -: 1104:	}
        -: 1105:      }
        -: 1106:	    
        -: 1107:      else{
    #####: 1108:	if (state->deckCount[nextPlayer] == 0){
    #####: 1109:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1110:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1111:	    state->deckCount[nextPlayer]++;
    #####: 1112:	    state->discard[nextPlayer][i] = -1;
    #####: 1113:	    state->discardCount[nextPlayer]--;
        -: 1114:	  }
        -: 1115:			    
    #####: 1116:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1117:	} 
    #####: 1118:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1119:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1120:	state->deckCount[nextPlayer]--;
    #####: 1121:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1122:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1123:	state->deckCount[nextPlayer]--;
        -: 1124:      }    
        -: 1125:		       
    #####: 1126:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1127:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1128:	state->playedCardCount++;
    #####: 1129:	tributeRevealedCards[1] = -1;
        -: 1130:      }
        -: 1131:
    #####: 1132:      for (i = 0; i <= 2; i ++){
    #####: 1133:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1134:	  state->coins += 2;
        -: 1135:	}
        -: 1136:		    
    #####: 1137:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1138:	  drawCard(currentPlayer, state);
    #####: 1139:	  drawCard(currentPlayer, state);
        -: 1140:	}
        -: 1141:	else{//Action Card
    #####: 1142:	  state->numActions = state->numActions + 2;
        -: 1143:	}
        -: 1144:      }
        -: 1145:	    
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case ambassador:
    #####: 1149:      j = 0;		//used to check if player has enough cards to discard
        -: 1150:
    #####: 1151:      if (choice2 > 2 || choice2 < 0)
        -: 1152:	{
    #####: 1153:	  return -1;				
        -: 1154:	}
        -: 1155:
    #####: 1156:      if (choice1 == handPos)
        -: 1157:	{
    #####: 1158:	  return -1;
        -: 1159:	}
        -: 1160:
    #####: 1161:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1162:	{
    #####: 1163:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1164:	    {
    #####: 1165:	      j++;
        -: 1166:	    }
        -: 1167:	}
    #####: 1168:      if (j < choice2)
        -: 1169:	{
    #####: 1170:	  return -1;				
        -: 1171:	}
        -: 1172:
    #####: 1173:      if (DEBUG) 
        -: 1174:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1175:
        -: 1176:      //increase supply count for choosen card by amount being discarded
    #####: 1177:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1178:			
        -: 1179:      //each other player gains a copy of revealed card
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1185:	    }
        -: 1186:	}
        -: 1187:
        -: 1188:      //discard played card from hand
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1190:
        -: 1191:      //trash copies of cards returned to supply
    #####: 1192:      for (j = 0; j < choice2; j++)
        -: 1193:	{
    #####: 1194:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1195:	    {
    #####: 1196:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1197:		{
    #####: 1198:		  discardCard(i, currentPlayer, state, 1);
    #####: 1199:		  break;
        -: 1200:		}
        -: 1201:	    }
        -: 1202:	}			
        -: 1203:
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case cutpurse:
        -: 1207:
    #####: 1208:      updateCoins(currentPlayer, state, 2);
    #####: 1209:      for (i = 0; i < state->numPlayers; i++)
        -: 1210:	{
    #####: 1211:	  if (i != currentPlayer)
        -: 1212:	    {
    #####: 1213:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1214:		{
    #####: 1215:		  if (state->hand[i][j] == copper)
        -: 1216:		    {
    #####: 1217:		      discardCard(j, i, state, 0);
    #####: 1218:		      break;
        -: 1219:		    }
    #####: 1220:		  if (j == state->handCount[i])
        -: 1221:		    {
    #####: 1222:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1223:			{
    #####: 1224:			  if (DEBUG)
        -: 1225:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1226:			}	
    #####: 1227:		      break;
        -: 1228:		    }		
        -: 1229:		}
        -: 1230:					
        -: 1231:	    }
        -: 1232:				
        -: 1233:	}				
        -: 1234:
        -: 1235:      //discard played card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1237:
    #####: 1238:      return 0;
        -: 1239:
        -: 1240:		
        -: 1241:    case embargo: 
        -: 1242:      //+2 Coins
    #####: 1243:      state->coins = state->coins + 2;
        -: 1244:			
        -: 1245:      //see if selected pile is in play
    #####: 1246:      if ( state->supplyCount[choice1] == -1 )
        -: 1247:	{
    #####: 1248:	  return -1;
        -: 1249:	}
        -: 1250:			
        -: 1251:      //add embargo token to selected supply pile
    #####: 1252:      state->embargoTokens[choice1]++;
        -: 1253:			
        -: 1254:      //trash card
    #####: 1255:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1256:      return 0;
        -: 1257:		
        -: 1258:    case outpost:
        -: 1259:      //set outpost flag
    #####: 1260:      state->outpostPlayed++;
        -: 1261:			
        -: 1262:      //discard card
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1264:      return 0;
        -: 1265:		
        -: 1266:    case salvager:
        -: 1267:      //+1 buy
    #####: 1268:      state->numBuys++;
        -: 1269:			
    #####: 1270:      if (choice1)
        -: 1271:	{
        -: 1272:	  //gain coins equal to trashed card
    #####: 1273:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1274:	  //trash card
    #####: 1275:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1276:	}
        -: 1277:			
        -: 1278:      //discard card
    #####: 1279:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1280:      return 0;
        -: 1281:		
        -: 1282:    case sea_hag:
    #####: 1283:      for (i = 0; i < state->numPlayers; i++){
    #####: 1284:	if (i != currentPlayer){
    #####: 1285:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1286:	  state->discardCount[i]++;
    #####: 1287:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1288:	}
        -: 1289:      }
    #####: 1290:      return 0;
        -: 1291:		
        -: 1292:    case treasure_map:
        -: 1293:      //search hand for another treasure_map
    #####: 1294:      index = -1;
    #####: 1295:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	{
    #####: 1297:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1298:	    {
    #####: 1299:	      index = i;
    #####: 1300:	      break;
        -: 1301:	    }
        -: 1302:	}
    #####: 1303:      if (index > -1)
        -: 1304:	{
        -: 1305:	  //trash both treasure cards
    #####: 1306:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1307:	  discardCard(index, currentPlayer, state, 1);
        -: 1308:
        -: 1309:	  //gain 4 Gold cards
    #####: 1310:	  for (i = 0; i < 4; i++)
        -: 1311:	    {
    #####: 1312:	      gainCard(gold, state, 1, currentPlayer);
        -: 1313:	    }
        -: 1314:				
        -: 1315:	  //return success
    #####: 1316:	  return 1;
        -: 1317:	}
        -: 1318:			
        -: 1319:      //no second treasure_map found in hand
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:	
    #####: 1323:  return -1;
        -: 1324:}
        -: 1325:
       13: 1326:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1327:{
        -: 1328:	
        -: 1329:  //if card is not trashed, added to Played pile 
       13: 1330:  if (trashFlag < 1)
        -: 1331:    {
        -: 1332:      //add card to played pile
        8: 1333:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1334:      state->playedCardCount++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //set played card to -1
       13: 1338:  state->hand[currentPlayer][handPos] = -1;
        -: 1339:	
        -: 1340:  //remove card from player's hand
       13: 1341:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1342:    {
        -: 1343:      //reduce number of cards in hand
    #####: 1344:      state->handCount[currentPlayer]--;
        -: 1345:    }
       13: 1346:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1347:    {
        -: 1348:      //reduce number of cards in hand
        1: 1349:      state->handCount[currentPlayer]--;
        -: 1350:    }
        -: 1351:  else 	
        -: 1352:    {
        -: 1353:      //replace discarded card with last card in hand
       12: 1354:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1355:      //set last card to -1
       12: 1356:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1357:      //reduce number of cards in hand
       12: 1358:      state->handCount[currentPlayer]--;
        -: 1359:    }
        -: 1360:	
       13: 1361:  return 0;
        -: 1362:}
        -: 1363:
        6: 1364:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1365:{
        -: 1366:  //Note: supplyPos is enum of choosen card
        -: 1367:	
        -: 1368:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1369:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1370:    {
        2: 1371:      return -1;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //added card for [whoseTurn] current player:
        -: 1375:  // toFlag = 0 : add to discard
        -: 1376:  // toFlag = 1 : add to deck
        -: 1377:  // toFlag = 2 : add to hand
        -: 1378:
        4: 1379:  if (toFlag == 1)
        -: 1380:    {
        1: 1381:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1382:      state->deckCount[player]++;
        -: 1383:    }
        3: 1384:  else if (toFlag == 2)
        -: 1385:    {
        1: 1386:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1387:      state->handCount[player]++;
        -: 1388:    }
        -: 1389:  else
        -: 1390:    {
        2: 1391:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1392:      state->discardCount[player]++;
        -: 1393:    }
        -: 1394:	
        -: 1395:  //decrease number in supply pile
        4: 1396:  state->supplyCount[supplyPos]--;
        -: 1397:	 
        4: 1398:  return 0;
        -: 1399:}
        -: 1400:
       35: 1401:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1402:{
        -: 1403:  int i;
        -: 1404:	
        -: 1405:  //reset coin count
       35: 1406:  state->coins = 0;
        -: 1407:
        -: 1408:  //add coins for each Treasure card in player's hand
      210: 1409:  for (i = 0; i < state->handCount[player]; i++)
        -: 1410:    {
      175: 1411:      if (state->hand[player][i] == copper)
        -: 1412:	{
      121: 1413:	  state->coins += 1;
        -: 1414:	}
       54: 1415:      else if (state->hand[player][i] == silver)
        -: 1416:	{
        1: 1417:	  state->coins += 2;
        -: 1418:	}
       53: 1419:      else if (state->hand[player][i] == gold)
        -: 1420:	{
        3: 1421:	  state->coins += 3;
        -: 1422:	}	
        -: 1423:    }	
        -: 1424:
        -: 1425:  //add bonus
       35: 1426:  state->coins += bonus;
        -: 1427:
       35: 1428:  return 0;
        -: 1429:}
        -: 1430:
        -: 1431:
        -: 1432://end of dominion.c
        -: 1433:
