        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
       94:   10:int compare(const void* a, const void* b) {
       94:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       94:   13:  if (*(int*)a < *(int*)b)
       24:   14:    return -1;
       70:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        3:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;
        -:   45:  //set up random number generator
        3:   46:  SelectStream(1);
        3:   47:  PutSeed((long)randomSeed);
        -:   48:
        -:   49:  //check number of players
        3:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        3:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       33:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      330:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      300:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        3:   75:  if (numPlayers == 2)
        -:   76:    {
        3:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        3:   89:  if (numPlayers == 2)
        -:   90:    {
        3:   91:      state->supplyCount[estate] = 8;
        3:   92:      state->supplyCount[duchy] = 8;
        3:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        3:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  104:  state->supplyCount[silver] = 40;
        3:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       63:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      495:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      465:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       33:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
        3:  117:		  if (numPlayers == 2){
        3:  118:		    state->supplyCount[i] = 8;
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       27:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       30:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      435:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        9:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        6:  142:      state->deckCount[i] = 0;
       24:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       18:  145:	  state->deck[i][j] = estate;
       18:  146:	  state->deckCount[i]++;
        -:  147:	}
       48:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       42:  150:	  state->deck[i][j] = copper;
       42:  151:	  state->deckCount[i]++;
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        9:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        6:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        9:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {
        -:  167:      //initialize hand size to zero
        6:  168:      state->handCount[i] = 0;
        6:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:
        -:  177:  //set embargo tokens to 0 for all supply piles
       84:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
       81:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        3:  184:  state->outpostPlayed = 0;
        3:  185:  state->phase = 0;
        3:  186:  state->numActions = 1;
        3:  187:  state->numBuys = 1;
        3:  188:  state->playedCardCount = 0;
        3:  189:  state->whoseTurn = 0;
        3:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       18:  194:  for (it = 0; it < 5; it++){
       15:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        3:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        3:  200:  return 0;
        -:  201:}
        -:  202:
        8:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        8:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        8:  211:  if (state->deckCount[player] < 1)
        1:  212:    return -1;
        7:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       78:  216:  while (state->deckCount[player] > 0) {
       64:  217:    card = floor(Random() * state->deckCount[player]);
       64:  218:    newDeck[newDeckPos] = state->deck[player][card];
       64:  219:    newDeckPos++;
      208:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      144:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       64:  223:    state->deckCount[player]--;
        -:  224:  }
       71:  225:  for (i = 0; i < newDeckPos; i++) {
       64:  226:    state->deck[player][i] = newDeck[i];
       64:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        7:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
    #####:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    #####:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    #####:  293:    if (DEBUG)
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    #####:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
        1:  317:int handCard(int handPos, struct gameState *state) {
        1:  318:  int currentPlayer = whoseTurn(state);
        1:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
       13:  348:int whoseTurn(struct gameState *state) {
       13:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
       27:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:
        -:  396:  //if stack of Province cards is empty, the game ends
       27:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
       26:  403:  j = 0;
      676:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      650:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
       28:  408:	  j++;
        -:  409:	}
        -:  410:    }
       26:  411:  if ( j >= 3)
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
       25:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       39:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       39:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
        5:  535:    for (i = 0; i < state->discardCount[player];i++){
        4:  536:      state->deck[player][i] = state->discard[player][i];
        4:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
        1:  540:    state->deckCount[player] = state->discardCount[player];
        1:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        1:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:
        1:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:
        1:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        1:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:
        1:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:
        1:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        1:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
        1:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  565:    state->deckCount[player]--;
        1:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       38:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
       38:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       38:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       38:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       38:  578:    state->deckCount[player]--;
       38:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       39:  582:  return 0;
        -:  583:}
        -:  584:
        1:  585:int getCost(int cardNumber)
        -:  586:{
        1:  587:  switch( cardNumber )
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
        1:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo:
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648://refactored action cards
        1:  649:int playSmithy(struct gameState *state, int handPos)
        -:  650:{
        1:  651:	int currentPlayer = whoseTurn(state);
        -:  652:	int i;
        -:  653:	//+3 Cards
        4:  654:	for (i = 0; i < 3; i++)
        -:  655:	{
        3:  656:		drawCard(currentPlayer, state);
        -:  657:	}
        -:  658:
        -:  659:	//discard card from hand
        1:  660:	discardCard(handPos, currentPlayer, state, 1);
        1:  661:	return 0;
        -:  662:}
        -:  663:
        2:  664:int playAdventurer(struct gameState *state)
        -:  665:{
        2:  666:	int drawntreasure=0;
        2:  667:	int currentPlayer = whoseTurn(state);
        -:  668:	int temphand[MAX_HAND];
        2:  669:	int z = 0;// this is the counter for the temp hand
       24:  670:	while(drawntreasure<2){
        -:  671:
       20:  672:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        1:  673:			shuffle(currentPlayer, state);
        -:  674:		}
       20:  675:		drawCard(currentPlayer, state);
       20:  676:		int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       24:  677:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
        4:  678:                drawntreasure++;
        4:  679:              state->coins++;
        -:  680:            }
        -:  681:		else{
       16:  682:			temphand[z]=cardDrawn;
       16:  683:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       16:  684:			z++;
        -:  685:		}
        -:  686:	}
       20:  687:	while(z-1>=0){
       16:  688:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       16:  689:		z=z-1;
        -:  690:	}
        2:  691:	return 0;
        -:  692:}
        -:  693:
        1:  694:int playVillage(struct gameState *state, int handPos)
        -:  695:{
        1:  696:	int currentPlayer = whoseTurn(state);
        -:  697:    //+1 Card
        1:  698:    drawCard(currentPlayer, state);
        -:  699:
        -:  700:    //+2 Actions
        1:  701:    state->numActions = state->numActions + 2;
        -:  702:
        -:  703:    //discard played card from hand
        1:  704:    discardCard(handPos, currentPlayer, state, 1);
        1:  705:    return 0;
        -:  706:}
        -:  707:
    #####:  708:int playGreatHall(struct gameState *state, int handPos, int currentPlayer)
        -:  709:{
        -:  710:  //+1 Card
    #####:  711:      drawCard(currentPlayer, state);
        -:  712:
        -:  713:      //+1 Actions
    #####:  714:      state->numActions++;
        -:  715:
        -:  716:      //discard card from hand
    #####:  717:      discardCard(handPos, currentPlayer, state, 0);
    #####:  718:      return 0;
        -:  719:}
        -:  720:
        2:  721:int playSalvager(struct gameState *state, int handPos, int choice1)
        -:  722:{
        2:  723:	int currentPlayer = whoseTurn(state);
        -:  724:
        -:  725:	//+1 buy
        2:  726:    state->numBuys++;
        -:  727:
        2:  728:    if (choice1)
        -:  729:	{
        -:  730:	  //gain coins equal to trashed card
        1:  731:	  state->coins = state->coins + getCost( handCard(choice1, state) )+1;
        -:  732:	  //trash card
        1:  733:	  discardCard(choice1, currentPlayer, state, 1);
        -:  734:	}
        -:  735:
        -:  736:      //discard card
        2:  737:    discardCard(handPos, currentPlayer, state, 0);
        2:  738:    return 0;
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
        6:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        6:  750:  int currentPlayer = whoseTurn(state);
        6:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        6:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        6:  755:  int drawntreasure=0;
        -:  756:  int cardDrawn;
        6:  757:  int z = 0;// this is the counter for the temp hand
        6:  758:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:    nextPlayer = 0;
        -:  760:  }
        -:  761:
        -:  762:
        -:  763:  //uses switch to select card and perform actions
        6:  764:  switch( card )
        -:  765:    {
        -:  766:    case adventurer:
        2:  767:      return playAdventurer(state);
        -:  768:
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
    #####:  782:	if (supplyCount(choice1, state) <= 0){
    #####:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
    #####:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
    #####:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
    #####:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
    #####:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
    #####:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:	  x = 0;//No more buying cards
        -:  805:
    #####:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:	state->hand[currentPlayer][i] = temphand[i];
    #####:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:
    #####:  820:      return 0;
        -:  821:
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:
    #####:  858:      return 0;
        -:  859:
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:
        -:  886:    case smithy:
        1:  887:      return playSmithy(state, handPos);
        -:  888:
        -:  889:    case village:
        1:  890:        return playVillage(state, handPos);
        -:  891:
        -:  892:    case baron:
    #####:  893:      state->numBuys++;//Increase buys by 1!
    #####:  894:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  895:	int p = 0;//Iterator for hand!
    #####:  896:	int card_not_discarded = 1;//Flag for discard set!
    #####:  897:	while(card_not_discarded){
    #####:  898:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  899:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  900:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  901:	    state->discardCount[currentPlayer]++;
    #####:  902:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  903:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  904:	    }
    #####:  905:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  906:	    state->handCount[currentPlayer]--;
    #####:  907:	    card_not_discarded = 0;//Exit the loop
        -:  908:	  }
    #####:  909:	  else if (p > state->handCount[currentPlayer]){
    #####:  910:	    if(DEBUG) {
        -:  911:	      printf("No estate cards in your hand, invalid choice\n");
        -:  912:	      printf("Must gain an estate if there are any\n");
        -:  913:	    }
    #####:  914:	    if (supplyCount(estate, state) > 0){
    #####:  915:	      gainCard(estate, state, 0, currentPlayer);
    #####:  916:	      state->supplyCount[estate]--;//Decrement estates
    #####:  917:	      if (supplyCount(estate, state) == 0){
    #####:  918:		isGameOver(state);
        -:  919:	      }
        -:  920:	    }
    #####:  921:	    card_not_discarded = 0;//Exit the loop
        -:  922:	  }
        -:  923:
        -:  924:	  else{
    #####:  925:	    p++;//Next card
        -:  926:	  }
        -:  927:	}
        -:  928:      }
        -:  929:
        -:  930:      else{
    #####:  931:	if (supplyCount(estate, state) > 0){
    #####:  932:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  933:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  934:	  if (supplyCount(estate, state) == 0){
    #####:  935:	    isGameOver(state);
        -:  936:	  }
        -:  937:	}
        -:  938:      }
        -:  939:
        -:  940:
    #####:  941:      return 0;
        -:  942:
        -:  943:    case great_hall:
    #####:  944:     return playGreatHall(state, handPos, currentPlayer);
        -:  945:
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:
    #####:  953:      if (choice1)		//+2 coins
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
        -:  964:	    }
        -:  965:
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
        -:  970:	    }
        -:  971:
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
        -:  983:			}
        -:  984:
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
        -:  987:			{
    #####:  988:			  drawCard(i, state);
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:
        -:  994:	}
    #####:  995:      return 0;
        -:  996:
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
    #####: 1002:	  drawCard(currentPlayer, state);
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1014:	}
        -: 1015:
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
    #####: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1048:	}
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }
        -: 1056:
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:
    #####: 1077:      return 0;
        -: 1078:
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
        -: 1083:	{
    #####: 1084:	  return -1;
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      if (DEBUG)
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1154:			{
    #####: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}
    #####: 1158:		      break;
        -: 1159:		    }
        -: 1160:		}
        -: 1161:
        -: 1162:	    }
        -: 1163:
        -: 1164:	}
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:
        -: 1172:    case embargo:
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1187:      return 0;
        -: 1188:
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:    case salvager:
        2: 1198:      return playSalvager(state, handPos, choice1);
        -: 1199:
        -: 1200:    case sea_hag:
    #####: 1201:      for (i = 0; i < state->numPlayers; i++){
    #####: 1202:	if (i != currentPlayer){
    #####: 1203:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1204:	  state->discardCount[i]++;
    #####: 1205:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:	}
        -: 1207:      }
    #####: 1208:      return 0;
        -: 1209:
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1216:	    {
    #####: 1217:	      index = i;
    #####: 1218:	      break;
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (index > -1)
        -: 1222:	{
        -: 1223:	  //trash both treasure cards
    #####: 1224:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1225:	  discardCard(index, currentPlayer, state, 1);
        -: 1226:
        -: 1227:	  //gain 4 Gold cards
    #####: 1228:	  for (i = 0; i < 4; i++)
        -: 1229:	    {
    #####: 1230:	      gainCard(gold, state, 1, currentPlayer);
        -: 1231:	    }
        -: 1232:
        -: 1233:	  //return success
    #####: 1234:	  return 1;
        -: 1235:	}
        -: 1236:
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
        8: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:
        -: 1247:  //if card is not trashed, added to Played pile
        8: 1248:  if (trashFlag < 1)
        -: 1249:    {
        -: 1250:      //add card to played pile
        5: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        5: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:
        -: 1255:  //set played card to -1
        8: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:
        -: 1258:  //remove card from player's hand
        8: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
        1: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        7: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
        1: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else {
        -: 1270:      //replace discarded card with last card in hand
        6: 1271:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1272:      //set last card to -1
        6: 1273:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1274:      //reduce number of cards in hand
        6: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
        -: 1277:
        8: 1278:  return 0;
        -: 1279:}
        -: 1280:
        5: 1281:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1282:{
        -: 1283:  //Note: supplyPos is enum of choosen card
        -: 1284:
        -: 1285:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1286:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1287:    {
        2: 1288:      return -1;
        -: 1289:    }
        -: 1290:
        -: 1291:  //added card for [whoseTurn] current player:
        -: 1292:  // toFlag = 0 : add to discard
        -: 1293:  // toFlag = 1 : add to deck
        -: 1294:  // toFlag = 2 : add to hand
        -: 1295:
        3: 1296:  if (toFlag == 1)
        -: 1297:    {
        -: 1298:
        1: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1300:      state->deckCount[player]++;
        -: 1301:    }
        2: 1302:  else if (toFlag == 2)
        -: 1303:    {
        1: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
        1: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:
        -: 1313:  //decrease number in supply pile
        3: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:
        3: 1316:  return 0;
        -: 1317:}
        -: 1318:
        9: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:
        -: 1323:  //reset coin count
        9: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
       54: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:    {
       45: 1329:      if (state->hand[player][i] == copper)
        -: 1330:	{
       18: 1331:	  state->coins += 1;
        -: 1332:	}
       27: 1333:      else if (state->hand[player][i] == silver)
        -: 1334:	{
        6: 1335:	  state->coins += 2;
        -: 1336:	}
       21: 1337:      else if (state->hand[player][i] == gold)
        -: 1338:	{
        6: 1339:	  state->coins += 3;
        -: 1340:	}
        -: 1341:    }
        -: 1342:
        -: 1343:  //add bonus
        9: 1344:  state->coins += bonus;
        -: 1345:
        9: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
