
TESTING updateCoins():

Test player 0 with 1 treasure card(s) and 0 bonus.
PASS: state.coins = 1, expected = 1
PASS: state.coins = 2, expected = 2
PASS: state.coins = 3, expected = 3

Test player 0 with 1 treasure card(s) and 1 bonus.
PASS: state.coins = 2, expected = 2
PASS: state.coins = 3, expected = 3
PASS: state.coins = 4, expected = 4

Test player 0 with 1 treasure card(s) and 2 bonus.
PASS: state.coins = 3, expected = 3
PASS: state.coins = 4, expected = 4
PASS: state.coins = 5, expected = 5

Test player 0 with 1 treasure card(s) and 3 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 5, expected = 5
PASS: state.coins = 6, expected = 6

Test player 0 with 1 treasure card(s) and 4 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 6, expected = 6
PASS: state.coins = 7, expected = 7

Test player 0 with 1 treasure card(s) and 5 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 7, expected = 7
PASS: state.coins = 8, expected = 8

Test player 0 with 1 treasure card(s) and 6 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 8, expected = 8
PASS: state.coins = 9, expected = 9

Test player 0 with 1 treasure card(s) and 7 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 9, expected = 9
PASS: state.coins = 10, expected = 10

Test player 0 with 1 treasure card(s) and 8 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 10, expected = 10
PASS: state.coins = 11, expected = 11

Test player 0 with 1 treasure card(s) and 9 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 11, expected = 11
PASS: state.coins = 12, expected = 12

Test player 0 with 1 treasure card(s) and 10 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 12, expected = 12
PASS: state.coins = 13, expected = 13

Test player 0 with 2 treasure card(s) and 0 bonus.
PASS: state.coins = 2, expected = 2
PASS: state.coins = 4, expected = 4
PASS: state.coins = 6, expected = 6

Test player 0 with 2 treasure card(s) and 1 bonus.
PASS: state.coins = 3, expected = 3
PASS: state.coins = 5, expected = 5
PASS: state.coins = 7, expected = 7

Test player 0 with 2 treasure card(s) and 2 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 6, expected = 6
PASS: state.coins = 8, expected = 8

Test player 0 with 2 treasure card(s) and 3 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 7, expected = 7
PASS: state.coins = 9, expected = 9

Test player 0 with 2 treasure card(s) and 4 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 8, expected = 8
PASS: state.coins = 10, expected = 10

Test player 0 with 2 treasure card(s) and 5 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 9, expected = 9
PASS: state.coins = 11, expected = 11

Test player 0 with 2 treasure card(s) and 6 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 10, expected = 10
PASS: state.coins = 12, expected = 12

Test player 0 with 2 treasure card(s) and 7 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 11, expected = 11
PASS: state.coins = 13, expected = 13

Test player 0 with 2 treasure card(s) and 8 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 12, expected = 12
PASS: state.coins = 14, expected = 14

Test player 0 with 2 treasure card(s) and 9 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 13, expected = 13
PASS: state.coins = 15, expected = 15

Test player 0 with 2 treasure card(s) and 10 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 14, expected = 14
PASS: state.coins = 16, expected = 16

Test player 0 with 3 treasure card(s) and 0 bonus.
PASS: state.coins = 3, expected = 3
PASS: state.coins = 6, expected = 6
PASS: state.coins = 9, expected = 9

Test player 0 with 3 treasure card(s) and 1 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 7, expected = 7
PASS: state.coins = 10, expected = 10

Test player 0 with 3 treasure card(s) and 2 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 8, expected = 8
PASS: state.coins = 11, expected = 11

Test player 0 with 3 treasure card(s) and 3 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 9, expected = 9
PASS: state.coins = 12, expected = 12

Test player 0 with 3 treasure card(s) and 4 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 10, expected = 10
PASS: state.coins = 13, expected = 13

Test player 0 with 3 treasure card(s) and 5 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 11, expected = 11
PASS: state.coins = 14, expected = 14

Test player 0 with 3 treasure card(s) and 6 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 12, expected = 12
PASS: state.coins = 15, expected = 15

Test player 0 with 3 treasure card(s) and 7 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 13, expected = 13
PASS: state.coins = 16, expected = 16

Test player 0 with 3 treasure card(s) and 8 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 14, expected = 14
PASS: state.coins = 17, expected = 17

Test player 0 with 3 treasure card(s) and 9 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 15, expected = 15
PASS: state.coins = 18, expected = 18

Test player 0 with 3 treasure card(s) and 10 bonus.
PASS: state.coins = 13, expected = 13
PASS: state.coins = 16, expected = 16
PASS: state.coins = 19, expected = 19

Test player 0 with 4 treasure card(s) and 0 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 8, expected = 8
PASS: state.coins = 12, expected = 12

Test player 0 with 4 treasure card(s) and 1 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 9, expected = 9
PASS: state.coins = 13, expected = 13

Test player 0 with 4 treasure card(s) and 2 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 10, expected = 10
PASS: state.coins = 14, expected = 14

Test player 0 with 4 treasure card(s) and 3 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 11, expected = 11
PASS: state.coins = 15, expected = 15

Test player 0 with 4 treasure card(s) and 4 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 12, expected = 12
PASS: state.coins = 16, expected = 16

Test player 0 with 4 treasure card(s) and 5 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 13, expected = 13
PASS: state.coins = 17, expected = 17

Test player 0 with 4 treasure card(s) and 6 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 14, expected = 14
PASS: state.coins = 18, expected = 18

Test player 0 with 4 treasure card(s) and 7 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 15, expected = 15
PASS: state.coins = 19, expected = 19

Test player 0 with 4 treasure card(s) and 8 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 16, expected = 16
PASS: state.coins = 20, expected = 20

Test player 0 with 4 treasure card(s) and 9 bonus.
PASS: state.coins = 13, expected = 13
PASS: state.coins = 17, expected = 17
PASS: state.coins = 21, expected = 21

Test player 0 with 4 treasure card(s) and 10 bonus.
PASS: state.coins = 14, expected = 14
PASS: state.coins = 18, expected = 18
PASS: state.coins = 22, expected = 22

Test player 0 with 5 treasure card(s) and 0 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 10, expected = 10
PASS: state.coins = 15, expected = 15

Test player 0 with 5 treasure card(s) and 1 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 11, expected = 11
PASS: state.coins = 16, expected = 16

Test player 0 with 5 treasure card(s) and 2 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 12, expected = 12
PASS: state.coins = 17, expected = 17

Test player 0 with 5 treasure card(s) and 3 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 13, expected = 13
PASS: state.coins = 18, expected = 18

Test player 0 with 5 treasure card(s) and 4 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 14, expected = 14
PASS: state.coins = 19, expected = 19

Test player 0 with 5 treasure card(s) and 5 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 15, expected = 15
PASS: state.coins = 20, expected = 20

Test player 0 with 5 treasure card(s) and 6 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 16, expected = 16
PASS: state.coins = 21, expected = 21

Test player 0 with 5 treasure card(s) and 7 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 17, expected = 17
PASS: state.coins = 22, expected = 22

Test player 0 with 5 treasure card(s) and 8 bonus.
PASS: state.coins = 13, expected = 13
PASS: state.coins = 18, expected = 18
PASS: state.coins = 23, expected = 23

Test player 0 with 5 treasure card(s) and 9 bonus.
PASS: state.coins = 14, expected = 14
PASS: state.coins = 19, expected = 19
PASS: state.coins = 24, expected = 24

Test player 0 with 5 treasure card(s) and 10 bonus.
PASS: state.coins = 15, expected = 15
PASS: state.coins = 20, expected = 20
PASS: state.coins = 25, expected = 25

Test player 1 with 1 treasure card(s) and 0 bonus.
PASS: state.coins = 1, expected = 1
PASS: state.coins = 2, expected = 2
PASS: state.coins = 3, expected = 3

Test player 1 with 1 treasure card(s) and 1 bonus.
PASS: state.coins = 2, expected = 2
PASS: state.coins = 3, expected = 3
PASS: state.coins = 4, expected = 4

Test player 1 with 1 treasure card(s) and 2 bonus.
PASS: state.coins = 3, expected = 3
PASS: state.coins = 4, expected = 4
PASS: state.coins = 5, expected = 5

Test player 1 with 1 treasure card(s) and 3 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 5, expected = 5
PASS: state.coins = 6, expected = 6

Test player 1 with 1 treasure card(s) and 4 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 6, expected = 6
PASS: state.coins = 7, expected = 7

Test player 1 with 1 treasure card(s) and 5 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 7, expected = 7
PASS: state.coins = 8, expected = 8

Test player 1 with 1 treasure card(s) and 6 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 8, expected = 8
PASS: state.coins = 9, expected = 9

Test player 1 with 1 treasure card(s) and 7 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 9, expected = 9
PASS: state.coins = 10, expected = 10

Test player 1 with 1 treasure card(s) and 8 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 10, expected = 10
PASS: state.coins = 11, expected = 11

Test player 1 with 1 treasure card(s) and 9 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 11, expected = 11
PASS: state.coins = 12, expected = 12

Test player 1 with 1 treasure card(s) and 10 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 12, expected = 12
PASS: state.coins = 13, expected = 13

Test player 1 with 2 treasure card(s) and 0 bonus.
PASS: state.coins = 2, expected = 2
PASS: state.coins = 4, expected = 4
PASS: state.coins = 6, expected = 6

Test player 1 with 2 treasure card(s) and 1 bonus.
PASS: state.coins = 3, expected = 3
PASS: state.coins = 5, expected = 5
PASS: state.coins = 7, expected = 7

Test player 1 with 2 treasure card(s) and 2 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 6, expected = 6
PASS: state.coins = 8, expected = 8

Test player 1 with 2 treasure card(s) and 3 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 7, expected = 7
PASS: state.coins = 9, expected = 9

Test player 1 with 2 treasure card(s) and 4 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 8, expected = 8
PASS: state.coins = 10, expected = 10

Test player 1 with 2 treasure card(s) and 5 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 9, expected = 9
PASS: state.coins = 11, expected = 11

Test player 1 with 2 treasure card(s) and 6 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 10, expected = 10
PASS: state.coins = 12, expected = 12

Test player 1 with 2 treasure card(s) and 7 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 11, expected = 11
PASS: state.coins = 13, expected = 13

Test player 1 with 2 treasure card(s) and 8 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 12, expected = 12
PASS: state.coins = 14, expected = 14

Test player 1 with 2 treasure card(s) and 9 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 13, expected = 13
PASS: state.coins = 15, expected = 15

Test player 1 with 2 treasure card(s) and 10 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 14, expected = 14
PASS: state.coins = 16, expected = 16

Test player 1 with 3 treasure card(s) and 0 bonus.
PASS: state.coins = 3, expected = 3
PASS: state.coins = 6, expected = 6
PASS: state.coins = 9, expected = 9

Test player 1 with 3 treasure card(s) and 1 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 7, expected = 7
PASS: state.coins = 10, expected = 10

Test player 1 with 3 treasure card(s) and 2 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 8, expected = 8
PASS: state.coins = 11, expected = 11

Test player 1 with 3 treasure card(s) and 3 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 9, expected = 9
PASS: state.coins = 12, expected = 12

Test player 1 with 3 treasure card(s) and 4 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 10, expected = 10
PASS: state.coins = 13, expected = 13

Test player 1 with 3 treasure card(s) and 5 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 11, expected = 11
PASS: state.coins = 14, expected = 14

Test player 1 with 3 treasure card(s) and 6 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 12, expected = 12
PASS: state.coins = 15, expected = 15

Test player 1 with 3 treasure card(s) and 7 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 13, expected = 13
PASS: state.coins = 16, expected = 16

Test player 1 with 3 treasure card(s) and 8 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 14, expected = 14
PASS: state.coins = 17, expected = 17

Test player 1 with 3 treasure card(s) and 9 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 15, expected = 15
PASS: state.coins = 18, expected = 18

Test player 1 with 3 treasure card(s) and 10 bonus.
PASS: state.coins = 13, expected = 13
PASS: state.coins = 16, expected = 16
PASS: state.coins = 19, expected = 19

Test player 1 with 4 treasure card(s) and 0 bonus.
PASS: state.coins = 4, expected = 4
PASS: state.coins = 8, expected = 8
PASS: state.coins = 12, expected = 12

Test player 1 with 4 treasure card(s) and 1 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 9, expected = 9
PASS: state.coins = 13, expected = 13

Test player 1 with 4 treasure card(s) and 2 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 10, expected = 10
PASS: state.coins = 14, expected = 14

Test player 1 with 4 treasure card(s) and 3 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 11, expected = 11
PASS: state.coins = 15, expected = 15

Test player 1 with 4 treasure card(s) and 4 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 12, expected = 12
PASS: state.coins = 16, expected = 16

Test player 1 with 4 treasure card(s) and 5 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 13, expected = 13
PASS: state.coins = 17, expected = 17

Test player 1 with 4 treasure card(s) and 6 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 14, expected = 14
PASS: state.coins = 18, expected = 18

Test player 1 with 4 treasure card(s) and 7 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 15, expected = 15
PASS: state.coins = 19, expected = 19

Test player 1 with 4 treasure card(s) and 8 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 16, expected = 16
PASS: state.coins = 20, expected = 20

Test player 1 with 4 treasure card(s) and 9 bonus.
PASS: state.coins = 13, expected = 13
PASS: state.coins = 17, expected = 17
PASS: state.coins = 21, expected = 21

Test player 1 with 4 treasure card(s) and 10 bonus.
PASS: state.coins = 14, expected = 14
PASS: state.coins = 18, expected = 18
PASS: state.coins = 22, expected = 22

Test player 1 with 5 treasure card(s) and 0 bonus.
PASS: state.coins = 5, expected = 5
PASS: state.coins = 10, expected = 10
PASS: state.coins = 15, expected = 15

Test player 1 with 5 treasure card(s) and 1 bonus.
PASS: state.coins = 6, expected = 6
PASS: state.coins = 11, expected = 11
PASS: state.coins = 16, expected = 16

Test player 1 with 5 treasure card(s) and 2 bonus.
PASS: state.coins = 7, expected = 7
PASS: state.coins = 12, expected = 12
PASS: state.coins = 17, expected = 17

Test player 1 with 5 treasure card(s) and 3 bonus.
PASS: state.coins = 8, expected = 8
PASS: state.coins = 13, expected = 13
PASS: state.coins = 18, expected = 18

Test player 1 with 5 treasure card(s) and 4 bonus.
PASS: state.coins = 9, expected = 9
PASS: state.coins = 14, expected = 14
PASS: state.coins = 19, expected = 19

Test player 1 with 5 treasure card(s) and 5 bonus.
PASS: state.coins = 10, expected = 10
PASS: state.coins = 15, expected = 15
PASS: state.coins = 20, expected = 20

Test player 1 with 5 treasure card(s) and 6 bonus.
PASS: state.coins = 11, expected = 11
PASS: state.coins = 16, expected = 16
PASS: state.coins = 21, expected = 21

Test player 1 with 5 treasure card(s) and 7 bonus.
PASS: state.coins = 12, expected = 12
PASS: state.coins = 17, expected = 17
PASS: state.coins = 22, expected = 22

Test player 1 with 5 treasure card(s) and 8 bonus.
PASS: state.coins = 13, expected = 13
PASS: state.coins = 18, expected = 18
PASS: state.coins = 23, expected = 23

Test player 1 with 5 treasure card(s) and 9 bonus.
PASS: state.coins = 14, expected = 14
PASS: state.coins = 19, expected = 19
PASS: state.coins = 24, expected = 24

Test player 1 with 5 treasure card(s) and 10 bonus.
PASS: state.coins = 15, expected = 15
PASS: state.coins = 20, expected = 20
PASS: state.coins = 25, expected = 25
File 'unittest1.c'
Lines executed:91.18% of 34
unittest1.c:creating 'unittest1.c.gcov'


TESTING scoreFor():
Test player 1 with victory cards of type 0.
HAND
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: -1  Actual Score: -1
PASS: Expected Score: -2  Actual Score: -2
PASS: Expected Score: -3  Actual Score: -3
PASS: Expected Score: -4  Actual Score: -4
DISCARD
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: -1  Actual Score: -1
PASS: Expected Score: -2  Actual Score: -2
PASS: Expected Score: -3  Actual Score: -3
PASS: Expected Score: -4  Actual Score: -4
PASS: Expected Score: -5  Actual Score: -5
PASS: Expected Score: -6  Actual Score: -6
PASS: Expected Score: -7  Actual Score: -7
PASS: Expected Score: -8  Actual Score: -8
PASS: Expected Score: -9  Actual Score: -9
PASS: Expected Score: -10  Actual Score: -10
DECK
PASS: Expected Score: 0  Actual Score: 0
FAIL: Expected Score: -1  Actual Score: 0
FAIL: Expected Score: -2  Actual Score: 0
FAIL: Expected Score: -3  Actual Score: 0
FAIL: Expected Score: -4  Actual Score: 0
FAIL: Expected Score: -5  Actual Score: 0
FAIL: Expected Score: -6  Actual Score: 0
FAIL: Expected Score: -7  Actual Score: 0
FAIL: Expected Score: -8  Actual Score: 0
FAIL: Expected Score: -9  Actual Score: 0
FAIL: Expected Score: -10  Actual Score: 0

Test player 1 with victory cards of type 1.
HAND
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 1  Actual Score: 1
PASS: Expected Score: 2  Actual Score: 2
PASS: Expected Score: 3  Actual Score: 3
PASS: Expected Score: 4  Actual Score: 4
DISCARD
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 1  Actual Score: 1
PASS: Expected Score: 2  Actual Score: 2
PASS: Expected Score: 3  Actual Score: 3
PASS: Expected Score: 4  Actual Score: 4
PASS: Expected Score: 5  Actual Score: 5
PASS: Expected Score: 6  Actual Score: 6
PASS: Expected Score: 7  Actual Score: 7
PASS: Expected Score: 8  Actual Score: 8
PASS: Expected Score: 9  Actual Score: 9
PASS: Expected Score: 10  Actual Score: 10
DECK
PASS: Expected Score: 0  Actual Score: 0
FAIL: Expected Score: 1  Actual Score: 0
FAIL: Expected Score: 2  Actual Score: 0
FAIL: Expected Score: 3  Actual Score: 0
FAIL: Expected Score: 4  Actual Score: 0
FAIL: Expected Score: 5  Actual Score: 0
FAIL: Expected Score: 6  Actual Score: 0
FAIL: Expected Score: 7  Actual Score: 0
FAIL: Expected Score: 8  Actual Score: 0
FAIL: Expected Score: 9  Actual Score: 0
FAIL: Expected Score: 10  Actual Score: 0

Test player 1 with victory cards of type 2.
HAND
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 3  Actual Score: 3
PASS: Expected Score: 6  Actual Score: 6
PASS: Expected Score: 9  Actual Score: 9
PASS: Expected Score: 12  Actual Score: 12
DISCARD
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 3  Actual Score: 3
PASS: Expected Score: 6  Actual Score: 6
PASS: Expected Score: 9  Actual Score: 9
PASS: Expected Score: 12  Actual Score: 12
PASS: Expected Score: 15  Actual Score: 15
PASS: Expected Score: 18  Actual Score: 18
PASS: Expected Score: 21  Actual Score: 21
PASS: Expected Score: 24  Actual Score: 24
PASS: Expected Score: 27  Actual Score: 27
PASS: Expected Score: 30  Actual Score: 30
DECK
PASS: Expected Score: 0  Actual Score: 0
FAIL: Expected Score: 3  Actual Score: 0
FAIL: Expected Score: 6  Actual Score: 0
FAIL: Expected Score: 9  Actual Score: 0
FAIL: Expected Score: 12  Actual Score: 0
FAIL: Expected Score: 15  Actual Score: 0
FAIL: Expected Score: 18  Actual Score: 0
FAIL: Expected Score: 21  Actual Score: 0
FAIL: Expected Score: 24  Actual Score: 0
FAIL: Expected Score: 27  Actual Score: 0
FAIL: Expected Score: 30  Actual Score: 0

Test player 1 with victory cards of type 3.
HAND
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 6  Actual Score: 6
PASS: Expected Score: 12  Actual Score: 12
PASS: Expected Score: 18  Actual Score: 18
PASS: Expected Score: 24  Actual Score: 24
DISCARD
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 6  Actual Score: 6
PASS: Expected Score: 12  Actual Score: 12
PASS: Expected Score: 18  Actual Score: 18
PASS: Expected Score: 24  Actual Score: 24
PASS: Expected Score: 30  Actual Score: 30
PASS: Expected Score: 36  Actual Score: 36
PASS: Expected Score: 42  Actual Score: 42
PASS: Expected Score: 48  Actual Score: 48
PASS: Expected Score: 54  Actual Score: 54
PASS: Expected Score: 60  Actual Score: 60
DECK
PASS: Expected Score: 0  Actual Score: 0
FAIL: Expected Score: 6  Actual Score: 0
FAIL: Expected Score: 12  Actual Score: 0
FAIL: Expected Score: 18  Actual Score: 0
FAIL: Expected Score: 24  Actual Score: 0
FAIL: Expected Score: 30  Actual Score: 0
FAIL: Expected Score: 36  Actual Score: 0
FAIL: Expected Score: 42  Actual Score: 0
FAIL: Expected Score: 48  Actual Score: 0
FAIL: Expected Score: 54  Actual Score: 0
FAIL: Expected Score: 60  Actual Score: 0

Test player 1 with victory cards of type 10.
HAND
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
DISCARD
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
DECK
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 0  Actual Score: 0

Test player 1 with victory cards of type 16.
HAND
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 1  Actual Score: 1
PASS: Expected Score: 2  Actual Score: 2
PASS: Expected Score: 3  Actual Score: 3
PASS: Expected Score: 4  Actual Score: 4
DISCARD
PASS: Expected Score: 0  Actual Score: 0
PASS: Expected Score: 1  Actual Score: 1
PASS: Expected Score: 2  Actual Score: 2
PASS: Expected Score: 3  Actual Score: 3
PASS: Expected Score: 4  Actual Score: 4
PASS: Expected Score: 5  Actual Score: 5
PASS: Expected Score: 6  Actual Score: 6
PASS: Expected Score: 7  Actual Score: 7
PASS: Expected Score: 8  Actual Score: 8
PASS: Expected Score: 9  Actual Score: 9
PASS: Expected Score: 10  Actual Score: 10
DECK
PASS: Expected Score: 0  Actual Score: 0
FAIL: Expected Score: 1  Actual Score: 0
FAIL: Expected Score: 2  Actual Score: 0
FAIL: Expected Score: 3  Actual Score: 0
FAIL: Expected Score: 4  Actual Score: 0
FAIL: Expected Score: 5  Actual Score: 0
FAIL: Expected Score: 6  Actual Score: 0
FAIL: Expected Score: 7  Actual Score: 0
FAIL: Expected Score: 8  Actual Score: 0
FAIL: Expected Score: 9  Actual Score: 0
FAIL: Expected Score: 10  Actual Score: 0
File 'unittest2.c'
Lines executed:93.51% of 77
unittest2.c:creating 'unittest2.c.gcov'


TESTING isGameOver():
Testing 1 province remaining.
PASS: Game not over.

Testing 0 provinces remaining.
PASS: Game over.

Testing no empty piles.
PASS: Game not over.

Testing one empty pile. (Skipping provinces)
PASS: No single non-province empty pile ends the game.

Testing two empty piles. (Skipping provinces)
PASS: No two empty non-province piles ends the game.

Testing three empty piles. (Including provinces)
PASS: Any combination of three empty piles ends the game.
File 'unittest3.c'
Lines executed:100.00% of 51
unittest3.c:creating 'unittest3.c.gcov'


TESTING gainCard()

Test one card remaining.
PASS: gainCard successful with one card remaining.

Test no cards remaining.
PASS: gainCard terminates early with no supply remaining.

Test supply decrementing.
PASS: supply decrements by one when gainCard is called.

Test that gained card goes to correct destination.

Test that chosen card goes to the player's hand.
PASS: chosen card goes to the player's hand and handCount increments in each case.

Test that chosen card goes to the player's deck.
PASS: chosen card goes to the player's deck and deckCount increments in each case.

Test that chosen card goes to the player's discard pile.
PASS: chosen card goes to the player's discard pile and discardCount increments in each case.
File 'unittest4.c'
Lines executed:100.00% of 63
unittest4.c:creating 'unittest4.c.gcov'


TESTING Smithy cardEffect
Testing Deck Count
Starting Deck Count 3 FAIL: Expected Deckcount: 0  Actual: 1
Starting Deck Count 4 FAIL: Expected Deckcount: 1  Actual: 2
Starting Deck Count 5 FAIL: Expected Deckcount: 2  Actual: 3
Starting Deck Count 6 FAIL: Expected Deckcount: 3  Actual: 4
Starting Deck Count 7 FAIL: Expected Deckcount: 4  Actual: 5
Starting Deck Count 8 FAIL: Expected Deckcount: 5  Actual: 6
Starting Deck Count 9 FAIL: Expected Deckcount: 6  Actual: 7
Starting Deck Count 10 FAIL: Expected Deckcount: 7  Actual: 8
Starting Deck Count 11 FAIL: Expected Deckcount: 8  Actual: 9
Testing Hand Count
Starting Hand Count 1 FAIL: Expected Handcount: 3  Actual: 2
Starting Hand Count 2 FAIL: Expected Handcount: 4  Actual: 3
Starting Hand Count 3 FAIL: Expected Handcount: 5  Actual: 4
Starting Hand Count 4 FAIL: Expected Handcount: 6  Actual: 5
Testing Smithy Discard
PASS: Smithy no longer in player's hand.
PASS: Smithy no longer in player's hand.
PASS: Smithy no longer in player's hand.
PASS: Smithy no longer in player's hand.
PASS: Smithy no longer in player's hand.
Testing Other Players' State
PASS: Player 1's deck and hand unchanged.
PASS: Player 2's deck and hand unchanged.
PASS: Player 3's deck and hand unchanged.
PASS: Player 1's deck and hand unchanged.
PASS: Player 2's deck and hand unchanged.
PASS: Player 3's deck and hand unchanged.
PASS: Player 1's deck and hand unchanged.
PASS: Player 2's deck and hand unchanged.
PASS: Player 3's deck and hand unchanged.
PASS: Player 1's deck and hand unchanged.
PASS: Player 2's deck and hand unchanged.
PASS: Player 3's deck and hand unchanged.
Testing Supply Counts
PASS: All supply counts unchanged.
File 'cardtest1.c'
Lines executed:92.78% of 97
cardtest1.c:creating 'cardtest1.c.gcov'


TESTING Adventurer cardEffect
Testing Hand Count
FAIL: Expected Value: 6  Actual Value: 8
Testing Deck Count
PASS: Expected Value: <= 3  Actual Value: 2
Testing Added Cards
PASS: Cards Added are Coins: 4, 4
Testing Discard and Deck Counts
FAIL: Expected Value: 2  Actual Value: 3
Testing Other Players' Hand Count / Deck Count
PASS: Other players' counts unchanged.
Test Supply Counts
PASS: All supply counts unchanged.
File 'cardtest2.c'
Lines executed:77.78% of 45
cardtest2.c:creating 'cardtest2.c.gcov'


TESTING Village cardEffect
Testing Hand Count
PASS: Expected Value: 5  Actual Value: 5
Testing Discard and Deck Counts
PASS: Expected Value: 4  Actual Value: 4
Testing Actions Count
FAIL: Expected Value: 2  Actual Value: 6
Testing other players' deck / discard / hand counts
PASS: Other players' states unchanged
Test Supply Counts
PASS: All supply counts unchanged.
File 'cardtest3.c'
Lines executed:88.57% of 35
cardtest3.c:creating 'cardtest3.c.gcov'


TESTING Steward cardEffect

Testing Choice: Draw Two Cards
Testing Hand Count
PASS: Expected Value: 6  Actual Value: 6
Testing Deck Count
PASS: Expected Value: 3  Actual Value: 3
Testing Coin Count
PASS: Expected Value: 4  Actual Value: 4

Testing Choice: Two Coins
Testing Hand Count
PASS: Expected Value: 4  Actual Value: 4
Testing Deck Count
PASS: Expected Value: 5  Actual Value: 5
Testing Coin Count
PASS: Expected Value: 6  Actual Value: 6

Testing Choice: Trash Two Cards
Starting hand:
0: 18
1: 1
2: 13
3: 5
4: 4
Removing: 1, 13
Cards remaining:
0: 4
1: 5
PASS: Trashed cards removed from hand
Starting hand:
0: 18
1: 1
2: 13
3: 5
4: 4
Removing: 1, 5
Cards remaining:
0: 13
1: 4
PASS: Trashed cards removed from hand
Starting hand:
0: 18
1: 1
2: 13
3: 5
4: 4
Removing: 1, 4
Cards remaining:
0: 13
1: 5
PASS: Trashed cards removed from hand
Starting hand:
0: 18
1: 1
2: 13
3: 5
4: 4
Removing: 13, 5
Cards remaining:
0: 4
1: 1
PASS: Trashed cards removed from hand
Starting hand:
0: 18
1: 1
2: 13
3: 5
4: 4
Removing: 13, 4
Cards remaining:
0: 5
1: 1
PASS: Trashed cards removed from hand
Starting hand:
0: 18
1: 1
2: 13
3: 5
4: 4
Removing: 5, 4
Cards remaining:
0: 13
1: 1
PASS: Trashed cards removed from hand

Testing Hand Count
PASS: Expected Value: 2  Actual Value: 2
Testing Deck Count
PASS: Expected Value: 5  Actual Value: 5
Testing Coin Count
PASS: Expected Value: 4  Actual Value: 4
File 'cardtest4.c'
Lines executed:89.16% of 83
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:36.77% of 582
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int council_roomCard(int handPos, int currentPlayer, struct gameState *state)
        -:    9:{
        -:   10:	int i;
        -:   11:
        -:   12:	//+4 Cards
    #####:   13:    for (i = 0; i < 4; i++)
        -:   14:	{
    #####:   15:	  	drawCard(currentPlayer, state);
        -:   16:	}
        -:   17:			
        -:   18:    //+1 Buy
    #####:   19:    state->numBuys++;
        -:   20:			
        -:   21:    //Each other player draws a card
    #####:   22:    for (i = 0; i < state->numPlayers; i++)
        -:   23:	{
    #####:   24:	  	if ( i != currentPlayer )
        -:   25:	    {
    #####:   26:	      	drawCard(i, state);
        -:   27:	    }
        -:   28:	}
        -:   29:			
        -:   30:    //put played card in played card pile
    #####:   31:    discardCard(handPos, currentPlayer, state, 0);
        -:   32:			
    #####:   33:    return 0;
        -:   34:}
        -:   35:
    #####:   36:int cutpurseCard(int handPos, int currentPlayer, struct gameState *state)
        -:   37:{
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int k;
        -:   41:
    #####:   42:	updateCoins(currentPlayer, state, 2);
    #####:   43:    for (i = 1; i < state->numPlayers; i++)
        -:   44:	{
    #####:   45:	  	if (i != currentPlayer)
        -:   46:	    {
    #####:   47:	      	for (j = 0; j < state->handCount[i]; j++)
        -:   48:			{
    #####:   49:		  		if (state->hand[i][j] == copper)
        -:   50:		    	{
    #####:   51:		      		discardCard(j, i, state, 0);
    #####:   52:		      		break;
        -:   53:		    	}
    #####:   54:		  		if (j == state->handCount[i])
        -:   55:		    	{
    #####:   56:		      		for (k = 0; k < state->handCount[i]; k++)
        -:   57:					{
    #####:   58:						if (DEBUG)
        -:   59:			    			printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:   60:					}	
    #####:   61:		      		break;
        -:   62:		    	}		
        -:   63:			}		
        -:   64:	    }	
        -:   65:	}				
        -:   66:
        -:   67:    //discard played card from hand
    #####:   68:    discardCard(handPos, currentPlayer, state, 0);			
        -:   69:
    #####:   70:    return 0;
        -:   71:}
        -:   72:
        1:   73:int villageCard(int handPos, int currentPlayer, struct gameState *state)
        -:   74:{
        -:   75:      //+1 Card
        1:   76:      drawCard(currentPlayer, state);
        -:   77:			
        -:   78:      //+2 Actions
        1:   79:      state->numActions = state->coins + 2;
        -:   80:			
        -:   81:      //discard played card from hand
        1:   82:      discardCard(handPos, currentPlayer, state, 0);
        1:   83:      return 0;
        -:   84:}
        -:   85:
       23:   86:int smithyCard(int handPos, int currentPlayer, struct gameState *state)
        -:   87:{
        -:   88:	int i;
        -:   89:
        -:   90:	//+3 Cards
       69:   91:    for (i = 1; i < 3; i++)
        -:   92:	{
       46:   93:		drawCard(currentPlayer, state);
        -:   94:	}
        -:   95:			
        -:   96:    //discard card from hand
       23:   97:    discardCard(handPos, currentPlayer, state, 0);
       23:   98:    return 0;
        -:   99:}
        -:  100:
        1:  101:int adventurerCard(int currentPlayer, struct gameState *state)
        -:  102:{
        1:  103:	int drawntreasure = 0;
        -:  104:	int cardDrawn;
        -:  105:	int temphand[MAX_HAND];
        1:  106:	int z = 0;	// this is the counter for the temp hand
        -:  107:
        5:  108:  	while(drawntreasure <= 2)
        -:  109:  	{
        3:  110:		if (state->deckCount[currentPlayer] < 1)	//if the deck is empty we need to shuffle discard and add to deck
        -:  111:		{
    #####:  112:	  		shuffle(currentPlayer, state);
        -:  113:		}
        3:  114:		drawCard(currentPlayer, state);
        3:  115:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];	//top card of hand is most recently drawn card.
        6:  116:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        3:  117:	  		drawntreasure++;
        -:  118:		else
        -:  119:		{
    #####:  120:	  		temphand[z]=cardDrawn;
    #####:  121:	  		state->handCount[currentPlayer]--;	//this should just remove the top card (the most recently drawn one).
    #####:  122:	  		z++;
        -:  123:		}
        -:  124:    }
        -:  125:      
        2:  126:    while(z-1>=0)
        -:  127:    {
    #####:  128:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  129:		z=z-1;
        -:  130:    }
        -:  131:
        1:  132:    return 0;
        -:  133:}
        -:  134:
    13440:  135:int compare(const void* a, const void* b) {
    13440:  136:  if (*(int*)a > *(int*)b)
    #####:  137:    return 1;
    13440:  138:  if (*(int*)a < *(int*)b)
     3584:  139:    return -1;
     9856:  140:  return 0;
        -:  141:}
        -:  142:
    #####:  143:struct gameState* newGame() {
    #####:  144:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  145:  return g;
        -:  146:}
        -:  147:
    #####:  148:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  149:		  int k8, int k9, int k10) {
    #####:  150:  int* k = malloc(10 * sizeof(int));
    #####:  151:  k[0] = k1;
    #####:  152:  k[1] = k2;
    #####:  153:  k[2] = k3;
    #####:  154:  k[3] = k4;
    #####:  155:  k[4] = k5;
    #####:  156:  k[5] = k6;
    #####:  157:  k[6] = k7;
    #####:  158:  k[7] = k8;
    #####:  159:  k[8] = k9;
    #####:  160:  k[9] = k10;
    #####:  161:  return k;
        -:  162:}
        -:  163:
      400:  164:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  165:		   struct gameState *state) {
        -:  166:
        -:  167:  int i;
        -:  168:  int j;
        -:  169:  int it;			
        -:  170:  //set up random number generator
      400:  171:  SelectStream(1);
      400:  172:  PutSeed((long)randomSeed);
        -:  173:  
        -:  174:  //check number of players
      400:  175:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  176:    {
    #####:  177:      return -1;
        -:  178:    }
        -:  179:
        -:  180:  //set number of players
      400:  181:  state->numPlayers = numPlayers;
        -:  182:
        -:  183:  //check selected kingdom cards are different
     4400:  184:  for (i = 0; i < 10; i++)
        -:  185:    {
    44000:  186:      for (j = 0; j < 10; j++)
        -:  187:        {
    40000:  188:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  189:	    {
    #####:  190:	      return -1;
        -:  191:	    }
        -:  192:        }
        -:  193:    }
        -:  194:
        -:  195:
        -:  196:  //initialize supply
        -:  197:  ///////////////////////////////
        -:  198:
        -:  199:  //set number of Curse cards
      400:  200:  if (numPlayers == 2)
        -:  201:    {
      352:  202:      state->supplyCount[curse] = 10;
        -:  203:    }
       48:  204:  else if (numPlayers == 3)
        -:  205:    {
    #####:  206:      state->supplyCount[curse] = 20;
        -:  207:    }
        -:  208:  else
        -:  209:    {
       48:  210:      state->supplyCount[curse] = 30;
        -:  211:    }
        -:  212:
        -:  213:  //set number of Victory cards
      400:  214:  if (numPlayers == 2)
        -:  215:    {
      352:  216:      state->supplyCount[estate] = 8;
      352:  217:      state->supplyCount[duchy] = 8;
      352:  218:      state->supplyCount[province] = 8;
        -:  219:    }
        -:  220:  else
        -:  221:    {
       48:  222:      state->supplyCount[estate] = 12;
       48:  223:      state->supplyCount[duchy] = 12;
       48:  224:      state->supplyCount[province] = 12;
        -:  225:    }
        -:  226:
        -:  227:  //set number of Treasure cards
      400:  228:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      400:  229:  state->supplyCount[silver] = 40;
      400:  230:  state->supplyCount[gold] = 30;
        -:  231:
        -:  232:  //set number of Kingdom cards
     8400:  233:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  234:    {
    66000:  235:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  236:	{
    62000:  237:	  if (kingdomCards[j] == i)
        -:  238:	    {
        -:  239:	      //check if card is a 'Victory' Kingdom card
     4800:  240:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  241:		{
      800:  242:		  if (numPlayers == 2){ 
      704:  243:		    state->supplyCount[i] = 8; 
        -:  244:		  }
       96:  245:		  else{ state->supplyCount[i] = 12; }
        -:  246:		}
        -:  247:	      else
        -:  248:		{
     3200:  249:		  state->supplyCount[i] = 10;
        -:  250:		}
     4000:  251:	      break;
        -:  252:	    }
        -:  253:	  else    //card is not in the set choosen for the game
        -:  254:	    {
    58000:  255:	      state->supplyCount[i] = -1;
        -:  256:	    }
        -:  257:	}
        -:  258:
        -:  259:    }
        -:  260:
        -:  261:  ////////////////////////
        -:  262:  //supply intilization complete
        -:  263:
        -:  264:  //set player decks
     1296:  265:  for (i = 0; i < numPlayers; i++)
        -:  266:    {
      896:  267:      state->deckCount[i] = 0;
     3584:  268:      for (j = 0; j < 3; j++)
        -:  269:	{
     2688:  270:	  state->deck[i][j] = estate;
     2688:  271:	  state->deckCount[i]++;
        -:  272:	}
     7168:  273:      for (j = 3; j < 10; j++)
        -:  274:	{
     6272:  275:	  state->deck[i][j] = copper;
     6272:  276:	  state->deckCount[i]++;		
        -:  277:	}
        -:  278:    }
        -:  279:
        -:  280:  //shuffle player decks
     1296:  281:  for (i = 0; i < numPlayers; i++)
        -:  282:    {
      896:  283:      if ( shuffle(i, state) < 0 )
        -:  284:	{
    #####:  285:	  return -1;
        -:  286:	}
        -:  287:    }
        -:  288:
        -:  289:  //draw player hands
     1296:  290:  for (i = 0; i < numPlayers; i++)
        -:  291:    {  
        -:  292:      //initialize hand size to zero
      896:  293:      state->handCount[i] = 0;
      896:  294:      state->discardCount[i] = 0;
        -:  295:      //draw 5 cards
        -:  296:      // for (j = 0; j < 5; j++)
        -:  297:      //	{
        -:  298:      //	  drawCard(i, state);
        -:  299:      //	}
        -:  300:    }
        -:  301:  
        -:  302:  //set embargo tokens to 0 for all supply piles
    11200:  303:  for (i = 0; i <= treasure_map; i++)
        -:  304:    {
    10800:  305:      state->embargoTokens[i] = 0;
        -:  306:    }
        -:  307:
        -:  308:  //initialize first player's turn
      400:  309:  state->outpostPlayed = 0;
      400:  310:  state->phase = 0;
      400:  311:  state->numActions = 1;
      400:  312:  state->numBuys = 1;
      400:  313:  state->playedCardCount = 0;
      400:  314:  state->whoseTurn = 0;
      400:  315:  state->handCount[state->whoseTurn] = 0;
        -:  316:  //int it; move to top
        -:  317:
        -:  318:  //Moved draw cards to here, only drawing at the start of a turn
     2400:  319:  for (it = 0; it < 5; it++){
     2000:  320:    drawCard(state->whoseTurn, state);
        -:  321:  }
        -:  322:
      400:  323:  updateCoins(state->whoseTurn, state, 0);
        -:  324:
      400:  325:  return 0;
        -:  326:}
        -:  327:
      896:  328:int shuffle(int player, struct gameState *state) {
        -:  329: 
        -:  330:
        -:  331:  int newDeck[MAX_DECK];
      896:  332:  int newDeckPos = 0;
        -:  333:  int card;
        -:  334:  int i;
        -:  335:
      896:  336:  if (state->deckCount[player] < 1)
    #####:  337:    return -1;
      896:  338:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  339:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  340:
    10752:  341:  while (state->deckCount[player] > 0) {
     8960:  342:    card = floor(Random() * state->deckCount[player]);
     8960:  343:    newDeck[newDeckPos] = state->deck[player][card];
     8960:  344:    newDeckPos++;
    31312:  345:    for (i = card; i < state->deckCount[player]-1; i++) {
    22352:  346:      state->deck[player][i] = state->deck[player][i+1];
        -:  347:    }
     8960:  348:    state->deckCount[player]--;
        -:  349:  }
     9856:  350:  for (i = 0; i < newDeckPos; i++) {
     8960:  351:    state->deck[player][i] = newDeck[i];
     8960:  352:    state->deckCount[player]++;
        -:  353:  }
        -:  354:
      896:  355:  return 0;
        -:  356:}
        -:  357:
    #####:  358:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  359:{	
        -:  360:  int card;
    #####:  361:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  362:
        -:  363:  //check if it is the right phase
    #####:  364:  if (state->phase != 0)
        -:  365:    {
    #####:  366:      return -1;
        -:  367:    }
        -:  368:	
        -:  369:  //check if player has enough actions
    #####:  370:  if ( state->numActions < 1 )
        -:  371:    {
    #####:  372:      return -1;
        -:  373:    }
        -:  374:	
        -:  375:  //get card played
    #####:  376:  card = handCard(handPos, state);
        -:  377:	
        -:  378:  //check if selected card is an action
    #####:  379:  if ( card < adventurer || card > treasure_map )
        -:  380:    {
    #####:  381:      return -1;
        -:  382:    }
        -:  383:	
        -:  384:  //play card
    #####:  385:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  386:    {
    #####:  387:      return -1;
        -:  388:    }
        -:  389:	
        -:  390:  //reduce number of actions
    #####:  391:  state->numActions--;
        -:  392:
        -:  393:  //update coins (Treasure cards may be added with card draws)
    #####:  394:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  395:	
    #####:  396:  return 0;
        -:  397:}
        -:  398:
    #####:  399:int buyCard(int supplyPos, struct gameState *state) {
        -:  400:  int who;
    #####:  401:  if (DEBUG){
        -:  402:    printf("Entering buyCard...\n");
        -:  403:  }
        -:  404:
        -:  405:  // I don't know what to do about the phase thing.
        -:  406:
    #####:  407:  who = state->whoseTurn;
        -:  408:
    #####:  409:  if (state->numBuys < 1){
    #####:  410:    if (DEBUG)
        -:  411:      printf("You do not have any buys left\n");
    #####:  412:    return -1;
    #####:  413:  } else if (supplyCount(supplyPos, state) <1){
    #####:  414:    if (DEBUG)
        -:  415:      printf("There are not any of that type of card left\n");
    #####:  416:    return -1;
    #####:  417:  } else if (state->coins < getCost(supplyPos)){
    #####:  418:    if (DEBUG) 
        -:  419:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  420:    return -1;
        -:  421:  } else {
    #####:  422:    state->phase=1;
        -:  423:    //state->supplyCount[supplyPos]--;
    #####:  424:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  425:  
    #####:  426:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  427:    state->numBuys--;
    #####:  428:    if (DEBUG)
        -:  429:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  430:  }
        -:  431:
        -:  432:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  433:  //state->discardCount[who]++;
        -:  434:    
    #####:  435:  return 0;
        -:  436:}
        -:  437:
    #####:  438:int numHandCards(struct gameState *state) {
    #####:  439:  return state->handCount[ whoseTurn(state) ];
        -:  440:}
        -:  441:
    #####:  442:int handCard(int handPos, struct gameState *state) {
    #####:  443:  int currentPlayer = whoseTurn(state);
    #####:  444:  return state->hand[currentPlayer][handPos];
        -:  445:}
        -:  446:
      150:  447:int supplyCount(int card, struct gameState *state) {
      150:  448:  return state->supplyCount[card];
        -:  449:}
        -:  450:
       92:  451:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  452:  int i;
       92:  453:  int count = 0;
        -:  454:
      957:  455:  for (i = 0; i < state->deckCount[player]; i++)
        -:  456:    {
      865:  457:      if (state->deck[player][i] == card) count++;
        -:  458:    }
        -:  459:
      132:  460:  for (i = 0; i < state->handCount[player]; i++)
        -:  461:    {
       40:  462:      if (state->hand[player][i] == card) count++;
        -:  463:    }
        -:  464:
      532:  465:  for (i = 0; i < state->discardCount[player]; i++)
        -:  466:    {
      440:  467:      if (state->discard[player][i] == card) count++;
        -:  468:    }
        -:  469:
       92:  470:  return count;
        -:  471:}
        -:  472:
       34:  473:int whoseTurn(struct gameState *state) {
       34:  474:  return state->whoseTurn;
        -:  475:}
        -:  476:
    #####:  477:int endTurn(struct gameState *state) {
        -:  478:  int k;
        -:  479:  int i;
    #####:  480:  int currentPlayer = whoseTurn(state);
        -:  481:  
        -:  482:  //Discard hand
    #####:  483:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  484:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  485:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  486:  }
    #####:  487:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  488:    
        -:  489:  //Code for determining the player
    #####:  490:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  491:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  492:  }
        -:  493:  else{
    #####:  494:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  495:  }
        -:  496:
    #####:  497:  state->outpostPlayed = 0;
    #####:  498:  state->phase = 0;
    #####:  499:  state->numActions = 1;
    #####:  500:  state->coins = 0;
    #####:  501:  state->numBuys = 1;
    #####:  502:  state->playedCardCount = 0;
    #####:  503:  state->handCount[state->whoseTurn] = 0;
        -:  504:
        -:  505:  //int k; move to top
        -:  506:  //Next player draws hand
    #####:  507:  for (k = 0; k < 5; k++){
    #####:  508:    drawCard(state->whoseTurn, state);//Draw a card
        -:  509:  }
        -:  510:
        -:  511:  //Update money
    #####:  512:  updateCoins(state->whoseTurn, state , 0);
        -:  513:
    #####:  514:  return 0;
        -:  515:}
        -:  516:
    14379:  517:int isGameOver(struct gameState *state) {
        -:  518:  int i;
        -:  519:  int j;
        -:  520:	
        -:  521:  //if stack of Province cards is empty, the game ends
    14379:  522:  if (state->supplyCount[province] == 0)
        -:  523:    {
     1657:  524:      return 1;
        -:  525:    }
        -:  526:
        -:  527:  //if three supply pile are at 0, the game ends
    12722:  528:  j = 0;
   330772:  529:  for (i = 0; i < 25; i++)
        -:  530:    {
   318050:  531:      if (state->supplyCount[i] == 0)
        -:  532:	{
    37560:  533:	  j++;
        -:  534:	}
        -:  535:    }
    12722:  536:  if ( j >= 3)
        -:  537:    {
    12144:  538:      return 1;
        -:  539:    }
        -:  540:
      578:  541:  return 0;
        -:  542:}
        -:  543:
      162:  544:int scoreFor (int player, struct gameState *state) {
        -:  545:
        -:  546:  int i;
      162:  547:  int score = 0;
        -:  548:  //score from hand
      222:  549:  for (i = 0; i < state->handCount[player]; i++)
        -:  550:    {
       60:  551:      if (state->hand[player][i] == curse) { score = score - 1; };
       60:  552:      if (state->hand[player][i] == estate) { score = score + 1; };
       60:  553:      if (state->hand[player][i] == duchy) { score = score + 3; };
       60:  554:      if (state->hand[player][i] == province) { score = score + 6; };
       60:  555:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       60:  556:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  557:    }
        -:  558:  //score from discard
      492:  559:  for (i = 0; i < state->discardCount[player]; i++)
        -:  560:    {
      330:  561:      if (state->discard[player][i] == curse) { score = score - 1; };
      330:  562:      if (state->discard[player][i] == estate) { score = score + 1; };
      330:  563:      if (state->discard[player][i] == duchy) { score = score + 3; };
      330:  564:      if (state->discard[player][i] == province) { score = score + 6; };
      330:  565:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      330:  566:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  567:    }
        -:  568:  //score from deck
      492:  569:  for (i = 0; i < state->discardCount[player]; i++)
        -:  570:    {
      330:  571:      if (state->deck[player][i] == curse) { score = score - 1; };
      330:  572:      if (state->deck[player][i] == estate) { score = score + 1; };
      330:  573:      if (state->deck[player][i] == duchy) { score = score + 3; };
      330:  574:      if (state->deck[player][i] == province) { score = score + 6; };
      330:  575:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      330:  576:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  577:    }
      162:  578:  return score;
        -:  579:}
        -:  580:
    #####:  581:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  582:  int i;	
        -:  583:  int j;
        -:  584:  int highScore;
        -:  585:  int currentPlayer;
        -:  586:
        -:  587:  //get score for each player
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  589:    {
        -:  590:      //set unused player scores to -9999
    #####:  591:      if (i >= state->numPlayers)
        -:  592:	{
    #####:  593:	  players[i] = -9999;
        -:  594:	}
        -:  595:      else
        -:  596:	{
    #####:  597:	  players[i] = scoreFor (i, state);
        -:  598:	}
        -:  599:    }
        -:  600:
        -:  601:  //find highest score
    #####:  602:  j = 0;
    #####:  603:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  604:    {
    #####:  605:      if (players[i] > players[j])
        -:  606:	{
    #####:  607:	  j = i;
        -:  608:	}
        -:  609:    }
    #####:  610:  highScore = players[j];
        -:  611:
        -:  612:  //add 1 to players who had less turns
    #####:  613:  currentPlayer = whoseTurn(state);
    #####:  614:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  615:    {
    #####:  616:      if ( players[i] == highScore && i > currentPlayer )
        -:  617:	{
    #####:  618:	  players[i]++;
        -:  619:	}
        -:  620:    }
        -:  621:
        -:  622:  //find new highest score
    #####:  623:  j = 0;
    #####:  624:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  625:    {
    #####:  626:      if ( players[i] > players[j] )
        -:  627:	{
    #####:  628:	  j = i;
        -:  629:	}
        -:  630:    }
    #####:  631:  highScore = players[j];
        -:  632:
        -:  633:  //set winners in array to 1 and rest to 0
    #####:  634:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  635:    {
    #####:  636:      if ( players[i] == highScore )
        -:  637:	{
    #####:  638:	  players[i] = 1;
        -:  639:	}
        -:  640:      else
        -:  641:	{
    #####:  642:	  players[i] = 0;
        -:  643:	}
        -:  644:    }
        -:  645:
    #####:  646:  return 0;
        -:  647:}
        -:  648:
     2052:  649:int drawCard(int player, struct gameState *state)
        -:  650:{	int count;
        -:  651:  int deckCounter;
     2052:  652:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  653:    
        -:  654:    //Step 1 Shuffle the discard pile back into a deck
        -:  655:    int i;
        -:  656:    //Move discard to deck
    #####:  657:    for (i = 0; i < state->discardCount[player];i++){
    #####:  658:      state->deck[player][i] = state->discard[player][i];
    #####:  659:      state->discard[player][i] = -1;
        -:  660:    }
        -:  661:
    #####:  662:    state->deckCount[player] = state->discardCount[player];
    #####:  663:    state->discardCount[player] = 0;//Reset discard
        -:  664:
        -:  665:    //Shufffle the deck
    #####:  666:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  667:   
    #####:  668:    if (DEBUG){//Debug statements
        -:  669:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  670:    }
        -:  671:    
    #####:  672:    state->discardCount[player] = 0;
        -:  673:
        -:  674:    //Step 2 Draw Card
    #####:  675:    count = state->handCount[player];//Get current player's hand count
        -:  676:    
    #####:  677:    if (DEBUG){//Debug statements
        -:  678:      printf("Current hand count: %d\n", count);
        -:  679:    }
        -:  680:    
    #####:  681:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  682:
    #####:  683:    if (deckCounter == 0)
    #####:  684:      return -1;
        -:  685:
    #####:  686:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  687:    state->deckCount[player]--;
    #####:  688:    state->handCount[player]++;//Increment hand count
        -:  689:  }
        -:  690:
        -:  691:  else{
     2052:  692:    int count = state->handCount[player];//Get current hand count for player
        -:  693:    int deckCounter;
     2052:  694:    if (DEBUG){//Debug statements
        -:  695:      printf("Current hand count: %d\n", count);
        -:  696:    }
        -:  697:
     2052:  698:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2052:  699:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2052:  700:    state->deckCount[player]--;
     2052:  701:    state->handCount[player]++;//Increment hand count
        -:  702:  }
        -:  703:
     2052:  704:  return 0;
        -:  705:}
        -:  706:
    #####:  707:int getCost(int cardNumber)
        -:  708:{
    #####:  709:  switch( cardNumber ) 
        -:  710:    {
        -:  711:    case curse:
    #####:  712:      return 0;
        -:  713:    case estate:
    #####:  714:      return 2;
        -:  715:    case duchy:
    #####:  716:      return 5;
        -:  717:    case province:
    #####:  718:      return 8;
        -:  719:    case copper:
    #####:  720:      return 0;
        -:  721:    case silver:
    #####:  722:      return 3;
        -:  723:    case gold:
    #####:  724:      return 6;
        -:  725:    case adventurer:
    #####:  726:      return 6;
        -:  727:    case council_room:
    #####:  728:      return 5;
        -:  729:    case feast:
    #####:  730:      return 4;
        -:  731:    case gardens:
    #####:  732:      return 4;
        -:  733:    case mine:
    #####:  734:      return 5;
        -:  735:    case remodel:
    #####:  736:      return 4;
        -:  737:    case smithy:
    #####:  738:      return 4;
        -:  739:    case village:
    #####:  740:      return 3;
        -:  741:    case baron:
    #####:  742:      return 4;
        -:  743:    case great_hall:
    #####:  744:      return 3;
        -:  745:    case minion:
    #####:  746:      return 5;
        -:  747:    case steward:
    #####:  748:      return 3;
        -:  749:    case tribute:
    #####:  750:      return 5;
        -:  751:    case ambassador:
    #####:  752:      return 3;
        -:  753:    case cutpurse:
    #####:  754:      return 4;
        -:  755:    case embargo: 
    #####:  756:      return 2;
        -:  757:    case outpost:
    #####:  758:      return 5;
        -:  759:    case salvager:
    #####:  760:      return 4;
        -:  761:    case sea_hag:
    #####:  762:      return 4;
        -:  763:    case treasure_map:
    #####:  764:      return 4;
        -:  765:    }
        -:  766:	
    #####:  767:  return -1;
        -:  768:}
        -:  769:
       34:  770:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  771:{
        -:  772:  int i;
        -:  773:  int j;
        -:  774:  int k;
        -:  775:  int x;
        -:  776:  int index;
       34:  777:  int currentPlayer = whoseTurn(state);
       34:  778:  int nextPlayer = currentPlayer + 1;
        -:  779:
       34:  780:  int tributeRevealedCards[2] = {-1, -1};
        -:  781:  int temphand[MAX_HAND];// moved above the if statement
       34:  782:  int drawntreasure = 0;
        -:  783:  int cardDrawn;
       34:  784:  int z = 0;// this is the counter for the temp hand
       34:  785:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  786:    nextPlayer = 0;
        -:  787:  }
        -:  788:  
        -:  789:	
        -:  790:  //uses switch to select card and perform actions
       34:  791:  switch( card ) 
        -:  792:    {
        -:  793:    case adventurer:
        1:  794:  		adventurerCard(currentPlayer, state);
        1:  795:      	return 0;
        -:  796:			
        -:  797:    case council_room:
    #####:  798:		council_roomCard(handPos, currentPlayer, state);
    #####:  799:      	return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
    #####:  814:	if (supplyCount(choice1, state) <= 0){
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
    #####:  823:	  printf("That card is too expensive!\n");
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case smithy:
       23:  918:    	smithyCard(handPos, currentPlayer, state);
       23:  919:      	return 0;
        -:  920:		
        -:  921:    case village:
        1:  922:    	villageCard(handPos, currentPlayer, state);
        1:  923:      	return 0;
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
    #####:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
    #####:  951:		isGameOver(state);
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
    #####:  968:	    isGameOver(state);
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case great_hall:
        -:  977:      //+1 Card
    #####:  978:      drawCard(currentPlayer, state);
        -:  979:			
        -:  980:      //+1 Actions
    #####:  981:      state->numActions++;
        -:  982:			
        -:  983:      //discard card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
    #####:  985:      return 0;
        -:  986:		
        -:  987:    case minion:
        -:  988:      //+1 action
    #####:  989:      state->numActions++;
        -:  990:			
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:			
    #####:  994:      if (choice1)		//+2 coins
        -:  995:	{
    #####:  996:	  state->coins = state->coins + 2;
        -:  997:	}
        -:  998:			
    #####:  999:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1000:	{
        -: 1001:	  //discard hand
    #####: 1002:	  while(numHandCards(state) > 0)
        -: 1003:	    {
    #####: 1004:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1005:	    }
        -: 1006:				
        -: 1007:	  //draw 4
    #####: 1008:	  for (i = 0; i < 4; i++)
        -: 1009:	    {
    #####: 1010:	      drawCard(currentPlayer, state);
        -: 1011:	    }
        -: 1012:				
        -: 1013:	  //other players discard hand and redraw if hand size > 4
    #####: 1014:	  for (i = 0; i < state->numPlayers; i++)
        -: 1015:	    {
    #####: 1016:	      if (i != currentPlayer)
        -: 1017:		{
    #####: 1018:		  if ( state->handCount[i] > 4 )
        -: 1019:		    {
        -: 1020:		      //discard hand
    #####: 1021:		      while( state->handCount[i] > 0 )
        -: 1022:			{
    #####: 1023:			  discardCard(handPos, i, state, 0);
        -: 1024:			}
        -: 1025:							
        -: 1026:		      //draw 4
    #####: 1027:		      for (j = 0; j < 4; j++)
        -: 1028:			{
    #####: 1029:			  drawCard(i, state);
        -: 1030:			}
        -: 1031:		    }
        -: 1032:		}
        -: 1033:	    }
        -: 1034:				
        -: 1035:	}
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case steward:
        9: 1039:      if (choice1 == 1)
        -: 1040:	{
        -: 1041:	  //+2 cards
        1: 1042:	  drawCard(currentPlayer, state);
        1: 1043:	  drawCard(currentPlayer, state);
        -: 1044:	}
        8: 1045:      else if (choice1 == 2)
        -: 1046:	{
        -: 1047:	  //+2 coins
        1: 1048:	  state->coins = state->coins + 2;
        -: 1049:	}
        -: 1050:      else
        -: 1051:	{
        -: 1052:	  //trash 2 cards in hand
        7: 1053:	  discardCard(choice2, currentPlayer, state, 1);
        7: 1054:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1055:	}
        -: 1056:			
        -: 1057:      //discard card from hand
        9: 1058:      discardCard(handPos, currentPlayer, state, 0);
        9: 1059:      return 0;
        -: 1060:		
        -: 1061:    case tribute:
    #####: 1062:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1063:	if (state->deckCount[nextPlayer] > 0){
    #####: 1064:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	  state->deckCount[nextPlayer]--;
        -: 1066:	}
    #####: 1067:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1068:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1069:	  state->discardCount[nextPlayer]--;
        -: 1070:	}
        -: 1071:	else{
        -: 1072:	  //No Card to Reveal
    #####: 1073:	  if (DEBUG){
        -: 1074:	    printf("No cards to reveal\n");
        -: 1075:	  }
        -: 1076:	}
        -: 1077:      }
        -: 1078:	    
        -: 1079:      else{
    #####: 1080:	if (state->deckCount[nextPlayer] == 0){
    #####: 1081:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1082:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1083:	    state->deckCount[nextPlayer]++;
    #####: 1084:	    state->discard[nextPlayer][i] = -1;
    #####: 1085:	    state->discardCount[nextPlayer]--;
        -: 1086:	  }
        -: 1087:			    
    #####: 1088:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1089:	} 
    #####: 1090:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1092:	state->deckCount[nextPlayer]--;
    #####: 1093:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1094:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1095:	state->deckCount[nextPlayer]--;
        -: 1096:      }    
        -: 1097:		       
    #####: 1098:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1099:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1100:	state->playedCardCount++;
    #####: 1101:	tributeRevealedCards[1] = -1;
        -: 1102:      }
        -: 1103:
    #####: 1104:      for (i = 0; i <= 2; i ++){
    #####: 1105:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1106:	  state->coins += 2;
        -: 1107:	}
        -: 1108:		    
    #####: 1109:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1110:	  drawCard(currentPlayer, state);
    #####: 1111:	  drawCard(currentPlayer, state);
        -: 1112:	}
        -: 1113:	else{//Action Card
    #####: 1114:	  state->numActions = state->numActions + 2;
        -: 1115:	}
        -: 1116:      }
        -: 1117:	    
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case ambassador:
    #####: 1121:      j = 0;		//used to check if player has enough cards to discard
        -: 1122:
    #####: 1123:      if (choice2 > 2 || choice2 < 0)
        -: 1124:	{
    #####: 1125:	  return -1;				
        -: 1126:	}
        -: 1127:
    #####: 1128:      if (choice1 == handPos)
        -: 1129:	{
    #####: 1130:	  return -1;
        -: 1131:	}
        -: 1132:
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	{
    #####: 1135:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1136:	    {
    #####: 1137:	      j++;
        -: 1138:	    }
        -: 1139:	}
    #####: 1140:      if (j < choice2)
        -: 1141:	{
    #####: 1142:	  return -1;				
        -: 1143:	}
        -: 1144:
    #####: 1145:      if (DEBUG) 
        -: 1146:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1147:
        -: 1148:      //increase supply count for choosen card by amount being discarded
    #####: 1149:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1150:			
        -: 1151:      //each other player gains a copy of revealed card
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1157:	    }
        -: 1158:	}
        -: 1159:
        -: 1160:      //discard played card from hand
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1162:
        -: 1163:      //trash copies of cards returned to supply
    #####: 1164:      for (j = 0; j < choice2; j++)
        -: 1165:	{
    #####: 1166:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1167:	    {
    #####: 1168:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1169:		{
    #####: 1170:		  discardCard(i, currentPlayer, state, 1);
    #####: 1171:		  break;
        -: 1172:		}
        -: 1173:	    }
        -: 1174:	}			
        -: 1175:
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case cutpurse:
    #####: 1179:    	cutpurseCard(handPos, currentPlayer, state);
    #####: 1180:	    return 0;
        -: 1181:		
        -: 1182:    case embargo: 
        -: 1183:      //+2 Coins
    #####: 1184:      state->coins = state->coins + 2;
        -: 1185:			
        -: 1186:      //see if selected pile is in play
    #####: 1187:      if ( state->supplyCount[choice1] == -1 )
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:			
        -: 1192:      //add embargo token to selected supply pile
    #####: 1193:      state->embargoTokens[choice1]++;
        -: 1194:			
        -: 1195:      //trash card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case outpost:
        -: 1200:      //set outpost flag
    #####: 1201:      state->outpostPlayed++;
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case salvager:
        -: 1208:      //+1 buy
    #####: 1209:      state->numBuys++;
        -: 1210:			
    #####: 1211:      if (choice1)
        -: 1212:	{
        -: 1213:	  //gain coins equal to trashed card
    #####: 1214:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1215:	  //trash card
    #####: 1216:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1217:	}
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case sea_hag:
    #####: 1224:      for (i = 0; i < state->numPlayers; i++){
    #####: 1225:	if (i != currentPlayer){
    #####: 1226:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1227:	  state->discardCount[i]++;
    #####: 1228:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1229:	}
        -: 1230:      }
    #####: 1231:      return 0;
        -: 1232:		
        -: 1233:    case treasure_map:
        -: 1234:      //search hand for another treasure_map
    #####: 1235:      index = -1;
    #####: 1236:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:	{
    #####: 1238:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1239:	    {
    #####: 1240:	      index = i;
    #####: 1241:	      break;
        -: 1242:	    }
        -: 1243:	}
    #####: 1244:      if (index > -1)
        -: 1245:	{
        -: 1246:	  //trash both treasure cards
    #####: 1247:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1248:	  discardCard(index, currentPlayer, state, 1);
        -: 1249:
        -: 1250:	  //gain 4 Gold cards
    #####: 1251:	  for (i = 0; i < 4; i++)
        -: 1252:	    {
    #####: 1253:	      gainCard(gold, state, 1, currentPlayer);
        -: 1254:	    }
        -: 1255:				
        -: 1256:	  //return success
    #####: 1257:	  return 1;
        -: 1258:	}
        -: 1259:			
        -: 1260:      //no second treasure_map found in hand
    #####: 1261:      return -1;
        -: 1262:    }
        -: 1263:	
    #####: 1264:  return -1;
        -: 1265:}
        -: 1266:
       47: 1267:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1268:{
        -: 1269:	
        -: 1270:  //if card is not trashed, added to Played pile 
       47: 1271:  if (trashFlag < 1)
        -: 1272:    {
        -: 1273:      //add card to played pile
       33: 1274:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       33: 1275:      state->playedCardCount++;
        -: 1276:    }
        -: 1277:	
        -: 1278:  //set played card to -1
       47: 1279:  state->hand[currentPlayer][handPos] = -1;
        -: 1280:	
        -: 1281:  //remove card from player's hand
       47: 1282:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
        4: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
       43: 1287:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:  else 	
        -: 1293:    {
        -: 1294:      //replace discarded card with last card in hand
       43: 1295:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1296:      //set last card to -1
       43: 1297:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1298:      //reduce number of cards in hand
       43: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:	
       47: 1302:  return 0;
        -: 1303:}
        -: 1304:
      150: 1305:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1306:{
        -: 1307:  //Note: supplyPos is enum of choosen card
        -: 1308:	
        -: 1309:  //check if supply pile is empty (0) or card is not used in game (-1)
      150: 1310:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1311:    {
       25: 1312:      return -1;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //added card for [whoseTurn] current player:
        -: 1316:  // toFlag = 0 : add to discard
        -: 1317:  // toFlag = 1 : add to deck
        -: 1318:  // toFlag = 2 : add to hand
        -: 1319:
      125: 1320:  if (toFlag == 1)
        -: 1321:    {
       75: 1322:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       75: 1323:      state->deckCount[player]++;
        -: 1324:    }
       50: 1325:  else if (toFlag == 2)
        -: 1326:    {
       25: 1327:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       25: 1328:      state->handCount[player]++;
        -: 1329:    }
        -: 1330:  else
        -: 1331:    {
       25: 1332:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       25: 1333:      state->discardCount[player]++;
        -: 1334:    }
        -: 1335:	
        -: 1336:  //decrease number in supply pile
      125: 1337:  state->supplyCount[supplyPos]--;
        -: 1338:	 
      125: 1339:  return 0;
        -: 1340:}
        -: 1341:
      730: 1342:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1343:{
        -: 1344:  int i;
        -: 1345:	
        -: 1346:  //reset coin count
      730: 1347:  state->coins = 0;
        -: 1348:
        -: 1349:  //add coins for each Treasure card in player's hand
     3720: 1350:  for (i = 0; i < state->handCount[player]; i++)
        -: 1351:    {
     2990: 1352:      if (state->hand[player][i] == copper)
        -: 1353:	{
     1930: 1354:	  state->coins += 1;
        -: 1355:	}
     1060: 1356:      else if (state->hand[player][i] == silver)
        -: 1357:	{
      330: 1358:	  state->coins += 2;
        -: 1359:	}
      730: 1360:      else if (state->hand[player][i] == gold)
        -: 1361:	{
      330: 1362:	  state->coins += 3;
        -: 1363:	}	
        -: 1364:    }	
        -: 1365:
        -: 1366:  //add bonus
      730: 1367:  state->coins += bonus;
        -: 1368:
      730: 1369:  return 0;
        -: 1370:}
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
File 'dominion.c'
Lines executed:36.77% of 582
Branches executed:42.93% of 417
Taken at least once:33.57% of 417
Calls executed:25.26% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####:    8:int council_roomCard(int handPos, int currentPlayer, struct gameState *state)
        -:    9:{
        -:   10:	int i;
        -:   11:
        -:   12:	//+4 Cards
    #####:   13:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:   14:	{
    #####:   15:	  	drawCard(currentPlayer, state);
call    0 never executed
        -:   16:	}
        -:   17:			
        -:   18:    //+1 Buy
    #####:   19:    state->numBuys++;
        -:   20:			
        -:   21:    //Each other player draws a card
    #####:   22:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:   23:	{
    #####:   24:	  	if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:   25:	    {
    #####:   26:	      	drawCard(i, state);
call    0 never executed
        -:   27:	    }
        -:   28:	}
        -:   29:			
        -:   30:    //put played card in played card pile
    #####:   31:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   32:			
    #####:   33:    return 0;
        -:   34:}
        -:   35:
function cutpurseCard called 0 returned 0% blocks executed 0%
    #####:   36:int cutpurseCard(int handPos, int currentPlayer, struct gameState *state)
        -:   37:{
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int k;
        -:   41:
    #####:   42:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:   43:    for (i = 1; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:   44:	{
    #####:   45:	  	if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:   46:	    {
    #####:   47:	      	for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:   48:			{
    #####:   49:		  		if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:   50:		    	{
    #####:   51:		      		discardCard(j, i, state, 0);
call    0 never executed
    #####:   52:		      		break;
        -:   53:		    	}
    #####:   54:		  		if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:   55:		    	{
    #####:   56:		      		for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:   57:					{
    #####:   58:						if (DEBUG)
        -:   59:			    			printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:   60:					}	
    #####:   61:		      		break;
        -:   62:		    	}		
        -:   63:			}		
        -:   64:	    }	
        -:   65:	}				
        -:   66:
        -:   67:    //discard played card from hand
    #####:   68:    discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:   69:
    #####:   70:    return 0;
        -:   71:}
        -:   72:
function villageCard called 1 returned 100% blocks executed 100%
        1:   73:int villageCard(int handPos, int currentPlayer, struct gameState *state)
        -:   74:{
        -:   75:      //+1 Card
        1:   76:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:   77:			
        -:   78:      //+2 Actions
        1:   79:      state->numActions = state->coins + 2;
        -:   80:			
        -:   81:      //discard played card from hand
        1:   82:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:   83:      return 0;
        -:   84:}
        -:   85:
function smithyCard called 23 returned 100% blocks executed 100%
       23:   86:int smithyCard(int handPos, int currentPlayer, struct gameState *state)
        -:   87:{
        -:   88:	int i;
        -:   89:
        -:   90:	//+3 Cards
       69:   91:    for (i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   92:	{
       46:   93:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:   94:	}
        -:   95:			
        -:   96:    //discard card from hand
       23:   97:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       23:   98:    return 0;
        -:   99:}
        -:  100:
function adventurerCard called 1 returned 100% blocks executed 64%
        1:  101:int adventurerCard(int currentPlayer, struct gameState *state)
        -:  102:{
        1:  103:	int drawntreasure = 0;
        -:  104:	int cardDrawn;
        -:  105:	int temphand[MAX_HAND];
        1:  106:	int z = 0;	// this is the counter for the temp hand
        -:  107:
        5:  108:  	while(drawntreasure <= 2)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  109:  	{
        3:  110:		if (state->deckCount[currentPlayer] < 1)	//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  111:		{
    #####:  112:	  		shuffle(currentPlayer, state);
call    0 never executed
        -:  113:		}
        3:  114:		drawCard(currentPlayer, state);
call    0 returned 100%
        3:  115:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];	//top card of hand is most recently drawn card.
        6:  116:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        3:  117:	  		drawntreasure++;
        -:  118:		else
        -:  119:		{
    #####:  120:	  		temphand[z]=cardDrawn;
    #####:  121:	  		state->handCount[currentPlayer]--;	//this should just remove the top card (the most recently drawn one).
    #####:  122:	  		z++;
        -:  123:		}
        -:  124:    }
        -:  125:      
        2:  126:    while(z-1>=0)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  127:    {
    #####:  128:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  129:		z=z-1;
        -:  130:    }
        -:  131:
        1:  132:    return 0;
        -:  133:}
        -:  134:
function compare called 13440 returned 100% blocks executed 83%
    13440:  135:int compare(const void* a, const void* b) {
    13440:  136:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  137:    return 1;
    13440:  138:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     3584:  139:    return -1;
     9856:  140:  return 0;
        -:  141:}
        -:  142:
function newGame called 0 returned 0% blocks executed 0%
    #####:  143:struct gameState* newGame() {
    #####:  144:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  145:  return g;
        -:  146:}
        -:  147:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  148:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  149:		  int k8, int k9, int k10) {
    #####:  150:  int* k = malloc(10 * sizeof(int));
    #####:  151:  k[0] = k1;
    #####:  152:  k[1] = k2;
    #####:  153:  k[2] = k3;
    #####:  154:  k[3] = k4;
    #####:  155:  k[4] = k5;
    #####:  156:  k[5] = k6;
    #####:  157:  k[6] = k7;
    #####:  158:  k[7] = k8;
    #####:  159:  k[8] = k9;
    #####:  160:  k[9] = k10;
    #####:  161:  return k;
        -:  162:}
        -:  163:
function initializeGame called 400 returned 100% blocks executed 94%
      400:  164:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  165:		   struct gameState *state) {
        -:  166:
        -:  167:  int i;
        -:  168:  int j;
        -:  169:  int it;			
        -:  170:  //set up random number generator
      400:  171:  SelectStream(1);
call    0 returned 100%
      400:  172:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  173:  
        -:  174:  //check number of players
      400:  175:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  176:    {
    #####:  177:      return -1;
        -:  178:    }
        -:  179:
        -:  180:  //set number of players
      400:  181:  state->numPlayers = numPlayers;
        -:  182:
        -:  183:  //check selected kingdom cards are different
     4400:  184:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  185:    {
    44000:  186:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  187:        {
    40000:  188:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  189:	    {
    #####:  190:	      return -1;
        -:  191:	    }
        -:  192:        }
        -:  193:    }
        -:  194:
        -:  195:
        -:  196:  //initialize supply
        -:  197:  ///////////////////////////////
        -:  198:
        -:  199:  //set number of Curse cards
      400:  200:  if (numPlayers == 2)
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -:  201:    {
      352:  202:      state->supplyCount[curse] = 10;
        -:  203:    }
       48:  204:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  205:    {
    #####:  206:      state->supplyCount[curse] = 20;
        -:  207:    }
        -:  208:  else
        -:  209:    {
       48:  210:      state->supplyCount[curse] = 30;
        -:  211:    }
        -:  212:
        -:  213:  //set number of Victory cards
      400:  214:  if (numPlayers == 2)
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -:  215:    {
      352:  216:      state->supplyCount[estate] = 8;
      352:  217:      state->supplyCount[duchy] = 8;
      352:  218:      state->supplyCount[province] = 8;
        -:  219:    }
        -:  220:  else
        -:  221:    {
       48:  222:      state->supplyCount[estate] = 12;
       48:  223:      state->supplyCount[duchy] = 12;
       48:  224:      state->supplyCount[province] = 12;
        -:  225:    }
        -:  226:
        -:  227:  //set number of Treasure cards
      400:  228:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      400:  229:  state->supplyCount[silver] = 40;
      400:  230:  state->supplyCount[gold] = 30;
        -:  231:
        -:  232:  //set number of Kingdom cards
     8400:  233:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  234:    {
    66000:  235:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  236:	{
    62000:  237:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  238:	    {
        -:  239:	      //check if card is a 'Victory' Kingdom card
     4800:  240:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  241:		{
      800:  242:		  if (numPlayers == 2){ 
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
      704:  243:		    state->supplyCount[i] = 8; 
        -:  244:		  }
       96:  245:		  else{ state->supplyCount[i] = 12; }
        -:  246:		}
        -:  247:	      else
        -:  248:		{
     3200:  249:		  state->supplyCount[i] = 10;
        -:  250:		}
     4000:  251:	      break;
        -:  252:	    }
        -:  253:	  else    //card is not in the set choosen for the game
        -:  254:	    {
    58000:  255:	      state->supplyCount[i] = -1;
        -:  256:	    }
        -:  257:	}
        -:  258:
        -:  259:    }
        -:  260:
        -:  261:  ////////////////////////
        -:  262:  //supply intilization complete
        -:  263:
        -:  264:  //set player decks
     1296:  265:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  266:    {
      896:  267:      state->deckCount[i] = 0;
     3584:  268:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  269:	{
     2688:  270:	  state->deck[i][j] = estate;
     2688:  271:	  state->deckCount[i]++;
        -:  272:	}
     7168:  273:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  274:	{
     6272:  275:	  state->deck[i][j] = copper;
     6272:  276:	  state->deckCount[i]++;		
        -:  277:	}
        -:  278:    }
        -:  279:
        -:  280:  //shuffle player decks
     1296:  281:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  282:    {
      896:  283:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  284:	{
    #####:  285:	  return -1;
        -:  286:	}
        -:  287:    }
        -:  288:
        -:  289:  //draw player hands
     1296:  290:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  291:    {  
        -:  292:      //initialize hand size to zero
      896:  293:      state->handCount[i] = 0;
      896:  294:      state->discardCount[i] = 0;
        -:  295:      //draw 5 cards
        -:  296:      // for (j = 0; j < 5; j++)
        -:  297:      //	{
        -:  298:      //	  drawCard(i, state);
        -:  299:      //	}
        -:  300:    }
        -:  301:  
        -:  302:  //set embargo tokens to 0 for all supply piles
    11200:  303:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  304:    {
    10800:  305:      state->embargoTokens[i] = 0;
        -:  306:    }
        -:  307:
        -:  308:  //initialize first player's turn
      400:  309:  state->outpostPlayed = 0;
      400:  310:  state->phase = 0;
      400:  311:  state->numActions = 1;
      400:  312:  state->numBuys = 1;
      400:  313:  state->playedCardCount = 0;
      400:  314:  state->whoseTurn = 0;
      400:  315:  state->handCount[state->whoseTurn] = 0;
        -:  316:  //int it; move to top
        -:  317:
        -:  318:  //Moved draw cards to here, only drawing at the start of a turn
     2400:  319:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     2000:  320:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  321:  }
        -:  322:
      400:  323:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  324:
      400:  325:  return 0;
        -:  326:}
        -:  327:
function shuffle called 896 returned 100% blocks executed 93%
      896:  328:int shuffle(int player, struct gameState *state) {
        -:  329: 
        -:  330:
        -:  331:  int newDeck[MAX_DECK];
      896:  332:  int newDeckPos = 0;
        -:  333:  int card;
        -:  334:  int i;
        -:  335:
      896:  336:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  337:    return -1;
      896:  338:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  339:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  340:
    10752:  341:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     8960:  342:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     8960:  343:    newDeck[newDeckPos] = state->deck[player][card];
     8960:  344:    newDeckPos++;
    31312:  345:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    22352:  346:      state->deck[player][i] = state->deck[player][i+1];
        -:  347:    }
     8960:  348:    state->deckCount[player]--;
        -:  349:  }
     9856:  350:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     8960:  351:    state->deck[player][i] = newDeck[i];
     8960:  352:    state->deckCount[player]++;
        -:  353:  }
        -:  354:
      896:  355:  return 0;
        -:  356:}
        -:  357:
function playCard called 0 returned 0% blocks executed 0%
    #####:  358:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  359:{	
        -:  360:  int card;
    #####:  361:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  362:
        -:  363:  //check if it is the right phase
    #####:  364:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  365:    {
    #####:  366:      return -1;
        -:  367:    }
        -:  368:	
        -:  369:  //check if player has enough actions
    #####:  370:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  371:    {
    #####:  372:      return -1;
        -:  373:    }
        -:  374:	
        -:  375:  //get card played
    #####:  376:  card = handCard(handPos, state);
call    0 never executed
        -:  377:	
        -:  378:  //check if selected card is an action
    #####:  379:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  380:    {
    #####:  381:      return -1;
        -:  382:    }
        -:  383:	
        -:  384:  //play card
    #####:  385:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  386:    {
    #####:  387:      return -1;
        -:  388:    }
        -:  389:	
        -:  390:  //reduce number of actions
    #####:  391:  state->numActions--;
        -:  392:
        -:  393:  //update coins (Treasure cards may be added with card draws)
    #####:  394:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  395:	
    #####:  396:  return 0;
        -:  397:}
        -:  398:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  399:int buyCard(int supplyPos, struct gameState *state) {
        -:  400:  int who;
    #####:  401:  if (DEBUG){
        -:  402:    printf("Entering buyCard...\n");
        -:  403:  }
        -:  404:
        -:  405:  // I don't know what to do about the phase thing.
        -:  406:
    #####:  407:  who = state->whoseTurn;
        -:  408:
    #####:  409:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
    #####:  410:    if (DEBUG)
        -:  411:      printf("You do not have any buys left\n");
    #####:  412:    return -1;
    #####:  413:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  414:    if (DEBUG)
        -:  415:      printf("There are not any of that type of card left\n");
    #####:  416:    return -1;
    #####:  417:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  418:    if (DEBUG) 
        -:  419:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  420:    return -1;
        -:  421:  } else {
    #####:  422:    state->phase=1;
        -:  423:    //state->supplyCount[supplyPos]--;
    #####:  424:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  425:  
    #####:  426:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  427:    state->numBuys--;
    #####:  428:    if (DEBUG)
        -:  429:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  430:  }
        -:  431:
        -:  432:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  433:  //state->discardCount[who]++;
        -:  434:    
    #####:  435:  return 0;
        -:  436:}
        -:  437:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  438:int numHandCards(struct gameState *state) {
    #####:  439:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  440:}
        -:  441:
function handCard called 0 returned 0% blocks executed 0%
    #####:  442:int handCard(int handPos, struct gameState *state) {
    #####:  443:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  444:  return state->hand[currentPlayer][handPos];
        -:  445:}
        -:  446:
function supplyCount called 150 returned 100% blocks executed 100%
      150:  447:int supplyCount(int card, struct gameState *state) {
      150:  448:  return state->supplyCount[card];
        -:  449:}
        -:  450:
function fullDeckCount called 92 returned 100% blocks executed 81%
       92:  451:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  452:  int i;
       92:  453:  int count = 0;
        -:  454:
      957:  455:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  456:    {
      865:  457:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  458:    }
        -:  459:
      132:  460:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 30%
branch  1 taken 70% (fallthrough)
        -:  461:    {
       40:  462:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  463:    }
        -:  464:
      532:  465:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  466:    {
      440:  467:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  468:    }
        -:  469:
       92:  470:  return count;
        -:  471:}
        -:  472:
function whoseTurn called 34 returned 100% blocks executed 100%
       34:  473:int whoseTurn(struct gameState *state) {
       34:  474:  return state->whoseTurn;
        -:  475:}
        -:  476:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  477:int endTurn(struct gameState *state) {
        -:  478:  int k;
        -:  479:  int i;
    #####:  480:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  481:  
        -:  482:  //Discard hand
    #####:  483:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  484:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  485:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  486:  }
    #####:  487:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  488:    
        -:  489:  //Code for determining the player
    #####:  490:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  491:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  492:  }
        -:  493:  else{
    #####:  494:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  495:  }
        -:  496:
    #####:  497:  state->outpostPlayed = 0;
    #####:  498:  state->phase = 0;
    #####:  499:  state->numActions = 1;
    #####:  500:  state->coins = 0;
    #####:  501:  state->numBuys = 1;
    #####:  502:  state->playedCardCount = 0;
    #####:  503:  state->handCount[state->whoseTurn] = 0;
        -:  504:
        -:  505:  //int k; move to top
        -:  506:  //Next player draws hand
    #####:  507:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  508:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  509:  }
        -:  510:
        -:  511:  //Update money
    #####:  512:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  513:
    #####:  514:  return 0;
        -:  515:}
        -:  516:
function isGameOver called 14379 returned 100% blocks executed 100%
    14379:  517:int isGameOver(struct gameState *state) {
        -:  518:  int i;
        -:  519:  int j;
        -:  520:	
        -:  521:  //if stack of Province cards is empty, the game ends
    14379:  522:  if (state->supplyCount[province] == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  523:    {
     1657:  524:      return 1;
        -:  525:    }
        -:  526:
        -:  527:  //if three supply pile are at 0, the game ends
    12722:  528:  j = 0;
   330772:  529:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  530:    {
   318050:  531:      if (state->supplyCount[i] == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  532:	{
    37560:  533:	  j++;
        -:  534:	}
        -:  535:    }
    12722:  536:  if ( j >= 3)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  537:    {
    12144:  538:      return 1;
        -:  539:    }
        -:  540:
      578:  541:  return 0;
        -:  542:}
        -:  543:
function scoreFor called 162 returned 100% blocks executed 86%
      162:  544:int scoreFor (int player, struct gameState *state) {
        -:  545:
        -:  546:  int i;
      162:  547:  int score = 0;
        -:  548:  //score from hand
      222:  549:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 27%
branch  1 taken 73% (fallthrough)
        -:  550:    {
       60:  551:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       60:  552:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       60:  553:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       60:  554:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       60:  555:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       60:  556:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  557:    }
        -:  558:  //score from discard
      492:  559:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  560:    {
      330:  561:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      330:  562:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      330:  563:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      330:  564:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      330:  565:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      330:  566:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  567:    }
        -:  568:  //score from deck
      492:  569:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  570:    {
      330:  571:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      330:  572:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      330:  573:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      330:  574:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      330:  575:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      330:  576:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  577:    }
      162:  578:  return score;
        -:  579:}
        -:  580:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  581:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  582:  int i;	
        -:  583:  int j;
        -:  584:  int highScore;
        -:  585:  int currentPlayer;
        -:  586:
        -:  587:  //get score for each player
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
        -:  590:      //set unused player scores to -9999
    #####:  591:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  592:	{
    #####:  593:	  players[i] = -9999;
        -:  594:	}
        -:  595:      else
        -:  596:	{
    #####:  597:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  598:	}
        -:  599:    }
        -:  600:
        -:  601:  //find highest score
    #####:  602:  j = 0;
    #####:  603:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  604:    {
    #####:  605:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  606:	{
    #####:  607:	  j = i;
        -:  608:	}
        -:  609:    }
    #####:  610:  highScore = players[j];
        -:  611:
        -:  612:  //add 1 to players who had less turns
    #####:  613:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  614:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  615:    {
    #####:  616:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  617:	{
    #####:  618:	  players[i]++;
        -:  619:	}
        -:  620:    }
        -:  621:
        -:  622:  //find new highest score
    #####:  623:  j = 0;
    #####:  624:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  625:    {
    #####:  626:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  627:	{
    #####:  628:	  j = i;
        -:  629:	}
        -:  630:    }
    #####:  631:  highScore = players[j];
        -:  632:
        -:  633:  //set winners in array to 1 and rest to 0
    #####:  634:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  635:    {
    #####:  636:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  637:	{
    #####:  638:	  players[i] = 1;
        -:  639:	}
        -:  640:      else
        -:  641:	{
    #####:  642:	  players[i] = 0;
        -:  643:	}
        -:  644:    }
        -:  645:
    #####:  646:  return 0;
        -:  647:}
        -:  648:
function drawCard called 2052 returned 100% blocks executed 36%
     2052:  649:int drawCard(int player, struct gameState *state)
        -:  650:{	int count;
        -:  651:  int deckCounter;
     2052:  652:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  653:    
        -:  654:    //Step 1 Shuffle the discard pile back into a deck
        -:  655:    int i;
        -:  656:    //Move discard to deck
    #####:  657:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  658:      state->deck[player][i] = state->discard[player][i];
    #####:  659:      state->discard[player][i] = -1;
        -:  660:    }
        -:  661:
    #####:  662:    state->deckCount[player] = state->discardCount[player];
    #####:  663:    state->discardCount[player] = 0;//Reset discard
        -:  664:
        -:  665:    //Shufffle the deck
    #####:  666:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  667:   
    #####:  668:    if (DEBUG){//Debug statements
        -:  669:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  670:    }
        -:  671:    
    #####:  672:    state->discardCount[player] = 0;
        -:  673:
        -:  674:    //Step 2 Draw Card
    #####:  675:    count = state->handCount[player];//Get current player's hand count
        -:  676:    
    #####:  677:    if (DEBUG){//Debug statements
        -:  678:      printf("Current hand count: %d\n", count);
        -:  679:    }
        -:  680:    
    #####:  681:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  682:
    #####:  683:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  684:      return -1;
        -:  685:
    #####:  686:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  687:    state->deckCount[player]--;
    #####:  688:    state->handCount[player]++;//Increment hand count
        -:  689:  }
        -:  690:
        -:  691:  else{
     2052:  692:    int count = state->handCount[player];//Get current hand count for player
        -:  693:    int deckCounter;
     2052:  694:    if (DEBUG){//Debug statements
        -:  695:      printf("Current hand count: %d\n", count);
        -:  696:    }
        -:  697:
     2052:  698:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2052:  699:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2052:  700:    state->deckCount[player]--;
     2052:  701:    state->handCount[player]++;//Increment hand count
        -:  702:  }
        -:  703:
     2052:  704:  return 0;
        -:  705:}
        -:  706:
function getCost called 0 returned 0% blocks executed 0%
    #####:  707:int getCost(int cardNumber)
        -:  708:{
    #####:  709:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  710:    {
        -:  711:    case curse:
    #####:  712:      return 0;
        -:  713:    case estate:
    #####:  714:      return 2;
        -:  715:    case duchy:
    #####:  716:      return 5;
        -:  717:    case province:
    #####:  718:      return 8;
        -:  719:    case copper:
    #####:  720:      return 0;
        -:  721:    case silver:
    #####:  722:      return 3;
        -:  723:    case gold:
    #####:  724:      return 6;
        -:  725:    case adventurer:
    #####:  726:      return 6;
        -:  727:    case council_room:
    #####:  728:      return 5;
        -:  729:    case feast:
    #####:  730:      return 4;
        -:  731:    case gardens:
    #####:  732:      return 4;
        -:  733:    case mine:
    #####:  734:      return 5;
        -:  735:    case remodel:
    #####:  736:      return 4;
        -:  737:    case smithy:
    #####:  738:      return 4;
        -:  739:    case village:
    #####:  740:      return 3;
        -:  741:    case baron:
    #####:  742:      return 4;
        -:  743:    case great_hall:
    #####:  744:      return 3;
        -:  745:    case minion:
    #####:  746:      return 5;
        -:  747:    case steward:
    #####:  748:      return 3;
        -:  749:    case tribute:
    #####:  750:      return 5;
        -:  751:    case ambassador:
    #####:  752:      return 3;
        -:  753:    case cutpurse:
    #####:  754:      return 4;
        -:  755:    case embargo: 
    #####:  756:      return 2;
        -:  757:    case outpost:
    #####:  758:      return 5;
        -:  759:    case salvager:
    #####:  760:      return 4;
        -:  761:    case sea_hag:
    #####:  762:      return 4;
        -:  763:    case treasure_map:
    #####:  764:      return 4;
        -:  765:    }
        -:  766:	
    #####:  767:  return -1;
        -:  768:}
        -:  769:
function cardEffect called 34 returned 100% blocks executed 8%
       34:  770:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  771:{
        -:  772:  int i;
        -:  773:  int j;
        -:  774:  int k;
        -:  775:  int x;
        -:  776:  int index;
       34:  777:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       34:  778:  int nextPlayer = currentPlayer + 1;
        -:  779:
       34:  780:  int tributeRevealedCards[2] = {-1, -1};
        -:  781:  int temphand[MAX_HAND];// moved above the if statement
       34:  782:  int drawntreasure = 0;
        -:  783:  int cardDrawn;
       34:  784:  int z = 0;// this is the counter for the temp hand
       34:  785:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  786:    nextPlayer = 0;
        -:  787:  }
        -:  788:  
        -:  789:	
        -:  790:  //uses switch to select card and perform actions
       34:  791:  switch( card ) 
branch  0 taken 3%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 68%
branch  7 taken 3%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 26%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  792:    {
        -:  793:    case adventurer:
        1:  794:  		adventurerCard(currentPlayer, state);
call    0 returned 100%
        1:  795:      	return 0;
        -:  796:			
        -:  797:    case council_room:
    #####:  798:		council_roomCard(handPos, currentPlayer, state);
call    0 never executed
    #####:  799:      	return 0;
        -:  800:			
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  814:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
    #####:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
        -:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  824:
    #####:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
        -:  828:	}
        -:  829:	else{
        -:  830:
    #####:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
    #####:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
        -:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  911:	      break;
        -:  912:	    }
        -:  913:	}
        -:  914:
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case smithy:
       23:  918:    	smithyCard(handPos, currentPlayer, state);
call    0 returned 100%
       23:  919:      	return 0;
        -:  920:		
        -:  921:    case village:
        1:  922:    	villageCard(handPos, currentPlayer, state);
call    0 returned 100%
        1:  923:      	return 0;
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  951:		isGameOver(state);
call    0 never executed
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:	    isGameOver(state);
call    0 never executed
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case great_hall:
        -:  977:      //+1 Card
    #####:  978:      drawCard(currentPlayer, state);
call    0 never executed
        -:  979:			
        -:  980:      //+1 Actions
    #####:  981:      state->numActions++;
        -:  982:			
        -:  983:      //discard card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  985:      return 0;
        -:  986:		
        -:  987:    case minion:
        -:  988:      //+1 action
    #####:  989:      state->numActions++;
        -:  990:			
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  993:			
    #####:  994:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  state->coins = state->coins + 2;
        -:  997:	}
        -:  998:			
    #####:  999:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1000:	{
        -: 1001:	  //discard hand
    #####: 1002:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1003:	    {
    #####: 1004:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1005:	    }
        -: 1006:				
        -: 1007:	  //draw 4
    #####: 1008:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	    {
    #####: 1010:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1011:	    }
        -: 1012:				
        -: 1013:	  //other players discard hand and redraw if hand size > 4
    #####: 1014:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1015:	    {
    #####: 1016:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1017:		{
    #####: 1018:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
        -: 1020:		      //discard hand
    #####: 1021:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1022:			{
    #####: 1023:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1024:			}
        -: 1025:							
        -: 1026:		      //draw 4
    #####: 1027:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1028:			{
    #####: 1029:			  drawCard(i, state);
call    0 never executed
        -: 1030:			}
        -: 1031:		    }
        -: 1032:		}
        -: 1033:	    }
        -: 1034:				
        -: 1035:	}
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case steward:
        9: 1039:      if (choice1 == 1)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1040:	{
        -: 1041:	  //+2 cards
        1: 1042:	  drawCard(currentPlayer, state);
call    0 returned 100%
        1: 1043:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1044:	}
        8: 1045:      else if (choice1 == 2)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1046:	{
        -: 1047:	  //+2 coins
        1: 1048:	  state->coins = state->coins + 2;
        -: 1049:	}
        -: 1050:      else
        -: 1051:	{
        -: 1052:	  //trash 2 cards in hand
        7: 1053:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        7: 1054:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1055:	}
        -: 1056:			
        -: 1057:      //discard card from hand
        9: 1058:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        9: 1059:      return 0;
        -: 1060:		
        -: 1061:    case tribute:
    #####: 1062:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1064:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	  state->deckCount[nextPlayer]--;
        -: 1066:	}
    #####: 1067:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1068:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1069:	  state->discardCount[nextPlayer]--;
        -: 1070:	}
        -: 1071:	else{
        -: 1072:	  //No Card to Reveal
    #####: 1073:	  if (DEBUG){
        -: 1074:	    printf("No cards to reveal\n");
        -: 1075:	  }
        -: 1076:	}
        -: 1077:      }
        -: 1078:	    
        -: 1079:      else{
    #####: 1080:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1081:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1083:	    state->deckCount[nextPlayer]++;
    #####: 1084:	    state->discard[nextPlayer][i] = -1;
    #####: 1085:	    state->discardCount[nextPlayer]--;
        -: 1086:	  }
        -: 1087:			    
    #####: 1088:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1089:	} 
    #####: 1090:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1092:	state->deckCount[nextPlayer]--;
    #####: 1093:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1094:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1095:	state->deckCount[nextPlayer]--;
        -: 1096:      }    
        -: 1097:		       
    #####: 1098:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1099:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1100:	state->playedCardCount++;
    #####: 1101:	tributeRevealedCards[1] = -1;
        -: 1102:      }
        -: 1103:
    #####: 1104:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1105:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1106:	  state->coins += 2;
        -: 1107:	}
        -: 1108:		    
    #####: 1109:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1110:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1111:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1112:	}
        -: 1113:	else{//Action Card
    #####: 1114:	  state->numActions = state->numActions + 2;
        -: 1115:	}
        -: 1116:      }
        -: 1117:	    
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case ambassador:
    #####: 1121:      j = 0;		//used to check if player has enough cards to discard
        -: 1122:
    #####: 1123:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1124:	{
    #####: 1125:	  return -1;				
        -: 1126:	}
        -: 1127:
    #####: 1128:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;
        -: 1131:	}
        -: 1132:
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1136:	    {
    #####: 1137:	      j++;
        -: 1138:	    }
        -: 1139:	}
    #####: 1140:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  return -1;				
        -: 1143:	}
        -: 1144:
    #####: 1145:      if (DEBUG) 
        -: 1146:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1147:
        -: 1148:      //increase supply count for choosen card by amount being discarded
    #####: 1149:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1150:			
        -: 1151:      //each other player gains a copy of revealed card
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1157:	    }
        -: 1158:	}
        -: 1159:
        -: 1160:      //discard played card from hand
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1162:
        -: 1163:      //trash copies of cards returned to supply
    #####: 1164:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1165:	{
    #####: 1166:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	    {
    #####: 1168:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1169:		{
    #####: 1170:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1171:		  break;
        -: 1172:		}
        -: 1173:	    }
        -: 1174:	}			
        -: 1175:
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case cutpurse:
    #####: 1179:    	cutpurseCard(handPos, currentPlayer, state);
call    0 never executed
    #####: 1180:	    return 0;
        -: 1181:		
        -: 1182:    case embargo: 
        -: 1183:      //+2 Coins
    #####: 1184:      state->coins = state->coins + 2;
        -: 1185:			
        -: 1186:      //see if selected pile is in play
    #####: 1187:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:			
        -: 1192:      //add embargo token to selected supply pile
    #####: 1193:      state->embargoTokens[choice1]++;
        -: 1194:			
        -: 1195:      //trash card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case outpost:
        -: 1200:      //set outpost flag
    #####: 1201:      state->outpostPlayed++;
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case salvager:
        -: 1208:      //+1 buy
    #####: 1209:      state->numBuys++;
        -: 1210:			
    #####: 1211:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //gain coins equal to trashed card
    #####: 1214:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1215:	  //trash card
    #####: 1216:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1217:	}
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case sea_hag:
    #####: 1224:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1225:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1226:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1227:	  state->discardCount[i]++;
    #####: 1228:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1229:	}
        -: 1230:      }
    #####: 1231:      return 0;
        -: 1232:		
        -: 1233:    case treasure_map:
        -: 1234:      //search hand for another treasure_map
    #####: 1235:      index = -1;
    #####: 1236:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1239:	    {
    #####: 1240:	      index = i;
    #####: 1241:	      break;
        -: 1242:	    }
        -: 1243:	}
    #####: 1244:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1245:	{
        -: 1246:	  //trash both treasure cards
    #####: 1247:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1248:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1249:
        -: 1250:	  //gain 4 Gold cards
    #####: 1251:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1252:	    {
    #####: 1253:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1254:	    }
        -: 1255:				
        -: 1256:	  //return success
    #####: 1257:	  return 1;
        -: 1258:	}
        -: 1259:			
        -: 1260:      //no second treasure_map found in hand
    #####: 1261:      return -1;
        -: 1262:    }
        -: 1263:	
    #####: 1264:  return -1;
        -: 1265:}
        -: 1266:
function discardCard called 47 returned 100% blocks executed 88%
       47: 1267:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1268:{
        -: 1269:	
        -: 1270:  //if card is not trashed, added to Played pile 
       47: 1271:  if (trashFlag < 1)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1272:    {
        -: 1273:      //add card to played pile
       33: 1274:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       33: 1275:      state->playedCardCount++;
        -: 1276:    }
        -: 1277:	
        -: 1278:  //set played card to -1
       47: 1279:  state->hand[currentPlayer][handPos] = -1;
        -: 1280:	
        -: 1281:  //remove card from player's hand
       47: 1282:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
        4: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
       43: 1287:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:  else 	
        -: 1293:    {
        -: 1294:      //replace discarded card with last card in hand
       43: 1295:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1296:      //set last card to -1
       43: 1297:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1298:      //reduce number of cards in hand
       43: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:	
       47: 1302:  return 0;
        -: 1303:}
        -: 1304:
function gainCard called 150 returned 100% blocks executed 100%
      150: 1305:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1306:{
        -: 1307:  //Note: supplyPos is enum of choosen card
        -: 1308:	
        -: 1309:  //check if supply pile is empty (0) or card is not used in game (-1)
      150: 1310:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        -: 1311:    {
       25: 1312:      return -1;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //added card for [whoseTurn] current player:
        -: 1316:  // toFlag = 0 : add to discard
        -: 1317:  // toFlag = 1 : add to deck
        -: 1318:  // toFlag = 2 : add to hand
        -: 1319:
      125: 1320:  if (toFlag == 1)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1321:    {
       75: 1322:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       75: 1323:      state->deckCount[player]++;
        -: 1324:    }
       50: 1325:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1326:    {
       25: 1327:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       25: 1328:      state->handCount[player]++;
        -: 1329:    }
        -: 1330:  else
        -: 1331:    {
       25: 1332:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       25: 1333:      state->discardCount[player]++;
        -: 1334:    }
        -: 1335:	
        -: 1336:  //decrease number in supply pile
      125: 1337:  state->supplyCount[supplyPos]--;
        -: 1338:	 
      125: 1339:  return 0;
        -: 1340:}
        -: 1341:
function updateCoins called 730 returned 100% blocks executed 100%
      730: 1342:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1343:{
        -: 1344:  int i;
        -: 1345:	
        -: 1346:  //reset coin count
      730: 1347:  state->coins = 0;
        -: 1348:
        -: 1349:  //add coins for each Treasure card in player's hand
     3720: 1350:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1351:    {
     2990: 1352:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1353:	{
     1930: 1354:	  state->coins += 1;
        -: 1355:	}
     1060: 1356:      else if (state->hand[player][i] == silver)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1357:	{
      330: 1358:	  state->coins += 2;
        -: 1359:	}
      730: 1360:      else if (state->hand[player][i] == gold)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -: 1361:	{
      330: 1362:	  state->coins += 3;
        -: 1363:	}	
        -: 1364:    }	
        -: 1365:
        -: 1366:  //add bonus
      730: 1367:  state->coins += bonus;
        -: 1368:
      730: 1369:  return 0;
        -: 1370:}
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
