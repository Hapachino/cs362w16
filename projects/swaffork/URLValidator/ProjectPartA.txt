Andy Garcia
Anna Murphy
Kendra Swafford
CS362 - Winter 2016

1. Explain testIsValid function of URLValidator test code.

This function is used to make an assortment of test cases by combining 1 instance of each part of a URL string; that is, it creates a test case for every combination for each part of the URL, drawn from arrays of URL parts.
It does this by combining an instance of each part in parallel, and combining these into the test buffer, which is a collection of test cases.
The function sets the value of an array of indexes, where each element of this array corresponds to an index into one of the collection of URL parts, and increments these indexes in a loop until every index of each collection has been visited in combination with every other element of each collection.

2. Give how many total number of URLs it is testing.
The total number of URLs is the total number of different combinations, which is:
(number of scheme elements) * (number of authority elements) * (number of port elements) * (number of path elements) * (number of query options)
=
9 * 19 * 7 * 10 * 3 = 35,910 URLs

3. Explain how it is building all the URLs:
-create new testBuffer
-increment testPartsIndexIndex over each of the five parts
-append 1 distinct part a time, setting 'expected' as appropriate
-store the constructed URL in testBuffer in url and check if this URL is valid

4. Give an example of a valid URL being tested and an invalid URL being tested by the testIsValid() method:
valid: http://go.com:80/test1?action=view
invalid: ://aaa:-1/test1/file?action=edit&mode=up

5. Do you think that a real world test is very different than the unit tests and card tests that we wrote (in terms of concepts and complexity?)
At their core, the conceps are the same, where we want to test as many possible cases, throwing both valid and invalid/expected and unexpected input at the program. The complexity has grown significantly, however, since the testIsValid() method manually constructs over 35,000 different test cases.
