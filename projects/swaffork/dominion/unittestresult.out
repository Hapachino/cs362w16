Beginning initializing state.
Completed initializing state.
Testing shuffle():
Shuffling Player 0:
Checking order of player 0's deck...
	shuffled card 0: 1
	original card 0: 1
	shuffled card 1: 4
	original card 1: 4

Player 0's is different! Great success!
Checking order of player 1's deck...
	shuffled card 0: 1
	original card 0: 1
	shuffled card 1: 4
	original card 1: 4
	shuffled card 2: 5
	original card 2: 5
	shuffled card 3: 6
	original card 3: 6
	shuffled card 4: 7
	original card 4: 7
	shuffled card 5: 8
	original card 5: 8
	shuffled card 6: 9
	original card 6: 9
	shuffled card 7: 10
	original card 7: 10
	shuffled card 8: 11
	original card 8: 11
	shuffled card 9: 12
	original card 9: 12

All tests passed!
Beginning initializing state.
Completed initializing state.
Testing discardCard():
All state changes as expected.
All tests passed.
Beginning initializing state.
Completed initializing state.
Testing gainCard():
	ERROR: card not gained into deck. dest = 1
	New deck count: 1
	Expected deck count: 11
End of gainCard() test.
Beginning initializing state.
Completed initializing state.
Testing isGameOver():
All tests passed.
Testing adventurer card with only treasure cards in deck
Failed: played cards pile do not match.
Failed: hands do not match.
Failed: hand counts do not match.
Failed: discard piles do not match.
Failed: dicard counts do not match.
End of test

Test adventurer card with only two treasure cards mixed in.
Failed: played cards pile do not match.
Failed: hands do not match.
Failed: hand counts do not match.
Failed: discard piles do not match.
Failed: dicard counts do not match.
End of test

2 tests failed!
--------
Testing smithy card
Failed: hand counts do not match.
Failed: hands do not match.
Failed: played card counts do not match.
Failed: played cards do not match.
Smithy card failed 4 tests!

--------
Testing tribute card
Tribute card passed all tests!

--------
Testing mine card
Failed: playMine() failed
Failed: hand counts do not match
Failed: hands do not match.
mine card failed 3 tests!

File 'dominion.c'
Lines executed:28.60% of 584
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      246:    8:int compare(const void* a, const void* b) {
      246:    9:    if (*(int*)a > *(int*)b)
       23:   10:        return 1;
      223:   11:    if (*(int*)a < *(int*)b)
       88:   12:        return -1;
      135:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:        int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:        struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;			
        -:   43:    //set up random number generator
        5:   44:    SelectStream(1);
        5:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        5:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        5:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       55:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        5:   73:    if (numPlayers == 2)
        -:   74:    {
        5:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        5:   87:    if (numPlayers == 2)
        -:   88:    {
        5:   89:        state->supplyCount[estate] = 8;
        5:   90:        state->supplyCount[duchy] = 8;
        5:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        5:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:    state->supplyCount[silver] = 40;
        5:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      105:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      775:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       60:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
       10:  115:                    if (numPlayers == 2){ 
       10:  116:                        state->supplyCount[i] = 8; 
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
       40:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       50:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      725:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
       15:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
       10:  140:        state->deckCount[i] = 0;
       40:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
       30:  143:            state->deck[i][j] = estate;
       30:  144:            state->deckCount[i]++;
        -:  145:        }
       80:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       70:  148:            state->deck[i][j] = copper;
       70:  149:            state->deckCount[i]++;		
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
       15:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
       10:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
       15:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:        //initialize hand size to zero
       10:  166:        state->handCount[i] = 0;
       10:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
      140:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        5:  182:    state->outpostPlayed = 0;
        5:  183:    state->phase = 0;
        5:  184:    state->numActions = 1;
        5:  185:    state->numBuys = 1;
        5:  186:    state->playedCardCount = 0;
        5:  187:    state->whoseTurn = 0;
        5:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       30:  192:    for (it = 0; it < 5; it++){
       25:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        5:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:    return 0;
        -:  199:}
        -:  200:
     1995:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
     1995:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
     1995:  209:    if (state->deckCount[player] < 1)
     1984:  210:        return -1;
       11:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      132:  214:    while (state->deckCount[player] > 0) {
      110:  215:        card = floor(Random() * state->deckCount[player]);
      110:  216:        newDeck[newDeckPos] = state->deck[player][card];
      110:  217:        newDeckPos++;
      387:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
      277:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
      110:  221:        state->deckCount[player]--;
        -:  222:    }
      121:  223:    for (i = 0; i < newDeckPos; i++) {
      110:  224:        state->deck[player][i] = newDeck[i];
      110:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
       11:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
    #####:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
    #####:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
    #####:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
    #####:  291:        if (DEBUG) 
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
    #####:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
        2:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
        2:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
        1:  401:    j = 0;
       26:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
       25:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
        3:  406:            j++;
        -:  407:        }
        -:  408:    }
        1:  409:    if ( j >= 3)
        -:  410:    {
        1:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;	
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
     1030:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
     1030:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
      992:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
      992:  538:        state->deckCount[player] = state->discardCount[player];
      992:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
      992:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
      992:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
      992:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
      992:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
      992:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
      992:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      992:  559:        if (deckCounter == 0)
      992:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
       38:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
       38:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       38:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       38:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       38:  576:        state->deckCount[player]--;
       38:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
       38:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber ) 
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo: 
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:    int i;
        -:  649:    int j;
        -:  650:    int k;
        -:  651:    int x;
        -:  652:    int index;
    #####:  653:    int currentPlayer = whoseTurn(state);
        -:  654:    int temphand[MAX_HAND];// moved above the if statement
        -:  655:
        -:  656:    //uses switch to select card and perform actions
    #####:  657:    switch( card ) 
        -:  658:    {
        -:  659:        case adventurer:
    #####:  660:            return playAdventurer(state);
        -:  661:
        -:  662:        case council_room:
        -:  663:            //+4 Cards
    #####:  664:            for (i = 0; i < 4; i++)
        -:  665:            {
    #####:  666:                drawCard(currentPlayer, state);
        -:  667:            }
        -:  668:
        -:  669:            //+1 Buy
    #####:  670:            state->numBuys++;
        -:  671:
        -:  672:            //Each other player draws a card
    #####:  673:            for (i = 0; i < state->numPlayers; i++)
        -:  674:            {
    #####:  675:                if ( i != currentPlayer )
        -:  676:                {
    #####:  677:                    drawCard(i, state);
        -:  678:                }
        -:  679:            }
        -:  680:
        -:  681:            //put played card in played card pile
    #####:  682:            discardCard(handPos, currentPlayer, state, 0);
        -:  683:
    #####:  684:            return 0;
        -:  685:
        -:  686:        case feast:
        -:  687:            //gain card with cost up to 5
        -:  688:            //Backup hand
    #####:  689:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  690:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  691:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  692:            }
        -:  693:            //Backup hand
        -:  694:
        -:  695:            //Update Coins for Buy
    #####:  696:            updateCoins(currentPlayer, state, 5);
    #####:  697:            x = 1;//Condition to loop on
    #####:  698:            while( x == 1) {//Buy one card
    #####:  699:                if (supplyCount(choice1, state) <= 0){
    #####:  700:                    if (DEBUG)
        -:  701:                        printf("None of that card left, sorry!\n");
        -:  702:
    #####:  703:                    if (DEBUG){
        -:  704:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  705:                    }
        -:  706:                }
    #####:  707:                else if (state->coins < getCost(choice1)){
    #####:  708:                    printf("That card is too expensive!\n");
        -:  709:
    #####:  710:                    if (DEBUG){
        -:  711:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  712:                    }
        -:  713:                }
        -:  714:                else{
        -:  715:
    #####:  716:                    if (DEBUG){
        -:  717:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:                    }
        -:  719:
    #####:  720:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  721:                    x = 0;//No more buying cards
        -:  722:
    #####:  723:                    if (DEBUG){
        -:  724:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:                    }
        -:  726:
        -:  727:                }
        -:  728:            }     
        -:  729:
        -:  730:            //Reset Hand
    #####:  731:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  732:                state->hand[currentPlayer][i] = temphand[i];
    #####:  733:                temphand[i] = -1;
        -:  734:            }
        -:  735:            //Reset Hand
        -:  736:
    #####:  737:            return 0;
        -:  738:
        -:  739:        case gardens:
    #####:  740:            return -1;
        -:  741:
        -:  742:        case mine:
    #####:  743:            return playMine(state, handPos, choice1, choice2);
        -:  744:
        -:  745:        case remodel:
    #####:  746:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  747:
    #####:  748:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  749:            {
    #####:  750:                return -1;
        -:  751:            }
        -:  752:
    #####:  753:            gainCard(choice2, state, 0, currentPlayer);
        -:  754:
        -:  755:            //discard card from hand
    #####:  756:            discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:            //discard trashed card
    #####:  759:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:            {
    #####:  761:                if (state->hand[currentPlayer][i] == j)
        -:  762:                {
    #####:  763:                    discardCard(i, currentPlayer, state, 0);			
    #####:  764:                    break;
        -:  765:                }
        -:  766:            }
        -:  767:
        -:  768:
    #####:  769:            return 0;
        -:  770:
        -:  771:        case smithy:
    #####:  772:            return playSmithy(state, handPos);
        -:  773:
        -:  774:        case village:
        -:  775:            //+1 Card
    #####:  776:            drawCard(currentPlayer, state);
        -:  777:
        -:  778:            //+2 Actions
    #####:  779:            state->numActions = state->numActions + 2;
        -:  780:
        -:  781:            //discard played card from hand
    #####:  782:            discardCard(handPos, currentPlayer, state, 0);
    #####:  783:            return 0;
        -:  784:
        -:  785:        case baron:
    #####:  786:            return playBaron(state, choice1);
        -:  787:
        -:  788:        case great_hall:
        -:  789:            //+1 Card
    #####:  790:            drawCard(currentPlayer, state);
        -:  791:
        -:  792:            //+1 Actions
    #####:  793:            state->numActions++;
        -:  794:
        -:  795:            //discard card from hand
    #####:  796:            discardCard(handPos, currentPlayer, state, 0);
    #####:  797:            return 0;
        -:  798:
        -:  799:        case minion:
        -:  800:            //+1 action
    #####:  801:            state->numActions++;
        -:  802:
        -:  803:            //discard card from hand
    #####:  804:            discardCard(handPos, currentPlayer, state, 0);
        -:  805:
    #####:  806:            if (choice1)		//+2 coins
        -:  807:            {
    #####:  808:                state->coins = state->coins + 2;
        -:  809:            }
        -:  810:
    #####:  811:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  812:            {
        -:  813:                //discard hand
    #####:  814:                while(numHandCards(state) > 0)
        -:  815:                {
    #####:  816:                    discardCard(handPos, currentPlayer, state, 0);
        -:  817:                }
        -:  818:
        -:  819:                //draw 4
    #####:  820:                for (i = 0; i < 4; i++)
        -:  821:                {
    #####:  822:                    drawCard(currentPlayer, state);
        -:  823:                }
        -:  824:
        -:  825:                //other players discard hand and redraw if hand size > 4
    #####:  826:                for (i = 0; i < state->numPlayers; i++)
        -:  827:                {
    #####:  828:                    if (i != currentPlayer)
        -:  829:                    {
    #####:  830:                        if ( state->handCount[i] > 4 )
        -:  831:                        {
        -:  832:                            //discard hand
    #####:  833:                            while( state->handCount[i] > 0 )
        -:  834:                            {
    #####:  835:                                discardCard(handPos, i, state, 0);
        -:  836:                            }
        -:  837:
        -:  838:                            //draw 4
    #####:  839:                            for (j = 0; j < 4; j++)
        -:  840:                            {
    #####:  841:                                drawCard(i, state);
        -:  842:                            }
        -:  843:                        }
        -:  844:                    }
        -:  845:                }
        -:  846:
        -:  847:            }
    #####:  848:            return 0;
        -:  849:
        -:  850:        case steward:
    #####:  851:            if (choice1 == 1)
        -:  852:            {
        -:  853:                //+2 cards
    #####:  854:                drawCard(currentPlayer, state);
    #####:  855:                drawCard(currentPlayer, state);
        -:  856:            }
    #####:  857:            else if (choice1 == 2)
        -:  858:            {
        -:  859:                //+2 coins
    #####:  860:                state->coins = state->coins + 2;
        -:  861:            }
        -:  862:            else
        -:  863:            {
        -:  864:                //trash 2 cards in hand
    #####:  865:                discardCard(choice2, currentPlayer, state, 1);
    #####:  866:                discardCard(choice3, currentPlayer, state, 1);
        -:  867:            }
        -:  868:
        -:  869:            //discard card from hand
    #####:  870:            discardCard(handPos, currentPlayer, state, 0);
    #####:  871:            return 0;
        -:  872:
        -:  873:        case tribute:
    #####:  874:            return playTribute(state);
        -:  875:
        -:  876:        case ambassador:
    #####:  877:            j = 0;		//used to check if player has enough cards to discard
        -:  878:
    #####:  879:            if (choice2 > 2 || choice2 < 0)
        -:  880:            {
    #####:  881:                return -1;				
        -:  882:            }
        -:  883:
    #####:  884:            if (choice1 == handPos)
        -:  885:            {
    #####:  886:                return -1;
        -:  887:            }
        -:  888:
    #####:  889:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  890:            {
    #####:  891:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  892:                {
    #####:  893:                    j++;
        -:  894:                }
        -:  895:            }
    #####:  896:            if (j < choice2)
        -:  897:            {
    #####:  898:                return -1;				
        -:  899:            }
        -:  900:
    #####:  901:            if (DEBUG) 
        -:  902:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  903:
        -:  904:            //increase supply count for choosen card by amount being discarded
    #####:  905:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  906:
        -:  907:            //each other player gains a copy of revealed card
    #####:  908:            for (i = 0; i < state->numPlayers; i++)
        -:  909:            {
    #####:  910:                if (i != currentPlayer)
        -:  911:                {
    #####:  912:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  913:                }
        -:  914:            }
        -:  915:
        -:  916:            //discard played card from hand
    #####:  917:            discardCard(handPos, currentPlayer, state, 0);			
        -:  918:
        -:  919:            //trash copies of cards returned to supply
    #####:  920:            for (j = 0; j < choice2; j++)
        -:  921:            {
    #####:  922:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  923:                {
    #####:  924:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  925:                    {
    #####:  926:                        discardCard(i, currentPlayer, state, 1);
    #####:  927:                        break;
        -:  928:                    }
        -:  929:                }
        -:  930:            }			
        -:  931:
    #####:  932:            return 0;
        -:  933:
        -:  934:        case cutpurse:
        -:  935:
    #####:  936:            updateCoins(currentPlayer, state, 2);
    #####:  937:            for (i = 0; i < state->numPlayers; i++)
        -:  938:            {
    #####:  939:                if (i != currentPlayer)
        -:  940:                {
    #####:  941:                    for (j = 0; j < state->handCount[i]; j++)
        -:  942:                    {
    #####:  943:                        if (state->hand[i][j] == copper)
        -:  944:                        {
    #####:  945:                            discardCard(j, i, state, 0);
    #####:  946:                            break;
        -:  947:                        }
    #####:  948:                        if (j == state->handCount[i])
        -:  949:                        {
    #####:  950:                            for (k = 0; k < state->handCount[i]; k++)
        -:  951:                            {
    #####:  952:                                if (DEBUG)
        -:  953:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  954:                            }	
    #####:  955:                            break;
        -:  956:                        }		
        -:  957:                    }
        -:  958:
        -:  959:                }
        -:  960:
        -:  961:            }				
        -:  962:
        -:  963:            //discard played card from hand
    #####:  964:            discardCard(handPos, currentPlayer, state, 0);			
        -:  965:
    #####:  966:            return 0;
        -:  967:
        -:  968:
        -:  969:        case embargo: 
        -:  970:            //+2 Coins
    #####:  971:            state->coins = state->coins + 2;
        -:  972:
        -:  973:            //see if selected pile is in play
    #####:  974:            if ( state->supplyCount[choice1] == -1 )
        -:  975:            {
    #####:  976:                return -1;
        -:  977:            }
        -:  978:
        -:  979:            //add embargo token to selected supply pile
    #####:  980:            state->embargoTokens[choice1]++;
        -:  981:
        -:  982:            //trash card
    #####:  983:            discardCard(handPos, currentPlayer, state, 1);		
    #####:  984:            return 0;
        -:  985:
        -:  986:        case outpost:
        -:  987:            //set outpost flag
    #####:  988:            state->outpostPlayed++;
        -:  989:
        -:  990:            //discard card
    #####:  991:            discardCard(handPos, currentPlayer, state, 0);
    #####:  992:            return 0;
        -:  993:
        -:  994:        case salvager:
        -:  995:            //+1 buy
    #####:  996:            state->numBuys++;
        -:  997:
    #####:  998:            if (choice1)
        -:  999:            {
        -: 1000:                //gain coins equal to trashed card
    #####: 1001:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1002:                //trash card
    #####: 1003:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1004:            }
        -: 1005:
        -: 1006:            //discard card
    #####: 1007:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1008:            return 0;
        -: 1009:
        -: 1010:        case sea_hag:
    #####: 1011:            for (i = 0; i < state->numPlayers; i++){
    #####: 1012:                if (i != currentPlayer){
    #####: 1013:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1014:                    state->discardCount[i]++;
    #####: 1015:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1016:                }
        -: 1017:            }
    #####: 1018:            return 0;
        -: 1019:
        -: 1020:        case treasure_map:
        -: 1021:            //search hand for another treasure_map
    #####: 1022:            index = -1;
    #####: 1023:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1024:            {
    #####: 1025:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1026:                {
    #####: 1027:                    index = i;
    #####: 1028:                    break;
        -: 1029:                }
        -: 1030:            }
    #####: 1031:            if (index > -1)
        -: 1032:            {
        -: 1033:                //trash both treasure cards
    #####: 1034:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1035:                discardCard(index, currentPlayer, state, 1);
        -: 1036:
        -: 1037:                //gain 4 Gold cards
    #####: 1038:                for (i = 0; i < 4; i++)
        -: 1039:                {
    #####: 1040:                    gainCard(gold, state, 1, currentPlayer);
        -: 1041:                }
        -: 1042:
        -: 1043:                //return success
    #####: 1044:                return 1;
        -: 1045:            }
        -: 1046:
        -: 1047:            //no second treasure_map found in hand
    #####: 1048:            return -1;
        -: 1049:    }
        -: 1050:
    #####: 1051:    return -1;
        -: 1052:}
        -: 1053:
        4: 1054:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1055:{
        -: 1056:
        -: 1057:    //if card is not trashed, added to Played pile 
        4: 1058:    if (trashFlag < 1)
        -: 1059:    {
        -: 1060:        //add card to played pile
        4: 1061:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1062:        state->playedCardCount++;
        -: 1063:    }
        -: 1064:
        -: 1065:    //set played card to -1
        4: 1066:    state->hand[currentPlayer][handPos] = -1;
        -: 1067:
        -: 1068:    //remove card from player's hand
        4: 1069:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1070:    {
        -: 1071:        //reduce number of cards in hand
        1: 1072:        state->handCount[currentPlayer]--;
        -: 1073:    }
        3: 1074:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1075:    {
        -: 1076:        //reduce number of cards in hand
    #####: 1077:        state->handCount[currentPlayer]--;
        -: 1078:    }
        -: 1079:    else 	
        -: 1080:    {
        -: 1081:        //replace discarded card with last card in hand
        3: 1082:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1083:        //set last card to -1
        3: 1084:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1085:        //reduce number of cards in hand
        3: 1086:        state->handCount[currentPlayer]--;
        -: 1087:    }
        -: 1088:
        4: 1089:    return 0;
        -: 1090:}
        -: 1091:
        3: 1092:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1093:{
        -: 1094:    //Note: supplyPos is enum of choosen card
        -: 1095:
        -: 1096:    //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1097:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1098:    {
    #####: 1099:        return -1;
        -: 1100:    }
        -: 1101:
        -: 1102:    //added card for [whoseTurn] current player:
        -: 1103:    // toFlag = 0 : add to discard
        -: 1104:    // toFlag = 1 : add to deck
        -: 1105:    // toFlag = 2 : add to hand
        -: 1106:
        3: 1107:    if (toFlag == 1)
        -: 1108:    {
        1: 1109:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1110:        state->deckCount[player]++;
        -: 1111:    }
        2: 1112:    else if (toFlag == 2)
        -: 1113:    {
        1: 1114:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1115:        state->handCount[player]++;
        -: 1116:    }
        -: 1117:    else
        -: 1118:    {
        1: 1119:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1120:        state->discardCount[player]++;
        -: 1121:    }
        -: 1122:
        -: 1123:    //decrease number in supply pile
        3: 1124:    state->supplyCount[supplyPos]--;
        -: 1125:
        3: 1126:    return 0;
        -: 1127:}
        -: 1128:
        5: 1129:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1130:{
        -: 1131:    int i;
        -: 1132:
        -: 1133:    //reset coin count
        5: 1134:    state->coins = 0;
        -: 1135:
        -: 1136:    //add coins for each Treasure card in player's hand
       30: 1137:    for (i = 0; i < state->handCount[player]; i++)
        -: 1138:    {
       25: 1139:        if (state->hand[player][i] == copper)
        -: 1140:        {
       20: 1141:            state->coins += 1;
        -: 1142:        }
        5: 1143:        else if (state->hand[player][i] == silver)
        -: 1144:        {
    #####: 1145:            state->coins += 2;
        -: 1146:        }
        5: 1147:        else if (state->hand[player][i] == gold)
        -: 1148:        {
    #####: 1149:            state->coins += 3;
        -: 1150:        }	
        -: 1151:    }	
        -: 1152:
        -: 1153:    //add bonus
        5: 1154:    state->coins += bonus;
        -: 1155:
        5: 1156:    return 0;
        -: 1157:}
        -: 1158:
        2: 1159:int playAdventurer (struct gameState *state)
        -: 1160:{
        2: 1161:    int drawntreasure = 0;
        2: 1162:    int currentPlayer = whoseTurn(state);
        -: 1163:    int cardDrawn;
        -: 1164:    int temphand[MAX_HAND];
        2: 1165:    int z = 0;			// this is the counter for the temp hand
        -: 1166:
     1006: 1167:    while (drawntreasure < 2)
        -: 1168:    {
     1002: 1169:        if (state->deckCount[currentPlayer] < 1)
        -: 1170:        {
        -: 1171:            //if the deck is empty we need to shuffle discard and add to deck
      992: 1172:            shuffle (currentPlayer, state);
        -: 1173:        }
     1002: 1174:        drawCard (currentPlayer, state);
     1002: 1175:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1176:        {
    #####: 1177:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];	//top card of hand is most recently drawn card.
    #####: 1178:            drawntreasure++;
        -: 1179:        }
        -: 1180:        else
        -: 1181:        {
     1002: 1182:            temphand[z] = cardDrawn;
     1002: 1183:            state->handCount[currentPlayer]--;	//this should just remove the top card (the most recently drawn one).
     1002: 1184:            z++;
        -: 1185:        }
        -: 1186:    }
        -: 1187:
     1006: 1188:    while (z - 1 >= 0)
        -: 1189:    {
        -: 1190:        // discard all cards in play that have been drawn
     1002: 1191:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
     1002: 1192:        z = z - 1;
        -: 1193:    }
        -: 1194:
        2: 1195:    return 0;
        -: 1196:}
        -: 1197:
        1: 1198:int playSmithy(struct gameState *state, int handPos)
        -: 1199:{
        -: 1200:    int i;
        1: 1201:    int currentPlayer = whoseTurn(state);
        -: 1202:
        -: 1203:    //+3 Cards
        4: 1204:    for (i = 0; i < 3; i++)
        -: 1205:    {
        3: 1206:        drawCard(currentPlayer, state);
        -: 1207:        //discard card from hand
        3: 1208:        discardCard(handPos, currentPlayer, state, 0);
        -: 1209:    }
        -: 1210:
        1: 1211:    return 0;
        -: 1212:}
        -: 1213:
        1: 1214:int playMine(struct gameState *state, int handPos, int choice1, int choice2)
        -: 1215:{
        -: 1216:    int i;
        -: 1217:    int j;
        1: 1218:    int currentPlayer = whoseTurn(state);
        -: 1219:
        1: 1220:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1221:
        1: 1222:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1223:    {
        1: 1224:        return -1;
        -: 1225:    }
        -: 1226:
    #####: 1227:    if (choice2 > treasure_map || choice2 < curse)
        -: 1228:    {
    #####: 1229:        return -1;
        -: 1230:    }
        -: 1231:
    #####: 1232:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1233:    {
    #####: 1234:        return -1;
        -: 1235:    }
        -: 1236:
    #####: 1237:    gainCard(choice1, state, 2, currentPlayer);
        -: 1238:
        -: 1239:    //discard card from hand
    #####: 1240:    discardCard(handPos, currentPlayer, state, 0);
        -: 1241:
        -: 1242:    //discard trashed card
    #####: 1243:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1244:    {
    #####: 1245:        if (state->hand[currentPlayer][i] == j)
        -: 1246:        {
    #####: 1247:            discardCard(i, currentPlayer, state, 0);			
    #####: 1248:            break;
        -: 1249:        }
        -: 1250:    }
        -: 1251:
    #####: 1252:    return 0;
        -: 1253:}
        -: 1254:
    #####: 1255:int playTribute(struct gameState *state)
        -: 1256:{
        -: 1257:    int i;
    #####: 1258:    int tributeRevealedCards[2] = {-1, -1};
    #####: 1259:    int currentPlayer = whoseTurn(state);
    #####: 1260:    int nextPlayer = currentPlayer + 1;
    #####: 1261:    if (nextPlayer > (state->numPlayers - 1))
        -: 1262:    {
    #####: 1263:        nextPlayer = 0;
        -: 1264:    }
        -: 1265:
    #####: 1266:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1267:    {
    #####: 1268:        if (state->deckCount[nextPlayer] > 0)
        -: 1269:        {
    #####: 1270:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1271:            state->deckCount[nextPlayer]--;
        -: 1272:        }
    #####: 1273:        else if (state->discardCount[nextPlayer] > 0)
        -: 1274:        {
    #####: 1275:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1276:            state->discardCount[nextPlayer]--;
        -: 1277:        }
        -: 1278:        else
        -: 1279:        {
        -: 1280:            //No Card to Reveal
    #####: 1281:            if (DEBUG)
        -: 1282:            {
        -: 1283:                printf("No cards to reveal\n");
        -: 1284:            }
        -: 1285:        }
        -: 1286:    }
        -: 1287:    else
        -: 1288:    {
    #####: 1289:        if (state->deckCount[nextPlayer] == 0)
        -: 1290:        {
    #####: 1291:            for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1292:            {
    #####: 1293:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1294:                state->deckCount[nextPlayer]++;
    #####: 1295:                state->discard[nextPlayer][i] = -1;
    #####: 1296:                state->discardCount[nextPlayer]--;
        -: 1297:            }
        -: 1298:
    #####: 1299:            shuffle(nextPlayer,state);//Shuffle the deck
        -: 1300:        } 
        -: 1301:
    #####: 1302:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1303:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1304:        state->deckCount[nextPlayer]--;
    #####: 1305:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1306:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1307:        state->deckCount[nextPlayer]--;
        -: 1308:    }    
        -: 1309:
    #####: 1310:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1311:    {
        -: 1312:        //If we have a duplicate card, just drop one 
    #####: 1313:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1314:        state->playedCardCount++;
    #####: 1315:        tributeRevealedCards[1] = -1;
        -: 1316:    }
        -: 1317:
    #####: 1318:    for (i = 0; i <= 2; i ++)
        -: 1319:    {
    #####: 1320:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1321:        {
        -: 1322:            //Treasure cards
    #####: 1323:            state->coins += 2;
        -: 1324:        }
    #####: 1325:        else if (tributeRevealedCards[i] == estate || 
    #####: 1326:                 tributeRevealedCards[i] == duchy || 
    #####: 1327:                 tributeRevealedCards[i] == province ||
    #####: 1328:                 tributeRevealedCards[i] == gardens ||
    #####: 1329:                 tributeRevealedCards[i] == great_hall)
        -: 1330:        {
        -: 1331:            //Victory Card Found
    #####: 1332:            drawCard(currentPlayer, state);
    #####: 1333:            drawCard(currentPlayer, state);
        -: 1334:        }
        -: 1335:        //Action Card
    #####: 1336:        state->numActions = state->numActions + 2;
        -: 1337:    }
        -: 1338:
    #####: 1339:    return 0;
        -: 1340:}
        -: 1341:
    #####: 1342:int playBaron(struct gameState *state, int choice1)
        -: 1343:{
    #####: 1344:    int currentPlayer = whoseTurn(state);
    #####: 1345:    state->numBuys++; //Increase buys by 1!
    #####: 1346:    if (choice1 > 0)
        -: 1347:    {
        -: 1348:        //Boolean true or going to discard an estate
    #####: 1349:        int p = 0; //Iterator for hand!
    #####: 1350:        int card_not_discarded = 1; //Flag for discard set!
    #####: 1351:        while(card_not_discarded)
        -: 1352:        {
    #####: 1353:            if (state->hand[currentPlayer][p] == estate)
        -: 1354:            {
        -: 1355:                //Found an estate card!
    #####: 1356:                state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1357:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1358:                state->discardCount[currentPlayer]++;
    #####: 1359:                for (;p < state->handCount[currentPlayer]; p++)
        -: 1360:                {
    #####: 1361:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1362:                }
    #####: 1363:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1364:                state->handCount[currentPlayer]--;
    #####: 1365:                card_not_discarded = 0; //Exit the loop
        -: 1366:            }
    #####: 1367:            else if (p > state->handCount[currentPlayer])
        -: 1368:            {
    #####: 1369:                if(DEBUG)
        -: 1370:                {
        -: 1371:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1372:                    printf("Must gain an estate if there are any\n");
        -: 1373:                }
    #####: 1374:                if (supplyCount(estate, state) > 0)
        -: 1375:                {
    #####: 1376:                    gainCard(estate, state, 0, currentPlayer);
    #####: 1377:                    state->supplyCount[estate]--;//Decrement estates
    #####: 1378:                    if (supplyCount(estate, state) == 0)
        -: 1379:                    {
    #####: 1380:                        isGameOver(state);
        -: 1381:                    }
        -: 1382:                }
    #####: 1383:                card_not_discarded = 0; //Exit the loop
        -: 1384:            }
        -: 1385:            else
        -: 1386:            {
    #####: 1387:                p++; //Next card
        -: 1388:            }
        -: 1389:        }
        -: 1390:    }
        -: 1391:    else
        -: 1392:    {
    #####: 1393:        if (supplyCount(estate, state) > 0)
        -: 1394:        {
    #####: 1395:            gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1396:            state->supplyCount[estate]--;//Decrement Estates
    #####: 1397:            if (supplyCount(estate, state) == 0)
        -: 1398:            {
    #####: 1399:                isGameOver(state);
        -: 1400:            }
        -: 1401:        }
        -: 1402:    }
        -: 1403:
    #####: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407://end of dominion.c
        -: 1408:
File 'unittest1.c'
Lines executed:71.43% of 42
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * shuffle()
        -:    3: *
        -:    4: * The shuffle() function works as follows:
        -:    5: *  -create a new deck to hold shuffled deck
        -:    6: *  -sort the player's cards
        -:    7: *  -pick random cards from the player's deck and place into new deck
        -:    8: *  -copy new deck into player's deck
        -:    9: *
        -:   10: * Things to check:
        -:   11: *  -Set of cards in deck is the same (check first that deck count is unchanged)
        -:   12: *  -Order of cards in deck is not the same
        -:   13: *  -Set and order of other players' decks is the same
        -:   14: *  -If the player has <= 1 card in his or her deck, everything should be the same
        -:   15: * -----------------------------------------------------------------------
        -:   16: */
        -:   17:
        -:   18:#include "dominion.h"
        -:   19:#include "dominion_helpers.h"
        -:   20:#include "rngs.h"
        -:   21:#include "testhelper.h"
        -:   22:#include <stdlib.h>
        -:   23:#include <string.h>
        -:   24:#include <stdio.h>
        -:   25:#include <assert.h>
        -:   26:
        -:   27:int compare(const void* a, const void* b);
        -:   28:
        1:   29:int main() {
        -:   30:    int i;
        -:   31:    int player;
        1:   32:    int seed = 1000;
        1:   33:    int numPlayers = 2;
        -:   34:    int cards[10] = {adventurer, council_room, feast, gardens, mine,
        1:   35:                     remodel, smithy, village, baron, great_hall};
        -:   36:    struct gameState state;
        -:   37:    struct gameState originalState;
        -:   38:
        -:   39:    // Initialize gameState
        1:   40:    if (initializeState(numPlayers, cards, seed, &state) != 0)
        -:   41:    {
    #####:   42:        printf("Error: Could not initialize state.\n");
    #####:   43:        return -1;
        -:   44:    }
        -:   45:
        -:   46:    // Preserve the original game state to compare result of shuffle()
        1:   47:    memcpy(&originalState, &state, sizeof(struct gameState));
        -:   48:
        1:   49:    printf ("Testing shuffle():\n");
        -:   50:
        1:   51:    player = 0;
        1:   52:    printf("Shuffling Player %d:\n", player);
        -:   53:
        1:   54:    if (shuffle(player, &state) < 0)
        -:   55:    {
    #####:   56:        printf("\tERROR: shuffe() failed.\n");
    #####:   57:        return -1;
        -:   58:    }
        -:   59:
        -:   60:    // Check first that each player's deck count is unchanged)
        -:   61:    int p;
        3:   62:    for (p = 0; p < numPlayers; p++)
        -:   63:    {
        2:   64:        if (state.handCount[p] != originalState.handCount[p])
        -:   65:        {
    #####:   66:            printf("\tERROR: handCount not the same\n");
    #####:   67:            return -1;
        -:   68:        }
        -:   69:    }
        -:   70:
        -:   71:    // Check order of cards for each player 
        3:   72:    for (p = 0; p < numPlayers; p++)
        -:   73:    {
        2:   74:        printf("Checking order of player %d's deck...\n", p);
        -:   75:
        2:   76:        i = 0;
       29:   77:        while ( (i < state.deckCount[p]) &&
       13:   78:                (state.deck[p][i] == originalState.deck[p][i]) )
        -:   79:        {
       12:   80:            printf("\tshuffled card %d: %d\n", i, state.deck[p][i]);
       12:   81:            printf("\toriginal card %d: %d\n", i, originalState.deck[p][i]);
       12:   82:            i++;
        -:   83:        }
        2:   84:        printf("\n");
        -:   85:        
        -:   86:        // Check if order of cards in shuffled deck is the same
        2:   87:        if (p == player && i >= state.deckCount[p])
        -:   88:        {
    #####:   89:            printf("ERROR: Order of shuffled deck is the same.\n");
    #####:   90:            return -1;
        -:   91:        }
        2:   92:        else if (p == player && i < state.deckCount[p])
        -:   93:        {
        1:   94:            printf("Player %d's is different! Great success!\n", player);
        -:   95:        }
        -:   96:
        -:   97:        // Check if order of cards in unshuffled deck is the same
        2:   98:        if (p != player && i < state.deckCount[p])
        -:   99:        {
    #####:  100:            printf("ERROR: Order of non-shuffled deck is different.\n");
    #####:  101:            return -1;
        -:  102:        }
        -:  103:    }
        -:  104:    
        -:  105:    // Check that shuffled deck has same set of cards
        1:  106:    qsort((void*)(state.deck[0]), state.deckCount[player], sizeof(int), compare);
        1:  107:    qsort((void*)(originalState.deck[0]), state.deckCount[player], sizeof(int), compare);
        -:  108:
        1:  109:    if (memcmp(&state, &originalState, sizeof(struct gameState)) != 0)
        -:  110:    {
    #####:  111:        printf("\tERROR: memcmp failed.\n");
    #####:  112:        return -1;
        -:  113:    }
        -:  114:
        1:  115:    printf("All tests passed!\n");
        1:  116:    return 0;
        -:  117:}
File 'unittest2.c'
Lines executed:60.00% of 45
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * discardCard()
        -:    3: *
        -:    4: * The discardCard() function works as follows:
        -:    5: *  -add card to playedCards pile
        -:    6: *  -set the played card to -1
        -:    7: *  -decrement hand count
        -:    8: *  -if there are cards left in the player's hand, move last hard to empty
        -:    9: *  space left by discarded card
        -:   10: *
        -:   11: * Things to check:
        -:   12: *  -playedCards contains the card that was discarded (df.flags[PLAYED_CARDS] == 1)
        -:   13: *  -playedCardCount increased by 1 (df.flags[PLAYED_CARD_COUNT] == 1)
        -:   14: *  -player's hand has decreased by 1 (df.flags[HAND] == df.flags[HAND_COUNT] == 1)
        -:   15: *  -nothing else in gamestate has changed
        -:   16: * -----------------------------------------------------------------------
        -:   17: */
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "rngs.h"
        -:   22:#include "testhelper.h"
        -:   23:#include <stdlib.h>
        -:   24:#include <string.h>
        -:   25:#include <stdio.h>
        -:   26:
        1:   27:int main()
        -:   28:{
        -:   29:    int i;
        -:   30:    int count;
        -:   31:    int player;
        -:   32:    int flag;
        1:   33:    int seed = 1000;
        1:   34:    int numPlayers = 2;
        -:   35:    int cards[10] = {adventurer, council_room, feast, gardens, mine,
        1:   36:                     remodel, smithy, village, baron, great_hall};
        -:   37:    struct gameState state;
        -:   38:    struct gameState originalState;
        -:   39:
        -:   40:    // Initialize gameState
        1:   41:    if (initializeState(numPlayers, cards, seed, &state) != 0)
        -:   42:    {
    #####:   43:        printf("Error: Could not initialize state.\n");
    #####:   44:        return -1;
        -:   45:    }
        -:   46:
        -:   47:    // Put card into player's hand
        1:   48:    player = 0;
        1:   49:    count = 0;
        -:   50:
        1:   51:    int deckCounter = state.deckCount[player];
        1:   52:    state.handCount[player] = count;
        -:   53:
        1:   54:    if (deckCounter == 0)
        -:   55:    {
    #####:   56:        printf("ERROR: Could not draw card.\n");
    #####:   57:        return -1;
        -:   58:    }
        -:   59:
        1:   60:    state.hand[player][count] = state.deck[player][deckCounter - 1];//Add card to hand
        1:   61:    state.deckCount[player]--;
        1:   62:    state.handCount[player]++;//Increment hand count
        -:   63:
        -:   64:    // Preserve the original game state to compare result of shuffle()
        1:   65:    memcpy(&originalState, &state, sizeof(struct gameState));
        -:   66:
        1:   67:    printf ("Testing discardCard():\n");
        -:   68:
        -:   69:
        1:   70:    if (discardCard(0, player, &state, 0) < 0)
        -:   71:    {
    #####:   72:        printf("\tERROR: discardCard() failed.\n");
    #####:   73:        return -1;
        -:   74:    }
        -:   75:
        1:   76:    struct StateDiff df = compareStates(&originalState, &state);
        -:   77:    
       19:   78:    for (i = 0; i < NUM_FIELDS; i++)
        -:   79:    {
       18:   80:        flag = df.flags[i];
        -:   81:
       18:   82:        if (flag == 1 && i != PLAYED_CARDS
        -:   83:                      && i != PLAYED_CARD_COUNT
        -:   84:                      && i != HAND
        -:   85:                      && i != HAND_COUNT)
        -:   86:        {
    #####:   87:            printf("\tERROR: unexpected state change at df.flags[%d]\n", i);
    #####:   88:            return -1;
        -:   89:        }
       18:   90:        else if (flag == 0 && (i == PLAYED_CARDS
        -:   91:                               || i == PLAYED_CARD_COUNT
        -:   92:                               || i == HAND
        -:   93:                               || i == HAND_COUNT))
        -:   94:        {
    #####:   95:            printf("\tERROR: expected state change at df.flags[%d]\n", i);
    #####:   96:            return -1;
        -:   97:        }
        -:   98:    }
        -:   99:
        1:  100:    printf("All state changes as expected.\n");
        -:  101:
        -:  102:    // playedCards contains the card that was discarded (df.flags[PLAYED_CARDS] == 1)
        1:  103:    if (state.playedCards[0] != originalState.hand[player][0])
        -:  104:    {
    #####:  105:        printf("\tERROR: incorrect card discarded.\n");
    #####:  106:        return -1;
        -:  107:    } 
        -:  108:     
        -:  109:    // playedCardCount increased by 1 (df.flags[PLAYED_CARD_COUNT] == 1)
        1:  110:    if (state.playedCardCount != originalState.playedCardCount + 1)
        -:  111:    {
    #####:  112:        printf("\tERROR: playedCardCount is incorrect.\n");
    #####:  113:        return -1;
        -:  114:    }
        -:  115:    
        -:  116:    // player's hand has decreased by 1 (df.flags[HAND] == df.flags[HAND_COUNT] == 1)
        1:  117:    if (state.handCount[player] != (originalState.handCount[player] - 1))
        -:  118:    {
    #####:  119:        printf("\tERROR: handCount is incorrect.\n");
    #####:  120:        printf("New hand count: %d\n", state.handCount[player]);
    #####:  121:        printf("Expected hand count: %d\n", originalState.handCount[player] - 1);
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        1:  125:    printf ("All tests passed.\n");
        1:  126:    return 0;
        -:  127:}
File 'unittest3.c'
Lines executed:73.81% of 42
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * gainCard()
        -:    3: *
        -:    4: * The gainCard() function works as follows:
        -:    5: *  -checks if chosen card is in supply
        -:    6: *  -adds card to 1: deck OR 2: hand OR 3: discard pile of current player
        -:    7: *  -decrements count of card in supply
        -:    8: *
        -:    9: * Things to check:
        -:   10: *  -if dest == 1: player's deckCount increased, card on top of deck is chosen card
        -:   11: *  -if dest == 2: player's handCount is increased, card on top of hand is chosen card
        -:   12: *  -if dest == 3: player's discardCount is increased, card on top of discard is chosen card
        -:   13: *  -supply count of chosen card has decreased
        -:   14: *  -nothing else in state has changed
        -:   15: * -----------------------------------------------------------------------
        -:   16: */
        -:   17:
        -:   18:#include "dominion.h"
        -:   19:#include "dominion_helpers.h"
        -:   20:#include "rngs.h"
        -:   21:#include "testhelper.h"
        -:   22:#include <stdlib.h>
        -:   23:#include <string.h>
        -:   24:#include <stdio.h>
        -:   25:
        1:   26:int main()
        -:   27:{
        -:   28:    int i;
        -:   29:    int player;
        -:   30:    int dest;
        -:   31:    int supplyPos;
        -:   32:    int flag;
        1:   33:    int seed = 1000;
        1:   34:    int numPlayers = 2;
        -:   35:    int cards[10] = {adventurer, council_room, feast, gardens, mine,
        1:   36:                     remodel, smithy, village, baron, great_hall};
        -:   37:    struct gameState state;
        -:   38:    struct gameState originalState;
        -:   39:
        -:   40:    // Initialize gameState
        1:   41:    if (initializeState(numPlayers, cards, seed, &state) != 0)
        -:   42:    {
    #####:   43:        printf("Error: Could not initialize state.\n");
    #####:   44:        return -1;
        -:   45:    }
        -:   46:
        -:   47:    // Preserve the original game state to compare result of shuffle()
        1:   48:    memcpy(&originalState, &state, sizeof(struct gameState));
        -:   49:
        1:   50:    printf ("Testing gainCard():\n");
        1:   51:    player = 0;
        1:   52:    state.deckCount[player] = 0;
        1:   53:    state.handCount[player] = 0;
        1:   54:    state.discardCount[player] = 0;
        1:   55:    supplyPos = adventurer;
        -:   56:
        4:   57:    for (dest = 1; dest < 4; dest++)
        -:   58:    {
        3:   59:        if (gainCard(supplyPos, &state, dest, player) < 0)
        -:   60:        {
    #####:   61:            printf("ERROR: gainCard() failed, dest = %d\n", dest);
    #####:   62:            return -1;
        -:   63:        }
        -:   64:
        3:   65:        struct StateDiff df = compareStates(&originalState, &state);
       57:   66:        for (i = 0; i < NUM_FIELDS; i++)
        -:   67:        {
       54:   68:            flag = df.flags[i];
        -:   69:
       54:   70:            if (flag == 1 && i != SUPPLY_COUNT 
        -:   71:                          && i != DECK
        -:   72:                          && i != DECK_COUNT
        -:   73:                          && i != HAND
        -:   74:                          && i != HAND_COUNT
        -:   75:                          && i != DISCARD
        -:   76:                          && i != DISCARD_COUNT)
        -:   77:            {
    #####:   78:                printf("\tERROR: unexpected state change at df.flags[%d]\n", i);
    #####:   79:                return -1;
        -:   80:            }
        -:   81:        }
        -:   82:
        -:   83:        // dest == 1: player's deckCount increased, card on top of deck is chosen card
        4:   84:        if (dest == 1 && (state.deckCount[player] != originalState.deckCount[player] + 1
        1:   85:                          || state.deck[player][0] != supplyPos))
        -:   86:        {
        1:   87:            printf("\tERROR: card not gained into deck. dest = %d\n", dest);
        1:   88:            printf("\tNew deck count: %d\n", state.deckCount[player]);
        1:   89:            printf("\tExpected deck count: %d\n", originalState.deckCount[player] + 1);
        -:   90:        }
        -:   91:        // dest == 2: player's handCount is increased, card on top of hand is chosen card
        5:   92:        if (dest == 2 && (state.handCount[player] != originalState.handCount[player] + 1
        2:   93:                          || state.hand[player][0] != supplyPos))
        -:   94:        {
    #####:   95:            printf("\tERROR: card not gained into hand.\n");
        -:   96:        }
        -:   97:        // dest == 3: player's discardCount is increased, card on top of discard is chosen card
        5:   98:        if (dest == 3 && (state.discardCount[player] != originalState.discardCount[player] + 1
        2:   99:                          || state.discard[player][0] != supplyPos))
        -:  100:        {
    #####:  101:            printf("\tERROR: card not gained into discard.\n");
        -:  102:        }
        -:  103:
        -:  104:        // supply count of chosen card has decreased
        3:  105:        if (state.supplyCount[supplyPos] != originalState.supplyCount[supplyPos] - 1)
        -:  106:        {
    #####:  107:            printf("ERROR: supplyCount() is incorrect.\n");
    #####:  108:            printf("New supplyCount: %d\n", state.supplyCount[supplyPos]);
    #####:  109:            printf("Expected supplyCount: %d\n", originalState.supplyCount[supplyPos] - 1);
        -:  110:        }
        -:  111:
        -:  112:        // after each dest tested, restore original game state for new test
        3:  113:        memcpy(&state, &originalState, sizeof(struct gameState));
        -:  114:    }
        -:  115:
        1:  116:    printf ("End of gainCard() test.\n");
        1:  117:    return 0;
        -:  118:}
File 'unittest4.c'
Lines executed:71.43% of 21
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * isGameOver()
        -:    3: *
        -:    4: * The isGameOver() function works as follows:
        -:    5: *  -returns 1 on any end-game condition (0 province cards OR three supply piles at 0)
        -:    6: *
        -:    7: * Things to check:
        -:    8: *  -0 province cards returns 1
        -:    9: *  -3 supply piles at 0 returns 1
        -:   10: * -----------------------------------------------------------------------
        -:   11: */
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "rngs.h"
        -:   16:#include "testhelper.h"
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:#include <stdio.h>
        -:   20:
        1:   21:int main()
        -:   22:{
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        -:   25:    int cards[10] = {adventurer, council_room, feast, gardens, mine,
        1:   26:                     remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState state;
        -:   28:
        -:   29:    // Initialize gameState
        1:   30:    if (initializeState(numPlayers, cards, seed, &state) != 0)
        -:   31:    {
    #####:   32:        printf("Error: Could not initialize state.\n");
    #####:   33:        return -1;
        -:   34:    }
        -:   35:
        1:   36:    printf("Testing isGameOver():\n");
        -:   37:
        -:   38:    // Stack of province cards is empty
        1:   39:    state.supplyCount[province] = 0;
        1:   40:    if (isGameOver(&state) != 1)
        -:   41:    {
    #####:   42:        printf("\tERROR: No province cards left; game should be over.\n");
    #####:   43:        return -1;
        -:   44:    }
        -:   45:    // restore supply count for next test
        1:   46:    state.supplyCount[province] = 8;
        -:   47:    
        -:   48:    // 3 supply stacks are empty
        1:   49:    state.supplyCount[adventurer] = 0;
        1:   50:    state.supplyCount[council_room] = 0;
        1:   51:    state.supplyCount[feast] = 0;
        1:   52:    if (isGameOver(&state) != 1)
        -:   53:    {
    #####:   54:        printf("\tERROR: 3 supply stacks are empty; game should be over.\n");
    #####:   55:        return -1;
        -:   56:    }
        -:   57:
        1:   58:    printf ("All tests passed.\n");
        1:   59:    return 0;
        -:   60:}
File 'cardtest1.c'
Lines executed:90.32% of 93
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * playAdventurer()
        -:    3: *
        -:    4: * The playAdventurer() function works as follows:
        -:    5: *  -discards cards until player draws 2 treasure cards
        -:    6: *  -discards all cards drawn that were not treasure cards
        -:    7: *  -adventurer card goes to played deck
        -:    8: *
        -:    9: * Things to check:
        -:   10: *  -player has drawn 2 treasure cards into hand
        -:   11: * -----------------------------------------------------------------------
        -:   12: */
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include "rngs.h"
        -:   17:#include "testhelper.h"
        -:   18:#include <stdlib.h>
        -:   19:#include <string.h>
        -:   20:#include <stdio.h>
        -:   21:#include <assert.h>
        -:   22:
        -:   23:int compare(const void* a, const void* b);
        -:   24:
        2:   25:int setUp(struct gameState* state)
        -:   26:{
        2:   27:    int player = 0;
        2:   28:    int seed = 1000;
        2:   29:    int numPlayers = 2;
        -:   30:    int cards[10] = {adventurer, council_room, feast, gardens, mine,
        2:   31:                     remodel, smithy, village, baron, great_hall};
        -:   32:
        -:   33:    // Initialize gameState
        2:   34:    if (initializeGame(numPlayers, cards, seed, state) != 0)
        -:   35:    {
    #####:   36:        printf("Error: Default initializeGame() failed.\n");
    #####:   37:        return -1;
        -:   38:    }
        -:   39:    
        2:   40:    state->whoseTurn = player;
        2:   41:    return 0;
        -:   42:}
        -:   43:
        2:   44:int drawCardHelper(struct gameState* state, int player)
        -:   45:{
        2:   46:    int card = state->deck[player][state->deckCount[player] - 1];
        2:   47:    state->deckCount[player]--;
        2:   48:    state->hand[player][state->handCount[player]] = card;
        2:   49:    state->handCount[player]++;
        2:   50:    return card;
        -:   51:}
        -:   52:
        2:   53:int checkDiff(struct StateDiff* diff)
        -:   54:{
        2:   55:    int passed = 1;
        2:   56:    if (diff->flags[PLAYED_CARDS] == 1)
        -:   57:    {
        2:   58:        printf("Failed: played cards pile do not match.\n");
        2:   59:        passed = 0;
        -:   60:    }
        2:   61:    if (diff->flags[PLAYED_CARD_COUNT] == 1)
        -:   62:    {
    #####:   63:        printf("Failed: played cards count do not match.\n");
    #####:   64:        passed = 0;
        -:   65:    }
        2:   66:    if (diff->flags[HAND] == 1)
        -:   67:    {
        2:   68:        printf("Failed: hands do not match.\n");
        2:   69:        passed = 0;
        -:   70:    }
        2:   71:    if (diff->flags[HAND_COUNT] == 1)
        -:   72:    {
        2:   73:        printf("Failed: hand counts do not match.\n");
        2:   74:        passed = 0;
        -:   75:    }
        2:   76:    if (diff->flags[DISCARD] == 1)
        -:   77:    {
        2:   78:        printf("Failed: discard piles do not match.\n");
        2:   79:        passed = 0;
        -:   80:    }
        2:   81:    if (diff->flags[DISCARD_COUNT] == 1)
        -:   82:    {
        2:   83:        printf("Failed: dicard counts do not match.\n");
        2:   84:        passed = 0;
        -:   85:    }
        2:   86:    return passed;
        -:   87:}
        -:   88:
        -:   89:// Test with deck of only treasure cards
        1:   90:int testAdventurer1()
        -:   91:{
        1:   92:    printf("Testing adventurer card with only treasure cards in deck\n");
        -:   93:    struct gameState state;
        1:   94:    if (setUp(&state) == -1) return 0;
        1:   95:    int player = state.whoseTurn;
        -:   96:
        -:   97:    // Replace player's deck with treasure cards.
        -:   98:    int i;
        6:   99:    for (i = 0; i < state.deckCount[player]; i++)
        -:  100:    {
        5:  101:        int treasure = copper;
        5:  102:        if (i % 3 == 0) treasure = gold;
        3:  103:        else if (i % 2 == 0) treasure = silver;
        5:  104:        state.deck[player][i] = treasure;
        -:  105:    }
        -:  106:
        -:  107:    // Make copy of initial state.
        -:  108:    struct gameState expectedState;
        1:  109:    memcpy(&expectedState, &state, sizeof(struct gameState));
        -:  110:
        1:  111:    int success = playAdventurer(&state);
        1:  112:    if (success != 0)
        -:  113:    {
    #####:  114:        printf("playAdventurer() failed\n");
    #####:  115:        return 0;
        -:  116:    }
        -:  117:
        -:  118:    // Setup expected state.
        -:  119:    // Add adventurer to played pile.
        1:  120:    expectedState.playedCards[0] = adventurer;
        -:  121:    // Draw top two cards from deck and add them to hand.
        1:  122:    drawCardHelper(&expectedState, player);
        1:  123:    drawCardHelper(&expectedState, player);
        -:  124:
        1:  125:    struct StateDiff diff = compareStates(&expectedState, &state);
        1:  126:    int passed = checkDiff(&diff);
        1:  127:    printf("End of test\n\n");
        1:  128:    return passed;
        -:  129:}
        -:  130:
        -:  131:// Test with only two treasure cards mixed in.
        1:  132:int testAdventurer2()
        -:  133:{
        1:  134:    printf("Test adventurer card with only two treasure cards mixed in.\n");
        -:  135:    struct gameState state;
        1:  136:    if (setUp(&state) == -1) return 0;
        1:  137:    int player = state.whoseTurn;
        -:  138:
        -:  139:    // Replace deck with estates.
        -:  140:    int i;
        6:  141:    for (i = 0; i < state.deckCount[player]; i++)
        -:  142:    {
        5:  143:        state.deck[player][i] = estate;
        -:  144:    }
        -:  145:    // Add two treasure cards
        1:  146:    state.deck[player][0] = copper;
        1:  147:    state.deck[player][5] = copper;
        -:  148:
        -:  149:    // Make copy of initial state.
        -:  150:    struct gameState expectedState;
        1:  151:    memcpy(&expectedState, &state, sizeof(struct gameState));
        -:  152:
        1:  153:    int success = playAdventurer(&state);
        1:  154:    if (success != 0)
        -:  155:    {
    #####:  156:        printf("playAdventurer() failed\n");
    #####:  157:        return 0;
        -:  158:    }
        -:  159:
        -:  160:    // Setup expected state.
        1:  161:    expectedState.playedCards[0] = adventurer;
        1:  162:    expectedState.hand[player][0] = copper;
        1:  163:    expectedState.hand[player][1] = copper;
        9:  164:    for (i = 0; i < 8; i++)
        -:  165:    {
        8:  166:        expectedState.discard[player][i] = estate;
        8:  167:        expectedState.discardCount[player]++;
        -:  168:    }
        1:  169:    expectedState.deckCount[player] = 0;
        -:  170:
        -:  171:    // Compare states
        1:  172:    struct StateDiff diff = compareStates(&expectedState, &state);
        1:  173:    int passed = checkDiff(&diff);
        1:  174:    printf("End of test\n\n");
        1:  175:    return passed;
        -:  176:}
        -:  177:
        1:  178:int runAllTests()
        -:  179:{
        1:  180:    int failed = 0;
        1:  181:    failed += 1 - testAdventurer1();
        1:  182:    failed += 1 - testAdventurer2();
        1:  183:    return failed;
        -:  184:}
        -:  185:
        1:  186:int main()
        -:  187:{
        1:  188:    int failed = runAllTests();
        1:  189:    if (failed)
        -:  190:    {
        1:  191:        printf("%d tests failed!\n", failed);
        -:  192:    }
        -:  193:    else
        -:  194:    {
    #####:  195:        printf("All tests passed!\n");
        -:  196:    }
        1:  197:    return 0;
        -:  198:}
File 'cardtest2.c'
Lines executed:89.58% of 48
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * playSmithy()
        -:    3: *
        -:    4: * The playSmithy() function works as follows:
        -:    5: *  -draw 3 cards into player's hand
        -:    6: *  -put smithy into player's played cards pile
        -:    7: *
        -:    8: * Things to check:
        -:    9: *  -player has 3 more cards in hand
        -:   10: *  -player has 3 less cards in deck
        -:   11: *  -player has same amount of cards in played cards pile
        -:   12: * -----------------------------------------------------------------------
        -:   13: */
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include "rngs.h"
        -:   18:#include "testhelper.h"
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <stdio.h>
        -:   22:
        -:   23:int compare(const void*, const void*);
        -:   24:
        1:   25:int testSmithy()
        -:   26:{
        1:   27:    int failed = 0;
        -:   28:    int i;
        -:   29:    struct gameState state;
        1:   30:    if (!testHelperSetUpState(&state))
        -:   31:    {
    #####:   32:        printf("Failed: could not init state\n");
    #####:   33:        failed++;
        -:   34:    }
        1:   35:    int player = state.whoseTurn;
        -:   36:
        -:   37:    // Setup expected state
        -:   38:    struct gameState expected;
        1:   39:    memcpy(&expected, &state, sizeof(struct gameState));
        4:   40:    for (i = 0; i < 3; i++)
        -:   41:    {
        3:   42:        expected.hand[player][expected.handCount[player]] = expected.deck[player][expected.deckCount[player]];
        3:   43:        expected.handCount[player]++;
        3:   44:        expected.deckCount[player]--;
        -:   45:    }
        1:   46:    expected.handCount[player] += 3;
        1:   47:    expected.playedCards[expected.playedCardCount] = smithy;
        1:   48:    expected.playedCardCount++;
        -:   49:    
        -:   50:    // Add smithy as last card in hand and play it.
        1:   51:    int handPos = state.handCount[player];
        1:   52:    state.hand[player][handPos] = smithy;
        1:   53:    state.handCount[player]++;
        1:   54:    if (playSmithy(&state, handPos) != 0)
        -:   55:    {
    #####:   56:        printf("Failed: playSmithy() failed.\n");
    #####:   57:        failed++;
        -:   58:    }
        -:   59:
        -:   60:    // Compare hands
        1:   61:    if (state.handCount[player] != expected.handCount[player])
        -:   62:    {
        1:   63:        printf("Failed: hand counts do not match.\n");
        1:   64:        failed++;
        -:   65:    }
        1:   66:    qsort(state.hand[player], state.handCount[player], sizeof(int), compare);
        1:   67:    qsort(expected.hand[player], expected.handCount[player], sizeof(int), compare);
        1:   68:    for (i = 0; i < expected.handCount[player]; i++)
        -:   69:    {
        1:   70:        if (state.hand[player][i] != expected.hand[player][i])
        -:   71:        {
        1:   72:            printf("Failed: hands do not match.\n");
        1:   73:            failed++;
        1:   74:            break;
        -:   75:        }
        -:   76:    }
        -:   77:
        -:   78:    // Compare played card piles
        1:   79:    if (state.playedCardCount != expected.playedCardCount)
        -:   80:    {
        1:   81:        printf("Failed: played card counts do not match.\n");
        1:   82:        failed++;
        -:   83:    }
        1:   84:    qsort(state.playedCards, state.playedCardCount, sizeof(int), compare);
        1:   85:    qsort(expected.playedCards, expected.playedCardCount, sizeof(int), compare);
        1:   86:    for (i = 0; i < expected.playedCardCount; i++)
        -:   87:    {
        1:   88:        if (state.playedCards[i] != expected.playedCards[i])
        -:   89:        {
        1:   90:            printf("Failed: played cards do not match.\n");
        1:   91:            failed++;
        1:   92:            break;
        -:   93:        }
        -:   94:    }
        1:   95:    return failed;
        -:   96:}
        -:   97:
        1:   98:int main()
        -:   99:{
        1:  100:    printf("--------\nTesting smithy card\n");
        1:  101:    int failed = testSmithy();
        1:  102:    if (failed)
        -:  103:    {
        1:  104:        printf("Smithy card failed %d tests!\n\n", failed);
        -:  105:    }
        -:  106:    else
        -:  107:    {
    #####:  108:        printf("Smithy card passed all tests!\n\n");
        -:  109:    }
        1:  110:    return 0;
        -:  111:}
File 'cardtest3.c'
Lines executed:80.00% of 15
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * playTribute()
        -:    3: *
        -:    4: * The playTribute() function works as follows:
        -:    5: *  -player gets two coins if either of top two cards of the deck are treasures
        -:    6: *  -if either of top two cards are victory cards, current player draws two cards
        -:    7: *  -if either of top two cards are action cards, player gets two more actions in numActions
        -:    8: *
        -:    9: * Things to check:
        -:   10: *  -player gets two coins if a top card is a treasure
        -:   11: *  -player gets two cards in hand if a top card is a victory card, two cards removed from deck
        -:   12: *  -player gets two extra actions if a top card is an action card
        -:   13: *  -each effect happens only once
        -:   14: * -----------------------------------------------------------------------
        -:   15: */
        -:   16:
        -:   17:#include "dominion.h"
        -:   18:#include "dominion_helpers.h"
        -:   19:#include "rngs.h"
        -:   20:#include "testhelper.h"
        -:   21:#include <stdlib.h>
        -:   22:#include <string.h>
        -:   23:#include <stdio.h>
        -:   24:
        -:   25:int compare(const void*, const void*);
        -:   26:
        1:   27:int testTribute()
        -:   28:{
        1:   29:    int failed = 0;
        -:   30:    int i;
        -:   31:    struct gameState state;
        1:   32:    if (!testHelperSetUpState(&state))
        -:   33:    {
    #####:   34:        printf("Failed: could not init state\n");
    #####:   35:        failed++;
        -:   36:    }
        1:   37:    int player = state.whoseTurn;
        -:   38:
        -:   39:    // Setup expected state
        -:   40:    struct gameState expected;
        1:   41:    memcpy(&expected, &state, sizeof(struct gameState));
        -:   42:
        1:   43:    return failed;
        -:   44:}
        -:   45:
        1:   46:int main()
        -:   47:{
        1:   48:    printf("--------\nTesting tribute card\n");
        1:   49:    int failed = testTribute();
        1:   50:    if (failed)
        -:   51:    {
    #####:   52:        printf("Tribute card failed %d tests!\n\n", failed);
        -:   53:    }
        -:   54:    else
        -:   55:    {
        1:   56:        printf("Tribute card passed all tests!\n\n");
        -:   57:    }
        1:   58:    return 0;
        -:   59:}
File 'cardtest4.c'
Lines executed:91.18% of 34
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include "testhelper.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:
        -:    9:int compare(const void*, const void*);
        -:   10:
        1:   11:int testMine()
        -:   12:{
        1:   13:    int failed = 0;
        -:   14:    int i;
        -:   15:    struct gameState state;
        1:   16:    if (!testHelperSetUpState(&state))
        -:   17:    {
    #####:   18:        printf("Failed: could not init state\n");
    #####:   19:        failed++;
        -:   20:    }
        1:   21:    int player = state.whoseTurn;
        -:   22:
        -:   23:    // Setup expected state
        -:   24:    struct gameState expected;
        1:   25:    memcpy(&expected, &state, sizeof(struct gameState));
        1:   26:    int choice1 = silver;
        1:   27:    int choice2 = gold;
        1:   28:    expected.hand[player][expected.handCount[player] - 1] = choice2;
        -:   29:
        1:   30:    int handPos = state.handCount[player];
        1:   31:    state.hand[player][handPos] = mine;
        1:   32:    state.handCount[player]++;
        -:   33:
        1:   34:    if (playMine(&state, handPos, choice1, choice2) != 0)
        -:   35:    {
        1:   36:        printf("Failed: playMine() failed\n");
        1:   37:        failed++;
        -:   38:    }
        -:   39:
        -:   40:    // Compare states
        1:   41:    if (state.handCount[player] != expected.handCount[player])
        -:   42:    {
        1:   43:        printf("Failed: hand counts do not match\n");
        1:   44:        failed++;
        -:   45:    }
        1:   46:    qsort(state.hand[player], state.handCount[player], sizeof(int), compare);
        1:   47:    qsort(expected.hand[player], expected.handCount[player], sizeof(int), compare);
        5:   48:    for (i = 0; i < expected.handCount[player]; i++)
        -:   49:    {
        5:   50:        if (state.hand[player][i] != expected.hand[player][i])
        -:   51:        {
        1:   52:            printf("Failed: hands do not match.\n");
        1:   53:            failed++;
        1:   54:            break;
        -:   55:        }
        -:   56:    }
        -:   57:
        1:   58:    return failed;
        -:   59:}
        -:   60:
        1:   61:int main()
        -:   62:{
        1:   63:    printf("--------\nTesting mine card\n");
        1:   64:    int failed = testMine();
        1:   65:    if (failed)
        -:   66:    {
        1:   67:        printf("mine card failed %d tests!\n\n", failed);
        -:   68:    }
        -:   69:    else
        -:   70:    {
    #####:   71:        printf("Tribute card passed all tests!\n\n");
        -:   72:    }
        1:   73:    return 0;
        -:   74:}
