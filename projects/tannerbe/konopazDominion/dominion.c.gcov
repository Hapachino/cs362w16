        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:17
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 102405970 returned 100% blocks executed 100%
102405970:    8:int compare(const void* a, const void* b) {
102405970:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
 46124608:   10:    return 1;
 56281362:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
 21741283:   12:    return -1;
 34540079:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function newRandomGame called 102000 returned 100% blocks executed 94%
   102000:   21:struct gameState newRandomGame(int kc[10], int stream)
        -:   22:{
   102000:   23:  PlantSeeds(-1);
call    0 returned 100%
   102000:   24:  SelectStream(stream);
call    0 returned 100%
        -:   25:  int i, j, r, c, result, thisPlayer;
        -:   26:  int seed, numPlayers;
        -:   27:  struct gameState Game;
        -:   28:
        -:   29:  //valid random number of players
   102000:   30:  numPlayers = floor(Random() * 3) + 2;
call    0 returned 100%
        -:   31:
        -:   32:  //valid random seed
   102000:   33:  seed = floor(Random() * 1000000000);
call    0 returned 100%
        -:   34:  
        -:   35:  //make the game
   102000:   36:  result = initializeGame(numPlayers, kc, seed, &Game);
call    0 returned 100%
   102000:   37:  if (result == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   38:  {
    #####:   39:    for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   40:    {
    #####:   41:      printf("kc[%d] = %d   ", i, kc[i]);
call    0 never executed
        -:   42:    }
    #####:   43:    printf("\nnumPlayers: %d\n", numPlayers);
call    0 never executed
        -:   44:  }
        -:   45:
        -:   46:  //put the first player's hand back into the deck
   102000:   47:  Game.deck[0][5] = Game.hand[0][0];
   102000:   48:  Game.deck[0][6] = Game.hand[0][1];
   102000:   49:  Game.deck[0][7] = Game.hand[0][2];
   102000:   50:  Game.deck[0][8] = Game.hand[0][3];
   102000:   51:  Game.deck[0][9] = Game.hand[0][4];
   102000:   52:  Game.handCount[0] = 0;
   102000:   53:  Game.deckCount[0] = 10;
   102000:   54:  thisPlayer = floor(Random() * numPlayers);
call    0 returned 100%
   102000:   55:  Game.whoseTurn = thisPlayer;
        -:   56:
        -:   57:  //determine a random deckCount and discardCount for each player, and then fill with random cards
   407811:   58:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   59:  {
        -:   60:    //determine a random deckCount and discardCount
   305811:   61:    r = floor(Random() * 100);
call    0 returned 100%
   305811:   62:    if (r < 60) //60% of the time
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:   63:    {
   183440:   64:      Game.deckCount[i] = 10 + floor(Random() * 20);
call    0 returned 100%
   183440:   65:      Game.discardCount[i] = floor(Random() * Game.deckCount[i]);
call    0 returned 100%
        -:   66:    }
   214226:   67:    else if (r >= 60 && r < 90) //30% of the time
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
        -:   68:    {
    91855:   69:      Game.deckCount[i] = 30 + floor(Random() * 40);
call    0 returned 100%
    91855:   70:      Game.discardCount[i] = floor(Random() * Game.deckCount[i]);
call    0 returned 100%
        -:   71:    }
        -:   72:    else  //10% of the time
        -:   73:    {
    30516:   74:      Game.deckCount[i] = floor(Random() * (MAX_DECK - 70)) + 70;
call    0 returned 100%
    30516:   75:      Game.discardCount[i] = floor(Random() * Game.deckCount[i]);
call    0 returned 100%
        -:   76:    }
        -:   77:
        -:   78:    //Fill in deck with random cards, leaving the starting 7 coppers and 3 estates in the first 10 spots.
 14200603:   79:    for (j = 10; j < Game.deckCount[i]; j++)
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   80:    {
 13894792:   81:      r = floor(Random() * 17);
call    0 returned 100%
 13894792:   82:      if (r < 7)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -:   83:      {
  5722617:   84:        Game.deck[i][j] = r;
        -:   85:      }
        -:   86:      else
        -:   87:      {
  8172175:   88:        Game.deck[i][j] = kc[r-7];
        -:   89:      }
        -:   90:      
        -:   91:    }
        -:   92:
        -:   93:    //shuffle the deck with the new random cards
   305811:   94:    shuffle(i, &Game);
call    0 returned 100%
        -:   95:
        -:   96:    //add discardCount cards from top of deck to discard
  8729972:   97:    for (j = 0; j < Game.discardCount[i]; j++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   98:    {
  8424161:   99:      Game.deckCount[i]--;
  8424161:  100:      Game.discard[i][j] = Game.deck[i][Game.deckCount[i]];        
        -:  101:    }
        -:  102:  }
        -:  103:
        -:  104:  //only set up hand for the player who's turn it is
   102000:  105:  r = floor(Random() * 100);
call    0 returned 100%
   102000:  106:  if (r != 0) //99% of the time, pick a typical handCount (under 10)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  107:  {
   101017:  108:    r = floor(Random() * 10) + 1;
call    0 returned 100%
   658734:  109:    for (i = 0; i < r; i++)
branch  0 taken 85%
branch  1 taken 15%
        -:  110:    {
   557717:  111:      drawCard(thisPlayer, &Game);
call    0 returned 100%
        -:  112:    }
        -:  113:  }
        -:  114:  else //1% of the time, test a large handCount up to the number of available cards
        -:  115:  {
      983:  116:    r = floor(Random() * (Game.deckCount[thisPlayer] + Game.discardCount[thisPlayer])) + 1;
call    0 returned 100%
    32912:  117:    for (i = 0; i < r; i++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -:  118:    {
    31929:  119:      drawCard(thisPlayer, &Game);
call    0 returned 100%
        -:  120:    }
        -:  121:  }
   102000:  122:  if (DEBUG == 1)
        -:  123:  {
        -:  124:    printf("Hand of Player %d\n", thisPlayer);
        -:  125:    for (i = 0; i < Game.handCount[thisPlayer]; i++)
        -:  126:    {
        -:  127:      printf("\tcard[%d]: %d\n", i, Game.hand[thisPlayer][i]);     
        -:  128:    }
        -:  129:  }
        -:  130:
        -:  131:  //remove random numbers of cards from the supplies
   102000:  132:  Game.supplyCount[estate] = Game.supplyCount[estate] - floor(Random() * (3 * numPlayers));
call    0 returned 100%
   102000:  133:  Game.supplyCount[duchy] = Game.supplyCount[duchy] - floor(Random() * (3 * numPlayers));
call    0 returned 100%
   102000:  134:  Game.supplyCount[province] = Game.supplyCount[province] - floor(Random() * (3 * numPlayers));
call    0 returned 100%
   102000:  135:  Game.supplyCount[copper] = Game.supplyCount[copper] - floor(Random() * (60 - 7 * numPlayers));
call    0 returned 100%
   102000:  136:  Game.supplyCount[silver] = Game.supplyCount[silver] - floor(Random() * 40);
call    0 returned 100%
   102000:  137:  Game.supplyCount[gold] = Game.supplyCount[gold] - floor(Random() * 30);
call    0 returned 100%
   102000:  138:  Game.supplyCount[curse] = Game.supplyCount[curse] - floor(Random() * ((numPlayers-1) * 10));
call    0 returned 100%
  1122000:  139:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  140:  {
  1115103:  141:    if (kc[i] == great_hall || kc[i] == gardens)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  142:    {
    95103:  143:      if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  144:      {
    31679:  145:        Game.supplyCount[kc[i]] = Game.supplyCount[kc[i]] - floor(Random() * 9);        
call    0 returned 100%
        -:  146:      }
        -:  147:      else
        -:  148:      {
    63424:  149:        Game.supplyCount[kc[i]] = Game.supplyCount[kc[i]] - floor(Random() * 13);
call    0 returned 100%
        -:  150:      }
        -:  151:    }
        -:  152:    else
        -:  153:    {
   924897:  154:      Game.supplyCount[kc[i]] = Game.supplyCount[kc[i]] - floor(Random() * 11);
call    0 returned 100%
        -:  155:    }
        -:  156:  }
        -:  157:
        -:  158:  //pick random playedCardCount
   102000:  159:  if (floor(Random() * 100) != 0) //99% of the time, test a typical playedCardCount (under 5)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
        -:  160:  {
   101091:  161:    Game.playedCardCount = floor(Random() * 5);
call    0 returned 100%
        -:  162:  }
        -:  163:  else //1% of the time, test a large playedCardCound
        -:  164:  {
      909:  165:    Game.playedCardCount = floor(Random() * (Game.deckCount[thisPlayer] + 1));
call    0 returned 100%
        -:  166:  }
        -:  167:
   313220:  168:  for (i = 0; i < Game.playedCardCount; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  169:  {
   211220:  170:    r = floor(Random() * 10);
call    0 returned 100%
   211220:  171:    Game.playedCards[i] = kc[r];
        -:  172:  }
   102000:  173:  return Game;
        -:  174:}
        -:  175:
        -:  176:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  177:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  178:		  int k8, int k9, int k10) {
    #####:  179:  int* k = malloc(10 * sizeof(int));
    #####:  180:  k[0] = k1;
    #####:  181:  k[1] = k2;
    #####:  182:  k[2] = k3;
    #####:  183:  k[3] = k4;
    #####:  184:  k[4] = k5;
    #####:  185:  k[5] = k6;
    #####:  186:  k[6] = k7;
    #####:  187:  k[7] = k8;
    #####:  188:  k[8] = k9;
    #####:  189:  k[9] = k10;
    #####:  190:  return k;
        -:  191:}
        -:  192:
function initializeGame called 102014 returned 100% blocks executed 95%
   102014:  193:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  194:		   struct gameState *state) {
        -:  195:
        -:  196:  int i;
        -:  197:  int j;
        -:  198:  int it;			
        -:  199:  //set up random number generator
   102014:  200:  SelectStream(1);
call    0 returned 100%
   102014:  201:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  202:  
        -:  203:  //check number of players
   102014:  204:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  205:    {
    #####:  206:      return -1;
        -:  207:    }
        -:  208:
        -:  209:  //set number of players
   102014:  210:  state->numPlayers = numPlayers;
        -:  211:
        -:  212:  //check selected kingdom cards are different
  1122154:  213:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  214:    {
 11221540:  215:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  216:        {
 10201400:  217:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  218:	    {
    #####:  219:	      return -1;
        -:  220:	    }
        -:  221:        }
        -:  222:    }
        -:  223:
        -:  224:
        -:  225:  //initialize supply
        -:  226:  ///////////////////////////////
        -:  227:
        -:  228:  //set number of Curse cards
   102014:  229:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  230:    {
    33985:  231:      state->supplyCount[curse] = 10;
        -:  232:    }
    68029:  233:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  234:    {
    34239:  235:      state->supplyCount[curse] = 20;
        -:  236:    }
        -:  237:  else
        -:  238:    {
    33790:  239:      state->supplyCount[curse] = 30;
        -:  240:    }
        -:  241:
        -:  242:  //set number of Victory cards
   102014:  243:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  244:    {
    33985:  245:      state->supplyCount[estate] = 8;
    33985:  246:      state->supplyCount[duchy] = 8;
    33985:  247:      state->supplyCount[province] = 8;
        -:  248:    }
        -:  249:  else
        -:  250:    {
    68029:  251:      state->supplyCount[estate] = 12;
    68029:  252:      state->supplyCount[duchy] = 12;
    68029:  253:      state->supplyCount[province] = 12;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Treasure cards
   102014:  257:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   102014:  258:  state->supplyCount[silver] = 40;
   102014:  259:  state->supplyCount[gold] = 30;
        -:  260:
        -:  261:  //set number of Kingdom cards
  2142294:  262:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  263:    {
 16832310:  264:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  265:	{
 15812170:  266:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  267:	    {
        -:  268:	      //check if card is a 'Victory' Kingdom card
  1115251:  269:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  270:		{
    95111:  271:		  if (numPlayers == 2){ 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    31679:  272:		    state->supplyCount[i] = 8; 
        -:  273:		  }
    63432:  274:		  else{ state->supplyCount[i] = 12; }
        -:  275:		}
        -:  276:	      else
        -:  277:		{
   925029:  278:		  state->supplyCount[i] = 10;
        -:  279:		}
  1020140:  280:	      break;
        -:  281:	    }
        -:  282:	  else    //card is not in the set choosen for the game
        -:  283:	    {
 14792030:  284:	      state->supplyCount[i] = -1;
        -:  285:	    }
        -:  286:	}
        -:  287:
        -:  288:    }
        -:  289:
        -:  290:  ////////////////////////
        -:  291:  //supply intilization complete
        -:  292:
        -:  293:  //set player decks
   407861:  294:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  295:    {
   305847:  296:      state->deckCount[i] = 0;
  1223388:  297:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  298:	{
   917541:  299:	  state->deck[i][j] = estate;
   917541:  300:	  state->deckCount[i]++;
        -:  301:	}
  2446776:  302:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  303:	{
  2140929:  304:	  state->deck[i][j] = copper;
  2140929:  305:	  state->deckCount[i]++;		
        -:  306:	}
        -:  307:    }
        -:  308:
        -:  309:  //shuffle player decks
   407861:  310:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  311:    {
   305847:  312:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  313:	{
    #####:  314:	  return -1;
        -:  315:	}
        -:  316:    }
        -:  317:
        -:  318:  //draw player hands
   407861:  319:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  320:    {  
        -:  321:      //initialize hand size to zero
   305847:  322:      state->handCount[i] = 0;
   305847:  323:      state->discardCount[i] = 0;
        -:  324:      //draw 5 cards
        -:  325:      // for (j = 0; j < 5; j++)
        -:  326:      //	{
        -:  327:      //	  drawCard(i, state);
        -:  328:      //	}
        -:  329:    }
        -:  330:  
        -:  331:  //set embargo tokens to 0 for all supply piles
  2856392:  332:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  333:    {
  2754378:  334:      state->embargoTokens[i] = 0;
        -:  335:    }
        -:  336:
        -:  337:  //initialize first player's turn
   102014:  338:  state->outpostPlayed = 0;
   102014:  339:  state->phase = 0;
   102014:  340:  state->numActions = 1;
   102014:  341:  state->numBuys = 1;
   102014:  342:  state->playedCardCount = 0;
   102014:  343:  state->whoseTurn = 0;
   102014:  344:  state->handCount[state->whoseTurn] = 0;
        -:  345:  //int it; move to top
        -:  346:
        -:  347:  //Moved draw cards to here, only drawing at the start of a turn
   612084:  348:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   510070:  349:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  350:  }
        -:  351:
   102014:  352:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  353:
   102014:  354:  return 0;
        -:  355:}
        -:  356:
function shuffle called 676014 returned 100% blocks executed 100%
   676014:  357:int shuffle(int player, struct gameState *state) {
        -:  358: 
        -:  359:
        -:  360:  int newDeck[MAX_DECK];
   676014:  361:  int newDeckPos = 0;
        -:  362:  int card;
        -:  363:  int i;
        -:  364:
   676014:  365:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     4416:  366:    return -1;
   671598:  367:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  368:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  369:
 22887683:  370:  while (state->deckCount[player] > 0) {
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
 21544487:  371:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
 21544487:  372:    newDeck[newDeckPos] = state->deck[player][card];
 21544487:  373:    newDeckPos++;
896396042:  374:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
874851555:  375:      state->deck[player][i] = state->deck[player][i+1];
        -:  376:    }
 21544487:  377:    state->deckCount[player]--;
        -:  378:  }
 22216085:  379:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
 21544487:  380:    state->deck[player][i] = newDeck[i];
 21544487:  381:    state->deckCount[player]++;
        -:  382:  }
        -:  383:
   671598:  384:  return 0;
        -:  385:}
        -:  386:
function playCard called 0 returned 0% blocks executed 0%
    #####:  387:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  388:{	
        -:  389:  int card;
    #####:  390:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  391:
        -:  392:  //check if it is the right phase
    #####:  393:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  394:    {
    #####:  395:      return -1;
        -:  396:    }
        -:  397:	
        -:  398:  //check if player has enough actions
    #####:  399:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  400:    {
    #####:  401:      return -1;
        -:  402:    }
        -:  403:	
        -:  404:  //get card played
    #####:  405:  card = handCard(handPos, state);
call    0 never executed
        -:  406:	
        -:  407:  //check if selected card is an action
    #####:  408:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  409:    {
    #####:  410:      return -1;
        -:  411:    }
        -:  412:	
        -:  413:  //play card
    #####:  414:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  415:    {
    #####:  416:      return -1;
        -:  417:    }
        -:  418:	
        -:  419:  //reduce number of actions
    #####:  420:  state->numActions--;
        -:  421:
        -:  422:  //update coins (Treasure cards may be added with card draws)
    #####:  423:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  424:	
    #####:  425:  return 0;
        -:  426:}
        -:  427:
function buyCard called 5400 returned 100% blocks executed 100%
     5400:  428:int buyCard(int supplyPos, struct gameState *state) {
        -:  429:  int who;
     5400:  430:  if (DEBUG){
        -:  431:    printf("Entering buyCard...\n");
        -:  432:  }
        -:  433:
        -:  434:  // I don't know what to do about the phase thing.
        -:  435:
     5400:  436:  who = state->whoseTurn;
        -:  437:
     5400:  438:  if (state->numBuys < 1){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
     1080:  439:    if (DEBUG)
        -:  440:      printf("You do not have any buys left\n");
     1080:  441:    return -1;
     4320:  442:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 69% (fallthrough)
branch  2 taken 31%
     2960:  443:    if (DEBUG)
        -:  444:      printf("There are not any of that type of card left\n");
     2960:  445:    return -1;
     1360:  446:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
      656:  447:    if (DEBUG) 
        -:  448:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      656:  449:    return -1;
        -:  450:  } else {
      704:  451:    state->phase=1;
        -:  452:    //state->supplyCount[supplyPos]--;
      704:  453:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  454:  
      704:  455:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
      704:  456:    state->numBuys--;
      704:  457:    if (DEBUG)
        -:  458:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  459:  }
        -:  460:
        -:  461:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  462:  //state->discardCount[who]++;
        -:  463:    
      704:  464:  return 0;
        -:  465:}
        -:  466:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  467:int numHandCards(struct gameState *state) {
    #####:  468:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  469:}
        -:  470:
function handCard called 0 returned 0% blocks executed 0%
    #####:  471:int handCard(int handPos, struct gameState *state) {
    #####:  472:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  473:  return state->hand[currentPlayer][handPos];
        -:  474:}
        -:  475:
function supplyCount called 5672 returned 100% blocks executed 100%
     5672:  476:int supplyCount(int card, struct gameState *state) {
     5672:  477:  return state->supplyCount[card];
        -:  478:}
        -:  479:
function fullDeckCount called 144 returned 100% blocks executed 100%
      144:  480:int fullDeckCount(int player, int card, struct gameState *state) {
      144:  481:  int count = 0;
        -:  482:
      776:  483:  for (int i = 0; i < state->deckCount[player]; i++) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
      632:  484:    if (state->deck[player][i] == card) count++;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  485:  }
        -:  486:
      884:  487:  for (int i = 0; i < state->handCount[player]; i++) {
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      740:  488:    if (state->hand[player][i] == card) count++;
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -:  489:  }
        -:  490:
      156:  491:  for (int i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 8%
branch  1 taken 92% (fallthrough)
       12:  492:    if (state->discard[player][i] == card) count++;
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  493:  }
        -:  494:
      144:  495:  return count;
        -:  496:}
        -:  497:
function whoseTurn called 213029 returned 100% blocks executed 100%
   213029:  498:int whoseTurn(struct gameState *state) {
   213029:  499:  return state->whoseTurn;
        -:  500:}
        -:  501:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  502:int endTurn(struct gameState *state) {
        -:  503:  int k;
        -:  504:  int i;
    #####:  505:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  506:  
        -:  507:  //Discard hand
    #####:  508:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  509:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  510:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  511:  }
    #####:  512:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  513:    
        -:  514:  //Code for determining the player
    #####:  515:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  516:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  517:  }
        -:  518:  else{
    #####:  519:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  520:  }
        -:  521:
    #####:  522:  state->outpostPlayed = 0;
    #####:  523:  state->phase = 0;
    #####:  524:  state->numActions = 1;
    #####:  525:  state->coins = 0;
    #####:  526:  state->numBuys = 1;
    #####:  527:  state->playedCardCount = 0;
    #####:  528:  state->handCount[state->whoseTurn] = 0;
        -:  529:
        -:  530:  //int k; move to top
        -:  531:  //Next player draws hand
    #####:  532:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  533:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  534:  }
        -:  535:
        -:  536:  //Update money
    #####:  537:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
function isGameOver called 30 returned 100% blocks executed 100%
       30:  542:int isGameOver(struct gameState *state) {
        -:  543:  int i;
        -:  544:  int j;
        -:  545:	
        -:  546:  //if stack of Province cards is empty, the game ends
       30:  547:  if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  548:    {
        6:  549:      return 1;
        -:  550:    }
        -:  551:
        -:  552:  //if three supply pile are at 0, the game ends
       24:  553:  j = 0;
      624:  554:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  555:    {
      600:  556:      if (state->supplyCount[i] == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  557:	{
       60:  558:	  j++;
        -:  559:	}
        -:  560:    }
       24:  561:  if ( j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  562:    {
        8:  563:      return 1;
        -:  564:    }
        -:  565:
       16:  566:  return 0;
        -:  567:}
        -:  568:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  569:int scoreFor (int player, struct gameState *state) {
        -:  570:
        -:  571:  int i;
    #####:  572:  int score = 0;
        -:  573:  //score from hand
    #####:  574:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  575:    {
    #####:  576:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  577:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  578:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  579:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  580:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  581:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  582:    }
        -:  583:
        -:  584:  //score from discard
    #####:  585:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  586:    {
    #####:  587:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  588:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  589:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  590:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  591:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  592:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  593:    }
        -:  594:
        -:  595:  //score from deck
    #####:  596:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  597:    {
    #####:  598:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  599:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  600:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  601:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  602:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  603:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  604:    }
        -:  605:
    #####:  606:  return score;
        -:  607:}
        -:  608:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  609:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  610:  int i;	
        -:  611:  int j;
        -:  612:  int highScore;
        -:  613:  int currentPlayer;
        -:  614:
        -:  615:  //get score for each player
    #####:  616:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  617:    {
        -:  618:      //set unused player scores to -9999
    #####:  619:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  620:	{
    #####:  621:	  players[i] = -9999;
        -:  622:	}
        -:  623:      else
        -:  624:	{
    #####:  625:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  626:	}
        -:  627:    }
        -:  628:
        -:  629:  //find highest score
    #####:  630:  j = 0;
    #####:  631:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  632:    {
    #####:  633:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  634:	{
    #####:  635:	  j = i;
        -:  636:	}
        -:  637:    }
    #####:  638:  highScore = players[j];
        -:  639:
        -:  640:  //add 1 to players who had less turns
    #####:  641:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  642:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  643:    {
    #####:  644:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  645:	{
    #####:  646:	  players[i]++;
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find new highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  653:    {
    #####:  654:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //set winners in array to 1 and rest to 0
    #####:  662:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  663:    {
    #####:  664:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  665:	{
    #####:  666:	  players[i] = 1;
        -:  667:	}
        -:  668:      else
        -:  669:	{
    #####:  670:	  players[i] = 0;
        -:  671:	}
        -:  672:    }
        -:  673:
    #####:  674:  return 0;
        -:  675:}
        -:  676:
function drawCard called 1658937 returned 100% blocks executed 100%
  1658937:  677:int drawCard(int player, struct gameState *state)
        -:  678:{	int count;
        -:  679:  int deckCounter;
  1658937:  680:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  681:    
        -:  682:    //Step 1 Shuffle the discard pile back into a deck
        -:  683:    int i;
        -:  684:    //Move discard to deck
   881072:  685:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
   839171:  686:      state->deck[player][i] = state->discard[player][i];
   839171:  687:      state->discard[player][i] = -1;
        -:  688:    }
        -:  689:
    41901:  690:    state->deckCount[player] = state->discardCount[player];
    41901:  691:    state->discardCount[player] = 0;//Reset discard
        -:  692:
        -:  693:    //Shufffle the deck
    41901:  694:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  695:   
    41901:  696:    if (DEBUG){//Debug statements
        -:  697:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  698:    }
        -:  699:    
    41901:  700:    state->discardCount[player] = 0;
        -:  701:
        -:  702:    //Step 2 Draw Card
    41901:  703:    count = state->handCount[player];//Get current player's hand count
        -:  704:    
    41901:  705:    if (DEBUG){//Debug statements
        -:  706:      printf("Current hand count: %d\n", count);
        -:  707:    }
        -:  708:    
    41901:  709:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  710:
    41901:  711:    if (deckCounter == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     4416:  712:      return -1;
        -:  713:
    37485:  714:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    37485:  715:    state->deckCount[player]--;
    37485:  716:    state->handCount[player]++;//Increment hand count
        -:  717:  }
        -:  718:
        -:  719:  else{
  1617036:  720:    int count = state->handCount[player];//Get current hand count for player
        -:  721:    int deckCounter;
  1617036:  722:    if (DEBUG){//Debug statements
        -:  723:      printf("Current hand count: %d\n", count);
        -:  724:    }
        -:  725:
  1617036:  726:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1617036:  727:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1617036:  728:    state->deckCount[player]--;
  1617036:  729:    state->handCount[player]++;//Increment hand count
        -:  730:  }
        -:  731:
  1654521:  732:  return 0;
        -:  733:}
        -:  734:
function getCost called 6172 returned 100% blocks executed 97%
     6172:  735:int getCost(int cardNumber)
        -:  736:{
     6172:  737:  switch( cardNumber ) 
branch  0 taken 7%
branch  1 taken 5%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 7%
branch  5 taken 5%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 5%
branch 15 taken 4%
branch 16 taken 5%
branch 17 taken 2%
branch 18 taken 2%
branch 19 taken 2%
branch 20 taken 2%
branch 21 taken 2%
branch 22 taken 2%
branch 23 taken 2%
branch 24 taken 2%
branch 25 taken 2%
branch 26 taken 2%
branch 27 taken 0%
        -:  738:    {
        -:  739:    case curse:
      420:  740:      return 0;
        -:  741:    case estate:
      324:  742:      return 2;
        -:  743:    case duchy:
      276:  744:      return 5;
        -:  745:    case province:
      276:  746:      return 8;
        -:  747:    case copper:
      420:  748:      return 0;
        -:  749:    case silver:
      324:  750:      return 3;
        -:  751:    case gold:
      276:  752:      return 6;
        -:  753:    case adventurer:
      276:  754:      return 6;
        -:  755:    case council_room:
      276:  756:      return 5;
        -:  757:    case feast:
      276:  758:      return 4;
        -:  759:    case gardens:
      276:  760:      return 4;
        -:  761:    case mine:
      276:  762:      return 5;
        -:  763:    case remodel:
      276:  764:      return 4;
        -:  765:    case smithy:
      276:  766:      return 4;
        -:  767:    case village:
      324:  768:      return 3;
        -:  769:    case baron:
      276:  770:      return 4;
        -:  771:    case great_hall:
      324:  772:      return 3;
        -:  773:    case minion:
      100:  774:      return 5;
        -:  775:    case steward:
      100:  776:      return 3;
        -:  777:    case tribute:
      100:  778:      return 5;
        -:  779:    case ambassador:
      100:  780:      return 3;
        -:  781:    case cutpurse:
      100:  782:      return 4;
        -:  783:    case embargo: 
      100:  784:      return 2;
        -:  785:    case outpost:
      100:  786:      return 5;
        -:  787:    case salvager:
      100:  788:      return 4;
        -:  789:    case sea_hag:
      100:  790:      return 4;
        -:  791:    case treasure_map:
      100:  792:      return 4;
        -:  793:    }
        -:  794:	
    #####:  795:  return -1;
        -:  796:}
        -:  797:
function adventurerEffect called 101004 returned 100% blocks executed 100%
   101004:  798:int adventurerEffect(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  799:
   101004:  800:   int z = 0;// this is the counter for the temp hand
        -:  801:   int temphand[MAX_HAND];
        -:  802:   int cardDrawn;
   101004:  803:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
   101004:  804:   int nextPlayer = currentPlayer + 1;
   101004:  805:   if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    36367:  806:      nextPlayer = 0;
        -:  807:   }
        -:  808:
   101004:  809:   int drawntreasure=0;
   761216:  810:   while(drawntreasure<2) {
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:  811:      //if the deck is empty we need to shuffle discard and add to deck
   559208:  812:      if(state->deckCount[currentPlayer] < 1) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
    22455:  813:         shuffle(nextPlayer, state);
call    0 returned 100%
        -:  814:      }
   559208:  815:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  816:      //top card of hand is most recently drawn card.
   559208:  817:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
   761216:  818:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
   202008:  819:         drawntreasure++;
        -:  820:      }
        -:  821:      else {
   357200:  822:         temphand[z]=cardDrawn;
   357200:  823:         state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   357200:  824:         z++;
        -:  825:      }
        -:  826:   }
   559208:  827:   while(z-1>=0) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  828:      // discard all cards in play that have been drawn
   357200:  829:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
   357200:  830:      z=z-1;
        -:  831:   }
   101004:  832:   return 0;
        -:  833:}
        -:  834:
function smithyEffect called 4 returned 100% blocks executed 100%
        4:  835:int smithyEffect(struct gameState *state, int handPos) {
        -:  836:
        -:  837:   int i;
        4:  838:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  839:
        -:  840:   //+3 Cards
       16:  841:   for (i = 0; i < 3; ++i) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       12:  842:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  843:   }
        -:  844:
        -:  845:   //discard card from hand
        4:  846:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  847:
        4:  848:   return 0;
        -:  849:}
        -:  850:
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  851:int councilRoomEffect(struct gameState *state, int handPos) {
        -:  852:   int i;
    #####:  853:   int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  854:
        -:  855:   //+4 Cards
    #####:  856:   for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  857:      drawCard(currentPlayer, state);
call    0 never executed
        -:  858:   }
        -:  859:
        -:  860:   //+1 Buy
    #####:  861:   i = state->numBuys+1;
        -:  862:
        -:  863:   //Each other player draws a card
    #####:  864:   for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  865:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  866:         drawCard(i, state);
call    0 never executed
        -:  867:      }
        -:  868:   }
        -:  869:
        -:  870:   //put played card in played card pile
    #####:  871:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  872:
    #####:  873:   return 0;
        -:  874:}
        -:  875:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  876:int mineEffect(int choice1, int choice2, struct gameState *state, int handPos) {
        -:  877:
        -:  878:   int i;
    #####:  879:   int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  880:   int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  881:
    #####:  882:   if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:      return -1;
        -:  884:   }
        -:  885:
    #####:  886:   if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  887:      return -1;
        -:  888:   }
        -:  889:
    #####:  890:   if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  891:      return -1;
        -:  892:   }
        -:  893:
    #####:  894:   gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  895:
        -:  896:   //discard card from hand
    #####:  897:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  898:
        -:  899:   //discard trashed card
    #####:  900:   for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  901:      if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  902:         discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  903:         break;
        -:  904:      }
        -:  905:   }
        -:  906:
    #####:  907:   return 0;
        -:  908:}
        -:  909:
function villageEffect called 1 returned 100% blocks executed 100%
        1:  910:int villageEffect(struct gameState *state, int handPos) {
        -:  911:
        1:  912:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  913:
        -:  914:   //+1 Card
        1:  915:   drawCard(currentPlayer, state);
call    0 returned 100%
        -:  916:
        -:  917:   //+2 Actions
        1:  918:   state->numActions = state->numActions + 2;
        -:  919:
        -:  920:   //discard played card from hand discardCard(handPos, currentPlayer, state, 0);
        1:  921:   return 0;
        -:  922:}
        -:  923:
function cardEffect called 112020 returned 100% blocks executed 7%
   112020:  924:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  925:{
        -:  926:  int i;
        -:  927:  int j;
        -:  928:  int k;
        -:  929:  int x;
        -:  930:  int index;
   112020:  931:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   112020:  932:  int nextPlayer = currentPlayer + 1;
   112020:  933:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    40569:  934:    nextPlayer = 0;
        -:  935:  }
        -:  936:
   112020:  937:  int tributeRevealedCards[2] = {-1, -1};
        -:  938:  int temphand[MAX_HAND];// moved above the if statement
        -:  939:  
        -:  940:	
        -:  941:   //uses switch to select card and perform actions
   112020:  942:   switch(card) {
branch  0 taken 90%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 10%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  943:      case adventurer:
   101004:  944:         return adventurerEffect(choice1, choice2, choice3, state, handPos, bonus);
call    0 returned 100%
        -:  945:
        -:  946:    case council_room:
    #####:  947:       return councilRoomEffect(state, handPos);
call    0 never executed
        -:  948:
        -:  949:    case feast:
        -:  950:      //gain card with cost up to 5
        -:  951:      //Backup hand
    #####:  952:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  953:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  954:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  955:      }
        -:  956:      //Backup hand
        -:  957:
        -:  958:      //Update Coins for Buy
    #####:  959:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  960:      x = 1;//Condition to loop on
    #####:  961:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  962:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:	  if (DEBUG)
        -:  964:	    printf("None of that card left, sorry!\n");
        -:  965:
    #####:  966:	  if (DEBUG){
        -:  967:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  968:	  }
        -:  969:	}
    #####:  970:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  971:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  972:
    #####:  973:	  if (DEBUG){
        -:  974:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  975:	  }
        -:  976:	}
        -:  977:	else{
        -:  978:
    #####:  979:	  if (DEBUG){
        -:  980:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  981:	  }
        -:  982:
    #####:  983:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  984:	  x = 0;//No more buying cards
        -:  985:
    #####:  986:	  if (DEBUG){
        -:  987:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  988:	  }
        -:  989:
        -:  990:	}
        -:  991:      }     
        -:  992:
        -:  993:      //Reset Hand
    #####:  994:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	state->hand[currentPlayer][i] = temphand[i];
    #####:  996:	temphand[i] = -1;
        -:  997:      }
        -:  998:      //Reset Hand
        -:  999:      			
    #####: 1000:      return 0;
        -: 1001:			
        -: 1002:    case gardens:
    #####: 1003:      return -1;
        -: 1004:			
        -: 1005:    case mine:
    #####: 1006:      return mineEffect(choice1, choice2, state, handPos);
call    0 never executed
        -: 1007:			
        -: 1008:    case remodel:
    #####: 1009:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1010:
    #####: 1011:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1012:	{
    #####: 1013:	  return -1;
        -: 1014:	}
        -: 1015:
    #####: 1016:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1017:
        -: 1018:      //discard card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1020:
        -: 1021:      //discard trashed card
    #####: 1022:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1027:	      break;
        -: 1028:	    }
        -: 1029:	}
        -: 1030:
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case smithy:
        4: 1035:       return smithyEffect(state, handPos);
call    0 returned 100%
        -: 1036:		
        -: 1037:    case village:
        1: 1038:       return villageEffect(state, handPos);
call    0 returned 100%
        -: 1039:		
        -: 1040:    case baron:
    #####: 1041:      state->numBuys++;//Increase buys by 1!
    #####: 1042:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1043:	int p = 0;//Iterator for hand!
    #####: 1044:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1045:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1046:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1047:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1048:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1049:	    state->discardCount[currentPlayer]++;
    #####: 1050:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1051:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1052:	    }
    #####: 1053:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1054:	    state->handCount[currentPlayer]--;
    #####: 1055:	    card_not_discarded = 0;//Exit the loop
        -: 1056:	  }
    #####: 1057:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####: 1058:	    if(DEBUG) {
        -: 1059:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1060:	      printf("Must gain an estate if there are any\n");
        -: 1061:	    }
    #####: 1062:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1063:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1064:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1065:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1066:		isGameOver(state);
call    0 never executed
        -: 1067:	      }
        -: 1068:	    }
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
        -: 1071:			    
        -: 1072:	  else{
    #####: 1073:	    p++;//Next card
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:			    
        -: 1078:      else{
    #####: 1079:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1080:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1081:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1082:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1083:	    isGameOver(state);
call    0 never executed
        -: 1084:	  }
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
        -: 1088:      
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case great_hall:
        -: 1092:      //+1 Card
    #####: 1093:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1094:			
        -: 1095:      //+1 Actions
    #####: 1096:      state->numActions++;
        -: 1097:			
        -: 1098:      //discard card from hand
    #####: 1099:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1100:      return 0;
        -: 1101:		
        -: 1102:    case minion:
        -: 1103:      //+1 action
    #####: 1104:      state->numActions++;
        -: 1105:			
        -: 1106:      //discard card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1108:			
    #####: 1109:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  state->coins = state->coins + 2;
        -: 1112:	}
        -: 1113:			
    #####: 1114:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1115:	{
        -: 1116:	  //discard hand
    #####: 1117:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1118:	    {
    #####: 1119:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1120:	    }
        -: 1121:				
        -: 1122:	  //draw 4
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1126:	    }
        -: 1127:				
        -: 1128:	  //other players discard hand and redraw if hand size > 4
    #####: 1129:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:		{
    #####: 1133:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1134:		    {
        -: 1135:		      //discard hand
    #####: 1136:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1137:			{
    #####: 1138:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1139:			}
        -: 1140:							
        -: 1141:		      //draw 4
    #####: 1142:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
    #####: 1144:			  drawCard(i, state);
call    0 never executed
        -: 1145:			}
        -: 1146:		    }
        -: 1147:		}
        -: 1148:	    }
        -: 1149:				
        -: 1150:	}
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case steward:
    #####: 1154:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //+2 cards
    #####: 1157:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1158:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1159:	}
    #####: 1160:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1161:	{
        -: 1162:	  //+2 coins
    #####: 1163:	  state->coins = state->coins + 2;
        -: 1164:	}
        -: 1165:      else
        -: 1166:	{
        -: 1167:	  //trash 2 cards in hand
    #####: 1168:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1169:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1170:	}
        -: 1171:			
        -: 1172:      //discard card from hand
    #####: 1173:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1174:      return 0;
        -: 1175:		
        -: 1176:    case tribute:
    #####: 1177:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1178:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1179:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1180:	  state->deckCount[nextPlayer]--;
        -: 1181:	}
    #####: 1182:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1183:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1184:	  state->discardCount[nextPlayer]--;
        -: 1185:	}
        -: 1186:	else{
        -: 1187:	  //No Card to Reveal
    #####: 1188:	  if (DEBUG){
        -: 1189:	    printf("No cards to reveal\n");
        -: 1190:	  }
        -: 1191:	}
        -: 1192:      }
        -: 1193:	    
        -: 1194:      else{
    #####: 1195:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1196:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1197:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1198:	    state->deckCount[nextPlayer]++;
    #####: 1199:	    state->discard[nextPlayer][i] = -1;
    #####: 1200:	    state->discardCount[nextPlayer]--;
        -: 1201:	  }
        -: 1202:			    
    #####: 1203:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1204:	} 
    #####: 1205:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1206:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1207:	state->deckCount[nextPlayer]--;
    #####: 1208:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1209:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1210:	state->deckCount[nextPlayer]--;
        -: 1211:      }    
        -: 1212:		       
    #####: 1213:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1214:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1215:	state->playedCardCount++;
    #####: 1216:	tributeRevealedCards[1] = -1;
        -: 1217:      }
        -: 1218:
    #####: 1219:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1220:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1221:	  state->coins += 2;
        -: 1222:	}
        -: 1223:		    
    #####: 1224:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1225:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1226:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1227:	}
        -: 1228:	else{//Action Card
    #####: 1229:	  state->numActions = state->numActions + 2;
        -: 1230:	}
        -: 1231:      }
        -: 1232:	    
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case ambassador:
    #####: 1236:      j = 0;		//used to check if player has enough cards to discard
        -: 1237:
    #####: 1238:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1239:	{
    #####: 1240:	  return -1;				
        -: 1241:	}
        -: 1242:
    #####: 1243:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1244:	{
    #####: 1245:	  return -1;
        -: 1246:	}
        -: 1247:
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1251:	    {
    #####: 1252:	      j++;
        -: 1253:	    }
        -: 1254:	}
    #####: 1255:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1256:	{
    #####: 1257:	  return -1;				
        -: 1258:	}
        -: 1259:
    #####: 1260:      if (DEBUG) 
        -: 1261:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1262:
        -: 1263:      //increase supply count for choosen card by amount being discarded
    #####: 1264:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1265:			
        -: 1266:      //each other player gains a copy of revealed card
    #####: 1267:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	{
    #####: 1269:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1270:	    {
    #####: 1271:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1272:	    }
        -: 1273:	}
        -: 1274:
        -: 1275:      //discard played card from hand
    #####: 1276:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1277:
        -: 1278:      //trash copies of cards returned to supply
    #####: 1279:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1280:	{
    #####: 1281:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1282:	    {
    #####: 1283:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1284:		{
    #####: 1285:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1286:		  break;
        -: 1287:		}
        -: 1288:	    }
        -: 1289:	}			
        -: 1290:
    #####: 1291:      return 0;
        -: 1292:		
        -: 1293:    case cutpurse:
        -: 1294:
    #####: 1295:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1296:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1297:	{
    #####: 1298:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1299:	    {
    #####: 1300:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1301:		{
    #####: 1302:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1303:		    {
    #####: 1304:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1305:		      break;
        -: 1306:		    }
    #####: 1307:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1308:		    {
    #####: 1309:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1310:			{
    #####: 1311:			  if (DEBUG)
        -: 1312:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1313:			}	
    #####: 1314:		      break;
        -: 1315:		    }		
        -: 1316:		}
        -: 1317:					
        -: 1318:	    }
        -: 1319:				
        -: 1320:	}				
        -: 1321:
        -: 1322:      //discard played card from hand
    #####: 1323:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1324:
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		
        -: 1328:    case embargo: 
        -: 1329:      //+2 Coins
    11011: 1330:      state->coins = state->coins + 2;
        -: 1331:			
        -: 1332:      //see if selected pile is in play
    11011: 1333:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -: 1334:	{
     1001: 1335:	  return -1;
        -: 1336:	}
        -: 1337:			
        -: 1338:      //add embargo token to selected supply pile
    10010: 1339:      state->embargoTokens[choice1]++;
        -: 1340:			
        -: 1341:      //trash card
    10010: 1342:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
    10010: 1343:      return 0;
        -: 1344:		
        -: 1345:    case outpost:
        -: 1346:      //set outpost flag
    #####: 1347:      state->outpostPlayed++;
        -: 1348:			
        -: 1349:      //discard card
    #####: 1350:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1351:      return 0;
        -: 1352:		
        -: 1353:    case salvager:
        -: 1354:      //+1 buy
    #####: 1355:      state->numBuys++;
        -: 1356:			
    #####: 1357:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1358:	{
        -: 1359:	  //gain coins equal to trashed card
    #####: 1360:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1361:	  //trash card
    #####: 1362:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1363:	}
        -: 1364:			
        -: 1365:      //discard card
    #####: 1366:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1367:      return 0;
        -: 1368:		
        -: 1369:    case sea_hag:
    #####: 1370:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1371:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1372:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1373:	  state->discardCount[i]++;
    #####: 1374:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1375:	}
        -: 1376:      }
    #####: 1377:      return 0;
        -: 1378:		
        -: 1379:    case treasure_map:
        -: 1380:      //search hand for another treasure_map
    #####: 1381:      index = -1;
    #####: 1382:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1383:	{
    #####: 1384:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1385:	    {
    #####: 1386:	      index = i;
    #####: 1387:	      break;
        -: 1388:	    }
        -: 1389:	}
    #####: 1390:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1391:	{
        -: 1392:	  //trash both treasure cards
    #####: 1393:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1394:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1395:
        -: 1396:	  //gain 4 Gold cards
    #####: 1397:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1398:	    {
    #####: 1399:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1400:	    }
        -: 1401:				
        -: 1402:	  //return success
    #####: 1403:	  return 1;
        -: 1404:	}
        -: 1405:			
        -: 1406:      //no second treasure_map found in hand
    #####: 1407:      return -1;
        -: 1408:    }
        -: 1409:	
    #####: 1410:  return -1;
        -: 1411:}
        -: 1412:
function discardCard called 10126 returned 100% blocks executed 88%
    10126: 1413:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1414:{
        -: 1415:	
        -: 1416:  //if card is not trashed, added to Played pile 
    10126: 1417:  if (trashFlag < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1418:    {
        -: 1419:      //add card to played pile
       60: 1420:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       60: 1421:      state->playedCardCount++;
        -: 1422:    }
        -: 1423:	
        -: 1424:  //set played card to -1
    10126: 1425:  state->hand[currentPlayer][handPos] = -1;
        -: 1426:	
        -: 1427:  //remove card from player's hand
    10126: 1428:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 1429:    {
        -: 1430:      //reduce number of cards in hand
     2934: 1431:      state->handCount[currentPlayer]--;
        -: 1432:    }
     7192: 1433:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1434:    {
        -: 1435:      //reduce number of cards in hand
    #####: 1436:      state->handCount[currentPlayer]--;
        -: 1437:    }
        -: 1438:  else 	
        -: 1439:    {
        -: 1440:      //replace discarded card with last card in hand
     7192: 1441:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1442:      //set last card to -1
     7192: 1443:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1444:      //reduce number of cards in hand
     7192: 1445:      state->handCount[currentPlayer]--;
        -: 1446:    }
        -: 1447:	
    10126: 1448:  return 0;
        -: 1449:}
        -: 1450:
function gainCard called 1352 returned 100% blocks executed 100%
     1352: 1451:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1452:{
        -: 1453:  //Note: supplyPos is enum of choosen card
        -: 1454:	
        -: 1455:  //check if supply pile is empty (0) or card is not used in game (-1)
     1352: 1456:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -: 1457:    {
      444: 1458:      return -1;
        -: 1459:    }
        -: 1460:	
        -: 1461:  //added card for [whoseTurn] current player:
        -: 1462:  // toFlag = 0 : add to discard
        -: 1463:  // toFlag = 1 : add to deck
        -: 1464:  // toFlag = 2 : add to hand
        -: 1465:
      908: 1466:  if (toFlag == 1)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1467:    {
       68: 1468:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1469:      state->deckCount[player]++;
        -: 1470:    }
      840: 1471:  else if (toFlag == 2)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1472:    {
       68: 1473:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       68: 1474:      state->handCount[player]++;
        -: 1475:    }
        -: 1476:  else
        -: 1477:    {
      772: 1478:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      772: 1479:      state->discardCount[player]++;
        -: 1480:    }
        -: 1481:	
        -: 1482:  //decrease number in supply pile
      908: 1483:  state->supplyCount[supplyPos]--;
        -: 1484:	 
      908: 1485:  return 0;
        -: 1486:}
        -: 1487:
function updateCoins called 102014 returned 100% blocks executed 80%
   102014: 1488:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1489:{
        -: 1490:  int i;
        -: 1491:	
        -: 1492:  //reset coin count
   102014: 1493:  state->coins = 0;
        -: 1494:
        -: 1495:  //add coins for each Treasure card in player's hand
   612084: 1496:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1497:    {
   510070: 1498:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1499:	{
   355457: 1500:	  state->coins += 1;
        -: 1501:	}
   154613: 1502:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1503:	{
    #####: 1504:	  state->coins += 2;
        -: 1505:	}
   154613: 1506:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1507:	{
    #####: 1508:	  state->coins += 3;
        -: 1509:	}	
        -: 1510:    }	
        -: 1511:
        -: 1512:  //add bonus
   102014: 1513:  state->coins += bonus;
        -: 1514:
   102014: 1515:  return 0;
        -: 1516:}
        -: 1517:
        -: 1518:
        -: 1519://end of dominion.c
        -: 1520:
