        -:    0:Source:cardTest3.c
        -:    0:Graph:cardTest3.gcno
        -:    0:Data:cardTest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Unit test for Village Card
        -:    3: *
        -:    4: * Business Rules:
        -:    5: *  1.	Current player's hand count should not change
        -:    6: *	2.	Current player gains 2 actions
        -:    7: *	3.	No state change should occur
        -:    8: *
        -:    9: * cardTest3: cardTest3.c dominion.o rngs.o
        -:   10: *      gcc -o cardTest3 -g cardTest3.c dominion.o rngs.o $(FLAGS)
        -:   11: *
        -:   12: */
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include <string.h>
        -:   17:#include <stdio.h>
        -:   18:#include <assert.h>
        -:   19:#include "rngs.h"
        -:   20:
        -:   21://set NOISY_TEST to 0 to remove prinftf's from output
        -:   22:#define NOISY_TEST 1
        -:   23:
        1:   24:int main() {
        1:   25:    int i = 0, p = 0;
        1:   26:    int handPos = 0;
        1:   27:    int seed = 1000;
        1:   28:    int numPlayer = 2;
        -:   29:    int new_game;
        -:   30:    int hand_count, action_count, player_turn;
        -:   31:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        1:   32:                 remodel, smithy, village, baron, great_hall};
        -:   33:    struct gameState G;
        -:   34:
        1:   35:    printf("TESTING Village Card\n");
        -:   36:    //clear the game state
        1:   37:    memset(&G, 23, sizeof(struct gameState));
        -:   38:    //initialize a new game
        1:   39:    new_game = initializeGame(numPlayer, k, seed, &G);
        -:   40:
        1:   41:    hand_count = G.handCount[p];
        1:   42:    action_count = G.numActions;
        1:   43:    player_turn = G.whoseTurn;
        -:   44:
        -:   45:    //play village card
        1:   46:    playVillage(&G, handPos);
        -:   47:#if (NOISY_TEST == 1)
        -:   48:    //hand should have +0 cards
        1:   49:    if(G.handCount[p] == hand_count)
        1:   50:        printf("TEST PASSED\n");
        -:   51:    else
    #####:   52:        printf("TEST FAILED\n");
        -:   53:    //player should have +2 action cards
        1:   54:    if(G.numActions == action_count + 2)
        1:   55:        printf("TEST PASSED\n");
        -:   56:    else
    #####:   57:        printf("TEST FAILED\n");
        -:   58:    //player's turn should not change
        1:   59:    if(G.whoseTurn == player_turn)
        1:   60:        printf("TEST PASSED\n");
        -:   61:    else
    #####:   62:        printf("TEST FAILED\n");
        -:   63:#endif
        -:   64:
        1:   65:    hand_count = G.handCount[p];
        1:   66:    action_count = G.numActions;
        1:   67:    player_turn = G.whoseTurn;
        -:   68:
        1:   69:    printf("\nAll tests passed: Village Card\n");
        -:   70:
        1:   71:    return 0;
        -:   72:}
