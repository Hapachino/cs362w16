CS362 Project Part A: testIsValid() from URLValidator
Due: Feb 14, 2016
Team Members:  David Vogel, Ian Bender, Robert Jackson

-------------------------------------------------------

/* Explain testIsValid Function of UrlValidator test code. */

    The testIsValid() function from the UrlValidatorTest class tests the isValid() function from the UrlValidator class. The UrlValidator class does URL validation by checking the scheme, authority, path, query, and fragment in turn. The isValid() function checks if a field has a valid URL address. 


    testIsValid() starts by constructing a new UrlValidatorTest object. It then populates the object with arrays of URL components in 4 parts which approximate a URL: <scheme>://<authority><path>?<query> except that the port number is broken out of authority to increase the number of permutations. The arrays are: testUrlScheme, testUrlAuthority, testUrlPort, testPath, testUrlPathOptions (for "allow2slash", "noFragment" options), and testUrlQuery. 


    These components are stored in arrays to be tested: testUrlParts, testUrlPartsOptions, and testPartsIndex. 


    The test arrays are then passed to the testIsValid() function. This function constructs a new UrlValidator object and performs 2 assertion tests on URLs known to be valid. If these pass, the function then goes into a do-while loop which tests each permutation of the URL components which were passed to it. If the test of a URL passes, the URL is printed and the result is compared with the expected result which was constructed from the URL data. If any of the parts are invalid, the expected result is false and the test fails.

------------------------------------------------------

/* Give how many total number of urls it is testing. */

    The function tests all permutations of the following URL parts:
    
testUrlScheme: "http://", "h3t://", "3ht://", "http:/", "http:", "http/", "://", "" = 8 parts
    
testUrlAuthority: "www.google.com", "go.com", "go.au", "0.0.0.0", "255.255.255.255", "256.256.256.256", "255.com", "1.2.3.4.5", "1.2.3.4.", "1.2.3", ".1.2.3.4", "go.a", "go.a1a", "go.cc", "go.1aa", "aaa.", ".aaa", "aaa", "" = 19 parts
    
testUrlPort: ":80", ":65535", ":0", "", ":-1", ":65636", ":65a" = 7 parts
    testPath: "/test1", "/t123", "/$23", "/..", "/../", "/test1/", "", "/test1/file", "/..//file", "/test1//file" = 10 parts   
    
testUrlQuery: "?action=view", "?action=edit&mode=up", "" = 3 parts


    Note that because the testScheme only has "http" marked as true, the following are not tested for: "ftp", "httpd", "telnet"
    The total permutations (number of URLs) are thus each part multiplied together: 
    8 * 19 * 7 * 10 * 3 = 31,920 URLs

-----------------------------------------------------

/* Explain how it is building all the urls. */

From the code comments - "A complete URL is composed of a scheme+authority+port+path+query, all of which must be individually valid for the entire URL to be considered valid."


 The test URLs are created through the combination of several ResultPair arrays, where a ResultPair is an object consisting of both a String item name and a boolean valid flag (whether this part of the url is valid). The ResultPair object is defined in the file ResultPair.java.


To test the many combinations of URL parts, an array consisting of several ResultPair objects, testUrlParts, is passed to the testIsValid method. 


 // overloaded testIsValid method, called from testIsValid() testIsValid(testUrlParts, UrlValidator.ALLOW_ALL_SCHEMES);


 //testUrlParts object, used to pass in all ResultPairs for testing  Object[] testUrlParts = {testUrlScheme, testUrlAuthority,  testUrlPort, testPath, testUrlQuery};


    The URL string is built in the testIsValid(Object[], long) method, within a do...while loop and stored in a StringBuffer object. The combinations of URL parts are determined by looping through the index values of the testObject array and associated ResultPair objects. When all possible index combinations have been met (incremented in the incrementTestPartsIndex() method), the do...while loop exits and building/testing of the URL strings is complete.

-----------------------------------------------------

/* Give an example of valid url being tested and an invalid url being tested by testIsValid() method. */

-- Valid URL example --
http://www.google.com/

Has essentially 5 parts to the testing:
Url Scheme: 
This function is going to check the “http://” section using a specific regular expression “^\\p{Alpha}[\\p{Alnum}\\+\\-\\.]*” . If this pattern matches the function returns true can be ftp://, or https:// for example


Url Authority: 
Checks if these section is an IP address and port combination, because this too can be a valid URL. This will also check if it is a local IP when set. in addition there is a Regular expression to check for a valid format for example if there was no “.com” or “.anything” this part will return false.


Url Port:
No port was given in this example, so this is not checked. It would be checked against a regular expression if it were there. 


Path: 
This would encompass everything after the .com/, however this url doesn’t have that piece and is not checked’. If it did it might be set to allow // slashes in the url. it too gets checked against a regular expression. There is in addition a small check to make sure that slashCount - slash2Count - 1) is less than dot2Count. I assume this could indicate a bad directory path where it’s trying to go up one level. 


testUrlQuery
There is no query in my example url so this is not checked. If it were there. the queries can pretty much match anything, and this makes since because url queries are often complex. containing a number of different characters


-- Invalid URL --
http:www.google.com/

This would already fail at the scheme level, because the regular expression would not match the valid format of some alpha characters plus : plus \\.

-----------------------------------------------------

/* Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. */

I think that it is very similar, yet the complexity of the functions themselves go a bit deeper. For example having to rely on Regular Expressions already involves a level of complexity that was not part of the dominion testing. Indeed in general there are a few more moving parts involved with first the creation of the url, and the validation of the different parts.
