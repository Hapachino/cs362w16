        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------------
        -:    2: * David Vogel
        -:    3: * CS362 Assignment 3
        -:    4: * Due Feb 3, 2016
        -:    5: * Filename: cardtest3.c
        -:    6: *   testing great_hall card
        -:    7: *
        -:    8: * Include the following lines in your makefile:
        -:    9: *   cardtest3: cardtest3.c dominion.o rngs.o
        -:   10: *     gcc -o cardtest3 -g cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:   11: *  
        -:   12: * Requirements for great_hall:
        -:   13: *   - Current player should receive exactly 1 cards.
        -:   14: *   - The 1 cards should come from his own pile.
        -:   15: *   - Current player should discard exactly 1 cards.
        -:   16: *   - Current player should gain exactly 1 actions.
        -:   17: *   - No state change should occur for other players.
        -:   18: *   - No state change should occur to the Victory card piles and Kingdom card piles.
        -:   19: * ---------------------------------------------------------------------------*/
        -:   20:#include "dominion.h"
        -:   21:#include "dominion_helpers.h"
        -:   22:#include "interface.h"
        -:   23:#include <string.h>
        -:   24:#include <stdio.h>
        -:   25:#include <assert.h>
        -:   26:#include "rngs.h"
        -:   27:#include <stdlib.h>
        -:   28:
function main called 1 returned 100% blocks executed 78%
        -:   29:int main() {
        1:   30:  int shuffledCards = 0;          //cards gained if deck becomes empty
        1:   31:  int i = 0;                      //index counter
        1:   32:  int expectedHandCount = 0;      //desired value for hand count
        1:   33:  int actualHandCount = 0;        //actual value for expected hand count
        1:   34:  int expectedDeckCount = 0;      //desired value for deck count
        1:   35:  int actualDeckCount = 0;        //actual value for expected hand count
        1:   36:  int successfulTests = 0;        //number of successful tests
        1:   37:  int failedTests = 0;            //number of failed tests
        1:   38:  int totalNumberOfTests = 0;     //total number of tests run
        1:   39:  int randSeed = 1000;            //random seed for game init
        1:   40:  int numPlayers = 2;             //num players for game init
        1:   41:  int testPlayer = 0;             //test player is always 0
        1:   42:  int otherPlayer = 1;            //this is the computer
        1:   43:  int cardsGained = 1;            //should gain 1 card
        1:   44:  int cardsDiscarded = 1;         //should have discarded 1 card after playing
        1:   45:  int actualActionsGained = 0;    //how many actions great_hall actually gained
        1:   46:  int expectedActionsGained = 1;  //great_hall was supposed to gain 1 action
        1:   47:  int playedActions = 1;          //1 action card will have been played
        -:   48:
        -:   49:  //passed to cardEffect
        1:   50:  int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, handPos = 0;
        -:   51:
        -:   52:  //actual game state & tested game state
        -:   53:  struct gameState actualGameState, testGameState;
        -:   54:  
        -:   55:  //kingdom cards for game
        1:   56:  int kingdom_Cards[10] = {adventurer, great_hall, remodel, village, baron, embargo, steward, tribute, ambassador, smithy};
        -:   57:
        -:   58:  //victory cards for game
        1:   59:  int victory_Cards[3] = {estate, duchy, province};
        -:   60:
        -:   61:  //initialize game & copy state for reference
        1:   62:  initializeGame(numPlayers, kingdom_Cards, randSeed, &actualGameState);
        1:   63:  memcpy(&testGameState, &actualGameState, sizeof(struct gameState));
        -:   64:
        -:   65:  //call the great_hall card
        1:   66:  cardEffect(great_hall, choice1, choice2, choice3, &testGameState, handPos, &bonus);
        -:   67:
        -:   68:  //begin tests
        1:   69:  printf("**************************** TESTING GREAT_HALL CARD ****************************\n");
        -:   70:
        -:   71:  /* ---------------------- TEST 1 --------------------- */
        -:   72:  //test player should receive 1 card and discard 1, ending with 5 in hand
        1:   73:  printf("---------------- TEST 1: TESTING CARDS RECEIVED AND DISCARDED ----------------\n");
        1:   74:  printf("Current player should receive 1 card, discard 1...\n");
        -:   75:
        -:   76:  //print test of calling handCount()
        1:   77:  actualHandCount = testGameState.handCount[testPlayer];
        1:   78:  expectedHandCount = actualGameState.handCount[testPlayer] + cardsGained - cardsDiscarded;
        1:   79:  printf("Actual hand count: %d\n", actualHandCount);
        1:   80:  printf("Expected hand count: %d\n", expectedHandCount);
        1:   81:  if (actualHandCount == expectedHandCount) {
branch  0 taken 100%
branch  1 taken 0%
        1:   82:    printf("***SUCCESS: HAND COUNT GAME STATE FOR CURRENT PLAYER IS THE SAME!\n\n");
        1:   83:    ++successfulTests;
        1:   84:  }
        -:   85:  else {
    #####:   86:    printf("***FAIL: HAND COUNT GAME STATE FOR CURRENT PLAYER IS DIFFERENT!\n\n");
    #####:   87:    ++failedTests;
        -:   88:  }
        1:   89:  ++totalNumberOfTests;
        -:   90:
        -:   91:  /* ---------------------- TEST 2 --------------------- */
        -:   92:  //The 1 card should come from the test player's pile
        1:   93:  printf("------------------------- TEST 2: TESTING DECK COUNT -------------------------\n");
        1:   94:  printf("Card should come from current player's deck count...\n");
        1:   95:  actualDeckCount = testGameState.deckCount[testPlayer];
        1:   96:  expectedDeckCount = actualGameState.deckCount[testPlayer] - cardsGained + shuffledCards;
        1:   97:  printf("Actual deck count: %d\n", actualDeckCount);
        1:   98:  printf("Expected deck count: %d\n", expectedDeckCount);
        -:   99:
        -:  100:  //test game state of deckCount for test player
        1:  101:  if (expectedDeckCount == actualDeckCount) {
branch  0 taken 100%
branch  1 taken 0%
        1:  102:    printf("***SUCCESS: DECK COUNT GAME STATE FOR CURRENT PLAYER IS THE SAME!\n\n");
        1:  103:    ++successfulTests;
        1:  104:  }
        -:  105:  else {
    #####:  106:    printf("***FAIL: DECK COUNT GAME STATE FOR CURRENT PLAYER IS DIFFERENT!\n\n");
    #####:  107:    ++failedTests;
        -:  108:  }
        1:  109:  ++totalNumberOfTests;
        -:  110:
        -:  111:  /* ---------------------- TEST 3 --------------------- */
        -:  112:  //current player should gain exactly 1 action.
        1:  113:  printf("-------------- TEST 3: TESTING THAT PLAYER RECEIVES 1 ACTION --------------\n");
        -:  114:  //player will have lost 1 action and gained 1
        1:  115:  actualActionsGained = testGameState.numActions - playedActions;
        -:  116:  //player starts with 1 action
        1:  117:  expectedActionsGained = actualGameState.numActions;
        1:  118:  printf("Actual actions gained: %d\n", actualActionsGained);
        1:  119:  printf("Expected actions gained: %d\n", expectedActionsGained);
        1:  120:  if (actualActionsGained == expectedActionsGained) {
branch  0 taken 100%
branch  1 taken 0%
        1:  121:    printf("***SUCCESS: ACTIONS GAME STATE FOR CURRENT PLAYER IS THE SAME!\n\n");
        1:  122:    ++successfulTests;
        1:  123:  }
        -:  124:  else {
    #####:  125:    printf("***FAIL: ACTIONS GAME STATE FOR CURRENT PLAYER IS DIFFERENT!\n\n");
    #####:  126:    ++failedTests;
        -:  127:  }
        1:  128:  ++totalNumberOfTests;
        -:  129:
        -:  130:  /* ---------------------- TEST 4 --------------------- */
        -:  131:  //test that game state for victory cards & kingdom cards did not change
        1:  132:  printf("-------- TEST 4: TESTING THAT NUMBER OF VICTORY CARDS HAS NOT CHANGED --------\n");
        8:  133:  for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25%
        3:  134:    if(testGameState.supplyCount[victory_Cards[i]] == actualGameState.supplyCount[victory_Cards[i]]) {
branch  0 taken 100%
branch  1 taken 0%
        3:  135:      printf("***SUCCESS: VICTORY CARD %d SUCCEEDED!\n", i);
        3:  136:      ++successfulTests;
        3:  137:    }
        -:  138:    else {
    #####:  139:      printf("***FAIL: VICTORY CARD %d FAILED!\n", i);
    #####:  140:      ++failedTests;
        -:  141:    }
        3:  142:    ++totalNumberOfTests;
        3:  143:  }
        1:  144:  printf("\n");
        -:  145:
        -:  146:  /* ---------------------- TEST 5 --------------------- */
        1:  147:  printf("-------- TEST 5: TESTING THAT NUMBER OF KINGDOM CARDS HAS NOT CHANGED --------\n");
       22:  148:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
       10:  149:    if (testGameState.supplyCount[kingdom_Cards[i]] == actualGameState.supplyCount[kingdom_Cards[i]]) {
branch  0 taken 100%
branch  1 taken 0%
       10:  150:      printf("***SUCCESS: KINGDOM CARD %d SUCCEEDED!\n", i);
       10:  151:      ++successfulTests;
       10:  152:    }
        -:  153:    else {
    #####:  154:      printf("***FAIL: KINGDOM CARD %d FAILED!\n", i);
    #####:  155:      ++failedTests;
        -:  156:    }
       10:  157:    ++totalNumberOfTests;
       10:  158:  }
        1:  159:  printf("\n");
        -:  160:
        -:  161:  /* ---------------------- TEST 6 --------------------- */
        1:  162:  printf("------ TEST 6: TESTING THAT GAME STATE FOR OTHER PLAYER HASN'T CHANGED ------\n");
        -:  163:  //test that game state hasn't changed for other player
        1:  164:  printf("Testing game state for other player...\n");
        2:  165:  if (testGameState.handCount[otherPlayer] == actualGameState.handCount[otherPlayer]
branch  0 taken 100%
branch  1 taken 0%
        2:  166:      && testGameState.deckCount[otherPlayer] == actualGameState.deckCount[otherPlayer]
branch  0 taken 100%
branch  1 taken 0%
        2:  167:      && testGameState.discardCount[otherPlayer] == actualGameState.discardCount[otherPlayer]) {
branch  0 taken 100%
branch  1 taken 0%
        1:  168:    printf("***SUCCESS: GAME STATE FOR OTHER PLAYER IS THE SAME!\n\n");
        1:  169:    ++successfulTests;
        1:  170:  }
        -:  171:  else {
    #####:  172:    printf("***FAIL: GAME STATE FOR OTHER PLAYER IS DIFFERENT!\n\n");
    #####:  173:    ++failedTests;
        -:  174:  }
        1:  175:  ++totalNumberOfTests;
        -:  176:
        -:  177:  /* ---------------------- TEST RESULTS --------------------- */
        1:  178:  if (totalNumberOfTests == successfulTests) {
branch  0 taken 100%
branch  1 taken 0%
        1:  179:    printf("************ SUCCESS: ALL TESTS PASSED FOR GREAT_HALL CARD ************\n");
        1:  180:  }
        -:  181:  else {
    #####:  182:    printf("************ FAIL: NOT ALL TESTS PASSED FOR GREAT_HALL CARD ************\n");
        -:  183:  }
        1:  184:  printf("The number of tests run was: %d\n", totalNumberOfTests);
        1:  185:  printf("The number of tests passed was: %d\n", successfulTests);
        1:  186:  printf("The number of tests failed was: %d\n", failedTests);
        -:  187: 
        1:  188:  return 0;
        -:  189:}
