        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------------
        -:    2: * David Vogel
        -:    3: * CS362 Assignment 3
        -:    4: * Due Feb 3, 2016
        -:    5: * Filename: cardtest4.c
        -:    6: *   testing adventurer card
        -:    7: *
        -:    8: * Include the following lines in your makefile:
        -:    9: *   cardtest4: cardtest4.c dominion.o rngs.o
        -:   10: *     gcc -o cardtest4 -g cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   11: *  
        -:   12: * Requirements for adventurer:
        -:   13: *   - Action should draw 2 treasure cards, giving total of 6, after action is discarded
        -:   14: *   - Player should have same amount of cards in discard pile as were drawn and discarded
        -:   15: *   - Player should have 2 extra treasure cards 
        -:   16: *        (these will be coppers since that is what is started with)
        -:   17: *   - No state change should occur for other players.
        -:   18: *   - No state change should occur to the Victory card piles and Kingdom card piles.
        -:   19: * ---------------------------------------------------------------------------*/
        -:   20:#include "dominion.h"
        -:   21:#include "dominion_helpers.h"
        -:   22:#include "interface.h"
        -:   23:#include <string.h>
        -:   24:#include <stdio.h>
        -:   25:#include <assert.h>
        -:   26:#include "rngs.h"
        -:   27:#include <stdlib.h>
        -:   28:
function main called 1 returned 100% blocks executed 78%
        -:   29:int main() {
        1:   30:  int shuffledCards = 0;          //cards gained if deck becomes empty
        1:   31:  int i = 0;                      //index counter
        1:   32:  int expectedHandCount = 0;      //desired value for hand count
        1:   33:  int actualHandCount = 0;        //actual value for expected hand count
        1:   34:  int expectedDeckCount = 0;      //desired value for deck count
        1:   35:  int actualDeckCount = 0;        //actual value for expected hand count
        1:   36:  int successfulTests = 0;        //number of successful tests
        1:   37:  int failedTests = 0;            //number of failed tests
        1:   38:  int totalNumberOfTests = 0;     //total number of tests run
        1:   39:  int randSeed = 1022;            //random seed for game init
        1:   40:  int numPlayers = 2;             //num players for game init
        1:   41:  int testPlayer = 0;             //test player is always 0
        1:   42:  int otherPlayer = 1;            //this is the computer
        1:   43:  int cardsGained = 2;            //should gain 2 cards
        1:   44:  int cardsDiscarded = 1;         //should have discarded 1 card after playing
        1:   45:  int expectedExtraCoins = 2;     //should have 2 new coppers
        1:   46:  int actualExtraCoins = 0;      //actual coins received
        -:   47:  
        -:   48:  //passed to cardEffect
        1:   49:  int choice1 = 0, choice2 = 0, choice3 = 0, handPos = 0, bonus = 0;
        -:   50:
        -:   51:  //actual game state & tested game state
        -:   52:  struct gameState actualGameState, testGameState;
        -:   53:  
        -:   54:  //kingdom cards for game
        1:   55:  int kingdom_Cards[10] = {adventurer, great_hall, remodel, village, baron, embargo, steward, tribute, ambassador, smithy};
        -:   56:
        -:   57:  //victory cards for game
        1:   58:  int victory_Cards[3] = {estate, duchy, province};
        -:   59:
        -:   60:  //initialize game & copy state for reference
        1:   61:  initializeGame(numPlayers, kingdom_Cards, randSeed, &actualGameState);
        1:   62:  memcpy(&testGameState, &actualGameState, sizeof(struct gameState));
        -:   63:
        -:   64:  //begin tests
        1:   65:  printf("**************************** TESTING ADVENTURER CARD ****************************\n");
        -:   66:  /* ---------------------- TEST 1 --------------------- */
        -:   67:  //test player should receive 2 cards
        1:   68:  printf("---------------- TEST 1: TESTING CARDS RECEIVED ----------------\n");
        1:   69:  printf("Player should receive 2 cards...\n");
        -:   70:  // cardEffect(adventurer, choice1, choice2, choice3, &testGameState, handPos, &bonus);
        1:   71:  playAdventurer(testPlayer, &testGameState); //test ian's adventurer refactor
        1:   72:  actualHandCount = testGameState.handCount[testPlayer];
        1:   73:  expectedHandCount = actualGameState.handCount[testPlayer] + cardsGained - cardsDiscarded;
        1:   74:  printf("Actual hand count: %d\n", actualHandCount);
        1:   75:  printf("Expected hand count: %d\n", expectedHandCount);
        1:   76:  if (actualHandCount == expectedHandCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   77:    printf("***SUCCESS: HAND COUNT GAME STATE FOR CURRENT PLAYER IS THE SAME!\n\n");
    #####:   78:    ++successfulTests;
    #####:   79:  }
        -:   80:  else {
        1:   81:    printf("***FAIL: HAND COUNT GAME STATE FOR CURRENT PLAYER IS DIFFERENT!\n\n");
        1:   82:    ++failedTests;
        -:   83:  }
        1:   84:  ++totalNumberOfTests;
        -:   85:
        -:   86:  /* ---------------------- TEST 2 --------------------- */
        -:   87:  //The 2 cards should come from the test player's pile
        1:   88:  printf("------------------------- TEST 2: TESTING DECK COUNT -------------------------\n");
        1:   89:  printf("2 Cards should come from current player's deck count...\n");
        1:   90:  actualDeckCount = testGameState.deckCount[testPlayer];
        1:   91:  expectedDeckCount = actualGameState.deckCount[testPlayer] - cardsGained + shuffledCards;
        1:   92:  printf("Actual deck count: %d\n", actualDeckCount);
        1:   93:  printf("Expected deck count: %d\n", expectedDeckCount);
        -:   94:
        -:   95:  //test game state of deckCount for test player
        1:   96:  if (expectedDeckCount == actualDeckCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   97:    printf("***SUCCESS: DECK COUNT GAME STATE FOR CURRENT PLAYER IS THE SAME!\n\n");
    #####:   98:    ++successfulTests;
    #####:   99:  }
        -:  100:  else {
        1:  101:    printf("***FAIL: DECK COUNT GAME STATE FOR CURRENT PLAYER IS DIFFERENT!\n\n");
        1:  102:    ++failedTests;
        -:  103:  }
        1:  104:  ++totalNumberOfTests;
        -:  105:
        -:  106:  /* ---------------------- TEST 3 --------------------- */
        -:  107:  //Player should have 2 extra coins
        1:  108:  printf("------------------------- TEST 3: TESTING EXTRA COINS -------------------------\n");
        1:  109:  printf("Player should have 2 extra coins...\n");
        1:  110:  updateCoins(testPlayer, &testGameState, bonus);
        1:  111:  actualExtraCoins = testGameState.coins - actualGameState.coins;
        1:  112:  printf("Actual extra coins: %d\n", actualExtraCoins);
        1:  113:  printf("Expected extra coins: %d\n", expectedExtraCoins);
        -:  114:
        -:  115:  //test game state of coins for test player
        1:  116:  if (expectedExtraCoins == actualExtraCoins) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  117:    printf("***SUCCESS: GAME STATE COINS FOR CURRENT PLAYER IS THE SAME!\n\n");
    #####:  118:    ++successfulTests;
    #####:  119:  }
        -:  120:  else {
        1:  121:    printf("***FAIL: GAME STATE COINS FOR CURRENT PLAYER IS DIFFERENT!\n\n");
        1:  122:    ++failedTests;
        -:  123:  }
        1:  124:  ++totalNumberOfTests;
        -:  125:
        -:  126:  /* ---------------------- TEST 4 --------------------- */
        -:  127:  //test that game state for victory cards & kingdom cards did not change
        1:  128:  printf("-------- TEST 4: TESTING THAT NUMBER OF VICTORY CARDS HAS NOT CHANGED --------\n");
        8:  129:  for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25%
        3:  130:    if(testGameState.supplyCount[victory_Cards[i]] == actualGameState.supplyCount[victory_Cards[i]]) {
branch  0 taken 100%
branch  1 taken 0%
        3:  131:      printf("***SUCCESS: VICTORY CARD %d SUCCEEDED!\n", i);
        3:  132:      ++successfulTests;
        3:  133:    }
        -:  134:    else {
    #####:  135:      printf("***FAIL: VICTORY CARD %d FAILED!\n", i);
    #####:  136:      ++failedTests;
        -:  137:    }
        3:  138:    ++totalNumberOfTests;
        3:  139:  }
        1:  140:  printf("\n");
        -:  141:
        -:  142:  /* ---------------------- TEST 5 --------------------- */
        1:  143:  printf("-------- TEST 5: TESTING THAT NUMBER OF KINGDOM CARDS HAS NOT CHANGED --------\n");
       22:  144:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
       10:  145:    if (testGameState.supplyCount[kingdom_Cards[i]] == actualGameState.supplyCount[kingdom_Cards[i]]) {
branch  0 taken 100%
branch  1 taken 0%
       10:  146:      printf("***SUCCESS: KINGDOM CARD %d SUCCEEDED!\n", i);
       10:  147:      ++successfulTests;
       10:  148:    }
        -:  149:    else {
    #####:  150:      printf("***FAIL: KINGDOM CARD %d FAILED!\n", i);
    #####:  151:      ++failedTests;
        -:  152:    }
       10:  153:    ++totalNumberOfTests;
       10:  154:  }
        1:  155:  printf("\n");
        -:  156:
        -:  157:  /* ---------------------- TEST 6 --------------------- */
        1:  158:  printf("------ TEST 6: TESTING THAT GAME STATE FOR OTHER PLAYER HASN'T CHANGED ------\n");
        -:  159:  //test that game state hasn't changed for other player
        1:  160:  printf("Testing game state for other player...\n");
        2:  161:  if (testGameState.handCount[otherPlayer] == actualGameState.handCount[otherPlayer]
branch  0 taken 100%
branch  1 taken 0%
        2:  162:      && testGameState.deckCount[otherPlayer] == actualGameState.deckCount[otherPlayer]
branch  0 taken 100%
branch  1 taken 0%
        2:  163:      && testGameState.discardCount[otherPlayer] == actualGameState.discardCount[otherPlayer]) {
branch  0 taken 100%
branch  1 taken 0%
        1:  164:    printf("***SUCCESS: GAME STATE FOR OTHER PLAYER IS THE SAME!\n\n");
        1:  165:    ++successfulTests;
        1:  166:  }
        -:  167:  else {
    #####:  168:    printf("***FAIL: GAME STATE FOR OTHER PLAYER IS DIFFERENT!\n\n");
    #####:  169:    ++failedTests;
        -:  170:  }
        1:  171:  ++totalNumberOfTests;
        -:  172:
        -:  173:  /* ---------------------- TEST RESULTS --------------------- */
        1:  174:  if (totalNumberOfTests == successfulTests) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  175:    printf("************ SUCCESS: ALL TESTS PASSED FOR ADVENTURER CARD ************\n");
    #####:  176:  }
        -:  177:  else {
        1:  178:    printf("************ FAIL: NOT ALL TESTS PASSED FOR ADVENTURER CARD ************\n");
        -:  179:  }
        1:  180:  printf("The number of tests run was: %d\n", totalNumberOfTests);
        1:  181:  printf("The number of tests passed was: %d\n", successfulTests);
        1:  182:  printf("The number of tests failed was: %d\n", failedTests);
        -:  183: 
        1:  184:  return 0;
        -:  185:}
