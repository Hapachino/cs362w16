        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Author:      Ian Bender
        -:    2: * Course:      CS362
        -:    3: * Due Date:    2/3/2016
        -:    4: * Description: Unit test for getCost() function.
        -:    5: * Requirements
        -:    6: *      - Correct value of card is returned
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
function main called 1 returned 100% blocks executed 78%
        -:   16:int main() 
        -:   17:{
        -:   18:    int i, j;
        -:   19:    int outcome;
        1:   20:    int seed = 1000;
        -:   21:    struct gameState G, testG;
        1:   22:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   23:                    remodel, smithy, village, baron, great_hall};
        -:   24:
        1:   25:    int cards[27] = {curse, estate, duchy, province,
        -:   26:                     copper, silver, gold, adventurer, council_room,
        -:   27:                     feast, gardens, mine, remodel, smithy, village,
        -:   28:                     baron, great_hall, minion, steward, tribute,
        -:   29:                     ambassador, cutpurse, embargo, outpost, 
        -:   30:                     salvager, sea_hag, treasure_map};
        1:   31:    int values[27] = {0, 2, 5, 8,
        -:   32:                      0, 3, 6, 6, 5,
        -:   33:                      4, 4, 5, 4, 4, 3,
        -:   34:                      4, 3, 5, 3, 5, 
        -:   35:                      3, 4, 2, 5,
        -:   36:                      4, 4, 4};
        -:   37:
        1:   38:    printf("TESTING - getCost()\n");
        -:   39:    //initialize game state
        1:   40:    outcome = initializeGame(MAX_PLAYERS, k, seed, &G);
        1:   41:    if (outcome == -1)
branch  0 taken 0%
branch  1 taken 100%
    #####:   42:        printf("ERROR - Game initialization failed.\n");
        1:   43:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   44:
        -:   45:
        -:   46:    //test each card against its expected value
       56:   47:    for (i = 0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:   48:    {
       27:   49:        if (getCost(cards[i]) != values[i])
branch  0 taken 0%
branch  1 taken 100%
    #####:   50:            printf("ERROR - Returned cost: %d, Expected cost: %d\n",
    #####:   51:                    getCost(cards[i]), values[i]);
        -:   52:        else
       27:   53:            printf("SUCCESS - Returned cost: %d, Expected cost: %d\n",
       27:   54:                    getCost(cards[i]), values[i]);
       27:   55:    }
        -:   56:
        1:   57:    if (getCost(treasure_map + 1) != -1)
branch  0 taken 0%
branch  1 taken 100%
    #####:   58:        printf("ERROR - Returned cost: %d, Expected cost: -1\n",
    #####:   59:                getCost(treasure_map + 1));
        -:   60:    else
        1:   61:        printf("SUCCESS - Returned cost: %d, Expected cost: -1\n",
        1:   62:                getCost(treasure_map + 1));
        -:   63:
        1:   64:    printf("TEST COMPLETE\n\n");
        -:   65:
        1:   66:    return 0;
        -:   67:}
